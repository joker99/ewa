Type.registerNamespace('Common.App.AddinCommands');

Common.App.AddinCommands.IAddinCommandsInitializer = function() {}
Common.App.AddinCommands.IAddinCommandsInitializer.registerInterface('Common.App.AddinCommands.IAddinCommandsInitializer');


Common.App.AddinCommands.AddinCommandsInitializerBase = function Common_App_AddinCommands_AddinCommandsInitializerBase(initRetrieveCompleted, stopwatchBuilder, launchOperationType) {
    this.set_initLaunchOperationType(launchOperationType);
    this.set_initRetrieveCompleted(initRetrieveCompleted);
    this._stopwatchBuilder = stopwatchBuilder;
}
Common.App.AddinCommands.AddinCommandsInitializerBase.prototype = {
    _stopwatchBuilder: null,
    _$$pf_InitLaunchOperationType$p$0: 0,
    
    get_initLaunchOperationType: function Common_App_AddinCommands_AddinCommandsInitializerBase$get_initLaunchOperationType$in() {
        return this._$$pf_InitLaunchOperationType$p$0;
    },
    
    set_initLaunchOperationType: function Common_App_AddinCommands_AddinCommandsInitializerBase$set_initLaunchOperationType$in(value) {
        this._$$pf_InitLaunchOperationType$p$0 = value;
        return value;
    },
    
    _$$pf_InitRetrieveCompleted$p$0: null,
    
    get_initRetrieveCompleted: function Common_App_AddinCommands_AddinCommandsInitializerBase$get_initRetrieveCompleted$in() {
        return this._$$pf_InitRetrieveCompleted$p$0;
    },
    
    set_initRetrieveCompleted: function Common_App_AddinCommands_AddinCommandsInitializerBase$set_initRetrieveCompleted$in(value) {
        this._$$pf_InitRetrieveCompleted$p$0 = value;
        return value;
    },
    
    retrieveAddinCommands: function Common_App_AddinCommands_AddinCommandsInitializerBase$retrieveAddinCommands$in(provider) {
        var initializerStopwatch = null;
        if (this._stopwatchBuilder) {
            initializerStopwatch = this._stopwatchBuilder.makeAndStartStopwatch('ComponentAttach', Common.AddinProviderType.toString(provider) + Common.AddinCommandsLaunchOperationType.toString(this.get_initLaunchOperationType()));
        }
        if ((this.shouldRetrieveAddIns(provider) == null) ? false : this.shouldRetrieveAddIns(provider)) {
            var today = new Date();
            var lastUpdate = today.getTime() - Common.AddinConstantsNum.addinCommandsFlagCacheRefreshRateInDays * Common.AddinConstantsNum.timePerDayInMilliSeconds;
            this.get_initRetrieveCompleted()(provider, this.get_initLaunchOperationType(), { ak0: lastUpdate });
        }
        if (initializerStopwatch) {
            initializerStopwatch.stop();
        }
    }
}


Common.App.AddinCommands.AddinCommandsInitializer = function Common_App_AddinCommands_AddinCommandsInitializer(initRetrieveCompleted, stopwatchBuilder) {
    Common.App.AddinCommands.AddinCommandsInitializer.initializeBase(this, [ initRetrieveCompleted, stopwatchBuilder, Common.AddinCommandsLaunchOperationType.launchByLastUpdateInitializer ]);
}
Common.App.AddinCommands.AddinCommandsInitializer.prototype = {
    
    shouldRetrieveAddIns: function Common_App_AddinCommands_AddinCommandsInitializer$shouldRetrieveAddIns$in(provider) {
        return true;
    }
}


Common.App.AddinCommands.AddinCommandsAnonymousAPIInitializer = function Common_App_AddinCommands_AddinCommandsAnonymousAPIInitializer(initRetrieveCompleted, userContentMarket, stopwatchBuilder) {
    this.set_initLaunchOperationType(Common.AddinCommandsLaunchOperationType.launchByAnonymousApiInitializer);
    this.set_initRetrieveCompleted(initRetrieveCompleted);
    this.set_userContentMarket(userContentMarket);
    this._stopwatchBuilder$p$0 = stopwatchBuilder;
}
Common.App.AddinCommands.AddinCommandsAnonymousAPIInitializer.prototype = {
    _stopwatchBuilder$p$0: null,
    _$$pf_InitLaunchOperationType$p$0: 0,
    
    get_initLaunchOperationType: function Common_App_AddinCommands_AddinCommandsAnonymousAPIInitializer$get_initLaunchOperationType$in() {
        return this._$$pf_InitLaunchOperationType$p$0;
    },
    
    set_initLaunchOperationType: function Common_App_AddinCommands_AddinCommandsAnonymousAPIInitializer$set_initLaunchOperationType$in(value) {
        this._$$pf_InitLaunchOperationType$p$0 = value;
        return value;
    },
    
    _$$pf_UserContentMarket$p$0: null,
    
    get_userContentMarket: function Common_App_AddinCommands_AddinCommandsAnonymousAPIInitializer$get_userContentMarket$in() {
        return this._$$pf_UserContentMarket$p$0;
    },
    
    set_userContentMarket: function Common_App_AddinCommands_AddinCommandsAnonymousAPIInitializer$set_userContentMarket$in(value) {
        this._$$pf_UserContentMarket$p$0 = value;
        return value;
    },
    
    _$$pf_InitRetrieveCompleted$p$0: null,
    
    get_initRetrieveCompleted: function Common_App_AddinCommands_AddinCommandsAnonymousAPIInitializer$get_initRetrieveCompleted$in() {
        return this._$$pf_InitRetrieveCompleted$p$0;
    },
    
    set_initRetrieveCompleted: function Common_App_AddinCommands_AddinCommandsAnonymousAPIInitializer$set_initRetrieveCompleted$in(value) {
        this._$$pf_InitRetrieveCompleted$p$0 = value;
        return value;
    },
    
    retrieveAddinCommands: function Common_App_AddinCommands_AddinCommandsAnonymousAPIInitializer$retrieveAddinCommands$in(provider) {
        if (Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('AgaveSupportsLiveIdSpoofing')) {
            var timeVal = (new Date()).getTime();
            this.get_initRetrieveCompleted()(provider, this.get_initLaunchOperationType(), { ak0: timeVal });
            return;
        }
        if (Common.AddinUtil.shouldRunAddinsLastUpdateCheck(provider)) {
            var baseUrl = Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_newAndOpenHandlerUrlPrefix();
            var actionUrl = String.format(baseUrl + 'AddinServiceHandler.ashx?action={0}&app={1}&lc={2}&{3}', 'laststoreupdate', Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_officeAppType(), this.get_userContentMarket(), Common.AFrameworkApplication.baseDocQuerySignatureWithoutVersion);
            var requestManager = Common.AFrameworkApplication.theClientRequestManager;
            var initializerStopwatch = null;
            if (this._stopwatchBuilder$p$0) {
                initializerStopwatch = this._stopwatchBuilder$p$0.makeAndStartStopwatch('ComponentAttach', Common.AddinProviderType.toString(provider) + Common.AddinCommandsLaunchOperationType.toString(this.get_initLaunchOperationType()));
            }
            if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('MockAddinS2SWebRequestsIsEnabled')) {
                Diag.ULS.sendTraceTag(595342293, 220, 50, 'Omex quickcheck web request was handled internally {0}.', actionUrl);
                var lastChange = (new Date()).toISOString();
                var mockedResponseBody = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\t\t\t\t\t\t\t\t\t\t<o:laststorecatalogupdate xmlns:o=\"urn:schemas-microsoft-com:office:office\">\r\n\t\t\t\t\t\t\t\t\t\t<o:update>' + lastChange + '</o:update>\r\n\t\t\t\t\t\t\t\t\t\t</o:laststorecatalogupdate>';
                this._onWebRequestCompleted$p$0(provider, mockedResponseBody);
                if (initializerStopwatch) {
                    initializerStopwatch.stop();
                }
                return;
            }
            var $$t_B = this, $$t_C = this;
            requestManager.addRequest(actionUrl, Common.RequestVerb.get, null, null, true, Common.TaskItemPriority.low, function(args) {
                $$t_B._onWebRequestCompleted$p$0(provider, args.get_data().responseData);
                if (initializerStopwatch) {
                    initializerStopwatch.stop();
                }
            }, function(args) {
                Diag.ULS.sendTraceTag(17438153, 220, 50, 'GetLastUpdate request failed with {0}.', args.get_data().httpStatus);
                if (initializerStopwatch) {
                    initializerStopwatch.stop();
                }
            }, null, '', false, null, null, '', '', false, '', false, null);
        }
        else if (Common.AddinUtil.hasAddinCommandsRibbonCache(provider)) {
            var localLastUpdateTime = Common.AddinUtil.getAddinCommandsLastUpdateTime(provider);
            this.get_initRetrieveCompleted()(provider, this.get_initLaunchOperationType(), { ak0: localLastUpdateTime });
        }
    },
    
    _onWebRequestCompleted$p$0: function Common_App_AddinCommands_AddinCommandsAnonymousAPIInitializer$_onWebRequestCompleted$p$0$in(provider, responseData) {
        if (!responseData || responseData === '') {
            return;
        }
        var doc = Sys.Net.XMLDOM(responseData);
        if (doc) {
            Common.AddinUtil.trySetAddinCommandsCache(Common.AddinConstantsString.addinLastUpdateRecheckTimeKey, ((new Date().getTime()) + Common.AddinConstantsNum.omexCatalogLastUpdateReCheckPeriod).toString(), provider);
            var l = doc.getElementsByTagName('update');
            if (!l || !l.length) {
                l = doc.getElementsByTagName('o:update');
            }
            if (l && l.length > 0) {
                var timeVal = Date.parse(l[0].firstChild.nodeValue);
                var localLastUpdateTime = Common.AddinUtil.getAddinCommandsLastUpdateTime(provider);
                if (localLastUpdateTime < timeVal || Common.AddinUtil.hasAddinCommandsRibbonCache(provider)) {
                    this.get_initRetrieveCompleted()(provider, this.get_initLaunchOperationType(), { ak0: timeVal });
                }
            }
        }
    }
}


Common.App.AddinCommands.AddinCommandsLocalCacheInitializer = function Common_App_AddinCommands_AddinCommandsLocalCacheInitializer(initRetrieveCompleted, stopwatchBuilder) {
    Common.App.AddinCommands.AddinCommandsLocalCacheInitializer.initializeBase(this, [ initRetrieveCompleted, stopwatchBuilder, Common.AddinCommandsLaunchOperationType.launchByLocalCacheInitializer ]);
}
Common.App.AddinCommands.AddinCommandsLocalCacheInitializer.prototype = {
    
    shouldRetrieveAddIns: function Common_App_AddinCommands_AddinCommandsLocalCacheInitializer$shouldRetrieveAddIns$in(provider) {
        try {
            var flagCacheKey = Common.AddinConstantsString.getFlagLocalCacheKeyPrefix() + provider;
            return Boolean.parse(this.getCacheItemValue(flagCacheKey) || 'false');
        }
        catch (e) {
            Diag.ULS.sendTraceTag(17306844, 220, 50, 'LocalStorage is not allowed, {0}.', e.toString());
        }
        return null;
    },
    
    getCacheItemValue: function Common_App_AddinCommands_AddinCommandsLocalCacheInitializer$getCacheItemValue$in(key) {
        var theLocalStorage = localStorage;
        if (!isUndefined(theLocalStorage) && null !== theLocalStorage) {
            return theLocalStorage.getItem(key);
        }
        return null;
    }
}


Common.App.AddinCommands.AddinCommandsInitializerHost = function Common_App_AddinCommands_AddinCommandsInitializerHost(stopwatchBuilder) {
    this.$$d_retrieveAddinFlagCompleted = Function.createDelegate(this, this.retrieveAddinFlagCompleted);
    this._stopwatchBuilder$p$0 = stopwatchBuilder;
}
Common.App.AddinCommands.AddinCommandsInitializerHost.prototype = {
    _stopwatchBuilder$p$0: null,
    
    get_appUILocale: function Common_App_AddinCommands_AddinCommandsInitializerHost$get_appUILocale$in() {
        return Common.CultureInfo.getCultureInfo(Common.AFrameworkApplication.lcid).get_name();
    },
    
    initializeAllAddinCommands: function Common_App_AddinCommands_AddinCommandsInitializerHost$initializeAllAddinCommands$in() {
        var providerDict = this.getAvailableProviders();
        if (providerDict) {
            if (Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('OcpsIsEnabled')) {
                var $$t_g = this;
                Common.Utils.Container.get_instance().resolveFuture(Common.App.ApplicationFeatureHelper.IApplicationFeatureHelper, '').execute(function(applicationFeatureHelper) {
                    applicationFeatureHelper.isFeatureEnabled('ConnectedServices', true).then(function(isEnabled) {
                        var $$enum_e = providerDict.$$ge();
                        while ($$enum_e.$$mn()) {
                            var item = $$enum_e.$$cu();
                            if (!isEnabled && !item.get_key()) {
                                continue;
                            }
                            var initializer = $$t_g.generateInitializer(item.get_value());
                            if (initializer) {
                                initializer.retrieveAddinCommands(item.get_key());
                            }
                        }
                        return null;
                    });
                });
            }
            else {
                var $$enum_J = providerDict.$$ge();
                while ($$enum_J.$$mn()) {
                    var item = $$enum_J.$$cu();
                    var initializer = this.generateInitializer(item.get_value());
                    if (initializer) {
                        initializer.retrieveAddinCommands(item.get_key());
                    }
                }
            }
        }
    },
    
    retrieveAddinListCompleted: function Common_App_AddinCommands_AddinCommandsInitializerHost$retrieveAddinListCompleted$in(providerType, initLaunchOperationType, addinCommandsInitLaunchInfo) {
        if (addinCommandsInitLaunchInfo && addinCommandsInitLaunchInfo[Common.AddinConstantsString.addinCommandsAddinListKey]) {
            addinCommandsInitLaunchInfo[Common.AddinConstantsString.addinCommandsLaunchProviderTypeKey] = providerType;
            addinCommandsInitLaunchInfo[Common.AddinConstantsString.addinCommandsLaunchOpTypeKey] = initLaunchOperationType;
            this.processCommandActionWithData(Common.CommonCommands.launchAddInCommands, addinCommandsInitLaunchInfo);
        }
    },
    
    retrieveAddinFlagCompleted: function Common_App_AddinCommands_AddinCommandsInitializerHost$retrieveAddinFlagCompleted$in(providerType, initLaunchOperationType, addinCommandsInitFlagInfo) {
        if (addinCommandsInitFlagInfo && addinCommandsInitFlagInfo[Common.AddinConstantsString.addinLastUpdateTimeKey]) {
            addinCommandsInitFlagInfo[Common.AddinConstantsString.addinCommandsLaunchProviderTypeKey] = providerType;
            addinCommandsInitFlagInfo[Common.AddinConstantsString.addinCommandsLaunchOpTypeKey] = initLaunchOperationType;
            this.processCommandActionWithData(Common.CommonCommands.retrieveAddInCommandsEntitlementsList, addinCommandsInitFlagInfo);
            var addinLastUpdateTime = addinCommandsInitFlagInfo[Common.AddinConstantsString.addinLastUpdateTimeKey];
            Common.AddinUtil.trySetAddinCommandsCache(Common.AddinConstantsString.addinLastUpdateTimeKey, addinLastUpdateTime.toString(), providerType);
        }
    },
    
    generateInitializer: function Common_App_AddinCommands_AddinCommandsInitializerHost$generateInitializer$in(initLaunchOperationType) {
        var initializer = null;
        switch (initLaunchOperationType) {
            case Common.AddinCommandsLaunchOperationType.launchByLocalCacheInitializer:
                initializer = new Common.App.AddinCommands.AddinCommandsLocalCacheInitializer(this.$$d_retrieveAddinFlagCompleted, this._stopwatchBuilder$p$0);
                break;
            case Common.AddinCommandsLaunchOperationType.launchByAnonymousApiInitializer:
                initializer = new Common.App.AddinCommands.AddinCommandsAnonymousAPIInitializer(this.$$d_retrieveAddinFlagCompleted, this.get_appUILocale(), this._stopwatchBuilder$p$0);
                break;
            case Common.AddinCommandsLaunchOperationType.launchByLastUpdateInitializer:
                initializer = new Common.App.AddinCommands.AddinCommandsInitializer(this.$$d_retrieveAddinFlagCompleted, this._stopwatchBuilder$p$0);
                break;
        }
        return initializer;
    }
}


Common.App.AddinCommands.AddinCommandsInitializerBase.registerClass('Common.App.AddinCommands.AddinCommandsInitializerBase', null, Common.App.AddinCommands.IAddinCommandsInitializer);
Common.App.AddinCommands.AddinCommandsInitializer.registerClass('Common.App.AddinCommands.AddinCommandsInitializer', Common.App.AddinCommands.AddinCommandsInitializerBase);
Common.App.AddinCommands.AddinCommandsAnonymousAPIInitializer.registerClass('Common.App.AddinCommands.AddinCommandsAnonymousAPIInitializer', null, Common.App.AddinCommands.IAddinCommandsInitializer);
Common.App.AddinCommands.AddinCommandsLocalCacheInitializer.registerClass('Common.App.AddinCommands.AddinCommandsLocalCacheInitializer', Common.App.AddinCommands.AddinCommandsInitializerBase);
Common.App.AddinCommands.AddinCommandsInitializerHost.registerClass('Common.App.AddinCommands.AddinCommandsInitializerHost');
Type.registerNamespace('Common.App.HostNotification');

Common.App.HostNotification._commonHostNotificationPackage = function Common_App_HostNotification__commonHostNotificationPackage() {
    this.$$d__onFullAppSettingsReady$p$0 = Function.createDelegate(this, this._onFullAppSettingsReady$p$0);
}
Common.App.HostNotification._commonHostNotificationPackage.get__editNotificationInterval$p = function Common_App_HostNotification__commonHostNotificationPackage$get__editNotificationInterval$p$st() {
    return (Common.AFrameworkApplication.appSettingsManager) ? parseInt(Common.AFrameworkApplication.appSettingsManager.get_appSettings()['EditNotificationTimeIntervalMs'] || '300000') : 300000;
}
Common.App.HostNotification._commonHostNotificationPackage.get__editDocumentUserActionTelemetryReportingIntervalInMilliseconds$p = function Common_App_HostNotification__commonHostNotificationPackage$get__editDocumentUserActionTelemetryReportingIntervalInMilliseconds$p$st() {
    return (Common.AFrameworkApplication.appSettingsManager) ? parseInt(Common.AFrameworkApplication.appSettingsManager.get_appSettings()['EditDocumentUserActionTelemetryReportingIntervalInMilliseconds'] || '0') : 0;
}
Common.App.HostNotification._commonHostNotificationPackage.get__editNotificationIsEnabled$p = function Common_App_HostNotification__commonHostNotificationPackage$get__editNotificationIsEnabled$p$st() {
    return !!Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('EditNotificationIsEnabled');
}
Common.App.HostNotification._commonHostNotificationPackage.get__editNotificationPostMessageIsEnabled$p = function Common_App_HostNotification__commonHostNotificationPackage$get__editNotificationPostMessageIsEnabled$p$st() {
    return !!Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('EditNotificationPostMessageIsEnabled');
}
Common.App.HostNotification._commonHostNotificationPackage.main = function Common_App_HostNotification__commonHostNotificationPackage$main$st() {
    Common.App.PackageLifecycleManager.get_instance().registerPackage(new Common.App.HostNotification._commonHostNotificationPackage(), 0, false);
}
Common.App.HostNotification._commonHostNotificationPackage.prototype = {
    _container$0: null,
    
    get_name: function Common_App_HostNotification__commonHostNotificationPackage$get_name$in() {
        return 'Common.App.EditNotification';
    },
    
    init: function Common_App_HostNotification__commonHostNotificationPackage$init$in() {
        if (Common.AFrameworkApplication.appSettingsManager) {
            Common.AFrameworkApplication.appSettingsManager.invokeOrRegisterOnFullAppSettingsReady(this.$$d__onFullAppSettingsReady$p$0);
        }
    },
    
    _onFullAppSettingsReady$p$0: function Common_App_HostNotification__commonHostNotificationPackage$_onFullAppSettingsReady$p$0$in() {
        if (Common.App.HostNotification._commonHostNotificationPackage.get__editNotificationIsEnabled$p() && Common.App.HostNotification._commonHostNotificationPackage.get__editNotificationInterval$p() > 0) {
            this._container$0.register(Common.App.HostNotification.EditNotificationEventSource, '').singleInstance();
            var $$t_0 = this;
            this._container$0.register(Common.App.HostNotification.UserActivityHostNotificationManager, '').as(Common.Interface.IUserActivityHostNotificationManager, '').singleInstance().usingFactory(function() {
                return new Common.App.HostNotification.UserActivityHostNotificationManager(60000, Common.TaskManager.get_instance(), Common.Utils.ContainerUtils.taskFromFuture(Common.IHostPostmessenger, $$t_0._container$0.resolveFuture(Common.IHostPostmessenger, '')), Common.MouseInputManager.get_instance(), Common.AFrameworkApplication.subscribeToBeforeAppShutDown);
            });
            var $$t_1 = this;
            this._container$0.register(Common.App.HostNotification.EditNotificationManager, '').as(Common.Interface.IEditNotificationManager, '').singleInstance().usingFactory(function() {
                return new Common.App.HostNotification.EditNotificationManager(Common.App.HostNotification._commonHostNotificationPackage.get__editNotificationInterval$p(), Common.TaskManager.get_instance(), Common.Utils.ContainerUtils.taskFromFuture(Common.IHostPostmessenger, $$t_1._container$0.resolveFuture(Common.IHostPostmessenger, '')), $$t_1._container$0.resolve(Common.App.HostNotification.EditNotificationEventSource, ''), $$t_1._container$0.tryResolve(Common.Interface.IUserActivityHostNotificationManager, ''), Common.App.HostNotification._commonHostNotificationPackage.get__editNotificationPostMessageIsEnabled$p(), Common.App.HostNotification._commonHostNotificationPackage.get__editDocumentUserActionTelemetryReportingIntervalInMilliseconds$p());
            });
            this._container$0.resolve(Common.Interface.IEditNotificationManager, '');
            Diag.ULS.shipAssertTag(38086291, 209, Common.App.HostNotification._commonHostNotificationPackage.get__editNotificationInterval$p() > 0, 'EditNotification Interval is less than or equal to 0.');
        }
    },
    
    configure: function Common_App_HostNotification__commonHostNotificationPackage$configure$in(container) {
        this._container$0 = container;
    },
    
    dispose: function Common_App_HostNotification__commonHostNotificationPackage$dispose$in() {
    }
}


Common.App.HostNotification.EditNotificationEventSource = function Common_App_HostNotification_EditNotificationEventSource() {
    this._eventSource$0 = new Common.EventSource();
}
Common.App.HostNotification.EditNotificationEventSource.prototype = {
    
    add_onEditHappened: function Common_App_HostNotification_EditNotificationEventSource$add_onEditHappened$in(value) {
        this._eventSource$0.addHandler(Common.App.HostNotification.EditNotificationEventSource._editHappenedEventKey$p, value);
    },
    
    remove_onEditHappened: function Common_App_HostNotification_EditNotificationEventSource$remove_onEditHappened$in(value) {
        this._eventSource$0.removeHandler(Common.App.HostNotification.EditNotificationEventSource._editHappenedEventKey$p, value);
    },
    
    raiseEditHappenedEvent: function Common_App_HostNotification_EditNotificationEventSource$raiseEditHappenedEvent$in() {
        this._eventSource$0.raiseEvent(Common.App.HostNotification.EditNotificationEventSource._editHappenedEventKey$p, null, null);
    }
}


Common.App.HostNotification.EditNotificationManager = function Common_App_HostNotification_EditNotificationManager(notificationIntervalInMs, taskManager, hostPostmessengerTask, editNotificationEventSource, userActivityHostNotificationManager, editNotificationPostMessageIsEnabled, editDocumentUserActionTelemetryReportingIntervalInMilliseconds) {
    this.$$d__sendPostMessageIfNecessary$p$0 = Function.createDelegate(this, this._sendPostMessageIfNecessary$p$0);
    this.$$d__reportEditDocumentUserActionTelemetryIfNecessary$p$0 = Function.createDelegate(this, this._reportEditDocumentUserActionTelemetryIfNecessary$p$0);
    this._taskManager$0 = taskManager;
    this._notificationIntervalInMs$0 = notificationIntervalInMs;
    this._hostPostmessengerTask$0 = hostPostmessengerTask;
    this._editNotificationEventSource$0 = editNotificationEventSource;
    this._userActivityHostNotificationManager$0 = userActivityHostNotificationManager;
    this._editNotificationPostMessageIsEnabled$0 = editNotificationPostMessageIsEnabled;
    this._editDocumentUserActionReportingIntervalInMs$0 = 0;
    this._hasAnotherEditBeenMadeSinceLastEditDocumentTelemetryReport$0 = false;
    try {
        if (editDocumentUserActionTelemetryReportingIntervalInMilliseconds > 0) {
            this._editDocumentUserActionReportingIntervalInMs$0 = editDocumentUserActionTelemetryReportingIntervalInMilliseconds;
            if (this._editDocumentUserActionReportingIntervalInMs$0 < 300000) {
                this._editDocumentUserActionReportingIntervalInMs$0 = 300000;
            }
            if (this._taskManager$0 && !this._editDocumentTelemetryReportingTask$0) {
                this._editDocumentTelemetryReportingTask$0 = new Common.TaskItem(Common.TaskItemPriority.background, Common.TaskItemType.continuous, this._editDocumentUserActionReportingIntervalInMs$0, this.$$d__reportEditDocumentUserActionTelemetryIfNecessary$p$0, 0, '', false, 0);
                this._taskManager$0.addTask(this._editDocumentTelemetryReportingTask$0);
            }
        }
    }
    catch (e) {
        Diag.ULS.sendTraceTag(51246176, 383, 50, 'Hit an exception while trying to queue up the EditDocument user action reporting interval: ' + e);
    }
    Common.Debug.log('EditNotificationManager has been initialized', Common.DebugLogCategory.editNotification, 0);
}
Common.App.HostNotification.EditNotificationManager.prototype = {
    _editHappenedInTimeWindow$0: false,
    _hostPostmessengerTask$0: null,
    _notificationTask$0: null,
    _taskManager$0: null,
    _notificationIntervalInMs$0: 0,
    _editNotificationEventSource$0: null,
    _userActivityHostNotificationManager$0: null,
    _editNotificationPostMessageIsEnabled$0: false,
    _editDocumentTelemetryReportingTask$0: null,
    _editDocumentUserActionReportingIntervalInMs$0: 0,
    _hasAnotherEditBeenMadeSinceLastEditDocumentTelemetryReport$0: false,
    _$$pf_UserEverEdited$p$0: false,
    
    get_userEverEdited: function Common_App_HostNotification_EditNotificationManager$get_userEverEdited$in() {
        return this._$$pf_UserEverEdited$p$0;
    },
    
    set_userEverEdited: function Common_App_HostNotification_EditNotificationManager$set_userEverEdited$in(value) {
        this._$$pf_UserEverEdited$p$0 = value;
        return value;
    },
    
    editHappened: function Common_App_HostNotification_EditNotificationManager$editHappened$in() {
        if (!this.get_userEverEdited()) {
            this.set_userEverEdited(true);
            Common.Health.get_instance().addQosPillar(Common.QosPillarName.toString(Common.QosPillarName.Save));
            Common.Health.get_instance().addQosPillar(Common.QosPillarName.toString(Common.QosPillarName.Authoring));
            Common.LoggerUtils.logUserAction(Common.CommonCommands.editDocument, true, '', 0, 0, 0, null);
        }
        else {
            this._hasAnotherEditBeenMadeSinceLastEditDocumentTelemetryReport$0 = true;
        }
        this._editHappenedInTimeWindow$0 = true;
        if (this._userActivityHostNotificationManager$0) {
            this._userActivityHostNotificationManager$0.activityHappened();
        }
        if (this._editNotificationEventSource$0) {
            this._editNotificationEventSource$0.raiseEditHappenedEvent();
        }
        if (Common.AFrameworkApplication.dataPlumber) {
            Common.AFrameworkApplication.dataPlumber.markAsRealEditSession();
        }
        if (this._editNotificationPostMessageIsEnabled$0) {
            if (!this._notificationTask$0) {
                this._sendPostMessageIfNecessary$p$0(null);
                this._notificationTask$0 = new Common.TaskItem(Common.TaskItemPriority.background, Common.TaskItemType.continuous, this._notificationIntervalInMs$0, this.$$d__sendPostMessageIfNecessary$p$0, 113, '', false, 0);
                this._taskManager$0.addTask(this._notificationTask$0);
            }
            else {
                Common.Debug.log('EditNotificationManager: EditHappened called after first edit', Common.DebugLogCategory.editNotification, 0);
            }
        }
    },
    
    _sendPostMessageIfNecessary$p$0: function Common_App_HostNotification_EditNotificationManager$_sendPostMessageIfNecessary$p$0$in(task) {
        if (this._editHappenedInTimeWindow$0) {
            var $$t_6 = this;
            this._hostPostmessengerTask$0.CWR(Boolean, function(t) {
                return $$t_6._hostPostmessengerTask$0.get_result().sendMessage(Common.CrossDocumentMessageId.editNotification, null, '');
            });
            Common.Debug.log('EditNotificationManager: edit happened. Sent message to the host', Common.DebugLogCategory.editNotification, 0);
            Diag.ULS.sendTraceTag(38086292, 209, 50, 'EditNotificationManager: sending post message to the host.');
            this._editHappenedInTimeWindow$0 = false;
        }
        else {
            Diag.ULS.sendTraceTag(38086293, 209, 100, 'EditNotificationManager: no edits happened, not sending post message to the host.');
            Common.Debug.log('EditNotificationManager: no edits happened, not sending message to the host', Common.DebugLogCategory.editNotification, 0);
        }
    },
    
    _reportEditDocumentUserActionTelemetryIfNecessary$p$0: function Common_App_HostNotification_EditNotificationManager$_reportEditDocumentUserActionTelemetryIfNecessary$p$0$in(task) {
        try {
            if (this._hasAnotherEditBeenMadeSinceLastEditDocumentTelemetryReport$0) {
                Common.LoggerUtils.logUserAction(Common.CommonCommands.editDocument, true, '', 0, 0, 0, null);
                this._hasAnotherEditBeenMadeSinceLastEditDocumentTelemetryReport$0 = false;
            }
        }
        catch (e) {
            this._hasAnotherEditBeenMadeSinceLastEditDocumentTelemetryReport$0 = false;
            Diag.ULS.sendTraceTag(51246177, 383, 50, 'Hit an exception while trying to send the EditDocument user action: ' + e);
        }
    }
}


Common.App.HostNotification.UserActivityHostNotificationManager = function Common_App_HostNotification_UserActivityHostNotificationManager(notificationIntervalInMs, taskManager, hostPostmessengerTask, mouseInputManager, onBeforeShutdownSubscriber) {
    this.$$d__sendPostMessageIfNecessary$p$0 = Function.createDelegate(this, this._sendPostMessageIfNecessary$p$0);
    this.$$d__registerHandlerTask$p$0 = Function.createDelegate(this, this._registerHandlerTask$p$0);
    this.$$d__mouseActivityHandler$p$0 = Function.createDelegate(this, this._mouseActivityHandler$p$0);
    this._taskManager$0 = taskManager;
    this._notificationIntervalInMs$0 = notificationIntervalInMs;
    this._hostPostmessengerTask$0 = hostPostmessengerTask;
    this._mouseInputManager$0 = mouseInputManager;
    this._onBeforeShutdownSubscriber$0 = onBeforeShutdownSubscriber;
    this._registerHandlerTask$p$0(null);
    Common.Debug.log('ActivityNotification has been initialized', Common.DebugLogCategory.editNotification, 0);
}
Common.App.HostNotification.UserActivityHostNotificationManager.prototype = {
    _hostPostmessengerTask$0: null,
    _mouseInputManager$0: null,
    _notificationTask$0: null,
    _handlerTask$0: null,
    _taskManager$0: null,
    _notificationIntervalInMs$0: 0,
    _activityHappenedInTimeWindow$0: false,
    _$$pf_UserWasEverActive$p$0: false,
    
    get_userWasEverActive: function Common_App_HostNotification_UserActivityHostNotificationManager$get_userWasEverActive$in() {
        return this._$$pf_UserWasEverActive$p$0;
    },
    
    set_userWasEverActive: function Common_App_HostNotification_UserActivityHostNotificationManager$set_userWasEverActive$in(value) {
        this._$$pf_UserWasEverActive$p$0 = value;
        return value;
    },
    
    _handlerRegistered$0: false,
    _onBeforeShutdownSubscriber$0: null,
    
    _registerHandlerTask$p$0: function Common_App_HostNotification_UserActivityHostNotificationManager$_registerHandlerTask$p$0$in(task) {
        var appFrame = document.getElementById(Common.AFrameworkApplication.applicationOuterContainerId);
        if (!this._handlerRegistered$0 && this._mouseInputManager$0 && appFrame) {
            this._mouseInputManager$0.registerHandler(Common.EventNames.mouseOver, appFrame, this.$$d__mouseActivityHandler$p$0, null);
            this._handlerRegistered$0 = true;
        }
        var $$t_4 = this;
        this._onBeforeShutdownSubscriber$0(function(sender, args) {
            $$t_4.dispose();
        });
    },
    
    _mouseActivityHandler$p$0: function Common_App_HostNotification_UserActivityHostNotificationManager$_mouseActivityHandler$p$0$in(eventArgs) {
        if (this._handlerRegistered$0) {
            this._mouseInputManager$0.unregisterHandler(Common.EventNames.mouseOver, document.getElementById(Common.AFrameworkApplication.applicationOuterContainerId), this.$$d__mouseActivityHandler$p$0);
            this._handlerRegistered$0 = false;
        }
        this.activityHappened();
        return false;
    },
    
    activityHappened: function Common_App_HostNotification_UserActivityHostNotificationManager$activityHappened$in() {
        this.set_userWasEverActive(true);
        this._activityHappenedInTimeWindow$0 = true;
        if (!this._handlerTask$0) {
            this._handlerTask$0 = new Common.TaskItem(Common.TaskItemPriority.background, Common.TaskItemType.continuous, this._notificationIntervalInMs$0, this.$$d__registerHandlerTask$p$0, 112, '', false, 0);
            this._taskManager$0.addTask(this._handlerTask$0);
        }
        if (!this._notificationTask$0) {
            this._sendPostMessageIfNecessary$p$0(null);
            this._notificationTask$0 = new Common.TaskItem(Common.TaskItemPriority.background, Common.TaskItemType.continuous, this._notificationIntervalInMs$0, this.$$d__sendPostMessageIfNecessary$p$0, 111, '', false, 0);
            this._taskManager$0.addTask(this._notificationTask$0);
        }
    },
    
    _sendPostMessageIfNecessary$p$0: function Common_App_HostNotification_UserActivityHostNotificationManager$_sendPostMessageIfNecessary$p$0$in(task) {
        if (this._activityHappenedInTimeWindow$0) {
            var $$t_6 = this;
            this._hostPostmessengerTask$0.CWR(Boolean, function(t) {
                return $$t_6._hostPostmessengerTask$0.get_result().sendMessage(Common.CrossDocumentMessageId.userActivity, null, '');
            });
            Diag.ULS.sendTraceTag(38405446, 209, 50, 'UserActivityHostNotificationManager: sending post message to the host.');
            this._activityHappenedInTimeWindow$0 = false;
        }
    },
    
    dispose: function Common_App_HostNotification_UserActivityHostNotificationManager$dispose$in() {
        if (this._handlerRegistered$0) {
            this._mouseInputManager$0.unregisterHandler(Common.EventNames.mouseOver, document.getElementById(Common.AFrameworkApplication.applicationOuterContainerId), this.$$d__mouseActivityHandler$p$0);
            this._handlerRegistered$0 = false;
        }
    }
}


Common.App.HostNotification._commonHostNotificationPackage.registerClass('Common.App.HostNotification._commonHostNotificationPackage', null, Common.App.IPackage, Common.Utils.IContainerConfiguration);
Common.App.HostNotification.EditNotificationEventSource.registerClass('Common.App.HostNotification.EditNotificationEventSource');
Common.App.HostNotification.EditNotificationManager.registerClass('Common.App.HostNotification.EditNotificationManager', null, Common.Interface.IEditNotificationManager);
Common.App.HostNotification.UserActivityHostNotificationManager.registerClass('Common.App.HostNotification.UserActivityHostNotificationManager', null, Common.Interface.IUserActivityHostNotificationManager, Sys.IDisposable);
Common.App.HostNotification.EditNotificationEventSource._editHappenedEventKey$p = 'OnEditHappenedEvent';
Common.App.HostNotification._commonHostNotificationPackage.main();
Type.registerNamespace('Common.App.FloatPane');

Common.App.FloatPane.IFloatPaneActor = function() {}
Common.App.FloatPane.IFloatPaneActor.registerInterface('Common.App.FloatPane.IFloatPaneActor');


Common.App.FloatPane.IFloatPaneFactory = function() {}
Common.App.FloatPane.IFloatPaneFactory.registerInterface('Common.App.FloatPane.IFloatPaneFactory');


Common.App.FloatPane.IFloatPane = function() {}
Common.App.FloatPane.IFloatPane.registerInterface('Common.App.FloatPane.IFloatPane');


Common.App.FloatPane.FloatPanePackage = function Common_App_FloatPane_FloatPanePackage() {
}
Common.App.FloatPane.FloatPanePackage.main = function Common_App_FloatPane_FloatPanePackage$main$st() {
    Common.App.PackageLifecycleManager.get_instance().registerPackage(new Common.App.FloatPane.FloatPanePackage(), 0, false);
}
Common.App.FloatPane.FloatPanePackage.prototype = {
    _container$0: null,
    
    get_name: function Common_App_FloatPane_FloatPanePackage$get_name$in() {
        return 'Common.App.FloatPane';
    },
    
    get__isFloatPaneEnabled$p$0: function Common_App_FloatPane_FloatPanePackage$get__isFloatPaneEnabled$p$0$in() {
        return Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('O365AdvertisementIsEnabled') && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('IsShowAdvertisementPaneEnabled');
    },
    
    init: function Common_App_FloatPane_FloatPanePackage$init$in() {
        if (this.get__isFloatPaneEnabled$p$0()) {
            Diag.ULS.sendTraceTag(23674944, 207, 50, 'Setup task to show the float pane.');
            this._container$0.resolve(Common.App.FloatPane.IFloatPaneActor, '').registerTask();
            Diag.ULS.sendTraceTag(23674945, 207, 50, 'Setup action for excel to show the float pane.');
            this._container$0.resolve(Common.App.FloatPane.IFloatPaneActor, '').registerAction();
        }
    },
    
    configure: function Common_App_FloatPane_FloatPanePackage$configure$in(container) {
        this._container$0 = container;
        if (this.get__isFloatPaneEnabled$p$0()) {
            var $$t_1 = this;
            this._container$0.register(Common.App.FloatPane._floatPaneFactory, '').as(Common.App.FloatPane.IFloatPaneFactory, '').usingFactory(function() {
                return new Common.App.FloatPane._floatPaneFactory(Common.AFrameworkApplication.appSettingsManager, Common.AFrameworkApplication.get_theTaskManager(), Common.ClickInputManager.get_instance(), Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_officeAppType(), $$t_1._container$0);
            }).singleInstance();
            var $$t_2 = this;
            this._container$0.register(Common.App.FloatPane.FloatPaneActor, '').as(Common.App.FloatPane.IFloatPaneActor, '').usingFactory(function() {
                return new Common.App.FloatPane.FloatPaneActor(Common.AFrameworkApplication.get_theTaskManager(), Common.AFrameworkApplication.get_theActionManager(), $$t_2._container$0.resolve(Common.App.FloatPane.IFloatPaneFactory, ''));
            }).singleInstance();
        }
    },
    
    dispose: function Common_App_FloatPane_FloatPanePackage$dispose$in() {
    }
}


Common.App.FloatPane.FloatPaneActor = function Common_App_FloatPane_FloatPaneActor(taskManager, actionManager, floatPaneFactory) {
    this.$$d__showFloatPaneHandler$p$0 = Function.createDelegate(this, this._showFloatPaneHandler$p$0);
    this.$$d__showFloatPane$p$0 = Function.createDelegate(this, this._showFloatPane$p$0);
    this._taskManager$0 = taskManager;
    this._actionManager$0 = actionManager;
    this._floatPane$0 = floatPaneFactory.create();
}
Common.App.FloatPane.FloatPaneActor.prototype = {
    _taskManager$0: null,
    _actionManager$0: null,
    _floatPane$0: null,
    _showFloatPaneTask$0: null,
    
    registerTask: function Common_App_FloatPane_FloatPaneActor$registerTask$in() {
        if (!this._showFloatPaneTask$0) {
            Diag.ULS.sendTraceTag(23674910, 207, 50, 'The current sho pane task is null, create new one.');
            this._showFloatPaneTask$0 = new Common.TaskItem(Common.TaskItemPriority.normal, Common.TaskItemType.oneShot, Common.App.FloatPane.FloatPaneActor._waitforFloatPane$p, this.$$d__showFloatPane$p$0, 67, '', false, 0);
            this._taskManager$0.addTask(this._showFloatPaneTask$0);
        }
        else {
            Diag.ULS.sendTraceTag(23674911, 207, 50, 'The current task is not null, re-use it.');
        }
    },
    
    _showFloatPane$p$0: function Common_App_FloatPane_FloatPaneActor$_showFloatPane$p$0$in(taskItem) {
        this._showFloatPaneTask$0 = null;
        Diag.ULS.sendTraceTag(23674912, 207, 50, 'The float pane is shown after the task is executed.');
        this._floatPane$0.display();
    },
    
    registerAction: function Common_App_FloatPane_FloatPaneActor$registerAction$in() {
        this._actionManager$0.addAction(Common.CommonCommands.showFloatPane, Common.CommonContextIds.frame, this.$$d__showFloatPaneHandler$p$0);
    },
    
    _showFloatPaneHandler$p$0: function Common_App_FloatPane_FloatPaneActor$_showFloatPaneHandler$p$0$in(actionid, context, behavior, reportingdata, actiondata) {
        if (actionid !== Common.CommonCommands.showFloatPane) {
            return 2;
        }
        if (behavior === 1) {
            return 32;
        }
        if (behavior === 2 && actiondata) {
            Diag.ULS.sendTraceTag(23674913, 207, 50, 'The application wants to show or hide float pane with argument {0}.', actiondata);
            if (!actiondata) {
                if (this._showFloatPaneTask$0) {
                    Diag.ULS.sendTraceTag(23674914, 207, 50, 'Hide float pane via removing show task!');
                    this._taskManager$0.deleteTask(this._showFloatPaneTask$0);
                }
                else {
                    Diag.ULS.sendTraceTag(23674915, 207, 50, 'Hide float pane immediately!');
                    this._floatPane$0.remove(null);
                }
                this._showFloatPaneTask$0 = null;
            }
            else {
                this.registerTask();
            }
            return 32;
        }
        return 8;
    }
}


Common.App.FloatPane._floatPaneFactory = function Common_App_FloatPane__floatPaneFactory(appSettingsManager, taskManager, clickInputManager, appType, container) {
    this._taskManager$0 = taskManager;
    this._appSettingsManager$0 = appSettingsManager;
    this._clickInputManager$0 = clickInputManager;
    this._container$0 = container;
    this._appType$0 = appType;
}
Common.App.FloatPane._floatPaneFactory.prototype = {
    _appSettingsManager$0: null,
    _clickInputManager$0: null,
    _taskManager$0: null,
    _appType$0: 0,
    _container$0: null,
    
    create: function Common_App_FloatPane__floatPaneFactory$create$in() {
        return new Common.App.FloatPane._floatPane(this._appSettingsManager$0, this._taskManager$0, this._clickInputManager$0, this._appType$0, this._container$0);
    }
}


Common.App.FloatPane._floatPane = function Common_App_FloatPane__floatPane(appSettingsManager, taskManager, clickInputManager, appType, container) {
    this.$$d_hide = Function.createDelegate(this, this.hide);
    this.$$d__onLoadImageError$p$0 = Function.createDelegate(this, this._onLoadImageError$p$0);
    this.$$d__onLoadImageFinish$p$0 = Function.createDelegate(this, this._onLoadImageFinish$p$0);
    this.$$d_remove = Function.createDelegate(this, this.remove);
    this.$$d__onClose$p$0 = Function.createDelegate(this, this._onClose$p$0);
    this.$$d__onRedirectClick$p$0 = Function.createDelegate(this, this._onRedirectClick$p$0);
    this._taskManager$0 = taskManager;
    this._appSettingsManager$0 = appSettingsManager;
    this._clickInputManager$0 = clickInputManager;
    this._container$0 = container;
    this._appType$0 = appType;
}
Common.App.FloatPane._floatPane.prototype = {
    _container$0: null,
    _appType$0: 0,
    _taskManager$0: null,
    _appSettingsManager$0: null,
    _clickInputManager$0: null,
    _floatPaneContainer$0: null,
    _loadImageFinishHandler$0: null,
    _loadImageErrorHandler$0: null,
    _paneContainer$0: null,
    _paneContent$0: null,
    _buttonImage$0: null,
    _closeButton$0: null,
    _paneImage$0: null,
    _redirectPageLink$0: null,
    _removeTask$0: null,
    _hideTask$0: null,
    _linkUrl$0: null,
    
    createControls: function Common_App_FloatPane__floatPane$createControls$in() {
        this._paneContent$0 = document.createElement('div');
        this._paneContent$0.className = String.format('{0} {1}', Common.App.FloatPane._floatPane._paneClassName$p, Common.App.FloatPane._floatPane._paneFadeInClassName$p);
        this._paneContent$0.style.width = this._paneImage$0.width + 'px';
        this._linkUrl$0 = this.getO365OrderUrl(this._appType$0);
        if (this._linkUrl$0) {
            this._redirectPageLink$0 = document.createElement('a');
            this._redirectPageLink$0.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaPresentationRole);
            this._clickInputManager$0.registerHandler(Common.EventNames.click, this._redirectPageLink$0, this.$$d__onRedirectClick$p$0);
            this._redirectPageLink$0.href = this._linkUrl$0;
            this._redirectPageLink$0.target = '_blank';
            this._redirectPageLink$0.appendChild(this._paneImage$0);
            this._paneContent$0.appendChild(this._redirectPageLink$0);
        }
        else {
            this._paneContent$0.appendChild(this._paneImage$0);
        }
        this._closeButton$0 = document.createElement('a');
        this._closeButton$0.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaButtonRole);
        this._closeButton$0.className = Common.App.FloatPane._floatPane._closeButtonClassName$p;
        this._closeButton$0.title = CommonUIStrings.l_Close;
        this._closeButton$0.tabIndex = -1;
        this._buttonImage$0 = Common.ImageClusteringHelper.createClusteredImage(16, 16, Common.App.FloatPane._floatPane._closeImageName$p, Common.App.FloatPane._floatPane._closeImageClassName$p, true, null);
        this._buttonImage$0.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaPresentationRole);
        this._closeButton$0.appendChild(this._buttonImage$0);
        this._clickInputManager$0.registerHandler(Common.EventNames.click, this._closeButton$0, this.$$d__onClose$p$0);
        this._paneContent$0.appendChild(this._closeButton$0);
        this._paneContainer$0.appendChild(this._paneContent$0);
    },
    
    getImagePath: function Common_App_FloatPane__floatPane$getImagePath$in(appType) {
        var isOnSale = this._appSettingsManager$0.getBooleanAppSetting('O365PromotionHasStarted');
        switch (appType) {
            case Common.OfficeAppType.powerPoint:
                return Common.CommonPath.commonImage(String.format(Common.App.FloatPane._floatPane._powerPointImageName$p, (isOnSale) ? Common.App.FloatPane._floatPane._saleName$p : ''));
            case Common.OfficeAppType.excel:
                return Common.CommonPath.commonImage(String.format(Common.App.FloatPane._floatPane._excelImageName$p, (isOnSale) ? Common.App.FloatPane._floatPane._saleName$p : ''));
            case Common.OfficeAppType.word:
                return Common.CommonPath.commonImage(String.format(Common.App.FloatPane._floatPane._wordImageName$p, (isOnSale) ? Common.App.FloatPane._floatPane._saleName$p : ''));
        }
        return null;
    },
    
    getO365OrderUrl: function Common_App_FloatPane__floatPane$getO365OrderUrl$in(appType) {
        var urlTemplate = this._appSettingsManager$0.getStringAppSetting('O365AdPaneRedirectedURL');
        switch (appType) {
            case Common.OfficeAppType.excel:
                return String.format(urlTemplate, 'Excel');
            case Common.OfficeAppType.powerPoint:
                return String.format(urlTemplate, 'PowerPoint');
            case Common.OfficeAppType.word:
                return String.format(urlTemplate, 'Word');
        }
        return null;
    },
    
    hide: function Common_App_FloatPane__floatPane$hide$in(taskItem) {
        this._hideTask$0 = null;
        if (this._paneContent$0 && !this._removeTask$0) {
            if (!taskItem) {
                Diag.ULS.sendTraceTag(23674903, 207, 50, 'User clicks button to close the float pane.');
            }
            else {
                Diag.ULS.sendTraceTag(23674904, 207, 50, 'The float pane is closed automatically.');
            }
            this._paneContent$0.className = String.format('{0} {1}', Common.App.FloatPane._floatPane._paneClassName$p, Common.App.FloatPane._floatPane._paneFadeOutClassName$p);
            this._paneContent$0.style.height = '0px';
            this._removeTask$0 = new Common.TaskItem(Common.TaskItemPriority.normal, Common.TaskItemType.oneShot, 1000, this.$$d_remove, 67, '', false, 0);
            this._taskManager$0.addTask(this._removeTask$0);
        }
    },
    
    remove: function Common_App_FloatPane__floatPane$remove$in(taskItem) {
        if (this._paneContent$0 && this._paneContainer$0) {
            if (this._redirectPageLink$0) {
                this._clickInputManager$0.unregisterHandler(Common.EventNames.click, this._redirectPageLink$0, this.$$d__onRedirectClick$p$0);
            }
            this._clickInputManager$0.unregisterHandler(Common.EventNames.click, this._closeButton$0, this.$$d__onClose$p$0);
            this._paneContainer$0.removeChild(this._paneContent$0);
            this._paneContent$0 = null;
        }
        this._removeTask$0 = null;
    },
    
    display: function Common_App_FloatPane__floatPane$display$in() {
        this._floatPaneContainer$0 = this._container$0.tryResolve(Common.IFloatPaneContainer, '');
        if (!this._floatPaneContainer$0) {
            Diag.ULS.sendTraceTag(23674905, 207, 50, 'The IFloatPaneContainer is not registered and the float pane can\'t be shown.');
            return;
        }
        this._paneContainer$0 = this._floatPaneContainer$0.get_container();
        if (!this._paneContainer$0) {
            Diag.ULS.sendTraceTag(23674906, 207, 15, 'The container is empty, so the float pane can\'t be shown.');
            return;
        }
        var imagePath = this.getImagePath(this._appType$0);
        if (!imagePath) {
            Diag.ULS.sendTraceTag(23674907, 207, 15, 'The target image is empty, can\'t show the float pane.');
            return;
        }
        Diag.ULS.sendTraceTag(23674908, 207, 50, 'Begin downloading image from server: {0}.', imagePath);
        this._paneImage$0 = document.createElement('img');
        this._paneImage$0.className = Common.App.FloatPane._floatPane._paneImageClassName$p;
        this._loadImageFinishHandler$0 = this.$$d__onLoadImageFinish$p$0;
        Common.InputManager.addHandler(this._paneImage$0, Common.EventNames.load, this._loadImageFinishHandler$0);
        this._loadImageErrorHandler$0 = this.$$d__onLoadImageError$p$0;
        Common.InputManager.addHandler(this._paneImage$0, Common.EventNames.error, this._loadImageErrorHandler$0);
        this._paneImage$0.src = imagePath;
    },
    
    _onLoadImageFinish$p$0: function Common_App_FloatPane__floatPane$_onLoadImageFinish$p$0$in(e) {
        var showingDuration = this._appSettingsManager$0.getIntAppSetting('O365AdPaneShowingDuration', 60);
        this.createControls();
        this._paneContent$0.style.display = 'block';
        this._paneContent$0.style.height = this._paneImage$0.height + 'px';
        this._hideTask$0 = new Common.TaskItem(Common.TaskItemPriority.normal, Common.TaskItemType.oneShot, showingDuration * 1000, this.$$d_hide, 67, '', false, 0);
        this._taskManager$0.addTask(this._hideTask$0);
        this._removeImageEventHandler$p$0();
    },
    
    _onLoadImageError$p$0: function Common_App_FloatPane__floatPane$_onLoadImageError$p$0$in(e) {
        Diag.ULS.sendTraceTag(23674909, 207, 15, 'The image can\'t be downloaded, the float pane can\'t be shown.');
        this._removeImageEventHandler$p$0();
        this._paneImage$0 = null;
    },
    
    _removeImageEventHandler$p$0: function Common_App_FloatPane__floatPane$_removeImageEventHandler$p$0$in() {
        if (this._loadImageFinishHandler$0 && this._paneImage$0) {
            Common.InputManager.removeHandler(this._paneImage$0, Common.EventNames.load, this._loadImageFinishHandler$0);
        }
        this._loadImageFinishHandler$0 = null;
        if (this._loadImageErrorHandler$0 && this._paneImage$0) {
            Common.InputManager.removeHandler(this._paneImage$0, Common.EventNames.error, this._loadImageErrorHandler$0);
        }
        this._loadImageErrorHandler$0 = null;
    },
    
    _onRedirectClick$p$0: function Common_App_FloatPane__floatPane$_onRedirectClick$p$0$in(args) {
        Diag.ULS.sendTraceTag(35698659, 207, 50, 'User click the float pane and a new web page will be opened.');
        return false;
    },
    
    _onClose$p$0: function Common_App_FloatPane__floatPane$_onClose$p$0$in(args) {
        if (this._hideTask$0) {
            this._taskManager$0.deleteTask(this._hideTask$0);
        }
        this.hide(null);
        return true;
    },
    
    dispose: function Common_App_FloatPane__floatPane$dispose$in() {
        this.hide(null);
    }
}


Common.App.FloatPane.FloatPanePackage.registerClass('Common.App.FloatPane.FloatPanePackage', null, Common.App.IPackage, Common.Utils.IContainerConfiguration);
Common.App.FloatPane.FloatPaneActor.registerClass('Common.App.FloatPane.FloatPaneActor', null, Common.App.FloatPane.IFloatPaneActor);
Common.App.FloatPane._floatPaneFactory.registerClass('Common.App.FloatPane._floatPaneFactory', null, Common.App.FloatPane.IFloatPaneFactory);
Common.App.FloatPane._floatPane.registerClass('Common.App.FloatPane._floatPane', null, Common.App.FloatPane.IFloatPane);
Common.App.FloatPane.FloatPaneActor._waitforFloatPane$p = 30000;
Common.App.FloatPane._floatPane._paneClassName$p = 'WACFloatPane';
Common.App.FloatPane._floatPane._paneImageClassName$p = 'WACFloatPaneImage';
Common.App.FloatPane._floatPane._paneFadeInClassName$p = 'WACFloatPaneFadeIn';
Common.App.FloatPane._floatPane._paneFadeOutClassName$p = 'WACFloatPaneFadeOut';
Common.App.FloatPane._floatPane._closeButtonClassName$p = 'StandardButton WACFloatPaneCloseButton';
Common.App.FloatPane._floatPane._closeImageClassName$p = 'StandardButtonImage clip16x16 StandardButtonImageNoText';
Common.App.FloatPane._floatPane._closeImageName$p = 'ClosePaneGlyph_16x16x32';
Common.App.FloatPane._floatPane._powerPointImageName$p = 'adppt{0}.png';
Common.App.FloatPane._floatPane._excelImageName$p = 'adxls{0}.png';
Common.App.FloatPane._floatPane._wordImageName$p = 'addoc{0}.png';
Common.App.FloatPane._floatPane._saleName$p = 'sale';
Common.App.FloatPane.FloatPanePackage.main();
Type.registerNamespace('Common');

Common.IReactSharedHeaderFocusManager = function() {}
Common.IReactSharedHeaderFocusManager.registerInterface('Common.IReactSharedHeaderFocusManager');


Common.IReactSharedHeaderPropsHelper = function() {}
Common.IReactSharedHeaderPropsHelper.registerInterface('Common.IReactSharedHeaderPropsHelper');


Common.ITopRowPeripheralControlCreator = function() {}
Common.ITopRowPeripheralControlCreator.registerInterface('Common.ITopRowPeripheralControlCreator');


Common.IChat = function() {}
Common.IChat.registerInterface('Common.IChat');


Common.IChatFocusProxy = function() {}
Common.IChatFocusProxy.registerInterface('Common.IChatFocusProxy');


Common.IChatCounterProxy = function() {}
Common.IChatCounterProxy.registerInterface('Common.IChatCounterProxy');


Common.IChatKeyboardProxy = function() {}
Common.IChatKeyboardProxy.registerInterface('Common.IChatKeyboardProxy');


Common.IChatContainerProxy = function() {}
Common.IChatContainerProxy.registerInterface('Common.IChatContainerProxy');


Common.IChatManager = function() {}
Common.IChatManager.registerInterface('Common.IChatManager');


Common.ICuiHelper = function() {}
Common.ICuiHelper.registerInterface('Common.ICuiHelper');


Common.IUpsellActor = function() {}
Common.IUpsellActor.registerInterface('Common.IUpsellActor');


Common.IScalableViewerChromeItemContainer = function() {}
Common.IScalableViewerChromeItemContainer.registerInterface('Common.IScalableViewerChromeItemContainer');


Common.IViewerChromeItemContainer = function() {}
Common.IViewerChromeItemContainer.registerInterface('Common.IViewerChromeItemContainer');


Common.AppSwitcher = function Common_AppSwitcher() {
}
Common.AppSwitcher._createSwitcherDropdown$i = function Common_AppSwitcher$_createSwitcherDropdown$i$st(ribbonClientId, container, breadcrumbControls, headerStrings, attachEvents) {
    var switcherLink = document.createElement('a');
    switcherLink.href = 'javascript:void(0)';
    switcherLink.tabIndex = 0;
    switcherLink.id = ribbonClientId + '-SwitcherLink';
    switcherLink.className = 'BreadcrumbItem SwitcherDropdown';
    switcherLink.title = headerStrings['SwitcherTooltip'].toString();
    switcherLink.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaButtonRole);
    var switcherImage = Common.ImageClusteringHelper.createClusteredImage(50, 50, 'App_Switcher_Waffle_50x50x32', '', true, null);
    switcherLink.appendChild(switcherImage);
    container.appendChild(switcherLink);
    if (attachEvents) {
        Common.AppSwitcher._initializeSwitcherActions$p();
        Common.ClickInputManager.get_instance().registerHandler(Common.EventNames.click, switcherLink, Common.AppSwitcher._onSwitcherLauncherClick$p);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, switcherLink, Common.AppSwitcher._onSwitcherLauncherKeyDown$p);
        Array.add(breadcrumbControls.breadcrumbItems, switcherLink);
        Common.AppSwitcher.attachSwitcherEvents(breadcrumbControls);
        Common.AppSwitcher.attachSwitcherTileEvents(breadcrumbControls);
    }
}
Common.AppSwitcher._onSwitcherLauncherKeyDown$p = function Common_AppSwitcher$_onSwitcherLauncherKeyDown$p$st(args) {
    if (args.innerEvent.keyCode === Common.KeyCode.vK_Enter || args.innerEvent.keyCode === Common.KeyCode.vK_Space) {
        Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.openSwitcher, 2, null);
        return true;
    }
    return false;
}
Common.AppSwitcher._onSwitcherLauncherClick$p = function Common_AppSwitcher$_onSwitcherLauncherClick$p$st(args) {
    Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.openSwitcher, 2, null);
    return true;
}
Common.AppSwitcher._onO365SwitcherReadyHandler$p = function Common_AppSwitcher$_onO365SwitcherReadyHandler$p$st(actionId, context, behavior, reportingData, actionData) {
    if (Common.AppSwitcher._o365LoadingStopwatch) {
        Common.AppSwitcher._o365LoadingStopwatch.stop();
        Common.AppSwitcher._o365LoadingStopwatch = null;
    }
    if (Common.FocusManager.usable()) {
        Common.AppSwitcher._pushScopeAndMoveIntoRegion$p();
    }
    return 32;
}
Common.AppSwitcher._pushScopeAndMoveIntoRegion$p = function Common_AppSwitcher$_pushScopeAndMoveIntoRegion$p$st() {
    var focusManager = Common.FocusManager.instance();
    var region = focusManager.getRegion(Common.AFrame.switcherFocusId);
    if (region) {
        var currentScope = focusManager.get_currentScope();
        Diag.ULS.sendTraceTag(20525598, 215, 50, 'Updating scope from \'{0}\' to \'{1}\'', (!currentScope) ? 'null' : currentScope.name, Common.AFrame.switcherFocusId);
        if (!currentScope || currentScope.name !== Common.AFrame.switcherFocusId) {
            focusManager.pushScope(Common.AFrame.switcherFocusId, false);
        }
        region.moveIntoFromTop();
    }
}
Common.AppSwitcher.openSwitcher = function Common_AppSwitcher$openSwitcher$st() {
    var switcher = document.getElementById(Common.AppSwitcher._switcherContainerId$p);
    var switcherBg = document.getElementById(Common.AppSwitcher._switcherBackgroundId$p);
    Common.Debug.assertTag(!!switcher, 7157218);
    Common.Debug.assertTag(!!switcherBg, 7157219);
    switcher.style.display = 'block';
    switcherBg.style.display = 'block';
    if (Sys.UI.DomElement.containsCssClass(switcher, Common.AppSwitcher._switcherLoadingCssClass$p) && !Common.AppSwitcher._o365LoadingStopwatch) {
        Diag.ULS.sendTraceTag(7157248, 215, 50, 'O365 switcher not ready, showing loading text instead');
        Common.AFrameworkApplication.get_theActionManager().addActionWithFlags(Common.CommonCommands.o365SwitcherReady, Common.CommonContextIds.frame, Common.AppSwitcher._onO365SwitcherReadyHandler$p, 64);
        Common.AppSwitcher._o365LoadingStopwatch = Common.AFrameworkApplication.get_activeFrame().get_theStopwatchBuilder().makeAndStartStopwatch('LoadingUIShown', 'O365SwitcherLoadingUIShown');
    }
    Sys.UI.DomElement.removeCssClass(switcher, Common.AppSwitcher._switcherCloseAnimationClass$p);
    var top = Common.CuiHelper._unifiedHeaderHeight$i + 'px';
    window.setTimeout(function() {
        switcher.style.top = top;
    }, 0);
    window.setTimeout(function() {
        switcher.style.opacity = '1';
    }, 0);
    if (Common.FocusManager.usable()) {
        Common.AppSwitcher._pushScopeAndMoveIntoRegion$p();
    }
    else {
        var firstTile = document.getElementById('sw_Outlook');
        if (firstTile) {
            firstTile.focus();
        }
        Common.Debug.assertStringTag(false, 'SetupFocusRegionForSwitcher() called when focus manager is not usable.', 7157249);
    }
    Common.AppSwitcher._switcherTileMouseUpHandler = Common.AppSwitcher._restoreSwitcherTileVisuals$p;
    Diag.ULS.sendTraceTag(51196383, 207, 100, 'Register MouseUp event. _isMouseUpEventRegistered: {0}', Common.AppSwitcher._isMouseUpEventRegistered);
    if (!Common.AppSwitcher._isMouseUpEventRegistered) {
        Common.MouseInputManager.get_instance().registerHandler(Common.EventNames.mouseUp, document.body, Common.AppSwitcher._switcherTileMouseUpHandler);
        Common.AppSwitcher._isMouseUpEventRegistered = true;
    }
    Sys.UI.DomElement.addCssClass(switcher, Common.AppSwitcher._switcherActiveClass$p);
}
Common.AppSwitcher.closeSwitcher = function Common_AppSwitcher$closeSwitcher$st() {
    var switcher = document.getElementById(Common.AppSwitcher._switcherContainerId$p);
    var switcherBg = document.getElementById(Common.AppSwitcher._switcherBackgroundId$p);
    Common.Debug.assertTag(!!switcher, 7157250);
    Common.Debug.assertTag(!!switcherBg, 7157251);
    if (!Sys.UI.DomElement.containsCssClass(switcher, Common.AppSwitcher._switcherCloseAnimationClass$p)) {
        Sys.UI.DomElement.addCssClass(switcher, Common.AppSwitcher._switcherCloseAnimationClass$p);
    }
    switcher.style.top = '30px';
    switcher.style.opacity = '0';
    switcherBg.style.display = 'none';
    window.setTimeout(function() {
        switcher.style.display = 'none';
    }, 200);
    Common.FocusManager.instance().popScope(Common.AFrame.switcherFocusId, true);
    Common.AppSwitcher._unregisterSwitcherMouseUpEvent$p();
    Sys.UI.DomElement.removeCssClass(switcher, Common.AppSwitcher._switcherActiveClass$p);
}
Common.AppSwitcher.attachSwitcherEvents = function Common_AppSwitcher$attachSwitcherEvents$st(breadcrumbControls) {
    var switcherBar = document.getElementById(Common.AppSwitcher._switcherContainerId$p);
    var switcherBg = document.getElementById(Common.AppSwitcher._switcherBackgroundId$p);
    if (!switcherBar || !switcherBg) {
        return;
    }
    Common.ClickInputManager.get_instance().registerHandlerWithBrowserClickOption(Common.EventNames.click, switcherBar, Common.AppSwitcher._onSwitcherBackgroundClick$p, null, true);
    Common.ClickInputManager.get_instance().registerHandlerWithBrowserClickOption(Common.EventNames.click, switcherBg, Common.AppSwitcher._onSwitcherBackgroundClick$p, null, true);
    Array.add(breadcrumbControls.breadcrumbItems, switcherBar);
    Array.add(breadcrumbControls.breadcrumbItems, switcherBg);
}
Common.AppSwitcher._openSwitcherHandler$p = function Common_AppSwitcher$_openSwitcherHandler$p$st(actionId, context, behavior, reportingData, actionData) {
    if (Common.AFrameworkApplication.get_activeFrame().onBeforeOpenSwitcher()) {
        Common.AppSwitcher.openSwitcher();
    }
    return 32;
}
Common.AppSwitcher._onSwitcherBackgroundClick$p = function Common_AppSwitcher$_onSwitcherBackgroundClick$p$st(args) {
    Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.closeSwitcher, 2, null);
    return false;
}
Common.AppSwitcher._closeSwitcherHandler$p = function Common_AppSwitcher$_closeSwitcherHandler$p$st(actionId, context, behavior, reportingData, actionData) {
    if (Common.AFrameworkApplication.get_activeFrame().onBeforeCloseSwitcher()) {
        Common.AppSwitcher.closeSwitcher();
    }
    return 32;
}
Common.AppSwitcher._onSwitcherTileClick$p = function Common_AppSwitcher$_onSwitcherTileClick$p$st(args) {
    Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.switcherTileClick, 2, null);
    if (args.get_caughtElement()) {
        Diag.ULS.sendTraceTag(7157252, 207, 50, 'SwitcherTileClick {0}', { id: args.get_caughtElement().id, href: args.get_caughtElement().getAttribute('href') });
    }
    return false;
}
Common.AppSwitcher._onSwitcherTileMouseDown$p = function Common_AppSwitcher$_onSwitcherTileMouseDown$p$st(args) {
    if (args.get_caughtElement()) {
        Sys.UI.DomElement.addCssClass(args.get_caughtElement(), Common.AppSwitcher._switcherTilePressedClass$p);
    }
    return false;
}
Common.AppSwitcher._restoreSwitcherTileVisuals$p = function Common_AppSwitcher$_restoreSwitcherTileVisuals$p$st(args) {
    if (!Common.AppSwitcher._switcherTiles) {
        return false;
    }
    for (var $$arr_1 = Common.AppSwitcher._switcherTiles, $$len_2 = $$arr_1.length, $$idx_3 = 0; $$idx_3 < $$len_2; ++$$idx_3) {
        var tile = $$arr_1[$$idx_3];
        Sys.UI.DomElement.removeCssClass(tile, Common.AppSwitcher._switcherTilePressedClass$p);
    }
    return false;
}
Common.AppSwitcher._onSwitcherTileDragStart$p = function Common_AppSwitcher$_onSwitcherTileDragStart$p$st(args) {
    args.innerEvent.preventDefault();
    return false;
}
Common.AppSwitcher._initializeSwitcherActions$p = function Common_AppSwitcher$_initializeSwitcherActions$p$st() {
    if (Common.AppSwitcher._switcherInitialized) {
        return;
    }
    Common.AFrameworkApplication.get_theActionManager().addAction(Common.CommonCommands.openSwitcher, Common.CommonContextIds.frame, Common.AppSwitcher._openSwitcherHandler$p);
    Common.AFrameworkApplication.get_theActionManager().addAction(Common.CommonCommands.closeSwitcher, Common.CommonContextIds.frame, Common.AppSwitcher._closeSwitcherHandler$p);
    Common.AFrameworkApplication.get_theActionManager().addAction(Common.CommonCommands.switcherTileClick, Common.CommonContextIds.frame, Common.ActionManager.doNothingButReportHandler);
}
Common.AppSwitcher.attachSwitcherTileEvents = function Common_AppSwitcher$attachSwitcherTileEvents$st(breadcrumbControls) {
    var tilesContainer = document.getElementById(Common.AppSwitcher._switcherTilesContainerId$p);
    if (!tilesContainer) {
        return;
    }
    Common.AppSwitcher._switcherTiles = Common.DomUtils.getChildrenByClassName(tilesContainer, Common.AppSwitcher._switcherTileCssClassName$p);
    Common.AppSwitcher._switcherTileLinks = new Array(0);
    Common.Debug.assertStringTag(Common.AppSwitcher._switcherTiles.length > 0, 'Could not find any switcher tiles', 7157253);
    for (var $$arr_2 = Common.AppSwitcher._switcherTiles, $$len_3 = $$arr_2.length, $$idx_4 = 0; $$idx_4 < $$len_3; ++$$idx_4) {
        var tile = $$arr_2[$$idx_4];
        Common.MouseInputManager.get_instance().registerHandler(Common.EventNames.mouseDown, tile, Common.AppSwitcher._onSwitcherTileMouseDown$p);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.dragStart, tile, Common.AppSwitcher._onSwitcherTileDragStart$p);
        var tileLink = Common.DomUtils.getChildByClassName(tile, Common.AppSwitcher._switcherTileLinkCssClassName$p);
        Common.Debug.assertStringTag(!!tileLink, 'A switcher tile does not have a link as one of its child elements', 7157254);
        if (tileLink) {
            Common.ClickInputManager.get_instance().registerHandlerWithBrowserClickOption(Common.EventNames.click, tileLink, Common.AppSwitcher._onSwitcherTileClick$p, null, true);
            Array.add(Common.AppSwitcher._switcherTileLinks, tileLink);
        }
    }
}
Common.AppSwitcher._unregisterSwitcherMouseUpEvent$p = function Common_AppSwitcher$_unregisterSwitcherMouseUpEvent$p$st() {
    if (Common.AppSwitcher._switcherTileMouseUpHandler) {
        Diag.ULS.sendTraceTag(51196384, 207, 100, 'Unregister MouseUp event. _isMouseUpEventRegistered: {0}', Common.AppSwitcher._isMouseUpEventRegistered);
        if (Common.AppSwitcher._isMouseUpEventRegistered) {
            Common.MouseInputManager.get_instance().unregisterHandler(Common.EventNames.mouseUp, document.body, Common.AppSwitcher._switcherTileMouseUpHandler);
            Common.AppSwitcher._isMouseUpEventRegistered = false;
        }
    }
    Common.AppSwitcher._switcherTileMouseUpHandler = null;
}
Common.AppSwitcher._setupFocusRegionForSwitcher$i = function Common_AppSwitcher$_setupFocusRegionForSwitcher$i$st() {
    if (Common.AppSwitcher._switcherInitialized) {
        return;
    }
    var focusManager = Common.FocusManager.instance();
    var switcherScope = focusManager.getScope(Common.AFrame.switcherFocusId);
    switcherScope.parent = Common.AFrame.appFocusId;
    var listing = new Common.DOMFocusListing(function() {
        return document.getElementById(Common.AppSwitcher._switcherContainerId$p);
    });
    listing.addValidTag(Common.DOMTag.a);
    listing.rememberFirstElement = true;
    listing.rememberLastElement = true;
    switcherScope.bindAction(Common.KeyInputManager.hashKey(Common.KeyCode.vK_Esc, 0), Common.CommonCommands.closeSwitcher);
    var region = focusManager.buildRegionWithDelegate(function() {
        return document.getElementById(Common.AppSwitcher._switcherContainerId$p);
    }, switcherScope, listing);
    region.looped = true;
    Common.AppSwitcher._switcherInitialized = true;
}
Common.AppSwitcher._disposeSwitcher$i = function Common_AppSwitcher$_disposeSwitcher$i$st() {
    if (Common.AppSwitcher._switcherTiles) {
        Common.EventHandlerManager.get_instance().unregisterAllHandlersForDOMArray(Common.AppSwitcher._switcherTiles);
    }
    if (Common.AppSwitcher._switcherTileLinks) {
        Common.EventHandlerManager.get_instance().unregisterAllHandlersForDOMArray(Common.AppSwitcher._switcherTileLinks);
    }
    Common.AppSwitcher._unregisterSwitcherMouseUpEvent$p();
}


Common.BreadcrumbContainer = function Common_BreadcrumbContainer() {
    Common.BreadcrumbContainer.initializeBase(this);
    this.set_elmContainer(Common.ViewerChrome.createUnselectableElement('span'));
    this.get_elmContainer().className = 'cui-herobar-breadcrumbContainer';
    this.get_elmContainer().id = 'viewerChrome-breadcrumbContainer';
    if (Common.AFrameworkApplication.hideHeader) {
        Common.CuiHelper.createAppBrandElement(this.get_elmContainer());
        if (Common.AFrameworkApplication.breadcrumbBrandName || Common.AFrameworkApplication.breadcrumbFolderName) {
            Common.CuiHelper.createAppBrandSeparatorElement(this.get_elmContainer());
        }
    }
    this._breadcrumbItems$2 = Common.CuiHelper.createHostBrandAndFolderElements(this.get_elmContainer(), Common.CuiHelper.breadcrumbAlternateSeparatorImageName);
}
Common.BreadcrumbContainer._calculateBreadcrumbFolderNameMaxWidth$i = function Common_BreadcrumbContainer$_calculateBreadcrumbFolderNameMaxWidth$i$st(containerWidth, folderNameWidth, desiredTrimmedWidth) {
    var amountToTrimFromFolderName = containerWidth - desiredTrimmedWidth;
    return folderNameWidth - amountToTrimFromFolderName;
}
Common.BreadcrumbContainer.prototype = {
    _breadcrumbItems$2: null,
    
    getBreadcrumbItem: function Common_BreadcrumbContainer$getBreadcrumbItem$in(id) {
        if (!this._breadcrumbItems$2) {
            return null;
        }
        for (var i = 0; i < this._breadcrumbItems$2.length; i++) {
            if (this._breadcrumbItems$2[i].id === id) {
                return this._breadcrumbItems$2[i];
            }
        }
        return null;
    },
    
    truncateWidth: function Common_BreadcrumbContainer$truncateWidth$in(width) {
        this._elementToTruncate = this.getBreadcrumbItem(Common.CuiHelper.breadcrumbFolderId);
        if (!this._elementToTruncate) {
            return;
        }
        var folderNameMaxWidth = Common.BreadcrumbContainer._calculateBreadcrumbFolderNameMaxWidth$i(this.get_elmContainer().offsetWidth, this._elementToTruncate.offsetWidth, width);
        if (folderNameMaxWidth > 0) {
            Common.ScalableViewerChromeItemContainer.prototype.truncateWidth.call(this, folderNameMaxWidth);
        }
    },
    
    dispose: function Common_BreadcrumbContainer$dispose$in() {
        Common.EventHandlerManager.get_instance().unregisterAllHandlersForDOMArray(this._breadcrumbItems$2);
    }
}


Common.KeyPressInfo = function Common_KeyPressInfo() {
}
Common.KeyPressInfo.prototype = {
    ctrlKey: false,
    altKey: false,
    shiftKey: false,
    metaKey: false,
    key: null
}


Common.ChatManager = function Common_ChatManager(reactSharedHeaderFocusManager) {
    this.$$d__transferFocusToChat$p$0 = Function.createDelegate(this, this._transferFocusToChat$p$0);
    this.$$d__onChatKeyPress$p$0 = Function.createDelegate(this, this._onChatKeyPress$p$0);
    this.$$d__chatCountChanged$p$0 = Function.createDelegate(this, this._chatCountChanged$p$0);
    this.$$d__onChatContainerReady$p$0 = Function.createDelegate(this, this._onChatContainerReady$p$0);
    this.$$d__registerActionsInternal$p$0 = Function.createDelegate(this, this._registerActionsInternal$p$0);
    this._reactSharedHeaderFocusManager$0 = reactSharedHeaderFocusManager;
}
Common.ChatManager.prototype = {
    
    get__chat$p$0: function Common_ChatManager$get__chat$p$0$in() {
        return window.swc;
    },
    
    get__isInitialized$p$0: function Common_ChatManager$get__isInitialized$p$0$in() {
        return !!this.get__chat$p$0();
    },
    
    _reactSharedHeaderFocusManager$0: null,
    _previousNumberOfChats$0: 0,
    _chatContainerId$0: null,
    
    get__sharedHeaderFocusManager$p$0: function Common_ChatManager$get__sharedHeaderFocusManager$p$0$in() {
        return this._reactSharedHeaderFocusManager$0.get_value();
    },
    
    registerActions: function Common_ChatManager$registerActions$in() {
        if (this.get__isInitialized$p$0()) {
            this._registerActionsInternal$p$0();
        }
        else {
            this._registerOnChatReady$p$0(this.$$d__registerActionsInternal$p$0);
        }
    },
    
    _registerActionsInternal$p$0: function Common_ChatManager$_registerActionsInternal$p$0$in() {
        Diag.ULS.sendTraceTag(50595938, 333, 50, 'Registering for chat events');
        try {
            if (this.get__isInitialized$p$0()) {
                var $$t_M = this, $$t_N = this;
                this.get__chat$p$0().getContainerProvider().then(function(chatContainerProxy) {
                    chatContainerProxy.getChatsContainer($$t_M.$$d__onChatContainerReady$p$0);
                }).catch(function(e) {
                    Diag.ULS.sendTraceTag(50960143, 333, 10, 'Failed to register for chat container {0}', e);
                });
                var $$t_O = this, $$t_P = this;
                this.get__chat$p$0().getChatsCounter().then(function(chatCounterProxy) {
                    chatCounterProxy.onChatsCountChange($$t_O.$$d__chatCountChanged$p$0);
                }).catch(function(e) {
                    Diag.ULS.sendTraceTag(50595939, 333, 10, 'Failed to register chat counter callback {0}', e);
                });
                var $$t_Q = this, $$t_R = this;
                this.get__chat$p$0().getKeyboard().then(function(chatKeyboardProxy) {
                    chatKeyboardProxy.onKeyDown($$t_Q.$$d__onChatKeyPress$p$0);
                }).catch(function(e) {
                    Diag.ULS.sendTraceTag(50595968, 333, 10, 'Failed to register chat ctrlF6 callback {0}', e);
                });
            }
        }
        catch (e) {
            Diag.ULS.sendTraceTag(50595969, 333, 10, 'Failed to register chat events: {0}', e);
        }
    },
    
    _chatCountChanged$p$0: function Common_ChatManager$_chatCountChanged$p$0$in(numberOfChats) {
        Diag.ULS.sendTraceTag(50595970, 333, 50, 'Chat count:{0}', numberOfChats);
        if (!numberOfChats) {
            this.get__sharedHeaderFocusManager$p$0().onChatClose();
        }
        else if (numberOfChats === 1 && !this._previousNumberOfChats$0) {
            var chatParent = document.getElementById((!this._chatContainerId$0) ? Common.ReactSharedHeaderConstants.chatFocusId : this._chatContainerId$0);
            if (chatParent) {
                this.get__sharedHeaderFocusManager$p$0().onChatOpen(chatParent, this.$$d__transferFocusToChat$p$0);
            }
            else {
                Diag.ULS.sendTraceTag(50595971, 333, 10, 'Chat parent is null');
            }
        }
        this._previousNumberOfChats$0 = numberOfChats;
    },
    
    _onChatContainerReady$p$0: function Common_ChatManager$_onChatContainerReady$p$0$in(chatContainerId) {
        this._chatContainerId$0 = chatContainerId;
    },
    
    _onChatKeyPress$p$0: function Common_ChatManager$_onChatKeyPress$p$0$in(keyPressInfo) {
        if (keyPressInfo.ctrlKey && keyPressInfo.key.toLowerCase() === 'f6') {
            this._transferFocusFromChat$p$0(keyPressInfo.shiftKey);
        }
    },
    
    _registerOnChatReady$p$0: function Common_ChatManager$_registerOnChatReady$p$0$in(callback) {
        var $$t_3 = this;
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.swcReady, window.self, function(a) {
            callback();
            return true;
        });
    },
    
    _transferFocusToChat$p$0: function Common_ChatManager$_transferFocusToChat$p$0$in() {
        Diag.ULS.sendTraceTag(50595972, 333, 50, 'Transferring focus to chat');
        try {
            if (this.get__isInitialized$p$0()) {
                var $$t_E = this, $$t_F = this;
                this.get__chat$p$0().getFocuser().then(function(chatFocusProxy) {
                    chatFocusProxy.focusConversationInput();
                }).catch(function(e) {
                    Diag.ULS.sendTraceTag(50595973, 333, 10, 'Failed to transfer focus to chat: {0}', e);
                });
            }
        }
        catch (e) {
            Diag.ULS.sendTraceTag(50595974, 333, 10, 'Failed to transfer focus to chat: {0}', e);
        }
    },
    
    _transferFocusFromChat$p$0: function Common_ChatManager$_transferFocusFromChat$p$0$in(isShiftPressed) {
        Diag.ULS.sendTraceTag(50595975, 333, 50, 'Transferring focus from chat');
        this.get__sharedHeaderFocusManager$p$0().onChatCtrlF6(isShiftPressed);
    }
}


Common._commonAppHeaderPackage = function Common__commonAppHeaderPackage() {
}
Common._commonAppHeaderPackage.main = function Common__commonAppHeaderPackage$main$st() {
    Common.App.PackageLifecycleManager.get_instance().registerPackage(new Common._commonAppHeaderPackage(), 0, false);
}
Common._commonAppHeaderPackage.prototype = {
    _container$0: null,
    
    get_name: function Common__commonAppHeaderPackage$get_name$in() {
        return 'Common.App.Header';
    },
    
    init: function Common__commonAppHeaderPackage$init$in() {
        var upsellActor = Common.Utils.Container.get_instance().resolve(Common.IUpsellActor, '');
        upsellActor.registerActions();
        var chatManager = Common.Utils.Container.get_instance().resolve(Common.IChatManager, '');
        chatManager.registerActions();
    },
    
    dispose: function Common__commonAppHeaderPackage$dispose$in() {
    },
    
    configure: function Common__commonAppHeaderPackage$configure$in(container) {
        this._container$0 = container;
        this._container$0.register(Common.HeaderEventSource, '').singleInstance();
        var $$t_1 = this;
        this._container$0.register(Common.UpsellActor, '').as(Common.IUpsellActor, '').singleInstance().usingFactory(function() {
            return new Common.UpsellActor(Common.AFrameworkApplication.get_theActionManager());
        });
        var $$t_2 = this;
        this._container$0.register(Common.ReactSharedHeaderFocusManager, '').as(Common.IReactSharedHeaderFocusManager, '').singleInstance().usingFactory(function() {
            return new Common.ReactSharedHeaderFocusManager(Common.AFrameworkApplication.get_activeFrame().get_theFocusManager(), Common.AFrameworkApplication.get_activeFrame().get_theF6Manager(), Common.AFrameworkApplication.get_activeFrame().get_theMouseInputManager(), Common.AFrameworkApplication.get_activeFrame().get_theTouchInputManager(), Common.AFrameworkApplication.get_theActionManager());
        });
        var $$t_3 = this;
        this._container$0.register(Common.ChatManager, '').as(Common.IChatManager, '').singleInstance().usingFactory(function() {
            return new Common.ChatManager($$t_3._container$0.resolveLazy(Common.IReactSharedHeaderFocusManager, ''));
        });
    }
}


Common.CuiHelper = function Common_CuiHelper(imagePath, stringClass, actionManager, stringResource, additionalStringClasses) {
    this._imagePath$0 = imagePath;
    this._intlStringClasses$0 = Common.ArrayUtils.mergeWithOptionalArray(Type, stringClass, additionalStringClasses);
    this._intlStringClasses$0.push(CommonUIStrings);
    this._isOfficePresentationAttendeeMode$0 = Common.HeaderUtils.isOfficePresentationAttendeeMode();
    Common.CuiHelper._actionManager = (isNullOrUndefined(actionManager)) ? Common.AFrameworkApplication.get_theActionManager() : actionManager;
    if (isNullOrUndefined(stringResource)) {
        this._buildHeaderStringsDictionary$p$0();
    }
    else {
        Common.CuiHelper._headerStrings = stringResource;
    }
    Common.CuiHelper._officeOnlineBrandWidth = Common.AFrameworkApplication.get_unifiedHeaderOfficeOnlineLogoWidth();
    Common.CuiHelper._officeOnlineBrandHeight = Common.CuiHelper._unifiedHeaderHeight$i;
}
Common.CuiHelper.get__headerEventSource$p = function Common_CuiHelper$get__headerEventSource$p$st() {
    return Common.CuiHelper._headerEventSource || (Common.CuiHelper._headerEventSource = Common.Utils.Container.get_instance().resolve(Common.HeaderEventSource, ''));
}
Common.CuiHelper.registerOnClickBreadcrumbLink = function Common_CuiHelper$registerOnClickBreadcrumbLink$st(onBreadcrumbItemClick) {
    Common.CuiHelper._breadcrumbLinkClickHandler = onBreadcrumbItemClick;
}
Common.CuiHelper._getNodeAttributes$p = function Common_CuiHelper$_getNodeAttributes$p$st(data) {
    return data.attrs;
}
Common.CuiHelper._getNodeChildren$p = function Common_CuiHelper$_getNodeChildren$p$st(data) {
    var arr = data.children;
    if (isNullOrUndefined(arr)) {
        return Common.CuiHelper.get__emptyArray$p();
    }
    return arr;
}
Common.CuiHelper.get__emptyArray$p = function Common_CuiHelper$get__emptyArray$p$st() {
    if (isNullOrUndefined(Common.CuiHelper._s_emptyArray$p)) {
        Common.CuiHelper._s_emptyArray$p = [];
    }
    return Common.CuiHelper._s_emptyArray$p;
}
Common.CuiHelper.getPeoplesWellDefaultControlSettings = function Common_CuiHelper$getPeoplesWellDefaultControlSettings$st(imageSingleUserCollabGlyph_16x16x32_ClusterPath, imageSingleUserCollabGlyph_16x16x32_CssName, imageSingleUserCollabGlyph_32x32x32_ClusterPath, imageSingleUserCollabGlyph_32x32x32_CssName, imageMultipleUserCollabGlyph_16x16x32_ClusterPath, imageMultipleUserCollabGlyph_16x16x32_CssName, imageGroupChatButtonGlyph_32x32x32_ClusterPath, imageGroupChatButtonGlyph_32x32x32_CssName) {
    var settings = new Common.PeoplesWellBaseSettings(Common.CuiHelper.peoplesWellControlId, Common.CommonCommands.coauthoringCommand, Common.CommonCommands.coauthoringQueryStatus, Common.CommonCommands.coauthoringPopulateFlyout, Common.CommonCommands.coauthoringCommandMenuOpen, Common.CommonCommands.coauthoringCommandMenuClose, Common.CommonCommands.coauthoringUserButtonClick, Common.CommonCommands.coauthoringRefreshControl, imageSingleUserCollabGlyph_16x16x32_ClusterPath, imageSingleUserCollabGlyph_16x16x32_CssName, imageSingleUserCollabGlyph_32x32x32_ClusterPath, imageSingleUserCollabGlyph_32x32x32_CssName, imageMultipleUserCollabGlyph_16x16x32_ClusterPath, imageMultipleUserCollabGlyph_16x16x32_CssName, imageGroupChatButtonGlyph_32x32x32_ClusterPath, imageGroupChatButtonGlyph_32x32x32_CssName);
    return settings;
}
Common.CuiHelper.addFeedbackButton = function Common_CuiHelper$addFeedbackButton$st(giveFeedbackButton, standaloneRootControlManager, bottomRowRightContainer) {
    Common.Debug.assertImpliesTag(!!giveFeedbackButton, !!standaloneRootControlManager, 4985363);
    if ((giveFeedbackButton) && (standaloneRootControlManager)) {
        var giveFeedbackButtonXml = Common.CuiXmlUtils.buildButtonXml(Common.CuiHelper.feedbackButtonId, giveFeedbackButton.command, giveFeedbackButton.label, null);
        var giveFeedbackButtonControl = standaloneRootControlManager.hostControl(Common.CuiHelper.feedbackButtonId, giveFeedbackButtonXml, 'Medium');
        if (giveFeedbackButtonControl && bottomRowRightContainer) {
            Sys.UI.DomElement.addCssClass(giveFeedbackButtonControl, 'UITextTranformUpperCase');
            Sys.UI.DomElement.addCssClass(giveFeedbackButtonControl, 'GiveFeedbackControl');
            bottomRowRightContainer.appendChild(giveFeedbackButtonControl);
        }
    }
}
Common.CuiHelper._createPeopleWellControl$p = function Common_CuiHelper$_createPeopleWellControl$p$st(peoplesWellControlSettings, standaloneRootControlManager, bottomRowRightContainer) {
    Common.Debug.assertImpliesTag(!!peoplesWellControlSettings, !!standaloneRootControlManager, 4985364);
    if ((peoplesWellControlSettings) && (standaloneRootControlManager)) {
        var peoplesWellControlXml = Common.CuiXmlUtils.generatePeoplesWellControlXml(peoplesWellControlSettings);
        var peoplesWellControl = standaloneRootControlManager.hostControl(peoplesWellControlSettings.get_id(), peoplesWellControlXml, 'Medium');
        if (peoplesWellControl) {
            var isColorPresenceHashEnabled = false;
            if (Common.AFrameworkApplication.appSettingsManager) {
                isColorPresenceHashEnabled = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ColorPresenceHashIsEnabled');
            }
            if (isColorPresenceHashEnabled) {
                Sys.UI.DomElement.addCssClass(peoplesWellControl, 'PeoplesWellControl2');
            }
            else {
                Sys.UI.DomElement.addCssClass(peoplesWellControl, 'PeoplesWellControl');
            }
            bottomRowRightContainer.appendChild(peoplesWellControl);
        }
    }
}
Common.CuiHelper._createDocChatButton$p = function Common_CuiHelper$_createDocChatButton$p$st(standaloneRootControlManager, bottomRowRightContainer) {
    var chatButtonXml;
    var chatButtonSettings = Common.ChatButtonSettings.swxDocChatSettings;
    Common.Debug.assertImpliesTag(!!chatButtonSettings, !!standaloneRootControlManager, 9246816);
    var docChatIsEnabled = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('DocChatIsEnabled');
    var basicChatIsEnabled = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('BasicChatIsEnabled');
    var supportsAnonymousChatOnly = !basicChatIsEnabled && docChatIsEnabled;
    if (docChatIsEnabled && chatButtonSettings && standaloneRootControlManager) {
        if (supportsAnonymousChatOnly) {
            chatButtonXml = Common.CuiXmlUtils.buildToggleButtonXml(chatButtonSettings.id, chatButtonSettings.id, chatButtonSettings.togglePaneActionId.toString(), chatButtonSettings.queryStatusActionId.toString(), CommonUIStrings.l_DocChatButtonLabel, CommonUIStrings.l_DocChatButtonTooltip, chatButtonSettings.imageName, false, '', false, '');
        }
        else {
            chatButtonXml = Common.CuiXmlUtils.buildButtonXml(chatButtonSettings.id, chatButtonSettings.togglePaneActionId.toString(), CommonUIStrings.l_DocChatButtonLabel, chatButtonSettings.imageName, chatButtonSettings.id, null, CommonUIStrings.l_DocChatButtonTooltip, 'Medium', null, chatButtonSettings.queryStatusActionId.toString(), '', '', '', false, '', '', '', '', '', '');
        }
        if (standaloneRootControlManager.addControl(chatButtonSettings.id, chatButtonXml)) {
            Common.CuiHelper._addDocChatButtonToContainer$p(bottomRowRightContainer, standaloneRootControlManager.getDOMElementForControlDisplayMode(chatButtonSettings.id, 'Medium'));
        }
    }
}
Common.CuiHelper._getTopRightSkypeButtonInfo$p = function Common_CuiHelper$_getTopRightSkypeButtonInfo$p$st() {
    var topRightSkypeButtonInfo = null;
    var chatExperience = Common.AFrameworkApplication.appSettingsManager.getIntAppSetting('SkypeExperience', 0);
    var image = (chatExperience === 1) ? Common.CuiHelper.skypeConsumerButtonWhite : Common.CuiHelper.skypeBusinessButtonWhite;
    if (Common.CuiHelper._isTransistionalHeaderUIEnabled$p()) {
        image = Common.CuiHelper.skypeNewHeaderButton;
    }
    var $$t_3;
    topRightSkypeButtonInfo = ($$t_3 = new Common.SkypeButtonInfo(), $$t_3.label = CommonUIStrings.l_SkypeTooltip, $$t_3.command = '3476734992', $$t_3.image = image, $$t_3.id = Common.CuiHelper.skypeButtonPrefixId, $$t_3.swxExperience = chatExperience, $$t_3);
    return topRightSkypeButtonInfo;
}
Common.CuiHelper._addDocChatButtonToContainer$p = function Common_CuiHelper$_addDocChatButtonToContainer$p$st(bottomRowRightContainer, chatButton) {
    if (chatButton) {
        chatButton.style.display = 'none';
        bottomRowRightContainer.appendChild(chatButton);
    }
}
Common.CuiHelper.disposeTopRowControls = function Common_CuiHelper$disposeTopRowControls$st(controls) {
    if (controls.breadcrumb) {
        Common.CuiHelper._disposeTopLeftControls$p(controls.breadcrumb);
        controls.breadcrumb = null;
    }
    if (controls.titleSection) {
        Common.CuiHelper.disposeTitleElement();
        controls.titleSection = null;
    }
    if (controls.userControl) {
        Common.CuiHelper._disposeUserControl$p(controls.userControl);
        controls.userControl = null;
    }
    Common.AppSwitcher._disposeSwitcher$i();
    Common.CuiHelper.get__headerEventSource$p().raiseOnTopRowControlsDisposingEvent();
    var appExternalHeader;
    var $$t_2, $$t_3;
    if (($$t_3 = Common.CuiHeaderDomReference.tryEnsuredHeaderPanelInitialized(($$t_2 = {'val': appExternalHeader}), false, false)), appExternalHeader = $$t_2.val, $$t_3) {
        Common.DomUtils.clearElementHtml(appExternalHeader);
        Common.CuiHelper.skypeButtonId = Common.CuiHelper.secondSkypeButtonId = null;
    }
}
Common.CuiHelper.createDocumentTitleElement = function Common_CuiHelper$createDocumentTitleElement$st(container) {
    return Common.CuiHelper._createDocumentTitleElementInternal$i(container, Common.AFrameworkApplication.isRenameSupported());
}
Common.CuiHelper._createDocumentTitleElementInternal$i = function Common_CuiHelper$_createDocumentTitleElementInternal$i$st(container, isRenameSupported) {
    var displayName = Common.AFrameworkApplication.docPropertiesProvider.get_breadcrumbDocName();
    if (!Common.AFrameworkApplication.get_documentIsFolder()) {
        displayName = Common.StringUtils.getFileNameWithoutExtension(displayName);
    }
    var documentTitleElement = Common.CuiHelper.createBreadcrumbItem(container, Common.CuiHelper.breadcrumbTitleId, displayName, null, isRenameSupported);
    if (isRenameSupported) {
        Common.AFrameworkApplication.documentTitleInputElement = documentTitleElement;
    }
    return documentTitleElement;
}
Common.CuiHelper.createEmptyHeaderAndToolbar = function Common_CuiHelper$createEmptyHeaderAndToolbar$st(hideHeader) {
    var elmCuiToolbar = document.createElement('div');
    elmCuiToolbar.className = 'cui-viewerchrome';
    var elmHeaderContainer;
    var elmCuiRibbonTopBars;
    var $$t_6, $$t_7;
    Common.CuiHelper._ensureTopBars$p(elmCuiToolbar, ($$t_6 = {'val': elmHeaderContainer}), ($$t_7 = {'val': elmCuiRibbonTopBars})), elmHeaderContainer = $$t_6.val, elmCuiRibbonTopBars = $$t_7.val;
    var elmCuiTopBar1;
    var elmCuiTopBar2;
    var $$t_8, $$t_9;
    Common.CuiHelper._ensureTopBars1And2$p(hideHeader, elmHeaderContainer, elmCuiRibbonTopBars, ($$t_8 = {'val': elmCuiTopBar1}), ($$t_9 = {'val': elmCuiTopBar2})), elmCuiTopBar1 = $$t_8.val, elmCuiTopBar2 = $$t_9.val;
    elmCuiToolbar.appendChild(elmCuiRibbonTopBars);
    return elmCuiToolbar;
}
Common.CuiHelper._ensureTopBars$p = function Common_CuiHelper$_ensureTopBars$p$st(elmCuiToolbar, elmHeaderContainer, elmCuiRibbonTopBars) {
    elmCuiRibbonTopBars.val = document.createElement('div');
    elmCuiRibbonTopBars.val.className = 'cui-ribbonTopBars';
    var appExternalHeaderPanel;
    var $$t_4, $$t_5;
    if (($$t_5 = Common.CuiHeaderDomReference.tryEnsuredHeaderPanelInitialized(($$t_4 = {'val': appExternalHeaderPanel}), true, false)), appExternalHeaderPanel = $$t_4.val, $$t_5) {
        elmHeaderContainer.val = document.createElement('div');
        elmHeaderContainer.val.id = Common.CuiHelper._emptyHeaderTopBarsId$p;
        elmHeaderContainer.val.className = 'cui-viewerchrome cui-ribbonTopBars empty';
        appExternalHeaderPanel.appendChild(elmHeaderContainer.val);
        Sys.UI.DomElement.addCssClass(elmCuiToolbar, 'cui-exth');
    }
    else {
        elmHeaderContainer.val = elmCuiRibbonTopBars.val;
    }
}
Common.CuiHelper._ensureTopBars1And2$p = function Common_CuiHelper$_ensureTopBars1And2$p$st(hideHeader, elmHeaderContainer, elmCuiRibbonTopBars, elmCuiTopBar1, elmCuiTopBar2) {
    elmCuiTopBar1.val = document.createElement('div');
    elmCuiTopBar1.val.className = 'cui-topBar1';
    if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('LegacyHeaderAppColorIsEnabled')) {
        elmCuiTopBar1.val.className += ' cui-topBar1-transistionalHeaderUI';
    }
    if (hideHeader) {
        elmCuiTopBar1.val.style.display = 'none';
    }
    elmHeaderContainer.appendChild(elmCuiTopBar1.val);
    elmCuiTopBar2.val = document.createElement('div');
    elmCuiTopBar2.val.className = 'cui-topBar2';
    elmCuiRibbonTopBars.appendChild(elmCuiTopBar2.val);
    if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('AppColorUpdateIsEnabled')) {
        elmCuiTopBar1.val.className += ' cui-color-update';
    }
}
Common.CuiHelper.disposeEmptyHeaderAndToolbar = function Common_CuiHelper$disposeEmptyHeaderAndToolbar$st(elmCuiToolbar) {
    Common.DomUtils.removeElement(elmCuiToolbar);
    var emptyHeaderContainer = document.getElementById(Common.CuiHelper._emptyHeaderTopBarsId$p);
    if (emptyHeaderContainer) {
        Common.DomUtils.removeElement(emptyHeaderContainer);
    }
}
Common.CuiHelper.initializeRenameUIHandler = function Common_CuiHelper$initializeRenameUIHandler$st() {
    Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.initializeRenameUIHandler, 2, null);
}
Common.CuiHelper.disposeTitleElement = function Common_CuiHelper$disposeTitleElement$st() {
    if (Common.AFrameworkApplication.documentTitleInputElement) {
        Common.EventHandlerManager.get_instance().unregisterAllHandlers(Common.AFrameworkApplication.documentTitleInputElement);
    }
}
Common.CuiHelper.addPrintButton = function Common_CuiHelper$addPrintButton$st(printButtonInfo, container, standaloneRootControlManager) {
    Common.Debug.assertImpliesTag(!!printButtonInfo, !!standaloneRootControlManager, 4863248);
    if (printButtonInfo && standaloneRootControlManager) {
        Common.CuiHelper.addButton(Common.CuiHelper.printButtonId, printButtonInfo.command, printButtonInfo.label, null, CommonUIStrings.l_PrintKeytip, 'Medium', container, standaloneRootControlManager);
    }
}
Common.CuiHelper.addTellMeSearchBox = function Common_CuiHelper$addTellMeSearchBox$st(tellMeSearchBoxInfo, container, standaloneRootControlManager) {
    Common.Debug.assertImpliesTag(!!tellMeSearchBoxInfo, !!standaloneRootControlManager, 4863249);
    Common.Debug.assertTag(!!container, 4863252);
    if (!tellMeSearchBoxInfo || !standaloneRootControlManager) {
        return;
    }
    var xml = Common.CuiHelper._buildSearchBoxXml$p(Common.CuiHelper.tellMeSearchBoxId, tellMeSearchBoxInfo.accessibilityTextCommand, tellMeSearchBoxInfo.command, tellMeSearchBoxInfo.commandMenuClose, tellMeSearchBoxInfo.commandMenuOpen, tellMeSearchBoxInfo.menuControlExecutedCommand, tellMeSearchBoxInfo.onInteractionBegin, tellMeSearchBoxInfo.onRestoreFocus, tellMeSearchBoxInfo.onInputBoxFocus, tellMeSearchBoxInfo.onInputBoxBlur, tellMeSearchBoxInfo.populateQueryCommand, tellMeSearchBoxInfo.populateAsyncTriggerCommand, true, false, tellMeSearchBoxInfo.altText, tellMeSearchBoxInfo.placeHolderText, tellMeSearchBoxInfo.keytip, '182px', Common.AFrameworkApplication.get_imageClusterPath(), Common.ImageClusteringHelper.getImageClass(Common.CuiHelper._tellMeSearchBoxImg), Common.ImageClusteringHelper.getImageClass(Common.CuiHelper._tellMeSearchBoxImgLight), Common.ImageClusteringHelper.getImageClass(Common.CuiHelper._tellMeSearchBoxImgDark));
    var tellMeSearchBox = standaloneRootControlManager.hostControl(Common.CuiHelper.tellMeSearchBoxId, xml, 'Medium');
    Sys.UI.DomElement.addCssClass(tellMeSearchBox, Common.CuiHelper.tellMeSearchBoxClass);
    if (tellMeSearchBox) {
        if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('OcpsIsEnabled')) {
            Common.CuiHelper._hideTellMeSearchBoxOnlyTillFeatureIsEnabled$p(tellMeSearchBox, container);
        }
        container.appendChild(tellMeSearchBox);
    }
}
Common.CuiHelper._hideTellMeSearchBoxOnlyTillFeatureIsEnabled$p = function Common_CuiHelper$_hideTellMeSearchBoxOnlyTillFeatureIsEnabled$p$st(tellMeSearchBox, container) {
    var children = tellMeSearchBox.childNodes;
    for (var i = 0; i < children.length; i++) {
        children[i].style.display = 'none';
    }
    Common.Utils.Container.get_instance().resolveFuture(Common.App.ApplicationFeatureHelper.IApplicationFeatureHelper, '').execute(function(applicationFeatureHelper) {
        applicationFeatureHelper.isFeatureEnabled('ConnectedServices', true).then(function(isEnabled) {
            if (isEnabled) {
                for (var i = 0; i < children.length; i++) {
                    children[i].style.display = '';
                }
            }
            return null;
        });
    });
}
Common.CuiHelper.addOpenInClientButton = function Common_CuiHelper$addOpenInClientButton$st(openInClientButtonInfo, container, standaloneRootControlManager) {
    Common.Debug.assertImpliesTag(!!openInClientButtonInfo, !!standaloneRootControlManager, 4863250);
    if (openInClientButtonInfo && standaloneRootControlManager) {
        var openInClientButton = Common.CuiHelper.addButton(Common.CuiHelper.openInClientButtonId, openInClientButtonInfo.command, openInClientButtonInfo.label, null, CommonUIStrings.l_OpenInClientKeytip, 'Medium', container, standaloneRootControlManager);
        Sys.UI.DomElement.addCssClass(openInClientButton, Common.CuiHelper.openInClientButtonClass);
    }
}
Common.CuiHelper._buildSearchBoxXml$p = function Common_CuiHelper$_buildSearchBoxXml$p$st(id, accessibilityTextCommand, command, commandMenuClose, commandMenuOpen, menuControlExecutedCommand, interactionBeginCommand, restoreFocusCommand, inputBoxFocusCommand, inputBoxBlurCommand, populateQueryCommand, populateAsyncTriggerCommand, populateDynamically, populateOnlyOnce, altText, placeHolderText, keytip, width, imageClusterPath, imageCssName, lightImageCssName, darkImageCssName) {
    var attributes = { Id: id, AccessibilityTextCommand: accessibilityTextCommand, Command: command, CommandMenuClose: commandMenuClose, CommandMenuOpen: commandMenuOpen, MenuControlExecutedCommand: menuControlExecutedCommand, InteractionBeginCommand: interactionBeginCommand, RestoreFocusCommand: restoreFocusCommand, InputBoxFocusCommand: inputBoxFocusCommand, InputBoxBlurCommand: inputBoxBlurCommand, PopulateQueryCommand: populateQueryCommand, PopulateAsyncTriggerCommand: populateAsyncTriggerCommand, PopulateDynamically: populateDynamically, PopulateOnlyOnce: populateOnlyOnce, Alt: altText, PlaceholderText: placeHolderText, Keytip: keytip, Width: width, Image16by16: imageClusterPath, Image16by16Class: imageCssName, LightImage16by16Class: lightImageCssName, DarkImage16by16Class: darkImageCssName };
    var xml = '<SearchBox ';
    var $$dict_P = attributes;
    for (var $$key_Q in $$dict_P) {
        var item = { key: $$key_Q, value: $$dict_P[$$key_Q] };
        if (item.value) {
            xml += item.key + '=\"' + Common.StringUtils.xmlEncode(item.value.toString()) + '\" ';
        }
    }
    return xml + '/>';
}
Common.CuiHelper.addSeparator = function Common_CuiHelper$addSeparator$st(container, standaloneRootControlManager) {
    if (!standaloneRootControlManager) {
        return;
    }
    var xml = Common.CuiXmlUtils.buildSeparatorXml(Common.CuiHelper._bottomRowCenterButtonSeparatorId$p);
    var separator = standaloneRootControlManager.hostControl(Common.CuiHelper._bottomRowCenterButtonSeparatorId$p, xml, 'Small');
    if (separator) {
        container.appendChild(separator);
    }
}
Common.CuiHelper.addButton = function Common_CuiHelper$addButton$st(id, command, label, image, keytip, displayMode, container, standaloneRootControlManager) {
    var xml = Common.CuiXmlUtils.buildButtonXml(id, command, label, image, null, null, null, displayMode, null, null, '', '', keytip, true, '', '', '', '', '', '');
    var button = standaloneRootControlManager.hostControl(id, xml, displayMode);
    if (button) {
        container.appendChild(button);
    }
    return button;
}
Common.CuiHelper._addToggleButton$p = function Common_CuiHelper$_addToggleButton$p$st(id, command, queryCommand, label, image, keytip, displayMode, container, standaloneRootControlManager) {
    var xml = Common.CuiXmlUtils.buildToggleButtonXml(id, null, command, queryCommand, label, label, image, true, keytip, false, '');
    var toggleButton = standaloneRootControlManager.hostControl(id, xml, displayMode);
    if (toggleButton) {
        container.appendChild(toggleButton);
    }
    return toggleButton;
}
Common.CuiHelper.createGenericPeripheralSection = function Common_CuiHelper$createGenericPeripheralSection$st(ribbonClientId, sectionType) {
    var section = document.createElement('span');
    section.className = 'cui-' + sectionType;
    section.id = Common.CuiHelper._generatePeripheralSectionID$p(ribbonClientId, sectionType);
    section.style.display = 'none';
    return section;
}
Common.CuiHelper._generatePeripheralSectionID$p = function Common_CuiHelper$_generatePeripheralSectionID$p$st(ribbonClientId, sectionType) {
    return ribbonClientId + '-' + sectionType;
}
Common.CuiHelper._createUnifiedAppAndBrandContainer$p = function Common_CuiHelper$_createUnifiedAppAndBrandContainer$p$st(ribbonClientId) {
    var container = document.createElement('span');
    Sys.UI.DomElement.addCssClass(container, 'AppAndBrandContainer');
    container.id = ribbonClientId + '-AppAndBrandContainer';
    return container;
}
Common.CuiHelper.createAppBrandElement = function Common_CuiHelper$createAppBrandElement$st(container) {
    var appBrandElement = Common.CuiHelper.createBreadcrumbItem(container, Common.CuiHelper.breadcrumbAppBrandId, CommonUIStrings.l_AppNameShort, null, false);
    return appBrandElement;
}
Common.CuiHelper.createAppBrandSeparatorElement = function Common_CuiHelper$createAppBrandSeparatorElement$st(elmContainer) {
    var separator = document.createElement('span');
    separator.className = 'AppBrandSeparator';
    elmContainer.appendChild(separator);
    return separator;
}
Common.CuiHelper.createHostBrandAndFolderElements = function Common_CuiHelper$createHostBrandAndFolderElements$st(container, separatorImageName) {
    var hasHostBrand = (!!Common.AFrameworkApplication.breadcrumbBrandName);
    var hasFolder = (!!Common.AFrameworkApplication.breadcrumbFolderName);
    var breadcrumbItemList = [];
    var breadcrumbItem = null;
    if (hasHostBrand) {
        breadcrumbItem = Common.CuiHelper.createBreadcrumbItem(container, Common.CuiHelper.breadcrumbBrandId, Common.AFrameworkApplication.breadcrumbBrandName, Common.AFrameworkApplication.breadcrumbBrandUrl, false);
        Array.add(breadcrumbItemList, breadcrumbItem);
        if (hasFolder) {
            var separator = Common.ImageClusteringHelper.createClusteredImage(6, 16, separatorImageName, 'BreadcrumbItem FolderSeparator', true, '');
            separator.id = Common.CuiHelper.folderSeparatorId;
            container.appendChild(separator);
            Array.add(breadcrumbItemList, separator);
        }
    }
    if (hasFolder) {
        breadcrumbItem = Common.CuiHelper.createBreadcrumbItem(container, Common.CuiHelper.breadcrumbFolderId, Common.AFrameworkApplication.breadcrumbFolderName, Common.AFrameworkApplication.breadcrumbFolderUrl, false);
        Array.add(breadcrumbItemList, breadcrumbItem);
    }
    return breadcrumbItemList;
}
Common.CuiHelper.createBreadcrumbItem = function Common_CuiHelper$createBreadcrumbItem$st(container, itemId, itemText, itemUrl, editable) {
    Common.Debug.assertTag(!!container, 4863255);
    Common.Debug.assertTag(!!itemId, 4863256);
    var element;
    var isLink = (!!itemUrl);
    Common.Debug.assertImpliesStringTag(editable, !isLink, 'We have no way to represent an editable breadcrumb item with a related link!', 4863257);
    if (isLink) {
        element = document.createElement('a');
        (element).href = itemUrl;
        (element).target = '_top';
        Common.ClickInputManager.get_instance().registerHandlerWithBrowserClickOption(Common.EventNames.click, element, Common.CuiHelper._onBreadcrumbLinkClick$p, null, true);
    }
    else if (editable) {
        element = document.createElement('div');
        element.tabIndex = 0;
    }
    else {
        element = document.createElement('span');
    }
    element.className = 'BreadcrumbItem' + ((editable) ? ' Selectable' : '');
    element.id = itemId;
    element.innerText = itemText;
    element.setAttribute('dir', 'auto');
    container.appendChild(element);
    return element;
}
Common.CuiHelper._disposeTopLeftControls$p = function Common_CuiHelper$_disposeTopLeftControls$p$st(topLeftControls) {
    if (topLeftControls.breadcrumbItems) {
        Common.EventHandlerManager.get_instance().unregisterAllHandlersForDOMArray(topLeftControls.breadcrumbItems);
    }
}
Common.CuiHelper._onBreadcrumbLinkClick$p = function Common_CuiHelper$_onBreadcrumbLinkClick$p$st(args) {
    var activity = Common.ActivityManager.get_instance().startActivity(Common.CommonCommands.breadcrumbLinkClick, -1);
    activity.get_properties().add('id', args.get_caughtElement().id);
    activity.end();
    Diag.ULS.sendTraceTag(595732178, 207, 50, 'Breadcrumb link clicked: {0}', { id: args.get_caughtElement().id });
    if (Common.CuiHelper._breadcrumbLinkClickHandler) {
        return Common.CuiHelper._breadcrumbLinkClickHandler(args);
    }
    return false;
}
Common.CuiHelper._disposeUserControl$p = function Common_CuiHelper$_disposeUserControl$p$st(userControl) {
    Common.ClickInputManager.get_instance().unregisterHandlerWithBrowserClickOption(Common.EventNames.click, userControl, Common.CuiHelper._onSignInLinkClick$p, true);
}
Common.CuiHelper._onSignInLinkClick$p = function Common_CuiHelper$_onSignInLinkClick$p$st(args) {
    if (Common.AFrameworkApplication.useSignInCommandPostMessage) {
        var signInInfo = Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().getSignInParams();
        Common.AFrameworkApplication.get_activeFrame().signInInternal(signInInfo);
        Common.AFrameworkApplication.useSignInCommandPostMessage = false;
    }
    else {
        window.top.location = Common.AFrameworkApplication.signInUrl;
    }
    return true;
}
Common.CuiHelper._isTransistionalHeaderUIEnabled$p = function Common_CuiHelper$_isTransistionalHeaderUIEnabled$p$st() {
    return !!Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isTransistionalHeaderUIEnabled();
}
Common.CuiHelper.prototype = {
    _imagePath$0: '',
    _intlStringClasses$0: null,
    _isOfficePresentationAttendeeMode$0: false,
    
    _buildHeaderStringsDictionary$p$0: function Common_CuiHelper$_buildHeaderStringsDictionary$p$0$in() {
        Common.CuiHelper._headerStrings = { SignoutLink: CommonUIStrings.l_SignoutLink, SignInLink: CommonUIStrings.l_SignIn, SwitcherTooltip: CommonUIStrings.l_SwitcherTooltip };
    },
    
    updateData: function Common_CuiHelper$updateData$in(data) {
        var imageMaps = {};
        var attributes = Common.CuiHelper._getNodeAttributes$p(data);
        var $$dict_5 = attributes;
        for (var $$key_6 in $$dict_5) {
            var entry = { key: $$key_6, value: $$dict_5[$$key_6] };
            var value = entry.value.toString();
            if (!value) {
                continue;
            }
            this.replaceIntlString(attributes, entry.key, value);
            this.replaceImagePath(attributes, entry.key, value);
            this.replaceImageMap(attributes, entry.key, value, imageMaps);
        }
        var $$dict_8 = imageMaps;
        for (var $$key_9 in $$dict_8) {
            var map = { key: $$key_9, value: $$dict_8[$$key_9] };
            attributes[map.key + 'Class'] = map.value;
        }
        var children = Common.CuiHelper._getNodeChildren$p(data);
        for (var i = 0; i < children.length; i++) {
            this.updateData(children[i]);
        }
    },
    
    replaceIntlString: function Common_CuiHelper$replaceIntlString$in(dictionary, key, value) {
        if (-1 === value.indexOf(Common.CuiHelper._intlStringToken)) {
            return;
        }
        var stringId = value.replace(Common.CuiHelper._intlStringToken, '');
        dictionary[key] = this.getIntlString(stringId);
    },
    
    replaceImagePath: function Common_CuiHelper$replaceImagePath$in(attributes, key, value) {
        if (-1 === value.indexOf(Common.CuiHelper._imagePathToken)) {
            return;
        }
        attributes[key] = Common.CommonPath.staticContentHost + value.replace(Common.CuiHelper._imagePathToken, this._imagePath$0) + Common.CommonPath.get_staticContentQueryParameter();
    },
    
    replaceImageMap: function Common_CuiHelper$replaceImageMap$in(attributes, key, value, maps) {
        if (-1 === value.indexOf(Common.CuiHelper._imageMapToken)) {
            return;
        }
        var mapTokens = value.split('@');
        if (3 !== mapTokens.length) {
            return;
        }
        var imageClusterPath = Common.AFrameworkApplication.get_imageClusterPath();
        var imageClass = Common.ImageClusteringHelper.getImageClass(mapTokens[2]);
        var imageMap = mapTokens[1];
        var imageClusterName = Common.AFrameworkApplication.get_imageClusterName();
        if (imageMap !== imageClusterName) {
            imageClusterPath = imageClusterPath.replace(imageClusterName + '.png', imageMap + '.png');
            imageClass = imageClass.replace(imageClusterName, imageMap);
        }
        attributes[key] = imageClusterPath;
        maps[key] = imageClass;
    },
    
    getIntlString: function Common_CuiHelper$getIntlString$in(id) {
        for (var $$arr_1 = this._intlStringClasses$0, $$len_2 = $$arr_1.length, $$idx_3 = 0; $$idx_3 < $$len_2; ++$$idx_3) {
            var stringClass = $$arr_1[$$idx_3];
            var str = stringClass[id];
            if (!isNullOrUndefined(str)) {
                return str;
            }
        }
        Common.Debug.assertStringTag(false, 'String \"' + id + '\" is missing!', 4863243);
        return '';
    },
    
    createTopRowControls: function Common_CuiHelper$createTopRowControls$in(ribbonClientId, containerElement, topRightActionButtonInfo, standaloneRootControlManager, isMinimalUXViewer, withoutSaveStatus, showRibbonToggle) {
        return this._createTopRowControlsInternal$i$0(ribbonClientId, containerElement, topRightActionButtonInfo, standaloneRootControlManager, !isMinimalUXViewer, !isMinimalUXViewer, withoutSaveStatus, showRibbonToggle);
    },
    
    _createTopRowControlsInternal$i$0: function Common_CuiHelper$_createTopRowControlsInternal$i$0$in(ribbonClientId, containerElement, topRightActionButtonInfo, standaloneRootControlManager, headerContainsHostBrandAndFolder, headerContainsDocumentTitle, withoutSaveStatus, showRibbonToggle) {
        var controls = new Common.TopRowControls();
        var topLeftControls = this._createTopLeftControls$p$0(ribbonClientId, headerContainsHostBrandAndFolder && !this._isOfficePresentationAttendeeMode$0);
        if (topLeftControls) {
            controls.breadcrumb = topLeftControls;
            containerElement.appendChild(topLeftControls.breadcrumbContainer);
        }
        var topRowCenterContainer = Common.CuiHelper.createGenericPeripheralSection(ribbonClientId, Common.RibbonPeripheralSection.topRowCenter);
        var isOneNote = (!!Common.AFrameworkApplication.get_activeFrame().get_applicationInstance() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_officeAppType() === Common.OfficeAppType.oneNote);
        var shouldShowTitle = isOneNote || !this._isOfficePresentationAttendeeMode$0;
        if (Common.AFrameworkApplication.docPropertiesProvider.get_breadcrumbDocName() && headerContainsDocumentTitle && shouldShowTitle) {
            Common.CuiHelper.createDocumentTitleElement(topRowCenterContainer);
        }
        controls.titleSection = topRowCenterContainer;
        containerElement.appendChild(topRowCenterContainer);
        Common.CuiHelper.headerDocumentTitleSpanId = topRowCenterContainer.id;
        var topRowRightContainer = Common.CuiHelper.createGenericPeripheralSection(ribbonClientId, Common.RibbonPeripheralSection.topRowRight);
        Common.Debug.assertTag(!!topRowRightContainer, 4863244);
        if (topRowRightContainer) {
            if (topRightActionButtonInfo) {
                this._createActionButton$p$0(standaloneRootControlManager, topRightActionButtonInfo, topRowRightContainer, Common.CuiHelper.actionButtonDisplayModeInHeader);
            }
            else if (Common.HeaderUtils.shouldShowRibbonToggle(showRibbonToggle)) {
                Common.RibbonToggleButtonCreator.createRibbonToggleButton(topRowRightContainer);
            }
            if (standaloneRootControlManager && Common.HeaderUtils.shouldShowUpsellButton()) {
                Common.RibbonUpsellButtonCreator.createRibbonUpsellButton(standaloneRootControlManager, topRowRightContainer, Common.AFrameworkApplication.get_freemiumUpsellMode());
            }
            if (standaloneRootControlManager && Common.HeaderUtils.shouldShowChatControl()) {
                var topRightSkypeButtonInfo = Common.CuiHelper._getTopRightSkypeButtonInfo$p();
                var createdSkypeButtonId = topRightSkypeButtonInfo.id + ((Common.CuiHelper._topRowControlsCount > 0) ? Common.CuiHelper._topRowControlsCount.toString() : '');
                var skypeButton = Common.CuiHelper.addButton(createdSkypeButtonId, topRightSkypeButtonInfo.command, topRightSkypeButtonInfo.label, topRightSkypeButtonInfo.image, null, Common.CuiHelper.skypeButtonDisplayMode, topRowRightContainer, standaloneRootControlManager);
                if (!Common.CuiHelper.skypeButtonId) {
                    Common.CuiHelper.skypeButtonId = createdSkypeButtonId;
                }
                else {
                    Common.CuiHelper.secondSkypeButtonId = createdSkypeButtonId;
                }
                Common.CuiHelper._topRowControlsCount++;
                Sys.UI.DomElement.addCssClass(skypeButton, Common.CuiHelper._skypeButtonClass$p);
                skypeButton.style.display = 'none';
                var positioningDiv = document.createElement('div');
                Sys.UI.DomElement.addCssClass(positioningDiv, Common.CuiHelper._skypeUnreadConversationsDivClass$p);
                skypeButton.appendChild(positioningDiv);
                var unreadConversationsBubble = document.createElement('span');
                positioningDiv.appendChild(unreadConversationsBubble);
                Sys.UI.DomElement.addCssClass(unreadConversationsBubble, Common.CuiHelper._skypeUCBBackgroundClass$p);
                Sys.UI.DomElement.addCssClass(unreadConversationsBubble, Common.CuiHelper.skypeUnreadConversationsBubbleClass);
                unreadConversationsBubble.style.display = 'none';
            }
            if (!Common.AFrameworkApplication.get_isEmbedded()) {
                var forceSignInLink = false;
                forceSignInLink = Common.ADebugOptionsTab.getOptionValue(Common.CommonDebugOptions.showSignInLinkInHeader);
                if ((Common.AFrameworkApplication.userNameUnknown && !Common.AFrameworkApplication.signoutUrl) || Common.AFrameworkApplication.limitedEdit || forceSignInLink) {
                    var signInLink = this._createSignInLink$p$0(Common.AFrameworkApplication.signInUrl);
                    if (signInLink) {
                        topRowRightContainer.appendChild(signInLink);
                    }
                    controls.userControl = signInLink;
                }
                else {
                    var userNameAndSignOutLink = this._createUserNameAndSignOutLink$p$0();
                    if (userNameAndSignOutLink) {
                        topRowRightContainer.appendChild(userNameAndSignOutLink);
                    }
                    controls.userControl = userNameAndSignOutLink;
                }
            }
            containerElement.appendChild(topRowRightContainer);
        }
        Common.CuiHelper._topRowControlsCount++;
        Common.CuiHelper.get__headerEventSource$p().raiseTopRowControlsCreatedEvent(standaloneRootControlManager, new Common.TopRowCreatedEventArgs(withoutSaveStatus));
        return controls;
    },
    
    createBottomRowRightControls: function Common_CuiHelper$createBottomRowRightControls$in(ribbonClientId, containerElement, peoplesWellControlSettings, standaloneRootControlManager, actionButtonInfo, commentsToggleButtonInfo, changesToggleButtonInfo) {
        var bottomRowRightContainer = Common.CuiHelper.createGenericPeripheralSection(ribbonClientId, Common.RibbonPeripheralSection.bottomRowRight);
        if (standaloneRootControlManager) {
            Common.CuiHelper._createPeopleWellControl$p(peoplesWellControlSettings, standaloneRootControlManager, bottomRowRightContainer);
            Common.CuiHelper._createDocChatButton$p(standaloneRootControlManager, bottomRowRightContainer);
            if (actionButtonInfo) {
                this._createActionButton$p$0(standaloneRootControlManager, actionButtonInfo, bottomRowRightContainer, Common.CuiHelper.actionButtonDisplayModeInRibbon);
            }
            if (commentsToggleButtonInfo && bottomRowRightContainer) {
                var commentsButton = Common.CuiHelper._addToggleButton$p(commentsToggleButtonInfo.id, commentsToggleButtonInfo.command, commentsToggleButtonInfo.queryCommand, commentsToggleButtonInfo.label, commentsToggleButtonInfo.image, commentsToggleButtonInfo.keytip, Common.CuiHelper.commentsButtonDisplayMode, bottomRowRightContainer, standaloneRootControlManager);
                commentsButton.className += ' ' + Common.CuiHelper._commentsButtonClassName$p;
            }
            if (changesToggleButtonInfo && bottomRowRightContainer) {
                var changesButton = Common.CuiHelper._addToggleButton$p(changesToggleButtonInfo.id, changesToggleButtonInfo.command, changesToggleButtonInfo.queryCommand, changesToggleButtonInfo.label, changesToggleButtonInfo.image, changesToggleButtonInfo.keytip, Common.CuiHelper.changesButtonDisplayMode, bottomRowRightContainer, standaloneRootControlManager);
                changesButton.className += ' ' + Common.CuiHelper._changesButtonClassName$p;
                if (Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_shouldHideChangesButtonInitially()) {
                    changesButton.style.display = 'none';
                }
            }
        }
        containerElement.appendChild(bottomRowRightContainer);
    },
    
    _createActionButton$p$0: function Common_CuiHelper$_createActionButton$p$0$in(standaloneRootControlManager, actionButtonInfo, container, displayMode) {
        Common.Debug.assertImpliesTag(!!actionButtonInfo, !!standaloneRootControlManager, 4863245);
        if ((!container) || (!actionButtonInfo) || (!standaloneRootControlManager)) {
            return;
        }
        var actionButton = Common.CuiHelper.addButton(actionButtonInfo.id + ((Common.CuiHelper._topRowControlsCount > 0) ? Common.CuiHelper._topRowControlsCount.toString() : ''), actionButtonInfo.command, actionButtonInfo.label, actionButtonInfo.image, null, displayMode, container, standaloneRootControlManager);
        actionButton.className += ' ' + Common.CuiHelper._actionButtonClassName$p;
    },
    
    createBottomRowCenterControls: function Common_CuiHelper$createBottomRowCenterControls$in(ribbonClientId, containerElement, printButtonInfo, tellMeSearchBoxInfo, openInClientButtonInfo, giveFeedbackButton, standaloneRootControlManager) {
        var bottomRowCenterContainer = Common.CuiHelper.createGenericPeripheralSection(ribbonClientId, Common.RibbonPeripheralSection.bottomRowCenter);
        Common.CuiHelper.addPrintButton(printButtonInfo, bottomRowCenterContainer, standaloneRootControlManager);
        Common.CuiHelper.addTellMeSearchBox(tellMeSearchBoxInfo, bottomRowCenterContainer, standaloneRootControlManager);
        if (openInClientButtonInfo) {
            Common.CuiHelper.addSeparator(bottomRowCenterContainer, standaloneRootControlManager);
        }
        Common.CuiHelper.addOpenInClientButton(openInClientButtonInfo, bottomRowCenterContainer, standaloneRootControlManager);
        Common.CuiHelper.addFeedbackButton(giveFeedbackButton, standaloneRootControlManager, bottomRowCenterContainer);
        containerElement.appendChild(bottomRowCenterContainer);
    },
    
    _createOfficeBrandElement$p$0: function Common_CuiHelper$_createOfficeBrandElement$p$0$in() {
        var officeBrandElement = null;
        Common.Debug.assertTag(!isUndefined(Common.CuiHelper._officeOnlineBrandWidth), 4863254);
        if (!isUndefined(Common.CuiHelper._officeOnlineBrandWidth)) {
            officeBrandElement = document.createElement('span');
            officeBrandElement.style.width = Common.CuiHelper._officeOnlineBrandWidth + 'px';
            officeBrandElement.style.height = Common.CuiHelper._officeOnlineBrandHeight + 'px';
            officeBrandElement.style.lineHeight = Common.CuiHelper._officeOnlineBrandHeight + 'px';
            officeBrandElement.className = Common.CuiHelper._officeOnlineBrandClassText$p;
            officeBrandElement.innerText = CommonUIStrings.l_AppNameShort;
            Diag.ULS.shipAssertTag(40978313, 344, CommonUIStrings.l_AppNameShort.indexOf('webappshort') < 0, '');
        }
        return officeBrandElement;
    },
    
    _createTopRowSeparatorElement$p$0: function Common_CuiHelper$_createTopRowSeparatorElement$p$0$in(showSwitcher, topRowContainsHostNameAndFolder) {
        var hasHostBrand = false;
        var hasFolder = false;
        if (topRowContainsHostNameAndFolder) {
            hasHostBrand = (!!Common.AFrameworkApplication.breadcrumbBrandName);
            hasFolder = (!!Common.AFrameworkApplication.breadcrumbFolderName);
        }
        var separator = null;
        if (showSwitcher) {
            separator = document.createElement('span');
            separator.className = (showSwitcher) ? 'OfficeOnlineBrandSwitcherSeparator' : 'OfficeOnlineBrandBreadcrumbSeparator';
        }
        return separator;
    },
    
    _createTopLeftControls$p$0: function Common_CuiHelper$_createTopLeftControls$p$0$in(ribbonClientId, contiansHostBrandAndFolder) {
        var hasSwitcher = Common.HeaderUtils.shouldShowSwitcher();
        var container = Common.CuiHelper.createGenericPeripheralSection(ribbonClientId, Common.RibbonPeripheralSection.topRowLeft);
        Sys.UI.DomElement.addCssClass(container, 'BreadcrumbContainer');
        var breadcrumbControls = new Common.BreadcrumbControls();
        breadcrumbControls.breadcrumbContainer = container;
        breadcrumbControls.breadcrumbItems = [];
        var unifiedContainer = Common.CuiHelper._createUnifiedAppAndBrandContainer$p(ribbonClientId);
        if (hasSwitcher) {
            Common.AppSwitcher._createSwitcherDropdown$i(ribbonClientId, unifiedContainer, breadcrumbControls, Common.CuiHelper._headerStrings, hasSwitcher);
            Common.AppSwitcher._setupFocusRegionForSwitcher$i();
        }
        else {
            this._createAppIcon$p$0(unifiedContainer);
        }
        if (!Common.CuiHelper._isTransistionalHeaderUIEnabled$p()) {
            this._addSeparatorToContainer$p$0(unifiedContainer, hasSwitcher, contiansHostBrandAndFolder);
        }
        this._createAndAddBreadCrumbToContainer$p$0(unifiedContainer, breadcrumbControls.breadcrumbItems);
        container.appendChild(unifiedContainer);
        if (contiansHostBrandAndFolder) {
            var breadcrumbItemList = Common.CuiHelper.createHostBrandAndFolderElements(container, Common.CuiHelper.breadcrumbSeparatorImageName);
            for (var $$arr_7 = breadcrumbItemList, $$len_8 = $$arr_7.length, $$idx_9 = 0; $$idx_9 < $$len_8; ++$$idx_9) {
                var listItem = $$arr_7[$$idx_9];
                Array.add(breadcrumbControls.breadcrumbItems, listItem);
            }
        }
        return breadcrumbControls;
    },
    
    _addSeparatorToContainer$p$0: function Common_CuiHelper$_addSeparatorToContainer$p$0$in(container, showSwitcher, containsHostBrandAndFolder) {
        var separator = this._createTopRowSeparatorElement$p$0(showSwitcher, containsHostBrandAndFolder);
        if (separator) {
            container.appendChild(separator);
        }
    },
    
    _createAndAddBreadCrumbToContainer$p$0: function Common_CuiHelper$_createAndAddBreadCrumbToContainer$p$0$in(container, breadcrumbItems) {
        var breadcrumbItem = this._createOfficeBrandElement$p$0();
        if (breadcrumbItem) {
            container.appendChild(breadcrumbItem);
            Array.add(breadcrumbItems, breadcrumbItem);
        }
    },
    
    _createAppIcon$p$0: function Common_CuiHelper$_createAppIcon$p$0$in(container) {
        var appIconImage = Common.ImageClusteringHelper.createClusteredImage(36, 36, 'AppLogoSilhouette_36x36x32', 'AppHeaderIconFloat', true, null);
        container.appendChild(appIconImage);
    },
    
    _createSignInLink$p$0: function Common_CuiHelper$_createSignInLink$p$0$in(signInUrl) {
        var signInLink = null;
        if ((!signInUrl) && Common.ADebugOptionsTab.getOptionValue(Common.CommonDebugOptions.showSignInLinkInHeader)) {
            signInUrl = 'https://www.office.com';
        }
        if (signInUrl) {
            signInLink = document.createElement('a');
            signInLink.className = 'SignInLink';
            signInLink.href = signInUrl;
            signInLink.id = Common.CuiHelper.signInLinkId;
            signInLink.innerText = Common.CuiHelper._headerStrings['SignInLink'].toString();
            signInLink.target = '_top';
            Common.ClickInputManager.get_instance().registerHandlerWithBrowserClickOption(Common.EventNames.click, signInLink, Common.CuiHelper._onSignInLinkClick$p, null, true);
        }
        return signInLink;
    },
    
    _createUserNameAndSignOutLink$p$0: function Common_CuiHelper$_createUserNameAndSignOutLink$p$0$in() {
        var userNameAndSignOutLinkContainer = null;
        if (Common.AFrameworkApplication.userName || Common.AFrameworkApplication.signoutUrl) {
            userNameAndSignOutLinkContainer = document.createElement('span');
            Sys.UI.DomElement.addCssClass(userNameAndSignOutLinkContainer, 'UsernameContainer');
            var usernameNameContainer = document.createElement('span');
            usernameNameContainer.className = 'UsernameNameContainer';
            userNameAndSignOutLinkContainer.appendChild(usernameNameContainer);
            if (!Common.AFrameworkApplication.userNameUnknown) {
                var username = document.createElement('span');
                username.className = 'UsernameNameItem';
                username.setAttribute('dir', 'auto');
                username.innerText = Common.AFrameworkApplication.userName;
                usernameNameContainer.appendChild(username);
            }
            var signOutUrl = Common.AFrameworkApplication.signoutUrl;
            if ((!signOutUrl) && Common.ADebugOptionsTab.getOptionValue(Common.CommonDebugOptions.showSignOutLinkInHeader)) {
                signOutUrl = 'https://www.office.com';
            }
            if (signOutUrl) {
                if (!Common.CuiHelper._isTransistionalHeaderUIEnabled$p()) {
                    var separator = document.createElement('span');
                    separator.className = 'UserNameSeparator';
                    userNameAndSignOutLinkContainer.appendChild(separator);
                }
                var signoutLink = document.createElement('a');
                signoutLink.className = 'SignoutLink';
                signoutLink.href = signOutUrl;
                signoutLink.id = Common.CuiHelper.signoutLinkId;
                signoutLink.innerText = Common.CuiHelper._headerStrings['SignoutLink'].toString();
                userNameAndSignOutLinkContainer.appendChild(signoutLink);
            }
        }
        return userNameAndSignOutLinkContainer;
    }
}


Common.DocumentTitleContainer = function Common_DocumentTitleContainer() {
    Common.DocumentTitleContainer.initializeBase(this);
    this.set_elmContainer(Common.ViewerChrome.createUnselectableElement('span'));
    this.get_elmContainer().id = 'viewerChrome-documentTitleContainer';
    this.get_elmContainer().className = 'cui-herobar-documentTitleContainer';
    if (Common.AFrameworkApplication.isMobileMode) {
        var appIconImage = Common.ImageClusteringHelper.createClusteredImage(32, 32, Common.AFrameworkApplication.appSettingsManager.getStringAppSetting('AppIcon'), 'AppHeaderIconFloat', true, '');
        appIconImage.style.margin = '4px';
        appIconImage.style.marginLeft = '12px';
        this.get_elmContainer().appendChild(appIconImage);
        this.get_elmContainer().style.fontSize = '13pt';
    }
    if (Common.AFrameworkApplication.docPropertiesProvider.get_breadcrumbDocName()) {
        this._elementToTruncate = Common.CuiHelper._createDocumentTitleElementInternal$i(this.get_elmContainer(), false);
        if (Common.AFrameworkApplication.isMobileMode) {
            this._elementToTruncate.style.padding = '10px 5px 10px';
            this._elementToTruncate.style.lineHeight = '18px';
        }
    }
}
Common.DocumentTitleContainer.prototype = {
    
    dispose: function Common_DocumentTitleContainer$dispose$in() {
        Common.CuiHelper.disposeTitleElement();
    }
}


Common.UpsellActor = function Common_UpsellActor(actionManager) {
    this.$$d__launchUpsellExperience$p$0 = Function.createDelegate(this, this._launchUpsellExperience$p$0);
    this.$$d__navigateToUpsellPage$p$0 = Function.createDelegate(this, this._navigateToUpsellPage$p$0);
    this._actionManager = actionManager;
}
Common.UpsellActor.prototype = {
    _actionManager: null,
    
    registerActions: function Common_UpsellActor$registerActions$in() {
        this._actionManager.addAction(Common.CommonCommands.freemiumUpsellEligible, Common.CommonContextIds.frame, this.$$d__navigateToUpsellPage$p$0);
        this._actionManager.addAction(Common.CommonCommands.freemiumUpsellDialogShowUI, Common.CommonContextIds.frame, this.$$d__launchUpsellExperience$p$0);
        this._actionManager.addAction(Common.CommonCommands.reportFreemiumUpsellEligibleDisplayed, Common.CommonContextIds.frame, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(Common.CommonCommands.reportFreemiumUpsellEligibleClicked, Common.CommonContextIds.frame, Common.ActionManager.doNothingButReportHandler);
    },
    
    _navigateToUpsellPage$p$0: function Common_UpsellActor$_navigateToUpsellPage$p$0$in(actionId, context, behavior, reportingData, actionData) {
        if (behavior === 1) {
            return 32;
        }
        var response = 8;
        if (behavior === 2) {
            var experienceId = this._getCommandArgument$p$0(actionData, 'experience', 'gopremiumribbon');
            var actualUrl = Common.UrlUtils.getFwLinkUrl('2116536');
            actualUrl = Common.UrlUtils.addParameterValue(actualUrl, 'ocid', Common.FreemiumUtils.getCampaignId(Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_officeAppType(), Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_officeAppMode(), experienceId, false));
            Common.WindowUtils.safelyOpenWindow(actualUrl, '_blank', '', false, 'NavigateToUpsellPage');
            response = 32;
            this._actionManager.processAction(Common.CommonCommands.reportFreemiumUpsellEligibleClicked, 2, null);
            Diag.ULS.sendTraceTag(38929747, 340, 50, 'User directed to POC');
        }
        return response;
    },
    
    _launchUpsellExperience$p$0: function Common_UpsellActor$_launchUpsellExperience$p$0$in(actionId, context, behavior, reportingData, actionData) {
        if (behavior === 1) {
            return 32;
        }
        var response = 8;
        if (behavior === 2) {
            Diag.ULS.sendTraceTag(592721857, 340, 50, 'LaunchUpsellExperience from Ribbon');
            var applicationFeatureHelper = Common.Utils.Container.get_instance().tryResolve(Common.App.ApplicationFeatureHelper.IApplicationFeatureHelper, '');
            if (applicationFeatureHelper) {
                var experience = this._getCommandArgument$p$0(actionData, 'experience', 'gopremium');
                applicationFeatureHelper.launchUpsellExperience(experience);
                response = 32;
            }
            else {
                Diag.ULS.sendTraceTag(594874952, 340, 15, 'ApplicationFeatureHelper not available');
                response = this._navigateToUpsellPage$p$0(actionId, context, behavior, reportingData, actionData);
            }
        }
        return response;
    },
    
    _getCommandArgument$p$0: function Common_UpsellActor$_getCommandArgument$p$0$in(data, key, defaultValue) {
        var argumentValue = defaultValue;
        var args = data;
        if (args && args[key]) {
            argumentValue = $$as(String, args[key]);
        }
        return argumentValue;
    }
}


Common.HeaderEventSource = function Common_HeaderEventSource() {
    this._eventSource$0 = new Common.EventSource();
}
Common.HeaderEventSource.prototype = {
    
    add_onTopRowControlsCreated: function Common_HeaderEventSource$add_onTopRowControlsCreated$in(value) {
        this._eventSource$0.addHandler(Common.HeaderEventSource._onTopRowControlsCreatedEventKey$p, value);
    },
    
    remove_onTopRowControlsCreated: function Common_HeaderEventSource$remove_onTopRowControlsCreated$in(value) {
        this._eventSource$0.removeHandler(Common.HeaderEventSource._onTopRowControlsCreatedEventKey$p, value);
    },
    
    add_onTopRowControlsDisposing: function Common_HeaderEventSource$add_onTopRowControlsDisposing$in(value) {
        this._eventSource$0.addHandler(Common.HeaderEventSource._onTopRowControlsDisposingEventKey$p, value);
    },
    
    remove_onTopRowControlsDisposing: function Common_HeaderEventSource$remove_onTopRowControlsDisposing$in(value) {
        this._eventSource$0.removeHandler(Common.HeaderEventSource._onTopRowControlsDisposingEventKey$p, value);
    },
    
    add_onRenameTextboxStatusChanged: function Common_HeaderEventSource$add_onRenameTextboxStatusChanged$in(value) {
        this._eventSource$0.addHandler(Common.HeaderEventSource._onRenameTextboxStatusChangedEventKey$p, value);
    },
    
    remove_onRenameTextboxStatusChanged: function Common_HeaderEventSource$remove_onRenameTextboxStatusChanged$in(value) {
        this._eventSource$0.removeHandler(Common.HeaderEventSource._onRenameTextboxStatusChangedEventKey$p, value);
    },
    
    _$$pf_TopRowControlsCreated$p$0: false,
    
    get_topRowControlsCreated: function Common_HeaderEventSource$get_topRowControlsCreated$in() {
        return this._$$pf_TopRowControlsCreated$p$0;
    },
    
    set_topRowControlsCreated: function Common_HeaderEventSource$set_topRowControlsCreated$in(value) {
        this._$$pf_TopRowControlsCreated$p$0 = value;
        return value;
    },
    
    _$$pf_StandaloneRootControlManager$p$0: null,
    
    get_standaloneRootControlManager: function Common_HeaderEventSource$get_standaloneRootControlManager$in() {
        return this._$$pf_StandaloneRootControlManager$p$0;
    },
    
    set_standaloneRootControlManager: function Common_HeaderEventSource$set_standaloneRootControlManager$in(value) {
        this._$$pf_StandaloneRootControlManager$p$0 = value;
        return value;
    },
    
    raiseTopRowControlsCreatedEvent: function Common_HeaderEventSource$raiseTopRowControlsCreatedEvent$in(standaloneRootControlManager, args) {
        this.set_topRowControlsCreated(true);
        this.set_standaloneRootControlManager(standaloneRootControlManager);
        this._eventSource$0.raiseEvent(Common.HeaderEventSource._onTopRowControlsCreatedEventKey$p, args, null);
    },
    
    raiseOnTopRowControlsDisposingEvent: function Common_HeaderEventSource$raiseOnTopRowControlsDisposingEvent$in() {
        this.set_topRowControlsCreated(false);
        this._eventSource$0.raiseEvent(Common.HeaderEventSource._onTopRowControlsDisposingEventKey$p, null, null);
    },
    
    raiseRenameTextboxStatusChangedEvent: function Common_HeaderEventSource$raiseRenameTextboxStatusChangedEvent$in(activate) {
        this._eventSource$0.raiseEvent(Common.HeaderEventSource._onRenameTextboxStatusChangedEventKey$p, (activate) ? 'true' : 'false', null);
    }
}




Common.TopRowCreatedEventArgs = function Common_TopRowCreatedEventArgs(withoutSaveStatus) {
    Common.TopRowCreatedEventArgs.initializeBase(this);
    this.set_withoutSaveStatus(withoutSaveStatus);
}
Common.TopRowCreatedEventArgs.prototype = {
    _$$pf_WithoutSaveStatus$p$1: false,
    
    get_withoutSaveStatus: function Common_TopRowCreatedEventArgs$get_withoutSaveStatus$in() {
        return this._$$pf_WithoutSaveStatus$p$1;
    },
    
    set_withoutSaveStatus: function Common_TopRowCreatedEventArgs$set_withoutSaveStatus$in(value) {
        this._$$pf_WithoutSaveStatus$p$1 = value;
        return value;
    }
}


Common.HeaderUtils = function Common_HeaderUtils() {
}
Common.HeaderUtils.isOfficePresentationAttendeeMode = function Common_HeaderUtils$isOfficePresentationAttendeeMode$st() {
    return Common.AFrameworkApplication.get_isEmbedded();
}
Common.HeaderUtils.shouldShowUpsellButton = function Common_HeaderUtils$shouldShowUpsellButton$st() {
    var useLicensing = Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactSharedHeaderUxEnabled() && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('GoPremiumLicensingIsEnabled');
    return !Common.HeaderUtils.isOfficePresentationAttendeeMode() && !Common.AFrameworkApplication.hideHeader && Common.FreemiumUtils.freemiumUpsellAllowed() && (useLicensing || Common.AFrameworkApplication.get_freemiumUpsellMode() === Common.FreemiumUpsellMode.showUpsell);
}
Common.HeaderUtils.shouldShowSwitcher = function Common_HeaderUtils$shouldShowSwitcher$st() {
    var showSwitcher = Common.AFrameworkApplication.shouldShowSwitcher && !Common.HeaderUtils.isOfficePresentationAttendeeMode() && !Common.AFrameworkApplication.hideHeader;
    showSwitcher = showSwitcher || Common.ADebugOptionsTab.getOptionValue(Common.CommonDebugOptions.showSwitcherDropdownInHeader);
    return showSwitcher;
}
Common.HeaderUtils._optOutSupportForSimplifiedRibbonIsEnabled$p = function Common_HeaderUtils$_optOutSupportForSimplifiedRibbonIsEnabled$p$st() {
    return !!Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isSimplifiedReactRibbonUxFlightEnabled() && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('OptOutSupportForSimplifiedRibbonIsEnabled');
}
Common.HeaderUtils.shouldShowRibbonToggle = function Common_HeaderUtils$shouldShowRibbonToggle$st(showRibbonToggle) {
    return showRibbonToggle && Common.HeaderUtils._optOutSupportForSimplifiedRibbonIsEnabled$p() && !Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isSimplifiedUXOptOutInViewTabFlightEnabled() && !Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactMultilineRibbonEnabled();
}
Common.HeaderUtils.shouldShowChatControl = function Common_HeaderUtils$shouldShowChatControl$st() {
    return !Common.HeaderUtils.isOfficePresentationAttendeeMode() && !Common.AFrameworkApplication.hideHeader && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('BasicChatIsEnabled');
}
Common.HeaderUtils.isDelayLoadingEnabled = function Common_HeaderUtils$isDelayLoadingEnabled$st() {
    return !!Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactSharedHeaderDelayLoadingEnabled();
}
Common.HeaderUtils.isSimplifiedRibbonBeingShown = function Common_HeaderUtils$isSimplifiedRibbonBeingShown$st() {
    return !!Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isSimplifiedReactRibbonUxEnabled();
}
Common.HeaderUtils.getWorkflowHeaderButton = function Common_HeaderUtils$getWorkflowHeaderButton$st() {
    var isReplyWithChangesEnabled = (Common.AFrameworkApplication.isReplyWithChangesWorkFlow && !!Common.AFrameworkApplication.replyWithChangesUrl) || Common.AFrameworkApplication.useReplyWithChangesPostMessage;
    var isReactHeaderEnabled = !!Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactSharedHeaderUxEnabled();
    if (isReplyWithChangesEnabled && isReactHeaderEnabled) {
        var $$t_3;
        return $$t_3 = new Common.HeaderButtonInfo(), $$t_3.command = '1197060601', $$t_3.label = CommonUIStrings.l_ReplyWithChanges, $$t_3.id = Common.CuiHelper.replyWithChangesButtonId, $$t_3;
    }
    else if (Common.AFrameworkApplication.workflowEnabled) {
        var workflowString = '';
        switch (Common.AFrameworkApplication.workflowTypeString) {
            case Common.HeaderUtils._worflowAssign$p:
                workflowString = CommonUIStrings.l_Assign;
                break;
            case Common.HeaderUtils._workflowSubmit$p:
                workflowString = CommonUIStrings.l_Submit;
                break;
        }
        if (workflowString !== '') {
            var $$t_4;
            return $$t_4 = new Common.HeaderButtonInfo(), $$t_4.command = '2988588587', $$t_4.label = workflowString, $$t_4.id = Common.HeaderUtils.workflowButtonId, $$t_4;
        }
    }
    return null;
}


Common.HeaderCultureInfo = function Common_HeaderCultureInfo() {
}
Common.HeaderCultureInfo.prototype = {
    _$$pf_CultureName$p$0: null,
    
    get_cultureName: function Common_HeaderCultureInfo$get_cultureName$in() {
        return this._$$pf_CultureName$p$0;
    },
    
    set_cultureName: function Common_HeaderCultureInfo$set_cultureName$in(value) {
        this._$$pf_CultureName$p$0 = value;
        return value;
    },
    
    _$$pf_LanguageName$p$0: null,
    
    get_languageName: function Common_HeaderCultureInfo$get_languageName$in() {
        return this._$$pf_LanguageName$p$0;
    },
    
    set_languageName: function Common_HeaderCultureInfo$set_languageName$in(value) {
        this._$$pf_LanguageName$p$0 = value;
        return value;
    }
}


Common.ReactSharedHeaderCultureHelper = function Common_ReactSharedHeaderCultureHelper() {
}
Common.ReactSharedHeaderCultureHelper.getHeaderCultureInfo = function Common_ReactSharedHeaderCultureHelper$getHeaderCultureInfo$st(appSettingsManager) {
    try {
        var cultureInfo = Common.CultureInfo.getCultureInfo(Common.AFrameworkApplication.lcid);
        if (cultureInfo) {
            var $$t_3;
            return $$t_3 = new Common.HeaderCultureInfo(), $$t_3.set_cultureName(cultureInfo.get_name()), $$t_3.set_languageName((appSettingsManager.getBooleanAppSetting('SuiteHeaderPassLanguageName')) ? cultureInfo.get_languageName() : Common.CultureInfo.getCultureInfo(cultureInfo.get_languageId()).get_name()), $$t_3;
        }
    }
    catch ($$e_2) {
        Diag.ULS.sendTraceTag(592318981, 340, 15, 'Header language cannot be determined, LCID:' + Common.AFrameworkApplication.lcid.toString());
    }
    var $$t_4;
    return $$t_4 = new Common.HeaderCultureInfo(), $$t_4.set_cultureName('en-us'), $$t_4.set_languageName('en'), $$t_4;
}


function SearchInitializationSettings() {
}
SearchInitializationSettings.prototype = {
    loadTellMeResources: null,
    userRing: null,
    getTokenRequestDictionary: null
}


function SetCookiePayload() {
}
SetCookiePayload.prototype = {
    cookieName: null,
    value: null
}


Common.ReactSharedHeaderPropsHelper = function Common_ReactSharedHeaderPropsHelper(staticContentHostPath) {
    this.$$d__onFullyLoaded$p$0 = Function.createDelegate(this, this._onFullyLoaded$p$0);
    this.$$d__onFirstRender$p$0 = Function.createDelegate(this, this._onFirstRender$p$0);
    this.$$d__getCookie$p$0 = Function.createDelegate(this, this._getCookie$p$0);
    this.$$d__onDocumentTitleReducersReady$p$0 = Function.createDelegate(this, this._onDocumentTitleReducersReady$p$0);
    this.$$d__continueShellServiceDataAsync$p$0 = Function.createDelegate(this, this._continueShellServiceDataAsync$p$0);
    this.$$d_getSearchInitializationSettings = Function.createDelegate(this, this.getSearchInitializationSettings);
    this.$$d__getDocumentTitleAppProps$p$0 = Function.createDelegate(this, this._getDocumentTitleAppProps$p$0);
    this.$$d__getWorkflowButtonAppProps$p$0 = Function.createDelegate(this, this._getWorkflowButtonAppProps$p$0);
    this.$$d__getDocumentFlyoutProperties$p$0 = Function.createDelegate(this, this._getDocumentFlyoutProperties$p$0);
    this.$$d__onDocumentTitleFirstRender$p$0 = Function.createDelegate(this, this._onDocumentTitleFirstRender$p$0);
    this._staticContentHostPath$0 = (staticContentHostPath !== '') ? staticContentHostPath : Common.CommonPath.staticContentHost;
}
Common.ReactSharedHeaderPropsHelper.prototype = {
    _staticContentHostPath$0: null,
    
    _shouldShowRibbonToggleButtonInHeader$p$0: function Common_ReactSharedHeaderPropsHelper$_shouldShowRibbonToggleButtonInHeader$p$0$in() {
        return true;
    },
    
    _getReactCommand$p$0: function Common_ReactSharedHeaderPropsHelper$_getReactCommand$p$0$in(commandId) {
        var externalUICommandDefinitionMapping = Common.Utils.Container.get_instance().tryResolve(Common.IExternalUICommandDefinitionMapping, '');
        var commands = externalUICommandDefinitionMapping.getCommandById(commandId);
        if (commands && commands.length > 0) {
            return commands[0].get_externalUxCommand();
        }
        Diag.ULS.sendTraceTag(594929363, 340, 10, String.format('GetReactCommand cannot find the command mapping for {0}', commandId));
        return null;
    },
    
    _workflowButtonAppProps$p$0: null,
    
    _getWorkflowButtonAppProps$p$0: function Common_ReactSharedHeaderPropsHelper$_getWorkflowButtonAppProps$p$0$in() {
        if (!this._workflowButtonAppProps$p$0) {
            var headerButtonInfo = Common.HeaderUtils.getWorkflowHeaderButton();
            if (headerButtonInfo) {
                var reactCommand = this._getReactCommand$p$0(headerButtonInfo.command);
                if (reactCommand) {
                    var $$t_2;
                    this._workflowButtonAppProps$p$0 = ($$t_2 = new WorkflowButtonAppProps(), $$t_2.command = reactCommand, $$t_2.label = headerButtonInfo.label, $$t_2);
                }
            }
        }
        return this._workflowButtonAppProps$p$0;
    },
    
    _getControls$p$0: function Common_ReactSharedHeaderPropsHelper$_getControls$p$0$in() {
        var showRibbonToggle = Common.HeaderUtils.shouldShowRibbonToggle(this._shouldShowRibbonToggleButtonInHeader$p$0());
        var ribbonToggleAppProps = null;
        if (showRibbonToggle) {
            var $$t_2;
            ribbonToggleAppProps = ($$t_2 = new RibbonToggleAppProps(), $$t_2.toggled = Common.HeaderUtils.isSimplifiedRibbonBeingShown(), $$t_2);
        }
        var $$t_3;
        return $$t_3 = new HeaderControls(), $$t_3.ribbonToggleId = (showRibbonToggle) ? 'ToggleRibbonUXDialog' : null, $$t_3.workflowButton = this._getWorkflowButtonAppProps$p$0(), $$t_3.ribbonToggle = ribbonToggleAppProps, $$t_3;
    },
    
    _onDocumentTitleFirstRender$p$0: function Common_ReactSharedHeaderPropsHelper$_onDocumentTitleFirstRender$p$0$in() {
        Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(Common.App.AppInitializationStatus.documentTitleRendered);
    },
    
    _getDocumentFlyoutProperties$p$0: function Common_ReactSharedHeaderPropsHelper$_getDocumentFlyoutProperties$p$0$in() {
        var $$t_0;
        return $$t_0 = new DocumentTitleCalloutAppProps(), $$t_0.breadcrumbBrandName = Common.AFrameworkApplication.docPropertiesProvider.get_breadcrumbBrandName(), $$t_0.breadcrumbBrandUrl = Common.AFrameworkApplication.docPropertiesProvider.get_breadcrumbBrandUrl(), $$t_0.breadcrumbFolderName = Common.AFrameworkApplication.docPropertiesProvider.get_breadcrumbFolderName(), $$t_0.breadcrumbFolderUrl = Common.AFrameworkApplication.docPropertiesProvider.get_breadcrumbFolderUrl(), $$t_0.hideDocumentTitleInput = !Common.AFrameworkApplication.isRenameSupported(), $$t_0.isVersionHistoryEnabled = this._shouldShowVersionHistory$p$0(), $$t_0.documentExtension = Common.StringUtils.getFileExtension(Common.AFrameworkApplication.fileName), $$t_0;
    },
    
    _documentTitleAppProps$p$0: null,
    
    _getDocumentTitleAppProps$p$0: function Common_ReactSharedHeaderPropsHelper$_getDocumentTitleAppProps$p$0$in() {
        if (!this._documentTitleAppProps$p$0) {
            var breadcrumbDocName = Common.AFrameworkApplication.docPropertiesProvider.get_breadcrumbDocName();
            var $$t_1;
            this._documentTitleAppProps$p$0 = ($$t_1 = new DocumentTitleAppProps(), $$t_1.documentTitle = (Common.AFrameworkApplication.get_documentIsFolder()) ? breadcrumbDocName : Common.StringUtils.getFileNameWithoutExtension(breadcrumbDocName), $$t_1.onFirstRender = this.$$d__onDocumentTitleFirstRender$p$0, $$t_1.getCalloutAppProps = this.$$d__getDocumentFlyoutProperties$p$0, $$t_1.isShared = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('SharingStatusIsEnabled') && Common.AFrameworkApplication.docPropertiesProvider.get_sharingStatus() === Common.SharingStatus.shared, $$t_1);
        }
        return this._documentTitleAppProps$p$0;
    },
    
    _shouldShowVersionHistory$p$0: function Common_ReactSharedHeaderPropsHelper$_shouldShowVersionHistory$p$0$in() {
        return !!Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isSharedHeaderVersionHistoryEnabled();
    },
    
    _shouldEnableTheming$p$0: function Common_ReactSharedHeaderPropsHelper$_shouldEnableTheming$p$0$in() {
        return !!Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isSharedHeaderThemingEnabled();
    },
    
    _shouldShowChatControl$p$0: function Common_ReactSharedHeaderPropsHelper$_shouldShowChatControl$p$0$in() {
        var showChat = !Common.HeaderUtils.isOfficePresentationAttendeeMode() && !Common.AFrameworkApplication.hideHeader && (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('SkypeWebControlIsEnabled') || Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('TeamsChatIsEnabled'));
        Diag.ULS.sendTraceTag(592315859, 215, 50, 'ShowChat is {0}', showChat);
        return showChat;
    },
    
    _continueShellServiceDataAsync$p$0: function Common_ReactSharedHeaderPropsHelper$_continueShellServiceDataAsync$p$0$in(task) {
        var $$t_6 = this;
        appChrome.getHeaderApi().then(function(api) {
            api.setNavBarData((task).get_result());
            return null;
        });
        Diag.ULS.sendTraceTag(50602782, 215, 50, 'SetHeaderNavBarData has been dispatched.');
    },
    
    registerCommandHandlers: function Common_ReactSharedHeaderPropsHelper$registerCommandHandlers$in(hideDocumentTitle) {
        var $$t_1f = this;
        appChrome.getHeaderApi().then(function(api) {
            if (api.setHeaderCommandHandler) {
                var headerFocusManager = Common.Utils.Container.get_instance().resolve(Common.IReactSharedHeaderFocusManager, '');
                api.setHeaderCommandHandler('OnFlexPaneOpen', function(element) {
                    headerFocusManager.onFlexPaneOpen(element);
                });
                api.setHeaderCommandHandler('OnFlexPaneClose', function(element) {
                    headerFocusManager.onFlexPaneClose(element);
                });
                api.setHeaderCommandHandler('SetCookie', function(payload) {
                    Common.Cookie.set(($$as(SetCookiePayload, payload)).cookieName, ($$as(SetCookiePayload, payload)).value);
                });
                api.setHeaderCommandHandler('GetCookie', function(payload) {
                    $$t_1f._getCookie$p$0($$as(String, payload));
                });
                api.setHeaderCommandHandler('QueryWorkflowButtonSettings', $$t_1f.$$d__getWorkflowButtonAppProps$p$0);
                if (!hideDocumentTitle) {
                    api.setHeaderCommandHandler('QueryDocumentTitleAppProps', $$t_1f.$$d__getDocumentTitleAppProps$p$0);
                    api.setHeaderCommandHandler('OnDocumentTitleReducerReady', function() {
                        $$t_1f._onDocumentTitleReducersReady$p$0();
                        return null;
                    });
                }
                if (Common.ReactSharedHeaderSearchUtils.isSearchUxEnabled()) {
                    api.setHeaderCommandHandler('QuerySearchInitializationSettings', $$t_1f.$$d_getSearchInitializationSettings);
                }
            }
        });
    },
    
    _isOnDocumentTitleReducersReadyCalled$p$0: false,
    
    _onDocumentTitleReducersReady$p$0: function Common_ReactSharedHeaderPropsHelper$_onDocumentTitleReducersReady$p$0$in() {
        if (!this._isOnDocumentTitleReducersReadyCalled$p$0) {
            var saveStatusUIHandlerAsync = Common.Utils.Container.get_instance().resolveFuture(Common.App.SaveStatus.ISaveStatusUIHandler, '');
            var $$t_3 = this;
            saveStatusUIHandlerAsync.execute(function(handler) {
                handler.updateSaveStatusDisplay(false, Common.AFrameworkApplication.get_theActionManager().get_mode());
            });
            this._isOnDocumentTitleReducersReadyCalled$p$0 = true;
        }
    },
    
    _getCookie$p$0: function Common_ReactSharedHeaderPropsHelper$_getCookie$p$0$in(cookieName) {
        var value = Common.Cookie.get(cookieName);
        if (!isNullOrUndefined(value) && value.length > 0) {
            value = decodeURIComponent(value);
        }
        return value;
    },
    
    _getSuiteUxShellPath$p$0: function Common_ReactSharedHeaderPropsHelper$_getSuiteUxShellPath$p$0$in() {
        var suiteUxShell = 'suiteux-shell';
        if (Common.AppChromeOverrideUtilities.get_isEnabled()) {
            return Common.AppChromeOverrideUtilities.getPath(suiteUxShell, false);
        }
        return this._staticContentHostPath$0 + Common.AFrameworkApplication.get_scriptFolderPath() + suiteUxShell;
    },
    
    _onFirstRender$p$0: function Common_ReactSharedHeaderPropsHelper$_onFirstRender$p$0$in() {
        var shellActorAsync = Common.Utils.Container.get_instance().resolveFuture(Common.App.O365Shell.IO365ShellActor, '');
        var $$t_3 = this;
        shellActorAsync.execute(function(shellActor) {
            shellActor.get_shellServiceDataAsync().CWo($$t_3.$$d__continueShellServiceDataAsync$p$0, $$sc.TaskContinuationOptions.onlyOnRanToCompletion);
        });
        Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(Common.App.AppInitializationStatus.suiteHeaderRendered);
    },
    
    _onFullyLoaded$p$0: function Common_ReactSharedHeaderPropsHelper$_onFullyLoaded$p$0$in() {
        Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(Common.App.AppInitializationStatus.suiteHeaderInteractive);
    },
    
    getProps: function Common_ReactSharedHeaderPropsHelper$getProps$in(hideDocumentTitle) {
        var headerCulture = Common.ReactSharedHeaderCultureHelper.getHeaderCultureInfo(Common.AFrameworkApplication.appSettingsManager);
        var shouldShowSwitcherAndMeControl = Common.HeaderUtils.shouldShowSwitcher();
        var headerFocusManager = Common.Utils.Container.get_instance().resolve(Common.IReactSharedHeaderFocusManager, '');
        var $$t_6;
        var $$t_7 = headerFocusManager, $$t_8 = headerFocusManager;
        var props = ($$t_6 = new HeaderAppProps(), $$t_6.appName = CommonUIStrings.l_AppNameShort, $$t_6.culture = headerCulture.get_cultureName(), $$t_6.language = headerCulture.get_languageName(), $$t_6.isConsumer = !Common.AFrameworkApplication.useO365ShellService, $$t_6.showAppLauncher = shouldShowSwitcherAndMeControl, $$t_6.showMeControl = shouldShowSwitcherAndMeControl, $$t_6.assetsContainerOverride = this._getSuiteUxShellPath$p$0(), $$t_6.controls = this._getControls$p$0(), $$t_6.documentTitleAppProps = (hideDocumentTitle) ? null : this._getDocumentTitleAppProps$p$0(), $$t_6.showChatControl = this._shouldShowChatControl$p$0(), $$t_6.showGoPremiumControl = Common.HeaderUtils.shouldShowUpsellButton(), $$t_6.onHeaderReducersReady = this.$$d__onDocumentTitleReducersReady$p$0, $$t_6.enableSearchControl = Common.ReactSharedHeaderSearchUtils.isSearchEnabled(), $$t_6.onFlexPaneOpen = ($$t_7.$$d_onFlexPaneOpen || ($$t_7.$$d_onFlexPaneOpen = Function.createDelegate($$t_7, $$t_7.onFlexPaneOpen))), $$t_6.onFlexPaneClose = ($$t_8.$$d_onFlexPaneClose || ($$t_8.$$d_onFlexPaneClose = Function.createDelegate($$t_8, $$t_8.onFlexPaneClose))), $$t_6.enableTheming = this._shouldEnableTheming$p$0(), $$t_6.setCookie = Common.Cookie.set, $$t_6.getCookie = this.$$d__getCookie$p$0, $$t_6.enableDelayLoading = Common.HeaderUtils.isDelayLoadingEnabled(), $$t_6.testTraffic = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('SharedHeaderTestTrafficIsEnabled'), $$t_6.onFirstRender = this.$$d__onFirstRender$p$0, $$t_6.onFullyLoaded = this.$$d__onFullyLoaded$p$0, $$t_6);
        if (!Common.AFrameworkApplication.userNameUnknown || Common.AFrameworkApplication.signoutUrl) {
            props.userDisplayName = Common.AFrameworkApplication.userName;
            props.emailAddress = Common.AFrameworkApplication.appSettingsManager.getStringAppSetting('UserPrincipalName');
            props.userID = Common.AFrameworkApplication.appSettingsManager.getStringAppSetting('Puid') || '';
        }
        else {
            props.signInLink = Common.AFrameworkApplication.signInUrl;
        }
        if (Common.ReactSharedHeaderSearchUtils.isSearchUxEnabled()) {
            var searchSettings = this.getSearchInitializationSettings();
            props.loadTellMeResources = searchSettings.loadTellMeResources;
            props.getTokenRequestDictionary = searchSettings.getTokenRequestDictionary;
            props.enableVanillaSearchBox = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('VanillaSearchUxInHeaderIsEnabled');
            props.userRing = searchSettings.userRing;
        }
        this.registerCommandHandlers(hideDocumentTitle);
        return props;
    },
    
    _searchInitializationSettings$p$0: null,
    
    getSearchInitializationSettings: function Common_ReactSharedHeaderPropsHelper$getSearchInitializationSettings$in() {
        if (!this._searchInitializationSettings$p$0) {
            var searchUtils = new Common.ReactSharedHeaderSearchUtils();
            var userRing = Common.AFrameworkApplication.appSettingsManager.getStringAppSetting('Microsoft365Ring');
            if (!userRing || !userRing.length) {
                userRing = 'generalAudience';
            }
            var $$t_2;
            this._searchInitializationSettings$p$0 = ($$t_2 = new SearchInitializationSettings(), $$t_2.loadTellMeResources = searchUtils.loadTellMeStrings(), $$t_2.getTokenRequestDictionary = searchUtils.$$d_getTokenRequestDict, $$t_2.userRing = userRing, $$t_2);
        }
        return this._searchInitializationSettings$p$0;
    },
    
    onBeforeContinue: function Common_ReactSharedHeaderPropsHelper$onBeforeContinue$in(hideDocumentTitle) {
        this._onFirstRender$p$0();
        this.registerCommandHandlers(hideDocumentTitle);
    }
}


Common.ReactSharedHeaderSearchUtils = function Common_ReactSharedHeaderSearchUtils() {
    this.$$d__getSubstrateTokenPromise$p$0 = Function.createDelegate(this, this._getSubstrateTokenPromise$p$0);
    this.$$d__getLokiTokenPromise$p$0 = Function.createDelegate(this, this._getLokiTokenPromise$p$0);
    this.$$d_getTokenRequestDict = Function.createDelegate(this, this.getTokenRequestDict);
}
Common.ReactSharedHeaderSearchUtils.isSearchEnabled = function Common_ReactSharedHeaderSearchUtils$isSearchEnabled$st() {
    return !!Common.AFrameworkApplication.get_activeFrame() && (Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isTellMeInSharedHeaderEnabled() || Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isSharedHeaderSearchUxEnabled());
}
Common.ReactSharedHeaderSearchUtils.isSearchUxEnabled = function Common_ReactSharedHeaderSearchUtils$isSearchUxEnabled$st() {
    return !!Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isSharedHeaderSearchUxEnabled();
}
Common.ReactSharedHeaderSearchUtils.prototype = {
    _searchOauthManager$0: null,
    
    _tryResolveSearchOAuthManager$p$0: function Common_ReactSharedHeaderSearchUtils$_tryResolveSearchOAuthManager$p$0$in() {
        try {
            if (!this._searchOauthManager$0) {
                this._searchOauthManager$0 = Common.Utils.Container.get_instance().resolve(Common.App.SearchCommon.ISearchOAuthManager, '');
            }
        }
        catch (e) {
            Diag.ULS.sendTraceTag(51689674, 1300, 10, 'Unable to resolve ISearchOAuthManager: ' + e);
        }
    },
    
    _getLokiTokenPromise$p$0: function Common_ReactSharedHeaderSearchUtils$_getLokiTokenPromise$p$0$in() {
        this._tryResolveSearchOAuthManager$p$0();
        var $$t_1 = this;
        return (this._searchOauthManager$0) ? this._searchOauthManager$0.isConnectedServiceEnabled().then(function(isEnabled) {
            if (isEnabled) {
                return $$t_1._searchOauthManager$0.getToken('Search', Common.AFrameworkApplication.lokiEndpointForSearch);
            }
            return null;
        }) : null;
    },
    
    _getSubstrateTokenPromise$p$0: function Common_ReactSharedHeaderSearchUtils$_getSubstrateTokenPromise$p$0$in() {
        this._tryResolveSearchOAuthManager$p$0();
        var $$t_1 = this;
        return (this._searchOauthManager$0) ? this._searchOauthManager$0.isConnectedServiceEnabled().then(function(isEnabled) {
            if (isEnabled) {
                return $$t_1._searchOauthManager$0.getToken('Search', Common.AFrameworkApplication.substrateEndpointForSearch);
            }
            return null;
        }) : null;
    },
    
    _getLokiTokenPromiseFunc$p$0: function Common_ReactSharedHeaderSearchUtils$_getLokiTokenPromiseFunc$p$0$in() {
        return this.$$d__getLokiTokenPromise$p$0;
    },
    
    _getSubstrateTokenPromiseFunc$p$0: function Common_ReactSharedHeaderSearchUtils$_getSubstrateTokenPromiseFunc$p$0$in() {
        return this.$$d__getSubstrateTokenPromise$p$0;
    },
    
    _shouldFetchTokensForSearch$p$0: function Common_ReactSharedHeaderSearchUtils$_shouldFetchTokensForSearch$p$0$in() {
        return !!Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_shouldFetchTokensForSearch();
    },
    
    getTokenRequestDict: function Common_ReactSharedHeaderSearchUtils$getTokenRequestDict$in() {
        var dict = {};
        if (this._shouldFetchTokensForSearch$p$0()) {
            dict['Loki'] = this._getLokiTokenPromiseFunc$p$0();
            dict['Substrate'] = this._getSubstrateTokenPromiseFunc$p$0();
        }
        return dict;
    },
    
    _logTellMeResourceLoadEvent$p$0: function Common_ReactSharedHeaderSearchUtils$_logTellMeResourceLoadEvent$p$0$in(status) {
        var logScope = 'Events';
        var tenantScope = 'TellMeWAC.';
        var $$t_3, $$t_4, $$t_5;
        Otel.Telemetry.sendTellMeActivityEvent(($$t_5 = new Otel.ActivityEvent(), $$t_5.name = logScope, $$t_5.dataFields = [ ($$t_3 = new Otel.DataField(), $$t_3.name = 'Event', $$t_3.string = 'StringsLoaded', $$t_3), ($$t_4 = new Otel.DataField(), $$t_4.name = 'Status', $$t_4.bool = status, $$t_4) ], $$t_5.durationMs = Math.round(window.performance.now()), $$t_5), tenantScope);
    },
    
    loadTellMeStrings: function Common_ReactSharedHeaderSearchUtils$loadTellMeStrings$in() {
        var $$t_H = this;
        return new Promise(function(resolve, reject) {
            var dynamicScriptLoader = Common.Utils.Container.get_instance().resolve(Common.IDynamicScriptLoaderProvider, '').getScriptLoader();
            if (dynamicScriptLoader) {
                dynamicScriptLoader.loadScript('tellme-strings').then(function() {
                    $$t_H._logTellMeResourceLoadEvent$p$0(true);
                    resolve(true);
                }).catch(function(e) {
                    $$t_H._logTellMeResourceLoadEvent$p$0(false);
                    reject(false);
                });
            }
            else {
                $$t_H._logTellMeResourceLoadEvent$p$0(false);
                reject(false);
            }
        });
    }
}


Common.ReactSharedHeaderFocusManager = function Common_ReactSharedHeaderFocusManager(focusManager, f6Manager, mouseInputManager, touchInputManager, actionManager) {
    this.$$d__onChatFocus$p$0 = Function.createDelegate(this, this._onChatFocus$p$0);
    this._focusManager$0 = focusManager;
    this._f6Manager$0 = f6Manager;
    this._mouseInputManager$0 = mouseInputManager;
    this._touchInputManager$0 = touchInputManager;
    this._actionManager$0 = actionManager;
}
Common.ReactSharedHeaderFocusManager.prototype = {
    _focusManager$0: null,
    _f6Manager$0: null,
    _mouseInputManager$0: null,
    _touchInputManager$0: null,
    _actionManager$0: null,
    _transferFocusToChat$0: null,
    
    _registerF6$p$0: function Common_ReactSharedHeaderFocusManager$_registerF6$p$0$in(element, focusId, parentFocusId, focusAction) {
        var scope = this._focusManager$0.getScope(focusId);
        scope.parent = parentFocusId;
        scope.set_keyDownHandledExternally(true);
        if (focusAction) {
            scope.addOnFocus(focusAction);
        }
        this._mouseInputManager$0.addControlFocus(focusId, element, false, false);
        this._touchInputManager$0.addControlFocus(focusId, element, false, false);
        var $$t_9 = this;
        var listing = new Common.DOMFocusListing(function() {
            return element;
        });
        listing.addValidTag(Common.DOMTag.button);
        listing.addValidTag(Common.DOMTag.a);
        listing.addValidTag(Common.DOMTag.div);
        listing.addValidTag(Common.DOMTag.textArea);
        listing.addValidTag(Common.DOMTag.input);
        listing.addValidTag(Common.DOMTag.iFrame);
        var $$t_A = this;
        var region = this._focusManager$0.buildRegionWithDelegate(function() {
            return element;
        }, scope, listing);
        region.looped = true;
        var tabInput = Common.KeyInputManager.hashKey(Common.KeyCode.vK_Tab, 0);
        var tabShiftInput = Common.KeyInputManager.hashKey(Common.KeyCode.vK_Tab, Common.KeyModifiers.shift);
        scope.unBindAction(tabInput);
        scope.unBindAction(tabShiftInput);
    },
    
    onFlexPaneOpen: function Common_ReactSharedHeaderFocusManager$onFlexPaneOpen$in(element) {
        this._registerF6$p$0(element, Common.ReactSharedHeaderConstants.meControlFlexPaneFocusId, Common.ReactSharedHeaderConstants.headerUiFocusId, null);
        this._focusManager$0.setScope(Common.ReactSharedHeaderConstants.meControlFlexPaneFocusId);
        this._f6Manager$0.addF6(Common.ReactSharedHeaderConstants.meControlFlexPaneFocusId, true, false);
    },
    
    onFlexPaneClose: function Common_ReactSharedHeaderFocusManager$onFlexPaneClose$in(element) {
        this._f6Manager$0.deactivateFocus(Common.ReactSharedHeaderConstants.meControlFlexPaneFocusId);
        this._focusManager$0.setScope(Common.ReactSharedHeaderConstants.headerUiFocusId);
    },
    
    onChatOpen: function Common_ReactSharedHeaderFocusManager$onChatOpen$in(element, transferFocusToChat) {
        if (!this._transferFocusToChat$0) {
            this._transferFocusToChat$0 = transferFocusToChat;
            this._registerF6$p$0(element, Common.ReactSharedHeaderConstants.chatFocusId, Common.AFrame.appFocusId, this.$$d__onChatFocus$p$0);
        }
        this._focusManager$0.setScope(Common.ReactSharedHeaderConstants.chatFocusId);
        this._f6Manager$0.addF6(Common.ReactSharedHeaderConstants.chatFocusId, true, false);
    },
    
    _onChatFocus$p$0: function Common_ReactSharedHeaderFocusManager$_onChatFocus$p$0$in(previousScope, nextScope) {
        if (this._transferFocusToChat$0) {
            this._transferFocusToChat$0();
        }
    },
    
    onChatClose: function Common_ReactSharedHeaderFocusManager$onChatClose$in() {
        this._f6Manager$0.deactivateFocus(Common.ReactSharedHeaderConstants.chatFocusId);
        this._focusManager$0.forceScopeChange(Common.AFrame.documentFocusID);
    },
    
    onChatCtrlF6: function Common_ReactSharedHeaderFocusManager$onChatCtrlF6$in(isShift) {
        this._actionManager$0.processAction((isShift) ? Common.CommonCommands.f6shift : Common.CommonCommands.f6, 2, null);
    }
}


Common.RibbonPeripheralSection = function Common_RibbonPeripheralSection() {
}


Common.RibbonTabScalingActor = function Common_RibbonTabScalingActor() {
}
Common.RibbonTabScalingActor.scaleHeader = function Common_RibbonTabScalingActor$scaleHeader$st(isRtl) {
    var topBar1ExclusiveContainer;
    var topBar2ExclusiveContainer;
    var $$t_3, $$t_4;
    Common.RibbonTabScalingActor._findDefaultRibbonTopBars$p(($$t_3 = {'val': topBar1ExclusiveContainer}), ($$t_4 = {'val': topBar2ExclusiveContainer})), topBar1ExclusiveContainer = $$t_3.val, topBar2ExclusiveContainer = $$t_4.val;
    Common.RibbonTabScalingActor.scaleHeaderUsingContainers(topBar1ExclusiveContainer, topBar2ExclusiveContainer, isRtl);
}
Common.RibbonTabScalingActor._findDefaultRibbonTopBars$p = function Common_RibbonTabScalingActor$_findDefaultRibbonTopBars$p$st(topBar1ExclusiveContainer, topBar2ExclusiveContainer) {
    var elmExternalHeader;
    var $$t_4, $$t_5;
    ($$t_5 = Common.CuiHeaderDomReference.tryEnsuredHeaderPanelInitialized(($$t_4 = {'val': elmExternalHeader}), !Common.AFrameworkApplication.hideHeaderEmbedded, false)), elmExternalHeader = $$t_4.val, $$t_5;
    var elmTopBars = $get(Common.CuiHelper.headerTopBarsId);
    if (elmExternalHeader) {
        topBar1ExclusiveContainer.val = document.getElementById(Common.CuiHelper.externalHeaderFullTopBarsId);
        topBar2ExclusiveContainer.val = elmTopBars;
    }
    else {
        topBar1ExclusiveContainer.val = elmTopBars.childNodes[0];
        topBar2ExclusiveContainer.val = elmTopBars.childNodes[1];
    }
}
Common.RibbonTabScalingActor.scaleHeaderUsingContainers = function Common_RibbonTabScalingActor$scaleHeaderUsingContainers$st(topBar1ExclusiveContainer, topBar2ExclusiveContainer, isRtl) {
    if (!topBar1ExclusiveContainer || !topBar2ExclusiveContainer) {
        return;
    }
    if (topBar2ExclusiveContainer.clientHeight > 0) {
        var hasRibbon = topBar2ExclusiveContainer.parentNode.parentNode.className.indexOf('cui-ribbon') !== -1;
        Common.RibbonTabScalingActor._scaleHeaderCore$p(topBar1ExclusiveContainer, topBar2ExclusiveContainer, isRtl, hasRibbon);
    }
}
Common.RibbonTabScalingActor._scaleHeaderCore$p = function Common_RibbonTabScalingActor$_scaleHeaderCore$p$st(headerContainer, elmTopBar2, isRtl, hasRibbon) {
    var elmTopRowLeft = null;
    var elmTopRowCenter = null;
    var elmTopRowRight = null;
    var elmBreadcrumbSeparator = null;
    var elmHostBrand = null;
    var elmFolderSeparator = null;
    var elmFolder = null;
    var elmTitle = null;
    var elmTopRightActionButton = null;
    var elmUserNameNameContainer = null;
    var elmUserNameNameItem = null;
    var elmFileButton = null;
    var elmTabHeaders = null;
    var elmTabHeadersSeparator = null;
    var elmBottomRowCenter = null;
    var elmOpenInClientButton = null;
    var elmFeedbackButton = null;
    var elmPeopleWellControl = null;
    var elmBottomRowRight = null;
    var elmUpsellButton = null;
    var $$t_Y, $$t_Z, $$t_a, $$t_b, $$t_c, $$t_d, $$t_e, $$t_f, $$t_g, $$t_h, $$t_i, $$t_j;
    Common.RibbonTabScalingActor._findHeaderItems$p(headerContainer, ($$t_Y = {'val': elmTopRowLeft}), ($$t_Z = {'val': elmTopRowCenter}), ($$t_a = {'val': elmTopRowRight}), ($$t_b = {'val': elmBreadcrumbSeparator}), ($$t_c = {'val': elmHostBrand}), ($$t_d = {'val': elmFolderSeparator}), ($$t_e = {'val': elmFolder}), ($$t_f = {'val': elmTitle}), ($$t_g = {'val': elmTopRightActionButton}), ($$t_h = {'val': elmUserNameNameContainer}), ($$t_i = {'val': elmUserNameNameItem}), ($$t_j = {'val': elmUpsellButton})), elmTopRowLeft = $$t_Y.val, elmTopRowCenter = $$t_Z.val, elmTopRowRight = $$t_a.val, elmBreadcrumbSeparator = $$t_b.val, elmHostBrand = $$t_c.val, elmFolderSeparator = $$t_d.val, elmFolder = $$t_e.val, elmTitle = $$t_f.val, elmTopRightActionButton = $$t_g.val, elmUserNameNameContainer = $$t_h.val, elmUserNameNameItem = $$t_i.val, elmUpsellButton = $$t_j.val;
    var $$t_k, $$t_l, $$t_m, $$t_n, $$t_o, $$t_p, $$t_q, $$t_r;
    Common.RibbonTabScalingActor._findTopBar2Items$p(elmTopBar2, ($$t_k = {'val': elmFileButton}), ($$t_l = {'val': elmTabHeaders}), ($$t_m = {'val': elmTabHeadersSeparator}), ($$t_n = {'val': elmBottomRowCenter}), ($$t_o = {'val': elmOpenInClientButton}), ($$t_p = {'val': elmFeedbackButton}), ($$t_q = {'val': elmPeopleWellControl}), ($$t_r = {'val': elmBottomRowRight})), elmFileButton = $$t_k.val, elmTabHeaders = $$t_l.val, elmTabHeadersSeparator = $$t_m.val, elmBottomRowCenter = $$t_n.val, elmOpenInClientButton = $$t_o.val, elmFeedbackButton = $$t_p.val, elmPeopleWellControl = $$t_q.val, elmBottomRowRight = $$t_r.val;
    var elementsToShow = [ elmTopRowLeft, elmTopRowCenter, elmTopRowRight, elmBreadcrumbSeparator, elmHostBrand, elmFolderSeparator, elmFolder, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmTabHeadersSeparator, elmBottomRowCenter, elmOpenInClientButton, elmFeedbackButton, elmPeopleWellControl, elmBottomRowRight, elmUpsellButton ];
    for (var $$arr_P = elementsToShow, $$len_Q = $$arr_P.length, $$idx_R = 0; $$idx_R < $$len_Q; ++$$idx_R) {
        var element = $$arr_P[$$idx_R];
        Common.RibbonTabScalingActor._showElement$p(element);
    }
    var elementsToUntruncate = [ elmTopRowLeft, elmTopRowCenter, elmTopRowRight, elmHostBrand, elmFolder, elmTitle, elmUserNameNameContainer, elmUserNameNameItem, elmBottomRowCenter, elmFeedbackButton, elmPeopleWellControl, elmBottomRowRight ];
    for (var $$arr_U = elementsToUntruncate, $$len_V = $$arr_U.length, $$idx_W = 0; $$idx_W < $$len_V; ++$$idx_W) {
        var element = $$arr_U[$$idx_W];
        Common.RibbonTabScalingActor._untruncateElement$p(element);
    }
    Common.RibbonTabScalingActor._resetPosition$p(elmTopRowCenter);
    Common.RibbonTabScalingActor._setHeaderScaleIndex$p(elmTabHeaders, 0);
    Common.RibbonTabScalingActor._ensureNoHeaderItemsOverlap$p(elmTopRowLeft, elmTopRowCenter, elmTopRowRight, elmBreadcrumbSeparator, elmHostBrand, elmFolderSeparator, elmFolder, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmFileButton, elmTabHeaders, elmTabHeadersSeparator, elmBottomRowCenter, elmOpenInClientButton, elmFeedbackButton, elmPeopleWellControl, elmBottomRowRight, elmUpsellButton, hasRibbon, isRtl);
    Common.RibbonTabScalingActor._adjustBreadcrumbDisplay$i(elmFolderSeparator, elmFolder);
}
Common.RibbonTabScalingActor.scaleNonCuiHeaders = function Common_RibbonTabScalingActor$scaleNonCuiHeaders$st(headerContainer, isRtl) {
    Common.RibbonTabScalingActor._scaleHeaderCore$p(headerContainer, null, isRtl, false);
}
Common.RibbonTabScalingActor._adjustBreadcrumbDisplay$i = function Common_RibbonTabScalingActor$_adjustBreadcrumbDisplay$i$st(elmFolderSeparator, elmFolder) {
    if ((elmFolderSeparator) && (elmFolder)) {
        elmFolderSeparator.style.marginTop = ((elmFolder.offsetHeight - elmFolderSeparator.offsetHeight) / 2) + 'px';
    }
}
Common.RibbonTabScalingActor._findHeaderItems$p = function Common_RibbonTabScalingActor$_findHeaderItems$p$st(elmParent, elmTopRowLeft, elmTopRowCenter, elmTopRowRight, elmBreadcrumbSeparator, elmHostBrand, elmFolderSeparator, elmFolder, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmUpsellButton) {
    for (var i = 0; (elmParent) && (i < elmParent.childNodes.length); i++) {
        var child = elmParent.childNodes[i];
        var childClassName = Common.DomUtils.getDOMElementClassName(child);
        var hasId = (!!child.id);
        if (childClassName.indexOf('cui-QATRowLeft') !== -1) {
            elmTopRowLeft.val = child;
        }
        else if (childClassName.indexOf('cui-QATRowCenter') !== -1) {
            elmTopRowCenter.val = child;
        }
        else if (childClassName.indexOf('cui-QATRowRight') !== -1) {
            elmTopRowRight.val = child;
        }
        else if (childClassName.indexOf('OfficeOnlineBrandBreadcrumbSeparator') !== -1) {
            elmBreadcrumbSeparator.val = child;
        }
        else if (child.id === Common.CuiHelper.breadcrumbBrandId) {
            elmHostBrand.val = child;
        }
        else if (child.id === Common.CuiHelper.folderSeparatorId) {
            elmFolderSeparator.val = child;
        }
        else if (child.id === Common.CuiHelper.breadcrumbFolderId) {
            elmFolder.val = child;
        }
        else if (child.id === Common.CuiHelper.breadcrumbTitleId) {
            elmTitle.val = child;
        }
        else if (hasId && Common.RibbonTabScalingActor._isElementTopRightActionButton$p(child)) {
            elmTopRightActionButton.val = child;
        }
        else if (childClassName.indexOf('UsernameNameContainer') !== -1) {
            elmUserNameNameContainer.val = child;
        }
        else if (childClassName.indexOf('UsernameNameItem') !== -1) {
            elmUserNameNameItem.val = child;
        }
        else if (childClassName.indexOf('FreemiumUpsellButton') !== -1) {
            elmUpsellButton.val = child;
        }
        Common.RibbonTabScalingActor._findHeaderItems$p(child, elmTopRowLeft, elmTopRowCenter, elmTopRowRight, elmBreadcrumbSeparator, elmHostBrand, elmFolderSeparator, elmFolder, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmUpsellButton);
    }
}
Common.RibbonTabScalingActor._findTopBar2Items$p = function Common_RibbonTabScalingActor$_findTopBar2Items$p$st(elmParent, elmFileButton, elmTabHeaders, elmTabHeadersSeparator, elmBottomRowCenter, elmOpenInClientButton, elmFeedbackButton, elmPeopleWellControl, elmBottomRowRight) {
    for (var i = 0; (elmParent) && (i < elmParent.childNodes.length); i++) {
        var child = elmParent.childNodes[i];
        var childClassName = Common.DomUtils.getDOMElementClassName(child);
        var hasId = (!!child.id);
        if (childClassName.indexOf('cui-jewel-container') !== -1) {
            elmFileButton.val = child;
        }
        else if (childClassName.indexOf('cui-tts') !== -1) {
            elmTabHeaders.val = child;
        }
        else if (childClassName.indexOf('cui-TabRowInline') !== -1) {
            elmBottomRowCenter.val = child;
        }
        else if (childClassName.indexOf('cui-TabRowRight') !== -1) {
            elmBottomRowRight.val = child;
        }
        else if (childClassName.indexOf('cui-separator') !== -1) {
            elmTabHeadersSeparator.val = child;
        }
        else if (hasId && child.id.startsWith(Common.CuiHelper.openInClientButtonId) && !elmOpenInClientButton.val) {
            elmOpenInClientButton.val = child;
        }
        else if (hasId && child.id.startsWith(Common.CuiHelper.feedbackButtonId)) {
            elmFeedbackButton.val = child;
        }
        else if (hasId && child.id.startsWith(Common.CuiHelper.peoplesWellControlId)) {
            elmPeopleWellControl.val = child;
        }
        Common.RibbonTabScalingActor._findTopBar2Items$p(child, elmFileButton, elmTabHeaders, elmTabHeadersSeparator, elmBottomRowCenter, elmOpenInClientButton, elmFeedbackButton, elmPeopleWellControl, elmBottomRowRight);
    }
}
Common.RibbonTabScalingActor._scaleBottomRowItems$p = function Common_RibbonTabScalingActor$_scaleBottomRowItems$p$st(elmFileButton, elmTabHeaders, elmTabHeadersSeparator, elmBottomRowCenter, elmOpenInClientButton, elmFeedbackButton, elmPeopleWellControl, elmBottomRowRight, isRtl) {
    if (Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmFileButton, elmTabHeaders, isRtl)) {
        Common.RibbonTabScalingActor._headerScaleDown$p(elmTabHeaders);
        if (Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmFileButton, elmTabHeaders, isRtl)) {
            Common.RibbonTabScalingActor._headerScaleDown$p(elmTabHeaders);
        }
    }
    if (Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmTabHeaders, elmBottomRowCenter, isRtl)) {
        Common.RibbonTabScalingActor._hideElement$p(elmTabHeadersSeparator);
        Common.RibbonTabScalingActor._hideElement$p(elmOpenInClientButton);
        if (Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmTabHeaders, elmBottomRowCenter, isRtl)) {
            Common.RibbonTabScalingActor._headerScaleDown$p(elmTabHeaders);
            if (Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmTabHeaders, elmBottomRowCenter, isRtl)) {
                Common.RibbonTabScalingActor._headerScaleDown$p(elmTabHeaders);
                if (Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmTabHeaders, elmBottomRowCenter, isRtl)) {
                    Common.RibbonTabScalingActor._hideElement$p(elmBottomRowCenter);
                }
            }
        }
    }
    if (Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmBottomRowCenter, elmBottomRowRight, isRtl)) {
        Common.RibbonTabScalingActor._hideElement$p(elmTabHeadersSeparator);
        Common.RibbonTabScalingActor._hideElement$p(elmOpenInClientButton);
    }
    var hideDomElementOrderList = [ elmFeedbackButton, elmPeopleWellControl, elmBottomRowRight ];
    Common.RibbonTabScalingActor._hideElementsIfContainerControlsOverlap$p(elmBottomRowCenter, elmBottomRowRight, hideDomElementOrderList, isRtl);
    Common.RibbonTabScalingActor._hideElementsIfContainerControlsOverlap$p(elmTabHeaders, elmBottomRowRight, hideDomElementOrderList, isRtl);
}
Common.RibbonTabScalingActor._hideElementsIfContainerControlsOverlap$p = function Common_RibbonTabScalingActor$_hideElementsIfContainerControlsOverlap$p$st(container1, container2, elementsInHideOrder, isRtl) {
    var hideControlCounter = 0;
    while (hideControlCounter < elementsInHideOrder.length && Common.RibbonTabScalingActor._relativeLayoutAwry$i(container1, container2, isRtl)) {
        Common.RibbonTabScalingActor._hideElement$p(elementsInHideOrder[hideControlCounter]);
        hideControlCounter++;
    }
}
Common.RibbonTabScalingActor._getScaleStep$p = function Common_RibbonTabScalingActor$_getScaleStep$p$st(elmTabHeaders) {
    if (!elmTabHeaders) {
        return 0;
    }
    if (isNullOrUndefined(elmTabHeaders[Common.RibbonTabScalingActor._scaleStepAttribute$p])) {
        var scaleStep = 0;
        if (elmTabHeaders.className.indexOf('cui-tts-scale1') !== -1) {
            scaleStep = 1;
        }
        else if (elmTabHeaders.className.indexOf('cui-tts-scale2') !== -1) {
            scaleStep = 2;
        }
        elmTabHeaders[Common.RibbonTabScalingActor._scaleStepAttribute$p] = scaleStep;
    }
    return parseInt(elmTabHeaders[Common.RibbonTabScalingActor._scaleStepAttribute$p]);
}
Common.RibbonTabScalingActor._headerScaleDown$p = function Common_RibbonTabScalingActor$_headerScaleDown$p$st(elmTabHeaders) {
    var scaleStep = Common.RibbonTabScalingActor._getScaleStep$p(elmTabHeaders);
    if (scaleStep < 2) {
        Common.RibbonTabScalingActor._setHeaderScaleIndex$p(elmTabHeaders, ++scaleStep);
    }
}
Common.RibbonTabScalingActor._headerScaleUp$p = function Common_RibbonTabScalingActor$_headerScaleUp$p$st(elmTabHeaders) {
    var scaleStep = Common.RibbonTabScalingActor._getScaleStep$p(elmTabHeaders);
    if (scaleStep > 0) {
        Common.RibbonTabScalingActor._setHeaderScaleIndex$p(elmTabHeaders, --scaleStep);
    }
}
Common.RibbonTabScalingActor._setHeaderScaleIndex$p = function Common_RibbonTabScalingActor$_setHeaderScaleIndex$p$st(elmTabHeaders, index) {
    if (elmTabHeaders) {
        elmTabHeaders.className = Common.RibbonTabScalingActor._ribbonHeaderScaleClasses$p[index];
        elmTabHeaders[Common.RibbonTabScalingActor._scaleStepAttribute$p] = index;
    }
}
Common.RibbonTabScalingActor._relativeLayoutAwry$i = function Common_RibbonTabScalingActor$_relativeLayoutAwry$i$st(elmFirst, elmSecond, isRtl) {
    if (!elmFirst || !elmSecond) {
        return false;
    }
    return Common.WindowUtils.leftBoundsOverlapsRightBounds(Common.WindowUtils.getElementBounds(elmFirst), Common.WindowUtils.getElementBounds(elmSecond), isRtl);
}
Common.RibbonTabScalingActor._overlapAmount$p = function Common_RibbonTabScalingActor$_overlapAmount$p$st(elmFirst, elmSecond, isRtl) {
    var overlapAmount = 0;
    if ((elmFirst) && (elmSecond)) {
        overlapAmount = Common.WindowUtils.leftBoundsOverlapsRightBoundsByAmount(Common.WindowUtils.getElementBounds(elmFirst), Common.WindowUtils.getElementBounds(elmSecond), isRtl);
    }
    return overlapAmount;
}
Common.RibbonTabScalingActor._contextualTabsVisible$p = function Common_RibbonTabScalingActor$_contextualTabsVisible$p$st(elmTabHeaders) {
    for (var iTab = 0; (elmTabHeaders) && (iTab < elmTabHeaders.childNodes.length); iTab++) {
        var elmTab = elmTabHeaders.childNodes[iTab];
        if (elmTab.className.indexOf('cui-cg') !== -1) {
            return true;
        }
    }
    return false;
}
Common.RibbonTabScalingActor._getFirstContextualTabSet$p = function Common_RibbonTabScalingActor$_getFirstContextualTabSet$p$st(elmTabHeaders) {
    var elmFirstContextualTabSet = null;
    for (var iTab = elmTabHeaders.childNodes.length - 1; (elmTabHeaders) && (iTab >= 0); iTab--) {
        var elmTab = elmTabHeaders.childNodes[iTab];
        if (elmTab.className.indexOf('cui-cg') === -1) {
            break;
        }
        elmFirstContextualTabSet = elmTab;
    }
    return elmFirstContextualTabSet;
}
Common.RibbonTabScalingActor._truncateElement$p = function Common_RibbonTabScalingActor$_truncateElement$p$st(elmItemToTruncate, elmContainedText, truncationAmount) {
    if ((elmItemToTruncate) && !Common.RibbonTabScalingActor._isHidden$p(elmItemToTruncate)) {
        var elmStyle = Common.CssUtils.getCurrentStyle(elmItemToTruncate);
        var padding = Common.DomUtils.parseCssSize(elmStyle.paddingLeft) + Common.DomUtils.parseCssSize(elmStyle.paddingRight);
        var truncatedWidth = elmItemToTruncate.offsetWidth - truncationAmount - padding;
        var elmCur = elmContainedText;
        var textPadding = 0;
        while ((elmCur) && (elmCur !== elmItemToTruncate)) {
            elmStyle = Common.CssUtils.getCurrentStyle(elmCur);
            if (elmStyle) {
                textPadding += Common.DomUtils.parseCssSize(elmStyle.paddingLeft) + Common.DomUtils.parseCssSize(elmStyle.paddingRight);
            }
            elmCur = elmCur.parentNode;
        }
        truncatedWidth = Math.max(truncatedWidth, Common.RibbonTabScalingActor._minTruncationWidth$p + textPadding);
        elmItemToTruncate.style.width = truncatedWidth + 'px';
    }
}
Common.RibbonTabScalingActor._repositionElement$p = function Common_RibbonTabScalingActor$_repositionElement$p$st(elmItemToReposition, elmToFitAgainst, isRtl) {
    if ((elmItemToReposition) && (elmToFitAgainst)) {
        var elmToFitAgainstLeft = 0;
        var elmToFitAgainstTop = 0;
        var $$t_6, $$t_7;
        Common.WindowUtils.getElementAbsolutePosition(elmToFitAgainst, ($$t_6 = {'val': elmToFitAgainstLeft}), ($$t_7 = {'val': elmToFitAgainstTop})), elmToFitAgainstLeft = $$t_6.val, elmToFitAgainstTop = $$t_7.val;
        var newLeftOffset = (isRtl) ? elmToFitAgainstLeft - elmItemToReposition.offsetWidth : elmToFitAgainstLeft + elmToFitAgainst.offsetWidth;
        Common.RibbonTabScalingActor._moveElement$p(elmItemToReposition, newLeftOffset);
    }
}
Common.RibbonTabScalingActor._ensureNoHeaderItemsOverlap$p = function Common_RibbonTabScalingActor$_ensureNoHeaderItemsOverlap$p$st(elmTopRowLeft, elmTopRowCenter, elmTopRowRight, elmBreadcrumbSeparator, elmHostBrand, elmFolderSeparator, elmFolder, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmFileButton, elmTabHeaders, elmTabHeadersSeparator, elmBottomRowCenter, elmOpenInClientButton, elmFeedbackButton, elmPeopleWellControl, elmBottomRowRight, elmUpsellButton, hasRibbon, isRtl) {
    if (hasRibbon) {
        Common.RibbonTabScalingActor._scaleBottomRowItems$p(elmFileButton, elmTabHeaders, elmTabHeadersSeparator, elmBottomRowCenter, elmOpenInClientButton, elmFeedbackButton, elmPeopleWellControl, elmBottomRowRight, isRtl);
    }
    if (Common.RibbonTabScalingActor._contextualTabsVisible$p(elmTabHeaders)) {
        Common.RibbonTabScalingActor._scaleTopRowItemsAroundContextualTabs$p(elmTabHeaders, elmTopRowLeft, elmTopRowCenter, elmTopRowRight, elmBreadcrumbSeparator, elmHostBrand, elmFolderSeparator, elmFolder, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmUpsellButton, isRtl);
    }
    else {
        Common.RibbonTabScalingActor._scaleTopRowItems$p(elmTopRowLeft, elmTopRowCenter, elmTopRowRight, elmBreadcrumbSeparator, elmHostBrand, elmFolderSeparator, elmFolder, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmUpsellButton, isRtl);
    }
}
Common.RibbonTabScalingActor._scaleTopRowItems$p = function Common_RibbonTabScalingActor$_scaleTopRowItems$p$st(elmTopRowLeft, elmTopRowCenter, elmTopRowRight, elmBreadcrumbSeparator, elmHostBrand, elmFolderSeparator, elmFolder, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmUpsellButton, isRtl) {
    var hasHostBrand = (!!elmHostBrand);
    var hasFolder = (!!elmFolder);
    var hasTitle = (!!elmTitle);
    var hasUserName = (!!elmUserNameNameContainer);
    var overlapAmount = 0;
    if ((hasFolder || hasTitle) && ((overlapAmount = Common.RibbonTabScalingActor._overlapAmount$p(elmTopRowLeft, elmTopRowCenter, isRtl)) > 0)) {
        var truncateFolder = hasFolder;
        if (hasTitle && (!hasFolder || (elmTitle.offsetWidth > elmFolder.offsetWidth))) {
            truncateFolder = false;
        }
        Common.RibbonTabScalingActor._truncateElement$p((truncateFolder) ? elmFolder : elmTitle, (truncateFolder) ? elmFolder : elmTitle, (truncateFolder) ? overlapAmount : overlapAmount * 2);
        if (hasFolder && hasTitle && ((overlapAmount = Common.RibbonTabScalingActor._overlapAmount$p(elmTopRowLeft, elmTopRowCenter, isRtl)) > 0)) {
            Common.RibbonTabScalingActor._truncateElement$p((truncateFolder) ? elmFolder : elmTitle, (truncateFolder) ? elmFolder : elmTitle, (truncateFolder) ? overlapAmount : overlapAmount * 2);
        }
    }
    if ((hasFolder && Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmFolder, elmTopRowCenter, isRtl)) || (hasHostBrand && Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmHostBrand, elmTopRowCenter, isRtl))) {
        Common.RibbonTabScalingActor._hideElement$p(elmBreadcrumbSeparator);
        Common.RibbonTabScalingActor._hideElement$p(elmHostBrand);
        Common.RibbonTabScalingActor._hideElement$p(elmFolderSeparator);
        Common.RibbonTabScalingActor._hideElement$p(elmFolder);
        if (hasTitle) {
            Common.RibbonTabScalingActor._untruncateElement$p(elmTopRowCenter);
            Common.RibbonTabScalingActor._untruncateElement$p(elmTitle);
        }
    }
    Common.RibbonTabScalingActor._remedyCenterAndRightOverlap$p(elmTopRowCenter, elmTopRowRight, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmUpsellButton, isRtl);
    if (hasTitle) {
        Common.RibbonTabScalingActor._capElementWidth$p(elmTitle, elmTopRowLeft, elmTopRowRight, isRtl);
    }
}
Common.RibbonTabScalingActor._scaleTopRowItemsAroundContextualTabs$p = function Common_RibbonTabScalingActor$_scaleTopRowItemsAroundContextualTabs$p$st(elmTabHeaders, elmTopRowLeft, elmTopRowCenter, elmTopRowRight, elmBreadcrumbSeparator, elmHostBrand, elmFolderSeparator, elmFolder, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmUpsellButton, isRtl) {
    var hasFolder = (!!elmFolder);
    var hasTitle = (!!elmTitle);
    var hasShareButton = (!!elmTopRightActionButton);
    var hasUpsellButton = (!!elmUpsellButton);
    var elmFirstContextualTabSet = Common.RibbonTabScalingActor._getFirstContextualTabSet$p(elmTabHeaders);
    var overlapAmount = 0;
    if ((overlapAmount = Common.RibbonTabScalingActor._overlapAmount$p(elmTopRowLeft, elmFirstContextualTabSet, isRtl)) > 0) {
        if (hasFolder) {
            Common.RibbonTabScalingActor._truncateElement$p(elmFolder, elmFolder, overlapAmount);
        }
        if (!hasFolder || Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmFolder, elmFirstContextualTabSet, isRtl)) {
            Common.RibbonTabScalingActor._hideElement$p(elmBreadcrumbSeparator);
            Common.RibbonTabScalingActor._hideElement$p(elmHostBrand);
            Common.RibbonTabScalingActor._hideElement$p(elmFolderSeparator);
            Common.RibbonTabScalingActor._hideElement$p(elmFolder);
        }
    }
    if (Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmTabHeaders, elmTopRowCenter, isRtl)) {
        Common.RibbonTabScalingActor._repositionElement$p(elmTopRowCenter, elmTabHeaders, isRtl);
    }
    Common.RibbonTabScalingActor._remedyCenterAndRightOverlap$p(elmTopRowCenter, elmTopRowRight, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmUpsellButton, isRtl);
    if ((overlapAmount = Common.RibbonTabScalingActor._overlapAmount$p(elmTabHeaders, elmTopRowRight, isRtl)) > 0) {
        Common.RibbonTabScalingActor._truncateElement$p(elmUserNameNameContainer, elmUserNameNameItem, overlapAmount);
        if (hasUpsellButton && Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmTabHeaders, elmTopRowRight, isRtl)) {
            Common.RibbonTabScalingActor._hideElement$p(elmUpsellButton);
        }
        if (hasShareButton && Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmTabHeaders, elmTopRowRight, isRtl)) {
            Common.RibbonTabScalingActor._hideElement$p(elmTopRightActionButton);
        }
    }
    if (hasTitle && !Common.RibbonTabScalingActor._isHidden$p(elmTopRowCenter)) {
        Common.RibbonTabScalingActor._capElementWidth$p(elmTitle, elmTabHeaders, elmTopRowRight, isRtl);
    }
}
Common.RibbonTabScalingActor._remedyCenterAndRightOverlap$p = function Common_RibbonTabScalingActor$_remedyCenterAndRightOverlap$p$st(elmTopRowCenter, elmTopRowRight, elmTitle, elmTopRightActionButton, elmUserNameNameContainer, elmUserNameNameItem, elmUpsellButton, isRtl) {
    var hasTitle = (!!elmTitle);
    var hasShareButton = (!!elmTopRightActionButton);
    var hasUserName = (!!elmUserNameNameContainer);
    var hasUpsellButton = (!!elmUpsellButton);
    var overlapAmount = 0;
    if ((hasTitle || hasUserName) && ((overlapAmount = Common.RibbonTabScalingActor._overlapAmount$p(elmTopRowCenter, elmTopRowRight, isRtl)) > 0)) {
        var isTitleCentered = (!!elmTopRowCenter) && (elmTopRowCenter.style.position !== 'absolute');
        var truncateTitle = hasTitle;
        if (hasUserName && (!hasTitle || (elmUserNameNameContainer.offsetWidth > elmTitle.offsetWidth))) {
            truncateTitle = false;
        }
        Common.RibbonTabScalingActor._truncateElement$p((truncateTitle) ? elmTitle : elmUserNameNameContainer, (truncateTitle) ? elmTitle : elmUserNameNameItem, (truncateTitle && isTitleCentered) ? overlapAmount * 2 : overlapAmount);
        if (hasTitle && hasUserName) {
            if ((overlapAmount = Common.RibbonTabScalingActor._overlapAmount$p(elmTopRowCenter, elmUserNameNameContainer, isRtl)) > 0) {
                truncateTitle = !truncateTitle;
                Common.RibbonTabScalingActor._truncateElement$p((truncateTitle) ? elmTitle : elmUserNameNameContainer, (truncateTitle) ? elmTitle : elmUserNameNameItem, (truncateTitle && isTitleCentered) ? overlapAmount * 2 : overlapAmount);
            }
            if (Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmTopRowCenter, elmUserNameNameContainer, isRtl)) {
                Common.RibbonTabScalingActor._hideElement$p(elmTopRowCenter);
            }
        }
        else if (hasTitle && Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmTopRowCenter, elmTopRowRight, isRtl)) {
            Common.RibbonTabScalingActor._hideElement$p(elmTopRowCenter);
        }
    }
    if (hasUpsellButton && Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmTopRowCenter, elmTopRowRight, isRtl)) {
        Common.RibbonTabScalingActor._hideElement$p(elmUpsellButton);
    }
    if (hasShareButton && Common.RibbonTabScalingActor._relativeLayoutAwry$i(elmTopRowCenter, elmTopRowRight, isRtl)) {
        Common.RibbonTabScalingActor._hideElement$p(elmTopRightActionButton);
    }
}
Common.RibbonTabScalingActor._isHidden$p = function Common_RibbonTabScalingActor$_isHidden$p$st(elm) {
    if (!elm) {
        return true;
    }
    var hidden = elm[Common.RibbonTabScalingActor._hideItemAttribute$p];
    return !(isNullOrUndefined(hidden) || hidden === Common.RibbonTabScalingActor._itemShown$p);
}
Common.RibbonTabScalingActor._hideElement$p = function Common_RibbonTabScalingActor$_hideElement$p$st(elm) {
    if ((elm) && !Common.RibbonTabScalingActor._isHidden$p(elm)) {
        elm.style.display = 'none';
        elm[Common.RibbonTabScalingActor._hideItemAttribute$p] = Common.RibbonTabScalingActor._itemHidden$p;
    }
}
Common.RibbonTabScalingActor._showElement$p = function Common_RibbonTabScalingActor$_showElement$p$st(elm) {
    if ((elm) && Common.RibbonTabScalingActor._isHidden$p(elm)) {
        elm.style.display = '';
        elm[Common.RibbonTabScalingActor._hideItemAttribute$p] = Common.RibbonTabScalingActor._itemShown$p;
    }
}
Common.RibbonTabScalingActor._untruncateElement$p = function Common_RibbonTabScalingActor$_untruncateElement$p$st(elm) {
    if (elm) {
        elm.style.width = 'auto';
        elm.style.maxWidth = 'none';
    }
}
Common.RibbonTabScalingActor._moveElement$p = function Common_RibbonTabScalingActor$_moveElement$p$st(elm, left) {
    if (elm) {
        elm.style.position = 'absolute';
        elm.style.left = left + 'px';
    }
}
Common.RibbonTabScalingActor._resetPosition$p = function Common_RibbonTabScalingActor$_resetPosition$p$st(elm) {
    if (elm) {
        elm.style.position = 'static';
        elm.style.left = 'auto';
    }
}
Common.RibbonTabScalingActor._capElementWidth$p = function Common_RibbonTabScalingActor$_capElementWidth$p$st(elm, elmPrevious, elmNext, isRtl) {
    if ((elm) && (elm.parentNode) && (elm.parentNode.parentNode)) {
        var peripheralOffsetWidth = Common.RibbonTabScalingActor._peripheralOffsetWithElement$i(elm);
        if (elm.parentNode.style.width !== 'auto') {
            var width = elm.parentNode.offsetWidth - peripheralOffsetWidth;
            elm.style.width = width + 'px';
        }
        var elmLeft = (isRtl) ? elmNext : elmPrevious;
        var elmRight = (isRtl) ? elmPrevious : elmNext;
        var boundsParentConstraints = Common.WindowUtils.getElementBounds(elm.parentNode.parentNode);
        var boundsLeft = (elmLeft) ? Common.WindowUtils.getElementBounds(elmLeft) : new Sys.UI.Bounds(boundsParentConstraints.x, 0, 0, 0);
        var locationRight = (elmRight) ? Common.WindowUtils.getElementLocation(elmRight) : new Sys.UI.Point(boundsParentConstraints.x + boundsParentConstraints.width, 0);
        var maxWidth = 0;
        if (elm.parentNode.style.position === 'absolute') {
            maxWidth = locationRight.x - (boundsLeft.x + boundsLeft.width) - peripheralOffsetWidth - 1;
        }
        else {
            var boundsElement = Common.WindowUtils.getElementBounds((!elm.nextSibling) ? elm : elm.parentNode);
            var centerOfElement = boundsElement.x + (boundsElement.width / 2);
            var distanceFromCenterToParentBound = Math.min(centerOfElement - (boundsLeft.x + boundsLeft.width), locationRight.x - centerOfElement);
            maxWidth = (distanceFromCenterToParentBound * 2) - peripheralOffsetWidth - 1;
        }
        elm.style.maxWidth = maxWidth + 'px';
    }
}
Common.RibbonTabScalingActor._peripheralOffsetWithElement$i = function Common_RibbonTabScalingActor$_peripheralOffsetWithElement$i$st(elm) {
    var elmStyle = Common.CssUtils.getCurrentStyle(elm);
    var elmPadding = (elmStyle) ? (Common.DomUtils.parseCssSize(elmStyle.paddingLeft) + Common.DomUtils.parseCssSize(elmStyle.paddingRight)) : 0;
    var elmParentStyle = Common.CssUtils.getCurrentStyle(elm.parentNode);
    var elmParentPadding = (elmParentStyle) ? (Common.DomUtils.parseCssSize(elmParentStyle.paddingLeft) + Common.DomUtils.parseCssSize(elmParentStyle.paddingRight)) : 0;
    var siblingOffsetWidth = 0;
    var elmCur = elm;
    while (elmCur.nextSibling) {
        elmCur = elmCur.nextSibling;
        siblingOffsetWidth += elmCur.offsetWidth;
    }
    return elmPadding + elmParentPadding + siblingOffsetWidth;
}
Common.RibbonTabScalingActor._isElementTopRightActionButton$p = function Common_RibbonTabScalingActor$_isElementTopRightActionButton$p$st(elm) {
    return (!!elm.id) && (elm.id.startsWith(Common.CuiHelper.shareButtonId) || elm.id.startsWith(Common.RibbonToggleButtonCreator.ribbonToggleId) || elm.id.startsWith(Common.CuiHelper.replyWithChangesButtonId) || elm.id.startsWith(Common.TopRowPeripheralControlCreator.workflowButtonId));
}


Common.RibbonToggleButtonCreator = function Common_RibbonToggleButtonCreator() {
}
Common.RibbonToggleButtonCreator.createRibbonToggleButton = function Common_RibbonToggleButtonCreator$createRibbonToggleButton$st(topRowRightContainer) {
    if (!topRowRightContainer) {
        return;
    }
    var toggleElement = document.createElement('div');
    toggleElement.id = Common.RibbonToggleButtonCreator.ribbonToggleId;
    toggleElement.className = 'cui-ctl-medium';
    toggleElement.title = CommonUIStrings.l_ToggleRibbonText;
    var toggleIcon = Common.ImageClusteringHelper.createClusteredImage(40, 20, (Common.HeaderUtils.isSimplifiedRibbonBeingShown()) ? Common.RibbonToggleButtonCreator._toggleIconInSimplifedRibbon$p : Common.RibbonToggleButtonCreator._toggleIconInLegacyRibbon$p, '', true, null);
    var toggleIconContainer = document.createElement('span');
    toggleIconContainer.id = Common.RibbonToggleButtonCreator._ribbonToggleButtonId$p;
    toggleIconContainer.tabIndex = 0;
    toggleIconContainer.className = 'toggleButton-iconContainer';
    toggleIconContainer.appendChild(toggleIcon);
    toggleIconContainer.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaButtonRole);
    toggleIconContainer.setAttribute(Common.AccessibilityUtils.ariaPressedAttribute, (Common.HeaderUtils.isSimplifiedRibbonBeingShown()) ? Common.AccessibilityUtils.ariaTrueValue : Common.AccessibilityUtils.ariaFalseValue);
    toggleIconContainer.setAttribute(Common.AccessibilityUtils.ariaLabelledByAttribute, Common.RibbonToggleButtonCreator._ribbonToggleLabelId$p);
    var toggleLabel = document.createElement('label');
    toggleLabel.id = Common.RibbonToggleButtonCreator._ribbonToggleLabelId$p;
    toggleLabel.className = 'toggleButton-label';
    toggleLabel.setAttribute('for', Common.RibbonToggleButtonCreator._ribbonToggleButtonId$p);
    toggleLabel.innerText = CommonUIStrings.l_ToggleRibbonText;
    toggleElement.appendChild(toggleIconContainer);
    toggleElement.appendChild(toggleLabel);
    topRowRightContainer.appendChild(toggleElement);
    Common.ClickInputManager.get_instance().registerHandler(Common.EventNames.click, toggleIconContainer, Common.RibbonToggleButtonCreator._onToggleButtonClick$p);
    Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, toggleIconContainer, Common.RibbonToggleButtonCreator._onToggleButtonKeyDown$p);
}
Common.RibbonToggleButtonCreator._onToggleButtonKeyDown$p = function Common_RibbonToggleButtonCreator$_onToggleButtonKeyDown$p$st(args) {
    if (args.innerEvent.keyCode === Common.KeyCode.vK_Enter || args.innerEvent.keyCode === Common.KeyCode.vK_Space) {
        Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.toggleRibbonUXDialog, 2, null);
        return true;
    }
    return false;
}
Common.RibbonToggleButtonCreator._onToggleButtonClick$p = function Common_RibbonToggleButtonCreator$_onToggleButtonClick$p$st(args) {
    Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.toggleRibbonUXDialog, 2, null);
    return true;
}


Common.RibbonUpsellButtonCreator = function Common_RibbonUpsellButtonCreator() {
}
Common.RibbonUpsellButtonCreator.createRibbonUpsellButton = function Common_RibbonUpsellButtonCreator$createRibbonUpsellButton$st(standaloneRootControlManager, parentContainer, upsellMode) {
    if (!parentContainer || !standaloneRootControlManager || Common.RibbonUpsellButtonCreator._hideButton$p) {
        return;
    }
    var showUpsellCommand = '1274543852';
    if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('FreemiumUpsellShowDialogIsEnabled')) {
        showUpsellCommand = '4180531998';
    }
    switch (upsellMode) {
        case Common.FreemiumUpsellMode.showUpsell:
            var freemiumUpsellButton = Common.CuiHelper.addButton(Common.RibbonUpsellButtonCreator.freemiumUpsellEligibleButtonId + Common.RibbonUpsellButtonCreator._buttonCount$p.toString(), showUpsellCommand, CommonUIStrings.l_FreemiumUpsell, Common.RibbonUpsellButtonCreator.freemiumUpsellButtonImageName, null, 'Medium20', parentContainer, standaloneRootControlManager);
            Sys.UI.DomElement.addCssClass(freemiumUpsellButton, Common.RibbonUpsellButtonCreator._freemiumUpsellButtonClass$p);
            parentContainer.appendChild(freemiumUpsellButton);
            Common.RibbonUpsellButtonCreator._registerRemoveCallback$p(freemiumUpsellButton);
            Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.reportFreemiumUpsellEligibleDisplayed, 2, null);
            Diag.ULS.sendTraceTag(40739802, 340, 50, 'Go Premium Upsell button created');
            Common.RibbonUpsellButtonCreator._buttonCount$p++;
            break;
        case Common.FreemiumUpsellMode.showBadge:
        case Common.FreemiumUpsellMode.showNothing:
        default:
            break;
    }
}
Common.RibbonUpsellButtonCreator._registerRemoveCallback$p = function Common_RibbonUpsellButtonCreator$_registerRemoveCallback$p$st(button) {
    if (button && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('GoPremiumRibbonCallbackIsEnabled')) {
        Common.Utils.Container.get_instance().resolveFuture(Common.App.ApplicationFeatureHelper.IApplicationFeatureHelper, '').execute(function(applicationFeatureHelper) {
            applicationFeatureHelper.registerFeatureStateChangeCallback('MsoPremiumBadge', function(featureStateChangeArgs) {
                if (button && featureStateChangeArgs.isEnabled) {
                    Common.DomUtils.removeElement(button);
                    Common.RibbonUpsellButtonCreator._hideButton$p = true;
                }
            });
        });
    }
}


Common.ScalableViewerChromeItemContainer = function Common_ScalableViewerChromeItemContainer() {
    this.$$d_hide = Function.createDelegate(this, this.hide);
    Common.ScalableViewerChromeItemContainer.initializeBase(this);
}
Common.ScalableViewerChromeItemContainer.prototype = {
    _elementToTruncate: null,
    
    hide: function Common_ScalableViewerChromeItemContainer$hide$in() {
        if (this.get_elmContainer()) {
            this._isVisible = false;
            this.get_elmContainer().style.display = 'none';
        }
    },
    
    undoScaling: function Common_ScalableViewerChromeItemContainer$undoScaling$in() {
        if (this._elementToTruncate) {
            this._elementToTruncate.style.width = 'auto';
            this._elementToTruncate.style.maxWidth = 'none';
        }
        if (this.get_elmContainer()) {
            this._isVisible = true;
            this.get_elmContainer().style.display = 'inline-block';
        }
    },
    
    truncateWidth: function Common_ScalableViewerChromeItemContainer$truncateWidth$in(maxWidth) {
        if (this._elementToTruncate) {
            this._elementToTruncate.style.maxWidth = maxWidth + 'px';
        }
    }
}


Common.ToolbarContainer = function Common_ToolbarContainer() {
    Common.ToolbarContainer.initializeBase(this);
    this.set_elmContainer(Common.ViewerChrome.createUnselectableElement('span'));
    this.get_elmContainer().className = 'cui-herobar-toolbarContainer';
    this.get_elmContainer().id = 'viewerChrome-ToolbarContainer';
}


Common.TopBarScalingManager = function Common_TopBarScalingManager(topBar1, topBar2, isRtl) {
    this._elmTopBar1$0 = topBar1;
    this._elmTopBar2$0 = topBar2;
    this._isRtl$0 = isRtl;
}
Common.TopBarScalingManager.prototype = {
    _isRtl$0: false,
    _elmTopBar1$0: null,
    _elmTopBar1Left$p$0: null,
    _elmBreadcrumbSeparator$p$0: null,
    _elmHostBrand$p$0: null,
    _elmFolderSeparator$p$0: null,
    _elmFolder$p$0: null,
    _elmTopBar1Center$p$0: null,
    _elmTitle$p$0: null,
    _elmTopBar1Right$p$0: null,
    _elmTopRightActionButton$p$0: null,
    _elmSkypeButton$p$0: null,
    _elmUserNameNameContainer$p$0: null,
    _elmUserNameNameItem$p$0: null,
    _elmTopBar2$0: null,
    _elmFileButton$p$0: null,
    _elmTabHeaders$p$0: null,
    _elmTopBar2Center$p$0: null,
    _elmOICSeparator$p$0: null,
    _elmOpenInClientButton$p$0: null,
    _elmFeedbackButton$p$0: null,
    _elmTopBar2Right$p$0: null,
    _elmPeopleWellControl$p$0: null,
    
    findAndScaleDefaultRibbonTopBars: function Common_TopBarScalingManager$findAndScaleDefaultRibbonTopBars$in() {
        var elmExternalHeader;
        var $$t_2, $$t_3;
        ($$t_3 = Common.CuiHeaderDomReference.tryEnsuredHeaderPanelInitialized(($$t_2 = {'val': elmExternalHeader}), true, false)), elmExternalHeader = $$t_2.val, $$t_3;
        var elmTopBars = $get(Common.CuiHelper.headerTopBarsId);
        if (elmExternalHeader) {
            this._elmTopBar1$0 = document.getElementById(Common.CuiHelper.externalHeaderFullTopBarsId);
            this._elmTopBar2$0 = elmTopBars;
        }
        else {
            this._elmTopBar1$0 = elmTopBars.childNodes[0];
            this._elmTopBar2$0 = elmTopBars.childNodes[1];
        }
        this.scaleHeader();
    },
    
    scaleNonCuiHeader: function Common_TopBarScalingManager$scaleNonCuiHeader$in(topBar1) {
        this._elmTopBar1$0 = topBar1;
        this._elmTopBar2$0 = null;
        this._findTopBar1Elements$p$0(this._elmTopBar1$0);
        this._undoScaleTopBar1$p$0();
        this._scaleTopBar1$p$0();
    },
    
    scaleHeader: function Common_TopBarScalingManager$scaleHeader$in() {
        if (!this._elmTopBar1$0 || !this._elmTopBar2$0 || !this._elmTopBar2$0.clientHeight) {
            return;
        }
        this._findTopBar1Elements$p$0(this._elmTopBar1$0);
        this._undoScaleTopBar1$p$0();
        this._scaleTopBar1$p$0();
        var hasRibbon = this._elmTopBar2$0.parentNode.parentNode.className.indexOf('cui-ribbon') !== -1;
        if (hasRibbon) {
            this._findTopBar2Elements$p$0(this._elmTopBar2$0);
            this._undoScaleTopBar2$p$0();
            this._scaleTopBar2$p$0();
        }
    },
    
    _findTopBar1Elements$p$0: function Common_TopBarScalingManager$_findTopBar1Elements$p$0$in(elm) {
        if (!elm) {
            return;
        }
        for (var i = 0; i < elm.childNodes.length; i++) {
            var elmChild = elm.childNodes[i];
            var elmChildClassName = Common.DomUtils.getDOMElementClassName(elmChild);
            var hasId = (!!elmChild.id);
            if (elmChildClassName.indexOf('cui-QATRowLeft') !== -1) {
                this._elmTopBar1Left$p$0 = elmChild;
            }
            else if (elmChildClassName.indexOf('OfficeOnlineBrandBreadcrumbSeparator') !== -1) {
                this._elmBreadcrumbSeparator$p$0 = elmChild;
            }
            else if (elmChild.id === Common.CuiHelper.breadcrumbBrandId) {
                this._elmHostBrand$p$0 = elmChild;
            }
            else if (elmChild.id === Common.CuiHelper.folderSeparatorId) {
                this._elmFolderSeparator$p$0 = elmChild;
            }
            else if (elmChild.id === Common.CuiHelper.breadcrumbFolderId) {
                this._elmFolder$p$0 = elmChild;
            }
            else if (elmChildClassName.indexOf('cui-QATRowCenter') !== -1) {
                this._elmTopBar1Center$p$0 = elmChild;
            }
            else if (elmChild.id === Common.CuiHelper.breadcrumbTitleId) {
                this._elmTitle$p$0 = elmChild;
            }
            else if (elmChildClassName.indexOf('cui-QATRowRight') !== -1) {
                this._elmTopBar1Right$p$0 = elmChild;
            }
            else if (hasId && Common.TopBarScalingUtility.isElementTopRightActionButton(elmChild)) {
                this._elmTopRightActionButton$p$0 = elmChild;
            }
            else if (hasId && elmChild.id.startsWith(Common.CuiHelper.skypeButtonPrefixId)) {
                this._elmSkypeButton$p$0 = elmChild;
            }
            else if (elmChildClassName.indexOf('UsernameNameContainer') !== -1) {
                this._elmUserNameNameContainer$p$0 = elmChild;
            }
            else if (elmChildClassName.indexOf('UsernameNameItem') !== -1) {
                this._elmUserNameNameItem$p$0 = elmChild;
            }
            this._findTopBar1Elements$p$0(elmChild);
        }
    },
    
    _undoScaleTopBar1$p$0: function Common_TopBarScalingManager$_undoScaleTopBar1$p$0$in() {
        var elmsToShow = [ this._elmBreadcrumbSeparator$p$0, this._elmHostBrand$p$0, this._elmFolderSeparator$p$0, this._elmFolder$p$0, this._elmTopBar1Center$p$0, this._elmTitle$p$0, this._elmTopBar1Right$p$0, this._elmTopRightActionButton$p$0, this._elmSkypeButton$p$0, this._elmUserNameNameContainer$p$0 ];
        var elmsToUntruncate = [ this._elmTopBar1Center$p$0, this._elmTitle$p$0, this._elmUserNameNameContainer$p$0 ];
        Common.TopBarScalingUtility.showElements(elmsToShow);
        Common.TopBarScalingUtility.untruncateElements(elmsToUntruncate);
        Common.TopBarScalingUtility.resetPosition(this._elmTopBar1Center$p$0);
    },
    
    _scaleTopBar1$p$0: function Common_TopBarScalingManager$_scaleTopBar1$p$0$in() {
        if (this._contextualTabsVisible$p$0()) {
            this._scaleTopBar1WithContextual$p$0();
        }
        else {
            this._scaleTopBar1WithoutContextual$p$0();
        }
        Common.TopBarScalingUtility.adjustBreadcrumbDisplay(this._elmFolderSeparator$p$0, this._elmFolder$p$0);
    },
    
    _scaleTopBar1WithContextual$p$0: function Common_TopBarScalingManager$_scaleTopBar1WithContextual$p$0$in() {
        var isOverlapping;
        var scalingSteps;
        var elmFirstContextualTabSet = this._getFirstContextualTabSet$p$0();
        var $$t_3 = this;
        isOverlapping = function() {
            return Common.TopBarScalingUtility.itemsOverlap($$t_3._elmFolder$p$0, elmFirstContextualTabSet, $$t_3._isRtl$0);
        };
        var $$t_4 = this, $$t_5 = this;
        scalingSteps = [ function() {
            Common.TopBarScalingUtility.truncateElement($$t_4._elmFolder$p$0, $$t_4._elmFolder$p$0, Common.TopBarScalingUtility.overlapAmount($$t_4._elmTopBar1Left$p$0, elmFirstContextualTabSet, $$t_4._isRtl$0));
        }, function() {
            Common.TopBarScalingUtility.hideElement($$t_5._elmBreadcrumbSeparator$p$0);
            Common.TopBarScalingUtility.hideElement($$t_5._elmHostBrand$p$0);
            Common.TopBarScalingUtility.hideElement($$t_5._elmFolderSeparator$p$0);
            Common.TopBarScalingUtility.hideElement($$t_5._elmFolder$p$0);
        } ];
        Common.TopBarScalingUtility.invokeScalingSteps(scalingSteps, isOverlapping);
        if (Common.TopBarScalingUtility.itemsOverlap(this._elmTabHeaders$p$0, this._elmTopBar1Center$p$0, this._isRtl$0)) {
            Common.TopBarScalingUtility.repositionElement(this._elmTopBar1Center$p$0, this._elmTabHeaders$p$0, this._isRtl$0);
        }
        this._resolveTopBar1CenterAndRightOverlap$p$0();
        var $$t_6 = this;
        isOverlapping = function() {
            return Common.TopBarScalingUtility.itemsOverlap($$t_6._elmTabHeaders$p$0, $$t_6._elmTopBar1Right$p$0, $$t_6._isRtl$0);
        };
        var $$t_7 = this, $$t_8 = this;
        scalingSteps = [ function() {
            Common.TopBarScalingUtility.truncateElement($$t_7._elmUserNameNameContainer$p$0, $$t_7._elmUserNameNameItem$p$0, Common.TopBarScalingUtility.overlapAmount($$t_7._elmTabHeaders$p$0, $$t_7._elmTopBar1Right$p$0, $$t_7._isRtl$0));
        }, function() {
            Common.TopBarScalingUtility.hideElement($$t_8._elmTopRightActionButton$p$0);
        } ];
        this._resolveTopBar1LeftAndRightOverlap$p$0();
        if (!Common.TopBarScalingUtility.isHidden(this._elmTopBar1Center$p$0) && !Common.TopBarScalingUtility.isHidden(this._elmTitle$p$0)) {
            Common.TopBarScalingUtility.capElementWidth(this._elmTitle$p$0, this._elmTabHeaders$p$0, this._elmTopBar1Right$p$0, this._isRtl$0);
        }
    },
    
    _scaleTopBar1WithoutContextual$p$0: function Common_TopBarScalingManager$_scaleTopBar1WithoutContextual$p$0$in() {
        var hasFolder = (!!this._elmFolder$p$0);
        var hasTitle = (!!this._elmTitle$p$0);
        var overlapAmount = 0;
        if ((hasFolder || hasTitle) && ((overlapAmount = Common.TopBarScalingUtility.overlapAmount(this._elmTopBar1Left$p$0, this._elmTopBar1Center$p$0, this._isRtl$0)) > 0)) {
            var truncateFolder = hasFolder;
            if (hasTitle && (!hasFolder || (this._elmTitle$p$0.offsetWidth > this._elmFolder$p$0.offsetWidth))) {
                truncateFolder = false;
            }
            Common.TopBarScalingUtility.truncateElement((truncateFolder) ? this._elmFolder$p$0 : this._elmTitle$p$0, (truncateFolder) ? this._elmFolder$p$0 : this._elmTitle$p$0, (truncateFolder) ? overlapAmount : overlapAmount * 2);
            if (hasFolder && hasTitle && ((overlapAmount = Common.TopBarScalingUtility.overlapAmount(this._elmTopBar1Left$p$0, this._elmTopBar1Center$p$0, this._isRtl$0)) > 0)) {
                truncateFolder = !truncateFolder;
                Common.TopBarScalingUtility.truncateElement((truncateFolder) ? this._elmFolder$p$0 : this._elmTitle$p$0, (truncateFolder) ? this._elmFolder$p$0 : this._elmTitle$p$0, (truncateFolder) ? overlapAmount : overlapAmount * 2);
            }
        }
        var $$t_6 = this;
        var isOverlapping = function() {
            return Common.TopBarScalingUtility.itemsOverlap($$t_6._elmTopBar1Left$p$0, $$t_6._elmTopBar1Center$p$0, $$t_6._isRtl$0);
        };
        var $$t_7 = this, $$t_8 = this, $$t_9 = this;
        var scalingSteps = [ function() {
            Common.TopBarScalingUtility.hideElement($$t_7._elmBreadcrumbSeparator$p$0);
            Common.TopBarScalingUtility.hideElement($$t_7._elmHostBrand$p$0);
            Common.TopBarScalingUtility.hideElement($$t_7._elmFolderSeparator$p$0);
            Common.TopBarScalingUtility.hideElement($$t_7._elmFolder$p$0);
            Common.TopBarScalingUtility.untruncateElement($$t_7._elmTitle$p$0);
        }, function() {
            Common.TopBarScalingUtility.truncateElement($$t_8._elmTitle$p$0, $$t_8._elmTitle$p$0, 2 * Common.TopBarScalingUtility.overlapAmount($$t_8._elmTopBar1Left$p$0, $$t_8._elmTopBar1Center$p$0, $$t_8._isRtl$0));
        }, function() {
            Common.TopBarScalingUtility.hideElement($$t_9._elmTitle$p$0);
        } ];
        Common.TopBarScalingUtility.invokeScalingSteps(scalingSteps, isOverlapping);
        this._resolveTopBar1CenterAndRightOverlap$p$0();
        this._resolveTopBar1LeftAndRightOverlap$p$0();
        if (!Common.TopBarScalingUtility.isHidden(this._elmTopBar1Center$p$0) && !Common.TopBarScalingUtility.isHidden(this._elmTitle$p$0)) {
            Common.TopBarScalingUtility.capElementWidth(this._elmTitle$p$0, this._elmTopBar1Left$p$0, this._elmTopBar1Right$p$0, this._isRtl$0);
        }
    },
    
    _resolveTopBar1CenterAndRightOverlap$p$0: function Common_TopBarScalingManager$_resolveTopBar1CenterAndRightOverlap$p$0$in() {
        var titleWasHidden = Common.TopBarScalingUtility.isHidden(this._elmTitle$p$0);
        var $$t_3 = this;
        var isOverlapping = function() {
            return Common.TopBarScalingUtility.itemsOverlap($$t_3._elmTopBar1Center$p$0, $$t_3._elmTopBar1Right$p$0, $$t_3._isRtl$0);
        };
        var $$t_4 = this, $$t_5 = this, $$t_6 = this, $$t_7 = this, $$t_8 = this;
        var scalingSteps = [ function() {
            $$t_4._resolveTopBar1TitleandRightOverlap$p$0();
        }, function() {
            Common.TopBarScalingUtility.hideElement($$t_5._elmTopRightActionButton$p$0);
            Common.TopBarScalingUtility.untruncateElement($$t_5._elmTitle$p$0);
            Common.TopBarScalingUtility.untruncateElement($$t_5._elmUserNameNameContainer$p$0);
            if (!titleWasHidden) {
                Common.TopBarScalingUtility.showElement($$t_5._elmTitle$p$0);
            }
        }, function() {
            $$t_6._resolveTopBar1TitleandRightOverlap$p$0();
        }, function() {
            Common.TopBarScalingUtility.hideElement($$t_7._elmSkypeButton$p$0);
            Common.TopBarScalingUtility.untruncateElement($$t_7._elmTitle$p$0);
            Common.TopBarScalingUtility.untruncateElement($$t_7._elmUserNameNameContainer$p$0);
            if (!titleWasHidden) {
                Common.TopBarScalingUtility.showElement($$t_7._elmTitle$p$0);
            }
        }, function() {
            $$t_8._resolveTopBar1TitleandRightOverlap$p$0();
        } ];
        Common.TopBarScalingUtility.invokeScalingSteps(scalingSteps, isOverlapping);
    },
    
    _resolveTopBar1TitleandRightOverlap$p$0: function Common_TopBarScalingManager$_resolveTopBar1TitleandRightOverlap$p$0$in() {
        var hasTitle = (!!this._elmTitle$p$0);
        var hasUserName = (!!this._elmUserNameNameContainer$p$0);
        var overlapAmount = 0;
        if ((hasTitle || hasUserName) && ((overlapAmount = Common.TopBarScalingUtility.overlapAmount(this._elmTopBar1Center$p$0, this._elmTopBar1Right$p$0, this._isRtl$0)) > 0)) {
            var isTitleCentered = (!!this._elmTopBar1Center$p$0) && (this._elmTopBar1Center$p$0.style.position !== 'absolute');
            var truncateTitle = hasTitle;
            if (hasUserName && (!hasTitle || (this._elmUserNameNameContainer$p$0.offsetWidth > this._elmTitle$p$0.offsetWidth))) {
                truncateTitle = false;
            }
            Common.TopBarScalingUtility.truncateElement((truncateTitle) ? this._elmTitle$p$0 : this._elmUserNameNameContainer$p$0, (truncateTitle) ? this._elmTitle$p$0 : this._elmUserNameNameItem$p$0, (truncateTitle && isTitleCentered) ? overlapAmount * 2 : overlapAmount);
            if (hasTitle && hasUserName) {
                if ((overlapAmount = Common.TopBarScalingUtility.overlapAmount(this._elmTopBar1Center$p$0, this._elmTopBar1Right$p$0, this._isRtl$0)) > 0) {
                    truncateTitle = !truncateTitle;
                    Common.TopBarScalingUtility.truncateElement((truncateTitle) ? this._elmTitle$p$0 : this._elmUserNameNameContainer$p$0, (truncateTitle) ? this._elmTitle$p$0 : this._elmUserNameNameItem$p$0, (truncateTitle && isTitleCentered) ? overlapAmount * 2 : overlapAmount);
                }
                if (Common.TopBarScalingUtility.itemsOverlap(this._elmTopBar1Center$p$0, this._elmTopBar1Right$p$0, this._isRtl$0)) {
                    Common.TopBarScalingUtility.hideElement(this._elmTopBar1Center$p$0);
                    Common.TopBarScalingUtility.untruncateElement(this._elmUserNameNameContainer$p$0);
                }
            }
            else if (hasTitle && Common.TopBarScalingUtility.itemsOverlap(this._elmTopBar1Center$p$0, this._elmTopBar1Right$p$0, this._isRtl$0)) {
                Common.TopBarScalingUtility.hideElement(this._elmTitle$p$0);
            }
        }
    },
    
    _resolveTopBar1LeftAndRightOverlap$p$0: function Common_TopBarScalingManager$_resolveTopBar1LeftAndRightOverlap$p$0$in() {
        var $$t_3 = this;
        var truncateUserName = function() {
            Common.TopBarScalingUtility.truncateElement($$t_3._elmUserNameNameContainer$p$0, $$t_3._elmUserNameNameItem$p$0, Common.TopBarScalingUtility.overlapAmount($$t_3._elmTopBar1Left$p$0, $$t_3._elmTopBar1Right$p$0, $$t_3._isRtl$0));
        };
        var $$t_4 = this;
        var isOverlapping = function() {
            return Common.TopBarScalingUtility.itemsOverlap($$t_4._elmTopBar1Left$p$0, $$t_4._elmTopBar1Right$p$0, $$t_4._isRtl$0);
        };
        var $$t_5 = this, $$t_6 = this, $$t_7 = this;
        var scalingSteps = [ truncateUserName, function() {
            Common.TopBarScalingUtility.hideElement($$t_5._elmTopRightActionButton$p$0);
            Common.TopBarScalingUtility.untruncateElement($$t_5._elmUserNameNameContainer$p$0);
        }, truncateUserName, function() {
            Common.TopBarScalingUtility.hideElement($$t_6._elmSkypeButton$p$0);
            Common.TopBarScalingUtility.untruncateElement($$t_6._elmUserNameNameContainer$p$0);
        }, truncateUserName, function() {
            Common.TopBarScalingUtility.hideElement($$t_7._elmUserNameNameContainer$p$0);
        } ];
        Common.TopBarScalingUtility.invokeScalingSteps(scalingSteps, isOverlapping);
    },
    
    _contextualTabsVisible$p$0: function Common_TopBarScalingManager$_contextualTabsVisible$p$0$in() {
        if (!this._elmTabHeaders$p$0) {
            return false;
        }
        for (var i = 0; i < this._elmTabHeaders$p$0.childNodes.length; i++) {
            var elmTab = this._elmTabHeaders$p$0.childNodes[i];
            var elmTabClassName = Common.DomUtils.getDOMElementClassName(elmTab);
            if (elmTabClassName.indexOf('cui-cg') !== -1) {
                return true;
            }
        }
        return false;
    },
    
    _getFirstContextualTabSet$p$0: function Common_TopBarScalingManager$_getFirstContextualTabSet$p$0$in() {
        if (!this._elmTabHeaders$p$0) {
            return null;
        }
        var elmFirstContextualTabSet = null;
        for (var i = this._elmTabHeaders$p$0.childNodes.length - 1; i >= 0; i--) {
            var elmTab = this._elmTabHeaders$p$0.childNodes[i];
            var elmTabClassName = Common.DomUtils.getDOMElementClassName(elmTab);
            if (elmTabClassName.indexOf('cui-cg') === -1) {
                break;
            }
            elmFirstContextualTabSet = elmTab;
        }
        return elmFirstContextualTabSet;
    },
    
    _findTopBar2Elements$p$0: function Common_TopBarScalingManager$_findTopBar2Elements$p$0$in(elm) {
        if (!elm) {
            return;
        }
        for (var i = 0; i < elm.childNodes.length; i++) {
            var elmChild = elm.childNodes[i];
            var elmChildClassName = Common.DomUtils.getDOMElementClassName(elmChild);
            var hasId = (!!elmChild.id);
            if (elmChildClassName.indexOf('cui-jewel-container') !== -1) {
                this._elmFileButton$p$0 = elmChild;
            }
            else if (elmChildClassName.indexOf('cui-tts') !== -1) {
                this._elmTabHeaders$p$0 = elmChild;
            }
            else if (elmChildClassName.indexOf('cui-TabRowInline') !== -1) {
                this._elmTopBar2Center$p$0 = elmChild;
            }
            else if (elmChildClassName.indexOf('cui-separator') !== -1) {
                this._elmOICSeparator$p$0 = elmChild;
            }
            else if (hasId && elmChild.id.startsWith(Common.CuiHelper.openInClientButtonId)) {
                this._elmOpenInClientButton$p$0 = elmChild;
            }
            else if (hasId && elmChild.id.startsWith(Common.CuiHelper.feedbackButtonId)) {
                this._elmFeedbackButton$p$0 = elmChild;
            }
            else if (elmChildClassName.indexOf('cui-TabRowRight') !== -1) {
                this._elmTopBar2Right$p$0 = elmChild;
            }
            else if (hasId && elmChild.id.startsWith(Common.CuiHelper.peoplesWellControlId)) {
                this._elmPeopleWellControl$p$0 = elmChild;
            }
            this._findTopBar2Elements$p$0(elmChild);
        }
    },
    
    _undoScaleTopBar2$p$0: function Common_TopBarScalingManager$_undoScaleTopBar2$p$0$in() {
        var elmsToShow = [ this._elmTabHeaders$p$0, this._elmTopBar2Center$p$0, this._elmOICSeparator$p$0, this._elmOpenInClientButton$p$0, this._elmFeedbackButton$p$0, this._elmTopBar2Right$p$0, this._elmPeopleWellControl$p$0 ];
        Common.TopBarScalingUtility.showElements(elmsToShow);
        this._setTabHeaderScaleIndex$p$0(0);
    },
    
    _scaleTopBar2$p$0: function Common_TopBarScalingManager$_scaleTopBar2$p$0$in() {
        var scalingSteps;
        var isOverlapping;
        var $$t_2 = this;
        isOverlapping = function() {
            return Common.TopBarScalingUtility.itemsOverlap($$t_2._elmTabHeaders$p$0, $$t_2._elmTopBar2Center$p$0, $$t_2._isRtl$0);
        };
        var $$t_3 = this, $$t_4 = this, $$t_5 = this, $$t_6 = this;
        scalingSteps = [ function() {
            Common.TopBarScalingUtility.hideElement($$t_3._elmOICSeparator$p$0);
            Common.TopBarScalingUtility.hideElement($$t_3._elmOpenInClientButton$p$0);
        }, function() {
            $$t_4._setTabHeaderScaleIndex$p$0(1);
        }, function() {
            $$t_5._setTabHeaderScaleIndex$p$0(2);
        }, function() {
            Common.TopBarScalingUtility.hideElement($$t_6._elmTopBar2Center$p$0);
            $$t_6._setTabHeaderScaleIndex$p$0(0);
        } ];
        Common.TopBarScalingUtility.invokeScalingSteps(scalingSteps, isOverlapping);
        var $$t_7 = this;
        isOverlapping = function() {
            return Common.TopBarScalingUtility.itemsOverlap($$t_7._elmTopBar2Center$p$0, $$t_7._elmTopBar2Right$p$0, $$t_7._isRtl$0) || Common.TopBarScalingUtility.itemsOverlap($$t_7._elmTabHeaders$p$0, $$t_7._elmTopBar2Right$p$0, $$t_7._isRtl$0);
        };
        var $$t_8 = this, $$t_9 = this, $$t_A = this, $$t_B = this;
        scalingSteps = [ function() {
            Common.TopBarScalingUtility.hideElement($$t_8._elmOICSeparator$p$0);
            Common.TopBarScalingUtility.hideElement($$t_8._elmOpenInClientButton$p$0);
        }, function() {
            Common.TopBarScalingUtility.hideElement($$t_9._elmFeedbackButton$p$0);
        }, function() {
            Common.TopBarScalingUtility.hideElement($$t_A._elmPeopleWellControl$p$0);
        }, function() {
            Common.TopBarScalingUtility.hideElement($$t_B._elmTopBar2Right$p$0);
        } ];
        Common.TopBarScalingUtility.invokeScalingSteps(scalingSteps, isOverlapping);
        var $$t_C = this;
        isOverlapping = function() {
            return Common.TopBarScalingUtility.itemsOverlap($$t_C._elmFileButton$p$0, $$t_C._elmTabHeaders$p$0, $$t_C._isRtl$0);
        };
        var $$t_D = this, $$t_E = this, $$t_F = this;
        scalingSteps = [ function() {
            $$t_D._setTabHeaderScaleIndex$p$0(1);
        }, function() {
            $$t_E._setTabHeaderScaleIndex$p$0(2);
        }, function() {
            Common.TopBarScalingUtility.hideElement($$t_F._elmTabHeaders$p$0);
        } ];
        Common.TopBarScalingUtility.invokeScalingSteps(scalingSteps, isOverlapping);
    },
    
    _setTabHeaderScaleIndex$p$0: function Common_TopBarScalingManager$_setTabHeaderScaleIndex$p$0$in(index) {
        if (this._elmTabHeaders$p$0) {
            this._elmTabHeaders$p$0.className = Common.TopBarScalingManager._tabHeaderScaleClasses$p[index];
            this._elmTabHeaders$p$0[Common.TopBarScalingManager._scaleStepAttribute$p] = index;
        }
    }
}


Common.TopBarScalingUtility = function Common_TopBarScalingUtility() {
}
Common.TopBarScalingUtility.adjustBreadcrumbDisplay = function Common_TopBarScalingUtility$adjustBreadcrumbDisplay$st(elmFolderSeparator, elmFolder) {
    if ((elmFolderSeparator) && (elmFolder)) {
        elmFolderSeparator.style.marginTop = ((elmFolder.offsetHeight - elmFolderSeparator.offsetHeight) / 2) + 'px';
    }
}
Common.TopBarScalingUtility.invokeScalingSteps = function Common_TopBarScalingUtility$invokeScalingSteps$st(scalingSteps, isOverlapping) {
    var scaleIndex = 0;
    while (isOverlapping() && scaleIndex < scalingSteps.length) {
        scalingSteps[scaleIndex]();
        scaleIndex++;
    }
}
Common.TopBarScalingUtility.capElementWidth = function Common_TopBarScalingUtility$capElementWidth$st(elm, elmPrevious, elmNext, isRtl) {
    if ((elm) && (elm.parentNode) && (elm.parentNode.parentNode)) {
        var peripheralOffsetWidth = Common.TopBarScalingUtility.peripheralOffsetWidthElement(elm);
        if (elm.parentNode.style.width !== 'auto') {
            var width = elm.parentNode.offsetWidth - peripheralOffsetWidth;
            elm.style.width = width + 'px';
        }
        var elmLeft = (isRtl) ? elmNext : elmPrevious;
        var elmRight = (isRtl) ? elmPrevious : elmNext;
        var boundsParentConstraints = Common.WindowUtils.getElementBounds(elm.parentNode.parentNode);
        var boundsLeft = (elmLeft) ? Common.WindowUtils.getElementBounds(elmLeft) : new Sys.UI.Bounds(boundsParentConstraints.x, 0, 0, 0);
        var locationRight = (elmRight) ? Common.WindowUtils.getElementLocation(elmRight) : new Sys.UI.Point(boundsParentConstraints.x + boundsParentConstraints.width, 0);
        var maxWidth = 0;
        if (elm.parentNode.style.position === 'absolute') {
            maxWidth = locationRight.x - (boundsLeft.x + boundsLeft.width) - peripheralOffsetWidth - 1;
        }
        else {
            var boundsElement = Common.WindowUtils.getElementBounds((!elm.nextSibling) ? elm : elm.parentNode);
            var centerOfElement = boundsElement.x + (boundsElement.width / 2);
            var distanceFromCenterToParentBound = Math.min(centerOfElement - (boundsLeft.x + boundsLeft.width), locationRight.x - centerOfElement);
            maxWidth = (distanceFromCenterToParentBound * 2) - peripheralOffsetWidth - 1;
        }
        elm.style.maxWidth = maxWidth + 'px';
    }
}
Common.TopBarScalingUtility.showElements = function Common_TopBarScalingUtility$showElements$st(elms) {
    for (var $$arr_1 = elms, $$len_2 = $$arr_1.length, $$idx_3 = 0; $$idx_3 < $$len_2; ++$$idx_3) {
        var elm = $$arr_1[$$idx_3];
        Common.TopBarScalingUtility.showElement(elm);
    }
}
Common.TopBarScalingUtility.showElement = function Common_TopBarScalingUtility$showElement$st(elm) {
    if ((elm) && Common.TopBarScalingUtility.isHidden(elm)) {
        elm.style.display = '';
        elm[Common.TopBarScalingUtility._hideItemAttribute$p] = Common.TopBarScalingUtility._itemShown$p;
    }
}
Common.TopBarScalingUtility.hideElement = function Common_TopBarScalingUtility$hideElement$st(elm) {
    if ((elm) && !Common.TopBarScalingUtility.isHidden(elm)) {
        elm.style.display = 'none';
        elm[Common.TopBarScalingUtility._hideItemAttribute$p] = Common.TopBarScalingUtility._itemHidden$p;
    }
}
Common.TopBarScalingUtility.isHidden = function Common_TopBarScalingUtility$isHidden$st(elm) {
    if (!elm) {
        return true;
    }
    var hidden = elm[Common.TopBarScalingUtility._hideItemAttribute$p];
    return !(isNullOrUndefined(hidden) || hidden === Common.TopBarScalingUtility._itemShown$p);
}
Common.TopBarScalingUtility.truncateElement = function Common_TopBarScalingUtility$truncateElement$st(elmItemToTruncate, elmContainedText, truncationAmount) {
    if ((elmItemToTruncate) && !Common.TopBarScalingUtility.isHidden(elmItemToTruncate)) {
        var elmStyle = Common.CssUtils.getCurrentStyle(elmItemToTruncate);
        var padding = Common.DomUtils.parseCssSize(elmStyle.paddingLeft) + Common.DomUtils.parseCssSize(elmStyle.paddingRight);
        var truncatedWidth = elmItemToTruncate.offsetWidth - truncationAmount - padding;
        var elmCur = elmContainedText;
        var textPadding = 0;
        while ((elmCur) && (elmCur !== elmItemToTruncate)) {
            elmStyle = Common.CssUtils.getCurrentStyle(elmCur);
            if (elmStyle) {
                textPadding += Common.DomUtils.parseCssSize(elmStyle.paddingLeft) + Common.DomUtils.parseCssSize(elmStyle.paddingRight);
            }
            elmCur = elmCur.parentNode;
        }
        truncatedWidth = Math.max(truncatedWidth, Common.TopBarScalingUtility._minTruncationWidth$p + textPadding);
        elmItemToTruncate.style.width = truncatedWidth + 'px';
    }
}
Common.TopBarScalingUtility.untruncateElements = function Common_TopBarScalingUtility$untruncateElements$st(elms) {
    for (var $$arr_1 = elms, $$len_2 = $$arr_1.length, $$idx_3 = 0; $$idx_3 < $$len_2; ++$$idx_3) {
        var elm = $$arr_1[$$idx_3];
        Common.TopBarScalingUtility.untruncateElement(elm);
    }
}
Common.TopBarScalingUtility.untruncateElement = function Common_TopBarScalingUtility$untruncateElement$st(elm) {
    if (elm) {
        elm.style.width = 'auto';
        elm.style.maxWidth = 'none';
    }
}
Common.TopBarScalingUtility.repositionElement = function Common_TopBarScalingUtility$repositionElement$st(elmItemToReposition, elmToFitAgainst, isRtl) {
    if ((elmItemToReposition) && (elmToFitAgainst)) {
        var elmToFitAgainstLeft = 0;
        var elmToFitAgainstTop = 0;
        var $$t_6, $$t_7;
        Common.WindowUtils.getElementAbsolutePosition(elmToFitAgainst, ($$t_6 = {'val': elmToFitAgainstLeft}), ($$t_7 = {'val': elmToFitAgainstTop})), elmToFitAgainstLeft = $$t_6.val, elmToFitAgainstTop = $$t_7.val;
        var newLeftOffset = (isRtl) ? elmToFitAgainstLeft - elmItemToReposition.offsetWidth : elmToFitAgainstLeft + elmToFitAgainst.offsetWidth;
        Common.TopBarScalingUtility.moveElement(elmItemToReposition, newLeftOffset);
    }
}
Common.TopBarScalingUtility.moveElement = function Common_TopBarScalingUtility$moveElement$st(elm, left) {
    if (elm) {
        elm.style.position = 'absolute';
        elm.style.left = left + 'px';
    }
}
Common.TopBarScalingUtility.resetPosition = function Common_TopBarScalingUtility$resetPosition$st(elm) {
    if (elm) {
        elm.style.position = 'static';
        elm.style.left = 'auto';
    }
}
Common.TopBarScalingUtility.itemsOverlap = function Common_TopBarScalingUtility$itemsOverlap$st(elmFirst, elmSecond, isRtl) {
    if (!elmFirst || !elmSecond) {
        return false;
    }
    if (Common.TopBarScalingUtility.isHidden(elmFirst) || Common.TopBarScalingUtility.isHidden(elmSecond)) {
        return false;
    }
    return Common.WindowUtils.leftBoundsOverlapsRightBounds(Common.WindowUtils.getElementBounds(elmFirst), Common.WindowUtils.getElementBounds(elmSecond), isRtl);
}
Common.TopBarScalingUtility.overlapAmount = function Common_TopBarScalingUtility$overlapAmount$st(elmFirst, elmSecond, isRtl) {
    var overlapAmount = 0;
    if ((elmFirst) && (elmSecond)) {
        overlapAmount = Common.WindowUtils.leftBoundsOverlapsRightBoundsByAmount(Common.WindowUtils.getElementBounds(elmFirst), Common.WindowUtils.getElementBounds(elmSecond), isRtl);
    }
    return overlapAmount;
}
Common.TopBarScalingUtility.peripheralOffsetWidthElement = function Common_TopBarScalingUtility$peripheralOffsetWidthElement$st(elm) {
    var elmStyle = Common.CssUtils.getCurrentStyle(elm);
    var elmPadding = (elmStyle) ? (Common.DomUtils.parseCssSize(elmStyle.paddingLeft) + Common.DomUtils.parseCssSize(elmStyle.paddingRight)) : 0;
    var elmParentStyle = Common.CssUtils.getCurrentStyle(elm.parentNode);
    var elmParentPadding = (elmParentStyle) ? (Common.DomUtils.parseCssSize(elmParentStyle.paddingLeft) + Common.DomUtils.parseCssSize(elmParentStyle.paddingRight)) : 0;
    var siblingOffsetWidth = 0;
    var elmCur = elm;
    while (elmCur.nextSibling) {
        elmCur = elmCur.nextSibling;
        siblingOffsetWidth += elmCur.offsetWidth;
    }
    return elmPadding + elmParentPadding + siblingOffsetWidth;
}
Common.TopBarScalingUtility.isElementTopRightActionButton = function Common_TopBarScalingUtility$isElementTopRightActionButton$st(elm) {
    return (!!elm.id) && (elm.id.startsWith(Common.CuiHelper.shareButtonId) || elm.id.startsWith(Common.RibbonToggleButtonCreator.ribbonToggleId) || elm.id.startsWith(Common.CuiHelper.replyWithChangesButtonId) || elm.id.startsWith(Common.TopRowPeripheralControlCreator.workflowButtonId));
}


Common.TopRowPeripheralControlCreator = function Common_TopRowPeripheralControlCreator(standaloneRoot, shareIconWhenShownInRibbon, shareButtonCommand) {
    this._standaloneRoot = standaloneRoot;
    this.set__shareButtonCommand$p$0(shareButtonCommand || '981334692');
    this.set__shareIconWhenShownInRibbon$p$0(shareIconWhenShownInRibbon);
}
Common.TopRowPeripheralControlCreator.getDefaultCommentsButtonInfo = function Common_TopRowPeripheralControlCreator$getDefaultCommentsButtonInfo$st() {
    var $$t_0;
    return $$t_0 = new Common.HeaderToggleButtonInfo(), $$t_0.command = '2281051331', $$t_0.queryCommand = '847427893', $$t_0.id = Common.TopRowPeripheralControlCreator.commentsButtonId, $$t_0.image = null, $$t_0.label = CommonUIStrings.L_OpenCommentPane, $$t_0;
}
Common.TopRowPeripheralControlCreator.getDefaultChangesButtonInfo = function Common_TopRowPeripheralControlCreator$getDefaultChangesButtonInfo$st() {
    var $$t_0;
    return $$t_0 = new Common.HeaderToggleButtonInfo(), $$t_0.command = (Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_catchUpFlyoutEnabled()) ? '3418267371' : '1956545633', $$t_0.queryCommand = (Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_catchUpFlyoutEnabled()) ? '1059068017' : '1715205439', $$t_0.id = Common.TopRowPeripheralControlCreator.changesButtonId, $$t_0.image = null, $$t_0.label = CommonUIStrings.L_ActivityPaneTitle, $$t_0;
}
Common.TopRowPeripheralControlCreator.prototype = {
    _standaloneRoot: null,
    _topRowControls: null,
    _$$pf_ShareIconWhenShownInRibbon$p$0: null,
    
    get__shareIconWhenShownInRibbon$p$0: function Common_TopRowPeripheralControlCreator$get__shareIconWhenShownInRibbon$p$0$in() {
        return this._$$pf_ShareIconWhenShownInRibbon$p$0;
    },
    
    set__shareIconWhenShownInRibbon$p$0: function Common_TopRowPeripheralControlCreator$set__shareIconWhenShownInRibbon$p$0$in(value) {
        this._$$pf_ShareIconWhenShownInRibbon$p$0 = value;
        return value;
    },
    
    _$$pf_ShareButtonCommand$p$0: null,
    
    get__shareButtonCommand$p$0: function Common_TopRowPeripheralControlCreator$get__shareButtonCommand$p$0$in() {
        return this._$$pf_ShareButtonCommand$p$0;
    },
    
    set__shareButtonCommand$p$0: function Common_TopRowPeripheralControlCreator$set__shareButtonCommand$p$0$in(value) {
        this._$$pf_ShareButtonCommand$p$0 = value;
        return value;
    },
    
    getTopRightActionButtonInfo: function Common_TopRowPeripheralControlCreator$getTopRightActionButtonInfo$in() {
        return null;
    },
    
    getTopRightCommentsButtonInfo: function Common_TopRowPeripheralControlCreator$getTopRightCommentsButtonInfo$in() {
        return Common.TopRowPeripheralControlCreator.getDefaultCommentsButtonInfo();
    },
    
    getTopRightChangesButtonInfo: function Common_TopRowPeripheralControlCreator$getTopRightChangesButtonInfo$in() {
        return Common.TopRowPeripheralControlCreator.getDefaultChangesButtonInfo();
    },
    
    getPeopleWellControlSettings: function Common_TopRowPeripheralControlCreator$getPeopleWellControlSettings$in() {
        return null;
    },
    
    createTopRowControls: function Common_TopRowPeripheralControlCreator$createTopRowControls$in(containerElement, cuiHelper, ribbonClientId) {
        this._topRowControls = cuiHelper.createTopRowControls(ribbonClientId, containerElement, (this.shouldShowActionButtonInRibbon()) ? null : this.getActionButtonInfo(), this._standaloneRoot.get_cuiControlManager(), false, false, this.shouldShowRibbonToggleButtonInHeader());
    },
    
    createRibbonPeripheralControls: function Common_TopRowPeripheralControlCreator$createRibbonPeripheralControls$in(containerElement, cuiHelper, ribbonClientId) {
        var actionButtonInfo = null;
        var shouldShowActionButtonInRibbon = this.shouldShowActionButtonInRibbon();
        if (shouldShowActionButtonInRibbon) {
            actionButtonInfo = this.getActionButtonInfo();
            if (actionButtonInfo.command === this.get__shareButtonCommand$p$0()) {
                actionButtonInfo.image = this.get__shareIconWhenShownInRibbon$p$0();
            }
        }
        var commentsToggleButtonInfo = (!Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isCommentsButtonInCollabCornerEnabled()) ? null : this.getTopRightCommentsButtonInfo();
        var changesToggleButtonInfo = (!Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isChangesButtonEnabled()) ? null : this.getTopRightChangesButtonInfo();
        cuiHelper.createBottomRowRightControls(ribbonClientId, containerElement, this.getPeopleWellControlSettings(), this._standaloneRoot.get_cuiControlManager(), actionButtonInfo, commentsToggleButtonInfo, changesToggleButtonInfo);
    },
    
    getActionButtonInfo: function Common_TopRowPeripheralControlCreator$getActionButtonInfo$in() {
        var workflowHeaderButton = Common.HeaderUtils.getWorkflowHeaderButton();
        if (workflowHeaderButton) {
            return workflowHeaderButton;
        }
        return this.getTopRightActionButtonInfo();
    },
    
    disposeTopRowControls: function Common_TopRowPeripheralControlCreator$disposeTopRowControls$in() {
        if (this._topRowControls) {
            Common.CuiHelper.disposeTopRowControls(this._topRowControls);
            this._topRowControls = null;
        }
    },
    
    shouldShowActionButtonInRibbon: function Common_TopRowPeripheralControlCreator$shouldShowActionButtonInRibbon$in() {
        return false;
    },
    
    shouldShowRibbonToggleButtonInHeader: function Common_TopRowPeripheralControlCreator$shouldShowRibbonToggleButtonInHeader$in() {
        return false;
    },
    
    shouldShowCopyLinkButtonInRibbon: function Common_TopRowPeripheralControlCreator$shouldShowCopyLinkButtonInRibbon$in() {
        return false;
    }
}


Common.ViewerChrome = function Common_ViewerChrome(container, clientId, resizableContainer, hideHeader, hideTitleAndBreadcrumbs, isExternalToolbar) {
    this.$$d_scale = Function.createDelegate(this, this.scale);
    var $$t_6, $$t_7;
    this._appHasExternalHeader$0 = (($$t_7 = Common.CuiHeaderDomReference.tryEnsuredHeaderPanelInitialized(($$t_6 = {'val': this._appExternalHeaderPanel$0}), !hideHeader, false)), this._appExternalHeaderPanel$0 = $$t_6.val, $$t_7);
    this._headerIsHidden$0 = hideHeader;
    this._hideTitleAndBreadcrumbs$0 = hideTitleAndBreadcrumbs;
    this._isExternalToolbar$0 = isExternalToolbar;
    this._createViewerChromeStructure$p$0();
    container.appendChild(this._elmViewerChromeContainer$0);
    if (!this._headerIsHidden$0) {
        this._populateHeader$p$0(clientId);
    }
    if (!this._isExternalToolbar$0) {
        this._populateHerobarContainers$p$0();
        this._viewerChromeScalingManager$p$0 = new Common.ViewerChromeScalingManager(this.get_peripheralContentContainer(), this._elmTopBar2$0, this._breadcrumbContainer$0, this._documentTitleContainer$0, this._toolbarContainer$0);
        this._resizableContainer$0 = resizableContainer || new Common.WindowResizeEventSource();
        this._resizableContainer$0.add_onResize(this.$$d_scale);
        this.scale();
    }
}
Common.ViewerChrome.calculateToolbarWithTopBarHeight = function Common_ViewerChrome$calculateToolbarWithTopBarHeight$st(isHeaderHidden, appHasExernalHeader) {
    return ((isHeaderHidden || appHasExernalHeader) ? 0 : Common.ViewerChrome._unifiedHeaderHeightPx$p) + Common.ViewerChrome._topBar2HeightPx$p;
}
Common.ViewerChrome.createUnselectableElement = function Common_ViewerChrome$createUnselectableElement$st(tagName) {
    var ret = document.createElement(tagName);
    Common.ViewerChrome._setUnselectable$p(ret);
    return ret;
}
Common.ViewerChrome._setUnselectable$p = function Common_ViewerChrome$_setUnselectable$p$st(element) {
    element.setAttribute('unselectable', 'on');
}
Common.ViewerChrome.prototype = {
    
    get_toolbarWithTopbarHeight: function Common_ViewerChrome$get_toolbarWithTopbarHeight$in() {
        return Common.ViewerChrome.calculateToolbarWithTopBarHeight(this._headerIsHidden$0, this._appHasExternalHeader$0);
    },
    
    _elmViewerChromeContainer$0: null,
    _elmToolbarTopBars$0: null,
    _elmHeaderContainer$0: null,
    _elmTopBar2$0: null,
    _elmTopRowLeft$0: null,
    _elmTopRowCenter$0: null,
    _elmTopRowRight$0: null,
    _breadcrumbContainer$0: null,
    _documentTitleContainer$0: null,
    _toolbarContainer$0: null,
    _viewerChromeScalingManager$p$0: null,
    _resizableContainer$0: null,
    _headerIsHidden$0: false,
    _hideTitleAndBreadcrumbs$0: false,
    _isExternalToolbar$0: false,
    _appHasExternalHeader$0: false,
    _appExternalHeaderPanel$0: null,
    
    get__viewerChromeCssClass$p$0: function Common_ViewerChrome$get__viewerChromeCssClass$p$0$in() {
        return 'cui-viewerchrome';
    },
    
    get_toolbarContainer: function Common_ViewerChrome$get_toolbarContainer$in() {
        if (this._isExternalToolbar$0) {
            return this._elmTopBar2$0;
        }
        return this._toolbarContainer$0.get_elmContainer();
    },
    
    _$$pf_PeripheralContentContainer$p$0: null,
    
    get_peripheralContentContainer: function Common_ViewerChrome$get_peripheralContentContainer$in() {
        return this._$$pf_PeripheralContentContainer$p$0;
    },
    
    set_peripheralContentContainer: function Common_ViewerChrome$set_peripheralContentContainer$in(value) {
        this._$$pf_PeripheralContentContainer$p$0 = value;
        return value;
    },
    
    get_toolbarContentContainer: function Common_ViewerChrome$get_toolbarContentContainer$in() {
        return this._elmTopBar2$0;
    },
    
    _createViewerChromeStructure$p$0: function Common_ViewerChrome$_createViewerChromeStructure$p$0$in() {
        this._elmViewerChromeContainer$0 = Common.ViewerChrome.createUnselectableElement('div');
        this._elmViewerChromeContainer$0.className = this.get__viewerChromeCssClass$p$0();
        this._ensureTopBars$p$0();
        this._ensureTopBars1And2$p$0();
    },
    
    _ensureTopBars$p$0: function Common_ViewerChrome$_ensureTopBars$p$0$in() {
        this._elmToolbarTopBars$0 = Common.ViewerChrome.createUnselectableElement('div');
        this._elmToolbarTopBars$0.id = Common.CuiHelper.headerTopBarsId;
        this._elmToolbarTopBars$0.className = 'cui-ribbonTopBars';
        this._elmViewerChromeContainer$0.appendChild(this._elmToolbarTopBars$0);
        this._ensureHeaderDom$p$0();
    },
    
    _ensureHeaderDom$p$0: function Common_ViewerChrome$_ensureHeaderDom$p$0$in() {
        if (this._appHasExternalHeader$0) {
            this._elmHeaderContainer$0 = Common.ViewerChrome.createUnselectableElement('div');
            this._elmHeaderContainer$0.className = 'cui-ribbonTopBars';
            this._elmHeaderContainer$0.id = Common.CuiHelper.externalHeaderViewerChromeTopBarsId;
            this._appExternalHeaderPanel$0.appendChild(this._elmHeaderContainer$0);
            Sys.UI.DomElement.addCssClass(this._elmHeaderContainer$0, this.get__viewerChromeCssClass$p$0());
            Sys.UI.DomElement.addCssClass(this._elmViewerChromeContainer$0, 'cui-exth');
        }
        else {
            this._elmHeaderContainer$0 = this._elmToolbarTopBars$0;
        }
    },
    
    _ensureTopBars1And2$p$0: function Common_ViewerChrome$_ensureTopBars1And2$p$0$in() {
        this.set_peripheralContentContainer(Common.ViewerChrome.createUnselectableElement('div'));
        this.get_peripheralContentContainer().className = 'cui-topBar1';
        var appSettings = Common.AFrameworkApplication.appSettingsManager.get_appSettings();
        if ((('TransitionalHeaderUIInViewEnabled') in appSettings) && Boolean.parse(appSettings['TransitionalHeaderUIInViewEnabled']) && Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isTransistionalHeaderUIEnabled()) {
            this.get_peripheralContentContainer().className += ' cui-topBar1-transistionalHeaderUI';
        }
        if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('LegacyHeaderAppColorIsEnabled')) {
            this.get_peripheralContentContainer().className += ' cui-topBar1-transistionalHeaderUI';
        }
        if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('AppColorUpdateIsEnabled')) {
            this.get_peripheralContentContainer().className += ' cui-color-update';
        }
        if (this._headerIsHidden$0) {
            this.get_peripheralContentContainer().style.display = 'none';
        }
        this._elmHeaderContainer$0.appendChild(this.get_peripheralContentContainer());
        this._elmTopBar2$0 = Common.ViewerChrome.createUnselectableElement('div');
        if (!Common.AFrameworkApplication.isMobileMode) {
            this._elmTopBar2$0.className = 'cui-topBar2';
        }
        if (this._isExternalToolbar$0) {
            this._elmTopBar2$0.className += ' elevated-toolbar';
        }
        this._elmToolbarTopBars$0.appendChild(this._elmTopBar2$0);
    },
    
    _populateHeader$p$0: function Common_ViewerChrome$_populateHeader$p$0$in(clientId) {
        this._elmTopRowLeft$0 = document.getElementById(clientId + '-' + Common.RibbonPeripheralSection.topRowLeft);
        this._elmTopRowCenter$0 = document.getElementById(clientId + '-' + Common.RibbonPeripheralSection.topRowCenter);
        this._elmTopRowRight$0 = document.getElementById(clientId + '-' + Common.RibbonPeripheralSection.topRowRight);
        if (this._elmTopRowLeft$0) {
            this._elmTopRowLeft$0.parentNode.removeChild(this._elmTopRowLeft$0);
            this.get_peripheralContentContainer().appendChild(this._elmTopRowLeft$0);
            this._elmTopRowLeft$0.style.display = 'inline-block';
            Common.ViewerChrome._setUnselectable$p(this._elmTopRowLeft$0);
        }
        if (this._elmTopRowCenter$0) {
            this._elmTopRowCenter$0.parentNode.removeChild(this._elmTopRowCenter$0);
            this.get_peripheralContentContainer().appendChild(this._elmTopRowCenter$0);
            this._elmTopRowCenter$0.style.display = 'inline-block';
            Common.ViewerChrome._setUnselectable$p(this._elmTopRowCenter$0);
        }
        if (this._elmTopRowRight$0) {
            this._elmTopRowRight$0.parentNode.removeChild(this._elmTopRowRight$0);
            this.get_peripheralContentContainer().appendChild(this._elmTopRowRight$0);
            this._elmTopRowRight$0.style.display = 'inline-block';
            Common.ViewerChrome._setUnselectable$p(this._elmTopRowRight$0);
        }
    },
    
    _populateHerobarContainers$p$0: function Common_ViewerChrome$_populateHerobarContainers$p$0$in() {
        if (!this._hideTitleAndBreadcrumbs$0) {
            if (!Common.AFrameworkApplication.isMobileMode && !Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('HideBreadCrumbinRibbonforUIHost')) {
                this._breadcrumbContainer$0 = new Common.BreadcrumbContainer();
                this._elmTopBar2$0.appendChild(this._breadcrumbContainer$0.get_elmContainer());
            }
            if (!Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('HideTitleinRibbonforUIHost')) {
                this._documentTitleContainer$0 = new Common.DocumentTitleContainer();
                this._elmTopBar2$0.appendChild(this._documentTitleContainer$0.get_elmContainer());
            }
        }
        this._toolbarContainer$0 = new Common.ToolbarContainer();
        this._elmTopBar2$0.appendChild(this._toolbarContainer$0.get_elmContainer());
    },
    
    scale: function Common_ViewerChrome$scale$in() {
        if (Common.AFrameworkApplication.isMobileMode) {
            return;
        }
        if (this._hideTitleAndBreadcrumbs$0 || (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('HideBreadCrumbinRibbonforUIHost') && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('HideTitleinRibbonforUIHost'))) {
            return;
        }
        this._viewerChromeScalingManager$p$0.scaleViewerChrome();
    },
    
    dispose: function Common_ViewerChrome$dispose$in() {
        if (this._documentTitleContainer$0) {
            this._documentTitleContainer$0.dispose();
            this._documentTitleContainer$0 = null;
        }
        if (this._breadcrumbContainer$0) {
            this._breadcrumbContainer$0.dispose();
            this._breadcrumbContainer$0 = null;
        }
        this._elmToolbarTopBars$0 = null;
        this.set_peripheralContentContainer(null);
        this._elmTopBar2$0 = null;
        this._elmTopRowLeft$0 = null;
        this._elmTopRowCenter$0 = null;
        this._elmTopRowRight$0 = null;
        if (this._resizableContainer$0) {
            this._resizableContainer$0.remove_onResize(this.$$d_scale);
            this._resizableContainer$0 = null;
        }
        if (this._appExternalHeaderPanel$0) {
            Common.DomUtils.clearElementHtml(this._appExternalHeaderPanel$0);
        }
    }
}


Common.ViewerChromeItemContainer = function Common_ViewerChromeItemContainer() {
}
Common.ViewerChromeItemContainer.prototype = {
    _$$pf_ElmContainer$p$0: null,
    
    get_elmContainer: function Common_ViewerChromeItemContainer$get_elmContainer$in() {
        return this._$$pf_ElmContainer$p$0;
    },
    
    set_elmContainer: function Common_ViewerChromeItemContainer$set_elmContainer$in(value) {
        this._$$pf_ElmContainer$p$0 = value;
        return value;
    },
    
    _isVisible: true,
    
    get_containerBounds: function Common_ViewerChromeItemContainer$get_containerBounds$in() {
        return Common.WindowUtils.getElementBounds(this.get_elmContainer());
    },
    
    get_isVisible: function Common_ViewerChromeItemContainer$get_isVisible$in() {
        return this._isVisible;
    },
    
    dispose: function Common_ViewerChromeItemContainer$dispose$in() {
    }
}


Common.ViewerChromeScalingManager = function Common_ViewerChromeScalingManager(topBar1, topBar2, breadcrumb, documentTitle, toolbarContainer) {
    this._elmTopBar1$0 = topBar1;
    this._elmTopBar2$0 = topBar2;
    this._breadcrumb$0 = breadcrumb;
    this._documentTitle$0 = documentTitle;
    this._toolbarContainer$0 = toolbarContainer;
}
Common.ViewerChromeScalingManager._showAndUntruncateAllElements$i = function Common_ViewerChromeScalingManager$_showAndUntruncateAllElements$i$st(breadcrumbContainer, documentTitleContainer) {
    if (breadcrumbContainer) {
        breadcrumbContainer.undoScaling();
    }
    if (documentTitleContainer) {
        documentTitleContainer.undoScaling();
    }
}
Common.ViewerChromeScalingManager._herobarElementBoundsOverlap$i = function Common_ViewerChromeScalingManager$_herobarElementBoundsOverlap$i$st(breadcrumbContainer, documentTitleContainer, toolbarContainer, isRtl) {
    return Common.ViewerChromeScalingManager._viewerChromeItemsOverlap$i(breadcrumbContainer, documentTitleContainer, isRtl) || Common.ViewerChromeScalingManager._viewerChromeItemsOverlap$i(documentTitleContainer, toolbarContainer, isRtl) || Common.ViewerChromeScalingManager._viewerChromeItemsOverlap$i(breadcrumbContainer, toolbarContainer, isRtl);
}
Common.ViewerChromeScalingManager._viewerChromeItemsOverlap$i = function Common_ViewerChromeScalingManager$_viewerChromeItemsOverlap$i$st(elmFirst, elmSecond, isRtl) {
    if (!elmFirst || !elmSecond) {
        return false;
    }
    if (!elmFirst.get_isVisible() || !elmSecond.get_isVisible()) {
        return false;
    }
    return Common.WindowUtils.leftBoundsOverlapsRightBounds(elmFirst.get_containerBounds(), elmSecond.get_containerBounds(), isRtl);
}
Common.ViewerChromeScalingManager._trimLongestElement$i = function Common_ViewerChromeScalingManager$_trimLongestElement$i$st(firstItemContainer, secondItemContainer, trimmedWidth) {
    if (!firstItemContainer || !secondItemContainer) {
        return;
    }
    if (firstItemContainer.get_containerBounds().width > secondItemContainer.get_containerBounds().width) {
        firstItemContainer.truncateWidth(trimmedWidth);
    }
    else {
        secondItemContainer.truncateWidth(trimmedWidth);
    }
}
Common.ViewerChromeScalingManager._trimBreadcrumbAndDocumentTitle$i = function Common_ViewerChromeScalingManager$_trimBreadcrumbAndDocumentTitle$i$st(breadcrumbContainer, documentTitleContainer, truncatedElementWidth) {
    if (breadcrumbContainer) {
        breadcrumbContainer.truncateWidth(truncatedElementWidth);
    }
    if (documentTitleContainer) {
        documentTitleContainer.truncateWidth(truncatedElementWidth);
    }
}
Common.ViewerChromeScalingManager._hideDocumentTitleAndUntruncateBreadcrumb$i = function Common_ViewerChromeScalingManager$_hideDocumentTitleAndUntruncateBreadcrumb$i$st(breadcrumbContainer, documentTitleContainer) {
    documentTitleContainer.hide();
    breadcrumbContainer.undoScaling();
}
Common.ViewerChromeScalingManager._invokeScalingSteps$i = function Common_ViewerChromeScalingManager$_invokeScalingSteps$i$st(scalingSteps, isOverlapping) {
    var scaleIndex = 0;
    while (isOverlapping() && scaleIndex < scalingSteps.length) {
        scalingSteps[scaleIndex]();
        scaleIndex++;
    }
}
Common.ViewerChromeScalingManager.prototype = {
    _elmTopBar1$0: null,
    _elmTopBar2$0: null,
    _breadcrumb$0: null,
    _documentTitle$0: null,
    _toolbarContainer$0: null,
    
    _adjustBreadcrumbDisplay$p$0: function Common_ViewerChromeScalingManager$_adjustBreadcrumbDisplay$p$0$in() {
        var hasHostBrand = (!!Common.AFrameworkApplication.breadcrumbBrandName);
        var hasFolder = (!!Common.AFrameworkApplication.breadcrumbFolderName);
        if (!Common.AFrameworkApplication.get_isEmbedded() && hasHostBrand && hasFolder) {
            var elmFolder = this._breadcrumb$0.getBreadcrumbItem(Common.CuiHelper.breadcrumbFolderId);
            var elmFolderSeparator = this._breadcrumb$0.getBreadcrumbItem(Common.CuiHelper.folderSeparatorId);
            if (elmFolder && elmFolderSeparator) {
                Common.RibbonTabScalingActor._adjustBreadcrumbDisplay$i(elmFolderSeparator, elmFolder);
            }
            else {
                Common.Debug.assertStringTag(!!elmFolder, 'A breadcrumb folder element is expected, but could not be found in the document', 5859073);
                Common.Debug.assertStringTag(!!elmFolderSeparator, 'A breadcrumb folder separator was expected, but could not be found in the document', 5859074);
            }
        }
    },
    
    _scaleHerobar$p$0: function Common_ViewerChromeScalingManager$_scaleHerobar$p$0$in() {
        var $$t_2 = this, $$t_3 = this, $$t_4 = this, $$t_5 = this;
        var scalingSteps = [ function() {
            Common.ViewerChromeScalingManager._trimLongestElement$i($$t_2._breadcrumb$0, $$t_2._documentTitle$0, Common.ViewerChromeScalingManager._truncatedElementWidth$p);
        }, function() {
            Common.ViewerChromeScalingManager._trimBreadcrumbAndDocumentTitle$i($$t_3._breadcrumb$0, $$t_3._documentTitle$0, Common.ViewerChromeScalingManager._truncatedElementWidth$p);
        }, function() {
            Common.ViewerChromeScalingManager._hideDocumentTitleAndUntruncateBreadcrumb$i($$t_4._breadcrumb$0, $$t_4._documentTitle$0);
        }, function() {
            $$t_5._breadcrumb$0.truncateWidth(Common.ViewerChromeScalingManager._truncatedElementWidth$p);
        }, this._breadcrumb$0.$$d_hide ];
        var $$t_6 = this;
        var isOverlapping = function() {
            return Common.ViewerChromeScalingManager._herobarElementBoundsOverlap$i($$t_6._breadcrumb$0, $$t_6._documentTitle$0, $$t_6._toolbarContainer$0, Common.AFrameworkApplication.get_isRtl());
        };
        Common.ViewerChromeScalingManager._showAndUntruncateAllElements$i(this._breadcrumb$0, this._documentTitle$0);
        Common.ViewerChromeScalingManager._invokeScalingSteps$i(scalingSteps, isOverlapping);
    },
    
    _scaleHeader$p$0: function Common_ViewerChromeScalingManager$_scaleHeader$p$0$in() {
        if (this._enhancedMobileViewIsEnabled$p$0()) {
            var app = document.getElementById('application');
            app.style.minWidth = '0px';
            var scalingManager = new Common.TopBarScalingManager(this._elmTopBar1$0, this._elmTopBar2$0, Common.AFrameworkApplication.get_isRtl());
            scalingManager.scaleHeader();
        }
        else {
            Common.RibbonTabScalingActor.scaleHeaderUsingContainers(this._elmTopBar1$0, this._elmTopBar2$0, Common.AFrameworkApplication.get_isRtl());
        }
    },
    
    _enhancedMobileViewIsEnabled$p$0: function Common_ViewerChromeScalingManager$_enhancedMobileViewIsEnabled$p$0$in() {
        if (!Common.AFrameworkApplication.appSettingsManager) {
            return false;
        }
        return Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('EnhancedMobileViewIsEnabled');
    },
    
    scaleViewerChrome: function Common_ViewerChromeScalingManager$scaleViewerChrome$in() {
        this._scaleHeader$p$0();
        this._adjustBreadcrumbDisplay$p$0();
        this._scaleHerobar$p$0();
    }
}


Common.AppSwitcher.registerClass('Common.AppSwitcher');
Common.ViewerChromeItemContainer.registerClass('Common.ViewerChromeItemContainer', null, Common.IViewerChromeItemContainer);
Common.ScalableViewerChromeItemContainer.registerClass('Common.ScalableViewerChromeItemContainer', Common.ViewerChromeItemContainer, Common.IScalableViewerChromeItemContainer, Common.IViewerChromeItemContainer);
Common.BreadcrumbContainer.registerClass('Common.BreadcrumbContainer', Common.ScalableViewerChromeItemContainer);
Common.KeyPressInfo.registerClass('Common.KeyPressInfo');
Common.ChatManager.registerClass('Common.ChatManager', null, Common.IChatManager);
Common._commonAppHeaderPackage.registerClass('Common._commonAppHeaderPackage', null, Common.App.IPackage, Common.Utils.IContainerConfiguration);
Common.CuiHelper.registerClass('Common.CuiHelper', null, Common.ICuiHelper);
Common.DocumentTitleContainer.registerClass('Common.DocumentTitleContainer', Common.ScalableViewerChromeItemContainer);
Common.UpsellActor.registerClass('Common.UpsellActor', null, Common.IUpsellActor);
Common.HeaderEventSource.registerClass('Common.HeaderEventSource');
Common.TopRowCreatedEventArgs.registerClass('Common.TopRowCreatedEventArgs', Sys.EventArgs);
Common.HeaderUtils.registerClass('Common.HeaderUtils');
Common.HeaderCultureInfo.registerClass('Common.HeaderCultureInfo');
Common.ReactSharedHeaderCultureHelper.registerClass('Common.ReactSharedHeaderCultureHelper');
SearchInitializationSettings.registerClass('SearchInitializationSettings');
SetCookiePayload.registerClass('SetCookiePayload');
Common.ReactSharedHeaderPropsHelper.registerClass('Common.ReactSharedHeaderPropsHelper', null, Common.IReactSharedHeaderPropsHelper);
Common.ReactSharedHeaderSearchUtils.registerClass('Common.ReactSharedHeaderSearchUtils');
Common.ReactSharedHeaderFocusManager.registerClass('Common.ReactSharedHeaderFocusManager', null, Common.IReactSharedHeaderFocusManager);
Common.RibbonPeripheralSection.registerClass('Common.RibbonPeripheralSection');
Common.RibbonTabScalingActor.registerClass('Common.RibbonTabScalingActor');
Common.RibbonToggleButtonCreator.registerClass('Common.RibbonToggleButtonCreator');
Common.RibbonUpsellButtonCreator.registerClass('Common.RibbonUpsellButtonCreator');
Common.ToolbarContainer.registerClass('Common.ToolbarContainer', Common.ViewerChromeItemContainer);
Common.TopBarScalingManager.registerClass('Common.TopBarScalingManager');
Common.TopBarScalingUtility.registerClass('Common.TopBarScalingUtility');
Common.TopRowPeripheralControlCreator.registerClass('Common.TopRowPeripheralControlCreator', null, Common.ITopRowPeripheralControlCreator);
Common.ViewerChrome.registerClass('Common.ViewerChrome', null, Sys.IDisposable, Common.IViewerChrome);
Common.ViewerChromeScalingManager.registerClass('Common.ViewerChromeScalingManager');
Common.AppSwitcher._switcherBackgroundId$p = 'sw_barBG';
Common.AppSwitcher._switcherContainerId$p = 'sw_bar';
Common.AppSwitcher._switcherTilesContainerId$p = 'sw_tileList';
Common.AppSwitcher._switcherTileCssClassName$p = 'swTile';
Common.AppSwitcher._switcherTileLinkCssClassName$p = 'swTileLink';
Common.AppSwitcher._switcherCloseAnimationClass$p = 'closeAnimation';
Common.AppSwitcher._switcherLoadingCssClass$p = 'SwitcherLoading';
Common.AppSwitcher._switcherTilePressedClass$p = 'tilePressed';
Common.AppSwitcher._switcherActiveClass$p = 'SwitcherActive';
Common.AppSwitcher._switcherTileMouseUpHandler = null;
Common.AppSwitcher._isMouseUpEventRegistered = false;
Common.AppSwitcher._switcherTiles = null;
Common.AppSwitcher._switcherTileLinks = null;
Common.AppSwitcher._switcherInitialized = false;
Common.AppSwitcher._o365LoadingStopwatch = null;
Common.CuiHelper._headerEventSource = null;
Common.CuiHelper._intlStringToken = 'STR@';
Common.CuiHelper._imagePathToken = 'IMAGEPATH@';
Common.CuiHelper._imageMapToken = 'IMGMAP@';
Common.CuiHelper._tellMeSearchBoxImg = 'Oz_16x16x32';
Common.CuiHelper._tellMeSearchBoxImgLight = 'OzSilhouette_Glyph_16x16x32';
Common.CuiHelper._tellMeSearchBoxImgDark = 'OzSilhouette_16x16x32';
Common.CuiHelper.shareButtonImg20 = 'ShareServerWhite_20x20x32';
Common.CuiHelper.skypeConsumerButtonBlack = 'WACSkypeButtonBlack_20x20x32';
Common.CuiHelper.skypeConsumerButtonWhite = 'WACSkypeButtonWhite_20x20x32';
Common.CuiHelper.skypeBusinessButtonBlack = 'WACSkypeBusinessButtonBlack_20x20x32';
Common.CuiHelper.skypeBusinessButtonWhite = 'WACSkypeBusinessButtonWhite_20x20x32';
Common.CuiHelper.skypeNewHeaderButton = 'SkypeTitlebar_20x20x32';
Common.CuiHelper.externalHeaderFullTopBarsId = 'ExternalHeaderFullTopBars';
Common.CuiHelper.externalHeaderViewerChromeTopBarsId = 'ExternalHeaderViewerChromeTopBars';
Common.CuiHelper._emptyHeaderTopBarsId$p = 'EmptyHeaderTopBars';
Common.CuiHelper.headerTopBarsId = 'HeaderTopBars';
Common.CuiHelper.breadcrumbAppBrandId = 'BreadcrumbAppBrand';
Common.CuiHelper.breadcrumbBrandId = 'BreadcrumbBrand';
Common.CuiHelper.breadcrumbFolderId = 'BreadcrumbFolder';
Common.CuiHelper.breadcrumbTitleId = 'BreadcrumbTitle';
Common.CuiHelper.folderSeparatorId = 'FolderSeparator';
Common.CuiHelper.signoutLinkId = 'SignoutLink';
Common.CuiHelper.signInLinkId = 'SignInLink';
Common.CuiHelper._helpButtonId$p = 'Help';
Common.CuiHelper.tellMeSearchBoxId = 'sbTellMe';
Common.CuiHelper.simplifiedTellMeSearchBoxId = 'TellMe-SearchBox';
Common.CuiHelper._bottomRowCenterButtonSeparatorId$p = 'BottomRowCenterSeparator';
Common.CuiHelper.openInClientButtonId = 'btnOpenInClient';
Common.CuiHelper.printButtonId = 'btnPrint';
Common.CuiHelper.shareButtonId = 'btnFileSharing';
Common.CuiHelper.skypeButtonPrefixId = 'BasicChat';
Common.CuiHelper.replyWithChangesButtonId = 'btnReplyWithChanges';
Common.CuiHelper.feedbackButtonId = 'jbtnGiveFeedback';
Common.CuiHelper.peoplesWellControlId = 'PeoplesWellControl';
Common.CuiHelper._officeOnlineBrandClassText$p = 'headBrand';
Common.CuiHelper.editableBreadcrumbItemClass = 'EditableBreadcrumbItem';
Common.CuiHelper._uiSmallFontClass$p = 'UISmallFont';
Common.CuiHelper.tellMeSearchBoxClass = 'TellMeSearchBox';
Common.CuiHelper.openInClientButtonClass = 'ButtonOpenInClient';
Common.CuiHelper._actionButtonClassName$p = 'DocumentActionButton';
Common.CuiHelper._commentsButtonClassName$p = 'CommentsButton';
Common.CuiHelper._changesButtonClassName$p = 'ChangesButton';
Common.CuiHelper._skypeButtonClass$p = 'SkypeButton';
Common.CuiHelper._skypeUnreadConversationsDivClass$p = 'SkypeUnreadConversationsDiv';
Common.CuiHelper.skypeUnreadConversationsBubbleClass = 'SkypeUnreadConversationsBubble';
Common.CuiHelper._skypeUCBBackgroundClass$p = 'SkypeUCBBackground';
Common.CuiHelper._actionManager = null;
Common.CuiHelper._headerStrings = null;
Common.CuiHelper._breadcrumbLinkClickHandler = null;
Common.CuiHelper._officeOnlineBrandWidth = 0;
Common.CuiHelper._officeOnlineBrandHeight = 0;
Common.CuiHelper._unifiedHeaderHeight$i = 50;
Common.CuiHelper._containerIndex$p = 0;
Common.CuiHelper._signInIndex$p = 1;
Common.CuiHelper._topRowControlsCount = 0;
Common.CuiHelper.breadcrumbSeparatorImageName = 'BreadcrumbCaret_6x16x32';
Common.CuiHelper.breadcrumbAlternateSeparatorImageName = 'BreadcrumbCaretAlt_6x16x32';
Common.CuiHelper.skypeButtonDisplayMode = 'Small20';
Common.CuiHelper.actionButtonDisplayModeInRibbon = 'Medium';
Common.CuiHelper.actionButtonDisplayModeInHeader = 'Medium20';
Common.CuiHelper.commentsButtonDisplayMode = 'Medium';
Common.CuiHelper.changesButtonDisplayMode = 'Medium';
Common.CuiHelper.headerDocumentTitleSpanId = null;
Common.CuiHelper.skypeButtonId = null;
Common.CuiHelper.secondSkypeButtonId = null;
Common.CuiHelper._s_emptyArray$p = null;
Common.HeaderEventSource._onTopRowControlsCreatedEventKey$p = 'OnTopRowControlsCreatedEvent';
Common.HeaderEventSource._onTopRowControlsDisposingEventKey$p = 'OnTopRowControlsDisposingEvent';
Common.HeaderEventSource._onRenameTextboxStatusChangedEventKey$p = 'OnRenameTextboxStatusChangedEventKey';
Common.HeaderUtils._worflowAssign$p = 'Assign';
Common.HeaderUtils._workflowSubmit$p = 'Submit';
Common.HeaderUtils.workflowButtonId = 'btnWorkflow';
Common.RibbonPeripheralSection.topRowLeft = 'QATRowLeft';
Common.RibbonPeripheralSection.topRowCenter = 'QATRowCenter';
Common.RibbonPeripheralSection.topRowRight = 'QATRowRight';
Common.RibbonPeripheralSection.bottomRowLeft = 'TabRowLeft';
Common.RibbonPeripheralSection.bottomRowCenter = 'TabRowInline';
Common.RibbonPeripheralSection.bottomRowRight = 'TabRowRight';
Common.RibbonTabScalingActor._ribbonHeaderScaleClasses$p = [ 'cui-tts', 'cui-tts-scale-1', 'cui-tts-scale-2' ];
Common.RibbonTabScalingActor._scaleStepAttribute$p = '_scaleStep';
Common.RibbonTabScalingActor._hideItemAttribute$p = '_isHidden';
Common.RibbonTabScalingActor._itemShown$p = '0';
Common.RibbonTabScalingActor._itemHidden$p = '1';
Common.RibbonTabScalingActor._minTruncationWidth$p = 75;
Common.RibbonToggleButtonCreator.ribbonToggleId = 'btnToggleRibbon_Header';
Common.RibbonToggleButtonCreator._toggleIconInSimplifedRibbon$p = 'Pill_Toggle_On_40x20x32';
Common.RibbonToggleButtonCreator._toggleIconInLegacyRibbon$p = 'Pill_Toggle_Off_40x20x32';
Common.RibbonToggleButtonCreator._ribbonToggleButtonId$p = 'btnToggleRibbonButton_Header';
Common.RibbonToggleButtonCreator._ribbonToggleLabelId$p = 'btnToggleRibbonLabel_Header';
Common.RibbonUpsellButtonCreator.freemiumUpsellButtonImageName = 'UpgradeProductGlyph_20x20x32';
Common.RibbonUpsellButtonCreator.freemiumUpsellEligibleButtonId = 'btnFreemiumUpsellEligible';
Common.RibbonUpsellButtonCreator.freemiumUpsellBadgeButtonId = 'btnFreemiumUpsellBadge';
Common.RibbonUpsellButtonCreator._freemiumUpsellButtonClass$p = 'FreemiumUpsellButton';
Common.RibbonUpsellButtonCreator._buttonCount$p = 0;
Common.RibbonUpsellButtonCreator._hideButton$p = false;
Common.TopBarScalingManager._tabHeaderScaleClasses$p = [ 'cui-tts', 'cui-tts-scale-1', 'cui-tts-scale-2' ];
Common.TopBarScalingManager._scaleStepAttribute$p = '_scaleStep';
Common.TopBarScalingUtility._hideItemAttribute$p = '_isHidden';
Common.TopBarScalingUtility._itemShown$p = '0';
Common.TopBarScalingUtility._itemHidden$p = '1';
Common.TopBarScalingUtility._minTruncationWidth$p = 75;
Common.TopRowPeripheralControlCreator.workflowButtonId = 'btnWorkflow';
Common.TopRowPeripheralControlCreator.commentsButtonId = 'ShowCommentsTopBar';
Common.TopRowPeripheralControlCreator.changesButtonId = 'CatchUpWithChanges';
Common.ViewerChrome._unifiedHeaderHeightPx$p = 48;
Common.ViewerChrome._topBar2HeightPx$p = 40;
Common.ViewerChromeScalingManager._truncatedElementWidth$p = 200;
Common._commonAppHeaderPackage.main();
Type.registerNamespace('_Ewa');

Type.registerNamespace('Microsoft.Office.Excel.WebUI.Client.ExcelRibbon');

_Ewa._microsoftOfficeExcelWebUIClientExcelRibbonCssMain = function _Ewa__microsoftOfficeExcelWebUIClientExcelRibbonCssMain() {
}
_Ewa._microsoftOfficeExcelWebUIClientExcelRibbonCssMain.main = function _Ewa__microsoftOfficeExcelWebUIClientExcelRibbonCssMain$main$st() {
    Common.StyleSheet.importStyleSheetFromText('.cui-ribbon *,.cui-toolbar-toolbar *,.cui-viewerchrome *{outline:none}.cui-ribbon ul{margin:0;padding:0}.cui-ribbon a,.cui-menu a,.cui-toolbar-toolbar a,.cui-viewerchrome a{text-decoration:none}.cui-ribbon a img,.cui-menu a img,.cui-QAT a img,.cui-toolbar-toolbar a img,.cui-viewerchrome a img,.cui-ctl a img{border:0}.cui-ribbonTopBars{background-color:#fff}.cui-ribbonTopBars,.cui-tabBody,.cui-cg-i,.cui-ct-ul,.cui-tabContainer{position:relative}.cui-cg .cui-ct-ul{top:46px}.cui-pinButton{position:absolute;right:0;bottom:0}.AppRtl .cui-pinButton{left:0;right:auto}a.cui-ctl.cui-dialogLauncherButton{padding:0;position:absolute;right:0;bottom:0;margin-right:-4px;border:0}.AppRtl a.cui-ctl.cui-dialogLauncherButton{left:0;right:auto;margin-right:auto;margin-left:-4px}.cui-topBar1{position:absolute;padding-top:0;padding-bottom:0;text-align:center;width:100%;height:48px;white-space:nowrap;color:#fff;background-color:#000;font-size:14px}.cui-topBar1 .empty{background-color:transparent}.cui-topBar2{height:80px;background-color:#f4f4f4}.cui-topBar2.elevated-toolbar{position:relative;z-index:1}.cui-exth .cui-topBar2{height:30px}.cui-singlerowlayout .cui-topBar2{height:26px}.cui-viewerchrome .cui-topBar2{background-color:transparent}.cui-topBar1 .cui-ctl{background-color:#e1e1e1;border-top-width:0;border-bottom-width:0;border-color:#e1e1e1;margin-left:0;margin-right:0;padding:15px 10px !important}.cui-topBar1 .cui-ctl-mediumlabel{color:#fff !important;height:18px;margin-left:5px;margin-right:0;padding-top:1px;padding-bottom:1px}.AppRtl .cui-topBar1 .cui-ctl-mediumlabel{margin-left:0;margin-right:5px}.cui-topBar1 .cui-ctl-medium{position:relative;vertical-align:top;height:20px;border-color:#217346;background-color:#217346;margin:4px;padding:10px 32px !important}.usehover .cui-topBar1 .cui-ctl-medium:hover,.cui-topBar1 .cui-ctl-medium:focus{border-color:#439467 !important;background-color:#439467 !important;outline:2px dashed transparent}.cui-topBar1 .cui-ctl-active,.cui-topBar1 .usehover .cui-ctl-active:hover{border-color:#382f2d !important;background-color:#382f2d !important;outline:2px solid transparent}.cui-QATRowLeft{position:absolute;left:0;margin:0 0;padding-top:0;padding-bottom:0;padding-left:0;padding-right:10px}.AppRtl .cui-QATRowLeft{left:auto;right:0;padding-left:10px;padding-right:0}.AppAndBrandContainer{background-color:#217346}.cui-QATRowCenter{margin:0 0;padding-top:0;padding-left:10px;padding-right:10px;overflow:hidden}@keyframes animateHeaderIn{0%{opacity:0}50%{opacity:.5}100%{opacity:1}}.cui-topBar1-transistionalHeaderUI .cui-QATRowCenter,.cui-topBar1-transistionalHeaderUI .cui-QATRowRight,.AppRtl .cui-topBar1-transistionalHeaderUI .cui-QATRowRight{animation:animateHeaderIn 500ms}.cui-QATRowRight{position:absolute;right:0;height:48px;margin:0 0;padding-top:0;padding-left:0;padding-right:0}.AppRtl .cui-QATRowRight{left:0;right:auto;padding-left:0;padding-right:0}.cui-TabRowLeft{float:left}.AppRtl .cui-TabRowLeft{float:right}.cui-toolbar-onerow .cui-toolbar-buttondock{white-space:nowrap}.cui-TabRowInline,.cui-TabRowRight{margin-top:48px;margin-bottom:0}.cui-exth .cui-TabRowInline,.cui-exth .cui-TabRowRight{margin-top:0}.cui-TabRowInline{padding:0 4px;margin-left:5px;margin-right:5px}.cui-toolbar-buttondock{padding:0 4px;margin-left:0;margin-right:0}.cui-TabRowInline>*,.cui-toolbar-buttondock>*{vertical-align:middle}.cui-TabRowRight{position:absolute;top:0;right:0;height:26px;margin:0 5px;display:flex}.AppRtl .cui-TabRowRight{right:auto;left:0}.cui-TabRowInline a.cui-ctl-medium .cui-ctl-mediumlabel,.cui-TabRowRight a.cui-ctl-medium .cui-ctl-mediumlabel{height:16px}.cui-TabRowInline a.cui-ctl,.cui-TabRowRight a.cui-ctl,.cui-TabRowInline a.cui-ctl-medium,.cui-TabRowRight a.cui-ctl-medium{padding-top:6px !important;padding-bottom:6px !important}.cui-singlerowlayout .cui-TabRowInline a.cui-ctl,.cui-singlerowlayout .cui-TabRowRight a.cui-ctl,.cui-singlerowlayout .cui-TabRowInline a.cui-ctl-medium,.cui-singlerowlayout .cui-TabRowRight a.cui-ctl-medium{padding-top:4px !important;padding-bottom:4px !important}.cui-TabRowInline .cui-sb{padding-top:5px;padding-bottom:5px}.usehover .cui-topBar1 .cui-ctl:hover,.usehover .cui-TabRowInline .cui-ctl:hover,.usehover .cui-TabRowInline .cui-ctl-medium:hover,.usehover .cui-TabRowRight .cui-ctl:hover,.usehover .cui-TabRowRight .cui-ctl-medium:hover,.cui-topBar1 .cui-ctl:focus,.cui-TabRowInline .cui-ctl:focus,.cui-TabRowInline .cui-ctl-medium:focus,.cui-TabRowRight .cui-ctl:focus,.cui-TabRowRight .cui-ctl-medium:focus{border-color:#f0f0f0 !important;background-color:#f0f0f0 !important;outline:2px dashed transparent}.cui-topBar1 .cui-ctl-active,.cui-TabRowInline .cui-ctl-active,.cui-TabRowRight .cui-ctl-active,.usehover .cui-topBar1 .cui-ctl-active:hover,.usehover .cui-TabRowInline .cui-ctl-active:hover,.usehover .cui-TabRowRight .cui-ctl-active:hover,.cui-TabRowInline .cui-fa-dropped,.cui-TabRowRight .cui-fa-dropped{border-color:#fff !important;background-color:#fff !important;outline:2px dashed transparent}.cui-topBar1 .cui-disabled .cui-img-container,.cui-topBar1 .cui-disabled .cui-img-cont-float,.cui-TabRowInline .cui-disabled .cui-img-container,.cui-TabRowInline .cui-disabled .cui-img-cont-float,.cui-TabRowRight .cui-disabled .cui-img-container,.cui-TabRowRight .cui-disabled .cui-img-cont-float{background-color:transparent;outline:2px dotted transparent}.usehover .cui-topBar1 .cui-ctl.cui-disabled:hover,.usehover .cui-TabRowInline .cui-ctl.cui-disabled:hover,.usehover .cui-TabRowInline .cui-ctl-medium.cui-disabled:hover,.usehover .cui-TabRowRight .cui-ctl.cui-disabled:hover,.usehover .cui-TabRowRight .cui-ctl-medium.cui-disabled:hover{border-color:transparent !important;background-color:transparent !important;outline:2px dotted transparent}.cui-topBar1 .cui-ctl.cui-disabled:focus,.cui-topBar1 .cui-ctl.cui-disabled:focus:hover,.cui-TabRowInline .cui-ctl.cui-disabled:focus,.cui-TabRowInline .cui-ctl.cui-disabled:focus:hover,.cui-TabRowInline .cui-ctl-medium.cui-disabled:focus,.cui-TabRowInline .cui-ctl-medium.cui-disabled:focus:hover,.cui-TabRowRight .cui-ctl.cui-disabled:focus,.cui-TabRowRight .cui-ctl.cui-disabled:focus:hover,.cui-TabRowRight .cui-ctl-medium.cui-disabled:focus,.cui-TabRowRight .cui-ctl-medium.cui-disabled:focus:hover{border-color:#f0f0f0 !important;background-color:#f0f0f0 !important;outline:2px dotted transparent}.cui-jewel-container,.cui-tts,.cui-tts-scale-1,.cui-tts-scale-2{height:80px;display:block;float:left;white-space:nowrap;overflow:hidden;margin-top:0;list-style-type:none;max-width:none}.cui-exth .cui-jewel-container,.cui-exth .cui-tts,.cui-exth .cui-tts-scale-1,.cui-exth .cui-tts-scale-2{height:30px;overflow:visible}.cui-singlerowlayout .cui-jewel-container,.cui-singlerowlayout .cui-tts,.cui-singlerowlayout .cui-tts-scale-1,.cui-singlerowlayout .cui-tts-scale-2{height:26px;overflow:visible}.AppRtl .cui-jewel-container,.AppRtl .cui-tts,.AppRtl .cui-tts-scale-1,.AppRtl .cui-tts-scale-2{float:right}.cui-jewel-jewelMenuLauncher{padding:7px 20px;display:block;text-align:center}.cui-singlerowlayout .cui-jewel-jewelMenuLauncher{padding:5px 16px;display:block;text-align:center}.cui-toolbar-onerow .cui-jewel-jewelMenuLauncher{padding-top:3px !important;padding-bottom:3px !important}.cui-topBar2 .cui-jewel-jewelMenuLauncher{margin-top:48px}.cui-exth .cui-topBar2 .cui-jewel-jewelMenuLauncher{margin-top:0}.cui-jewel-label{height:16px;color:#444;display:block}.cui-singlerowlayout .cui-jewel-label{color:#444;display:block;text-transform:capitalize}.cui-jewel-jewelMenuLauncher>*{cursor:default}.usehover .cui-jewel-jewelMenuLauncher:hover .cui-jewel-label,.cui-jewel-jewelMenuLauncher:focus .cui-jewel-label{color:#217346}.usehover .cui-jewel-jewelMenuLauncher:hover{outline:2px dashed transparent}.cui-jewel-jewelMenuLauncher:focus{background-color:#f0f0f0;outline:2px dashed transparent}.cui-tt,.cui-cg{display:block;float:left;height:80px;list-style-type:none;margin-left:5px !important;cursor:default;-ms-touch-action:none;touch-action:none}.cui-exth .cui-tt,.cui-exth .cui-cg{height:30px}.cui-singlerowlayout .cui-tt,.cui-singlerowlayout .cui-cg{height:26px}.AppRtl .cui-tt,.AppRtl .cui-cg{float:right;margin-left:auto !important;margin-right:5px !important}.cui-ct-first{margin-left:0 !important}.AppRtl .cui-ct-first{margin-left:auto !important;margin-right:0 !important}.cui-tt-a{height:16px;margin-top:48px;padding:7px 12px 7px;color:#444 !important;display:block;text-align:center;cursor:default}.cui-singlerowlayout .cui-tt-a{margin-top:48px;padding:5px 16px;color:#444 !important;display:block;text-align:center;cursor:default}.cui-exth .cui-tt-a{margin-top:0}.cui-tt-s>.cui-tt-a{background-color:#fff;outline:2px solid transparent}.cui-tt-a:focus{background-color:#f0f0f0;outline:2px dashed transparent !important}.cui-tts-scale-1 .cui-tt-a,.cui-tts-scale-2 .cui-tt-a{padding-left:1px;padding-right:1px}.cui-tts-scale-2 .cui-tt-a{width:20px}.cui-tt-span{height:16px;text-align:center;display:block}.cui-singlerowlayout .cui-tt-span{height:CTRL_LABEL_HEIGHT_SINGLEROWLAYOUT;text-align:center;display:block;text-transform:capitalize}.cui-tts-scale-2 .cui-tt-span{overflow:hidden}.usehover .cui-tt-a:hover,.cui-tt-a:focus{color:#217346 !important;outline:2px dashed transparent !important}.cui-tt-s>.cui-tt-a{color:#217346 !important;outline:2px solid transparent}.cui-cg-i{height:46px;border-top:4px solid}.cui-exth .cui-cg-i{margin-top:-48px}.cui-cg-t{text-align:center;padding:0 10px}.cui-tts-scale-1 .cui-cg-t{padding-left:1px;padding-right:1px}.cui-tts-scale-2 .cui-cg-t{display:none}.cui-cg-t-i{height:16px;margin-top:12px;display:inline-block}.cui-ct-ul{height:auto;padding:0;list-style-type:none}.cui-ct-ul .cui-tt{height:auto;width:auto}.cui-ct-ul .cui-tt-a{margin-top:0}.cui-exth .cui-ct-ul .cui-tt-a{margin-top:0}.cui-cg-or{background-color:#fff8ed}.cui-cg-or .cui-cg-i{border-color:#fff8ed;background-color:#fff8ed}.cui-cg-or .cui-cg-t{color:#bf4f28}.cui-cg-or .cui-tt-a{background-color:#fff8ed !important}.usehover .cui-cg-or .cui-tt-a:hover{color:#c15000 !important;outline:2px dashed transparent}.cui-cg-or .cui-tt-s>.cui-tt-a{color:#c15000 !important;background-color:#fff !important;outline:2px solid transparent}.cui-cg-or .cui-tt-a:focus,.cui-cg-or .cui-tt-s>.cui-tt-a:focus{background-color:#f0f0f0 !important;outline:2px dashed transparent}.cui-cg-gr{background-color:#f2f9f2}.cui-cg-gr .cui-cg-i{border-color:#f2f9f2;background-color:#f2f9f2}.cui-cg-gr .cui-cg-t{color:#118a11}.cui-cg-gr .cui-tt-a{background-color:#f2f9f2}.usehover .cui-cg-gr .cui-tt-a:hover{color:#067006 !important}.cui-cg-gr .cui-tt-s>.cui-tt-a{color:#067006 !important;background-color:#fff !important;outline:2px solid transparent}.cui-cg-gr .cui-tt-a:focus,.cui-cg-gr .cui-tt-s>.cui-tt-a:focus{background-color:#f0f0f0 !important;outline:2px dashed transparent}.cui-cg-yl{background-color:#fffbe6}.cui-cg-yl .cui-cg-i{border-color:#fffbe6;background-color:#fffbe6}.cui-cg-yl .cui-cg-t{color:#856300}.cui-cg-yl .cui-tt-a{background-color:#fffbe6}.usehover .cui-cg-yl .cui-tt-a:hover{color:#856300 !important;outline:2px dashed transparent}.cui-cg-yl .cui-tt-s>.cui-tt-a{color:#856300 !important;background-color:#fff !important;outline:2px solid transparent}.cui-cg-yl .cui-tt-a:focus,.cui-cg-yl .cui-tt-s>.cui-tt-a:focus{background-color:#f0f0f0 !important;outline:2px dashed transparent}.cui-cg-pp{background-color:#f6f1fc}.cui-cg-pp .cui-cg-i{border-color:#f6f1fc;background-color:#f6f1fc}.cui-cg-pp .cui-cg-t{color:#884ecf}.cui-cg-pp .cui-tt-a{background-color:#f6f1fc}.usehover .cui-cg-pp .cui-tt-a:hover{color:#7c3fc1 !important;outline:2px dashed transparent}.cui-cg-pp .cui-tt-s>.cui-tt-a{color:#7c3fc1 !important;background-color:#fff !important;outline:2px solid transparent}.cui-cg-pp .cui-tt-a:focus,.cui-cg-pp .cui-tt-s>.cui-tt-a:focus{background-color:#f0f0f0 !important;outline:2px dashed transparent}.cui-cg-mg{background-color:#fcf0f7}.cui-cg-mg .cui-cg-i{border-color:#fcf0f7;background-color:#fcf0f7}.cui-cg-mg .cui-cg-t{color:#a1407a}.cui-cg-mg .cui-tt-a{background-color:#fcf0f7}.usehover .cui-cg-mg .cui-tt-a:hover{color:#a33c7a !important;outline:2px dashed transparent}.cui-cg-mg .cui-tt-s>.cui-tt-a{color:#a33c7a !important;background-color:#fff !important;outline:2px solid transparent}.cui-cg-mg .cui-tt-a:focus,.cui-cg-mg .cui-tt-s>.cui-tt-a:focus{background-color:#f0f0f0 !important;outline:2px dashed transparent}.MLRVisualRefresh .cui-topBar2{background-color:#f3f2f1;font-size:14px}.MLRVisualRefresh .cui-ct-ul .cui-tt{height:30px}.MLRVisualRefresh .cui-tt-a,.MLRVisualRefresh .cui-jewel-jewelMenuLauncher{display:flex;align-items:center;justify-content:center;height:100%;padding-top:0;padding-bottom:0}.MLRVisualRefresh .cui-tt-span,.MLRVisualRefresh .cui-jewel-label{height:initial}.MLRVisualRefresh .cui-TabRowInline{height:100%}.MLRVisualRefresh .cui-TabRowInline>*{vertical-align:top}.MLRVisualRefresh .cui-TabRowInline a.cui-ctl-medium .cui-ctl-mediumlabel,.MLRVisualRefresh .cui-TabRowRight a.cui-ctl-medium .cui-ctl-mediumlabel{height:initial}.MLRVisualRefresh .cui-TabRowInline a.cui-ctl,.MLRVisualRefresh .cui-TabRowRight a.cui-ctl,.MLRVisualRefresh .cui-TabRowInline a.cui-ctl-medium,.MLRVisualRefresh .cui-TabRowRight a.cui-ctl-medium,.MLRVisualRefresh .cui-TabRowInline .cui-sb{padding-top:0 !important;padding-bottom:0 !important;box-sizing:border-box;height:100%;display:inline-flex;align-items:center}.cui-tabContainer{height:89px;width:100%;margin:0 0 0;padding-top:4px;padding-bottom:0;border-bottom:1px solid #e1e1e1;background:#fff}.cui-tabBody{height:89px;background-color:#fff;overflow:hidden;display:block}ul.cui-tabBody{margin-right:24px;padding-left:4px;padding-right:4px;overflow:visible;white-space:nowrap}.cui-touch ul.cui-tabBody{margin-right:30px}.AppRtl ul.cui-tabBody{margin-left:24px;margin-right:auto}.AppRtl .cui-touch ul.cui-tabBody{margin-left:30px}.cui-touch.cui-tabContainer,.cui-touch.cui-tabContainer>.cui-tabBody{height:103px}.cui-singlerowlayout.cui-tabContainer,.cui-singlerowlayout.cui-tabContainer>.cui-tabBody{height:39px}.cui-singlerowlayout.cui-tabContainer{padding-top:6px}.cui-group{display:inline-block;height:100%;margin:0;padding:0;list-style-type:none;text-align:center}.cui-touch .cui-group{height:103px}.cui-groupContainer{position:relative;display:inline-block;height:100%}.cui-groupBody{height:71px;display:block;padding:0;text-align:center}.cui-touch .cui-groupBody{height:85px}.cui-singlerowlayout .cui-groupBody{height:20px;padding:CHUNK_PADDING_SINGLEROWLAYOUT}.cui-cs{padding-top:8px;margin:0 0}.cui-cs-title{margin:8px 0}.cui-cs-body{margin:0 15px 0 22px}.cui-groupTitle{display:inline-block;text-align:center;color:#666;cursor:default;white-space:nowrap;padding:2px 5px 0}.cui-groupSeparator{height:84px;position:relative;margin:0 4px;border-right:1px solid #e1e1e1;display:inline-block}.AppRtl .cui-groupSeparator{border-left:1px solid #e1e1e1;border-right:0 none}.cui-touch .cui-groupSeparator{height:94px}.cui-singlerowlayout .cui-groupSeparator{height:34px;margin:0 4px}.cui-section,.cui-section-alignmiddle{margin-left:1px;margin-right:1px;display:inline-block;vertical-align:top;text-align:left}.AppRtl .cui-section,.AppRtl .cui-section-alignmiddle{text-align:right}.cui-singlerowlayout .cui-section,.cui-singlerowlayout .cui-section-alignmiddle{margin-left:8px;margin-right:8px}.cui-layout{display:inline-block;height:100%}.cui-row,.cui-row-onerow,.cui-row-tworowmiddle,.cui-row-tworow,.cui-row-threerow{display:block}.cui-row,.cui-row-tworow,.cui-row-threerow{height:22px;margin-bottom:2px}.cui-touch .cui-row,.cui-touch .cui-row-tworow,.cui-touch .cui-row-threerow{margin-bottom:0}.cui-touch .cui-row-tworow{height:31px}.cui-touch .cui-row-threerow{height:26px}.cui-singlerowlayout .cui-section-alignmiddle .cui-row-onerow{margin-top:4px}.cui-section-alignmiddle .cui-row-tworow{margin-top:8px}.cui-touch .cui-row-tworow.cui-row-1{margin-top:5px}.cui-touch .cui-row-tworow.cui-row-2{margin-top:10px}.cui-touch .cui-row-threerow.cui-row-2{margin-top:1px}.cui-touch .cui-row-threerow.cui-row-3{margin-top:1px}.cui-section-alignmiddle .cui-row-onerow{margin-top:20px}.cui-section-divider{display:inline-block;width:1px;margin-left:3px;margin-right:3px}.cui-section-divider-separator{height:100%;background-color:#e1e1e1}.cui-toolbar-toolbar{width:100%;height:100%;background:#fff;cursor:default;text-align:center}.cui-toolbar-buttondock.alignleft{left:0;position:absolute}.AppRtl .cui-toolbar-buttondock.alignleft{left:auto;right:0}.cui-toolbar-buttondock.aligncenter{position:relative}.cui-toolbar-buttondock.alignright{right:0;position:absolute}.AppRtl .cui-toolbar-buttondock.alignright{left:0;right:auto}.cui-toolbar-buttondock .cui-tb{height:14px;padding:2px 3px;vertical-align:bottom;text-align:right}.AppRtl .cui-toolbar-buttondock .cui-tb{text-align:left}.cui-toolbar-buttondock .cui-cb{height:20px}.cui-toolbar-buttondock .cui-cb .cui-cb-input{height:14px;padding-top:2px;padding-left:0;padding-right:0;text-align:center}.cui-toolbar-buttondock .cui-cb .cui-dd-arrow-button{height:18px;padding:0 2px}.cui-toolbar-buttondock .cui-ctl-medium,.cui-toolbar-buttondock .cui-fslb{padding-left:4px;padding-right:4px}.cui-toolbar-buttondock .cui-ctl-compact{padding-left:0;padding-right:0}.cui-toolbar-button-center{margin-left:2px;margin-right:2px;vertical-align:bottom;position:relative}.cui-toolbar-button-right{margin-left:4px;margin-right:0 !important;vertical-align:middle}.AppRtl .cui-toolbar-button-right{margin-left:0 !important;margin-right:4px !important}.cui-toolbar-buttondock a.cui-ctl-medium,.cui-toolbar-buttondock a.cui-fslb{margin-left:8px;margin-right:8px}.cui-hidden{position:absolute;top:-2000px;width:1px;height:1px;overflow:hidden;word-wrap:normal}.cui-modalDiv{display:block;position:fixed;width:100%;height:100%;top:0;left:0;background-color:#fff;opacity:0;-ms-touch-action:manipulation;touch-action:manipulation}.iPad.v6up .cui-modalDiv{-webkit-overflow-scrolling:touch;overflow:scroll}.InternetExplorer.v8 .cui-modalDiv{-ms-filter:\"alpha(opacity=0)\"}.cui-block{display:block}.cui-keytip{height:17px;line-height:17px;text-align:center;position:absolute;left:0;right:0;margin-left:auto;margin-right:auto}.cui-keytip-span{display:inline-block;background-color:WindowText;color:Window;padding-left:3px;padding-right:3px;min-width:11px;outline:2px solid transparent}.cui-disabled .cui-keytip{opacity:.5;filter:alpha(opacity=50)}.TellMeSearchBox .cui-keytip{bottom:-11px}a.cui-ctl-medium.ButtonOpenInClient .cui-keytip{left:0;right:0;margin:auto}.MLRVisualRefresh .cui-topBar2 .cui-keytip{bottom:-11px}a.cui-ctl-menu .cui-keytip{top:10px;left:10px;right:auto;margin:0}.AppRtl a.cui-ctl-menu .cui-keytip{left:auto;right:10px}.cui-jewelmenu a.cui-ctl-menu .cui-keytip{top:2px;left:15px;right:auto}.AppRtl .cui-jewelmenu a.cui-ctl-menu .cui-keytip{left:auto;right:15px}.cui-jewelsubmenu a.cui-ctl-menu .cui-keytip{top:30px;left:60px;right:auto}.AppRtl .cui-jewelsubmenu a.cui-ctl-menu .cui-keytip{left:auto;right:60px}a.cui-ctl-medium .cui-keytip{left:10px;right:auto;margin:0}.AppRtl a.cui-ctl-medium .cui-keytip{left:auto;right:10px}a.cui-ctl-large .cui-keytip{bottom:-13px}span.cui-ctl-large .cui-keytip{bottom:-12px}.cui-row-threerow.cui-row-1 .cui-keytip{top:-9px}.cui-row-threerow.cui-row-1 .cui-cb .cui-keytip,.cui-row-threerow.cui-row-1 span.cui-ctl .cui-keytip{top:-8px}.cui-row-tworow.cui-row-1 .cui-keytip{top:-17px}.cui-row-tworow.cui-row-1 .cui-cb .cui-keytip,.cui-row-tworow.cui-row-1 span.cui-ctl .cui-keytip{top:-16px}.cui-row-threerow.cui-row-2 .cui-keytip{top:0;bottom:0;margin-top:auto;margin-bottom:auto}.cui-row-threerow.cui-row-3 .cui-keytip{bottom:-12px}.cui-row-tworow.cui-row-2 .cui-keytip{bottom:-22px}.cui-row-onerow .cui-keytip{bottom:-21px}a.cui-ctl.cui-dialogLauncherButton .cui-keytip{bottom:-17px}.cui-viewerchrome .cui-topBar1{position:relative}.cui-viewerchrome .cui-topBar2{height:40px;text-align:center}.cui-viewerchrome .cui-jewel-container{height:40px}.cui-viewerchrome .cui-topBar2 .cui-jewel-jewelMenuLauncher{margin-top:0}.cui-toolbar-singledock{width:auto}.cui-viewerchrome .cui-herobar-toolbarContainer{width:auto;position:absolute;display:inline-block;right:0;height:40px}.AppRtl .cui-viewerchrome .cui-herobar-toolbarContainer{right:auto;left:0}.cui-toolbar-singledock .cui-toolbar-buttondock{position:static}.cui-toolbar-singledock .cui-toolbar-buttondock a.cui-ctl-medium{padding-top:6px !important;padding-bottom:6px !important}.cui-herobar-documentTitleContainer{display:inline-block;height:40px}.cui-viewerchrome .BreadcrumbItem#BreadcrumbTitle{color:#444;padding-top:10px;padding-bottom:10px;line-height:20px}.cui-herobar-breadcrumbContainer{position:absolute;left:0;display:inline-block;height:20px;padding-left:15px;padding-top:10px;padding-bottom:10px}.AppRtl .cui-herobar-breadcrumbContainer{left:auto;right:0;margin-left:auto;padding-right:15px}.cui-herobar-breadcrumbContainer .BreadcrumbItem{color:#444;line-height:20px;padding-top:0;padding-bottom:0}.cui-herobar-breadcrumbContainer a.BreadcrumbItem:focus{outline:#444 dotted thin}.cui-herobar-breadcrumbContainer .BreadcrumbItem.FolderSeparator{padding-top:0;padding-bottom:0}.AppBrandSeparator{display:inline-block;background-color:#444;width:1px;height:12px;margin-right:6px;margin-top:4px}.AppRtl .AppBrandSeparator{margin-right:auto;margin-left:6px}.BreadcrumbItem#BreadcrumbAppBrand{margin-right:6px}.AppRtl .BreadcrumbItem#BreadcrumbAppBrand{margin-right:auto;margin-left:6px}.cui-viewerchrome .cui-toolbar-toolbar .cui-ctl-mediumlabel,.cui-viewerchrome .cui-herodock .cui-ctl-mediumlabel{line-height:20px;margin-left:4px;margin-right:0}.AppRtl .cui-viewerchrome .cui-toolbar-toolbar .cui-ctl-mediumlabel .AppRtl .cui-viewerchrome .cui-herodock .cui-ctl-mediumlabel{margin-left:0;margin-right:4px}.cui-viewerchrome .cui-toolbar-singledock .cui-toolbar-buttondock a.cui-ctl,.cui-viewerchrome .cui-toolbar-singledock .cui-toolbar-buttondock a.cui-ctl-medium,.cui-viewerchrome .cui-herodock a.cui-ctl,.cui-viewerchrome .cui-herodock a.cui-ctl-medium{height:20px;border:0;padding-top:5px !important;padding-bottom:5px !important;padding-left:10px;padding-right:10px;margin-top:5px;margin-bottom:5px;margin-left:2px;margin-right:2px !important}.cui-viewerchrome .cui-toolbar-singledock .cui-toolbar-buttondock,.cui-viewerchrome .cui-herodock{padding-left:0;padding-right:0}.cui-herodock .cui-ctl{vertical-align:middle}.cui-tabBody#tabApps .cui-ctl-largelabel{width:75px;max-width:75px;overflow:hidden;text-overflow:ellipsis}.cui-viewerchrome .cui-emphasized{background-color:#217346}.usehover .cui-viewerchrome .cui-emphasized:hover{background-color:#085229 !important;outline:2px dashed transparent}.cui-viewerchrome .cui-emphasized.cui-fa-dropped,.usehover .cui-viewerchrome .cui-emphasized.cui-ctl-active,.usehover .cui-viewerchrome .cui-emphasized.cui-ctl-active:hover{background-color:#064020 !important;outline:2px solid transparent}.cui-viewerchrome .cui-emphasized .cui-ctl-mediumlabel{color:#fff}.cui-topBar1 .cui-ctl.SkypeButton{padding:15px 13px !important;margin-left:0;margin-right:1px;background-color:transparent;border-color:rgba(255,255,255,.3);border-right-style:solid;border-left-style:solid}.cui-topBar1 .cui-ctl.SkypeButton.activated{background-color:#e1e1e1}.AppRtl .cui-topBar1 .cui-ctl.SkypeButton{margin-left:1px;margin-right:0}.usehover .cui-topBar1 .cui-ctl.SkypeButton:hover,.SkypeButton.cui-ctl-active,.usehover .SkypeButton.cui-ctl-active:hover{background-color:#444 !important;border-color:rgba(255,255,255,.3) !important;outline:2px dashed transparent}.SkypeUnreadConversationsDiv{position:absolute;bottom:43px;margin-left:7px}.AppRtl .SkypeUnreadConversationsDiv{margin-left:0;margin-right:7px}.SkypeUnreadConversationsBubble{position:absolute;width:18px;height:18px;line-height:16px;text-align:center;border-radius:.8em;vertical-align:middle;font-size:13px;border:1px solid;border-color:#085229}.SkypeUCBBackground{background-color:#085229}.usehover .cui-ctl.SkypeButton:hover .SkypeUCBBackground,.SkypeUCBBackground:hover{background-color:#fff;color:#085229;outline:2px dashed transparent}.SkypeUCBWide{width:23px !important}.cui-topBar2 .cui-TabRowRight{height:100%}.cui-topBar2 .cui-TabRowRight .cui-ctl-medium:last-child:after,.cui-topBar2 .cui-TabRowRight .cui-ctl-medium.DocumentActionButton:after,.cui-topBar2 .cui-TabRowRight .cui-ctl-medium.CommentsButton:after{display:none}.cui-topBar2 .cui-ctl-medium.DocumentActionButton,.cui-topBar2 .cui-ctl-medium.CommentsButton,.cui-topBar2 .cui-ctl-medium.ChangesButton{height:24px !important;box-sizing:border-box;padding:0 8px !important;margin:3px 5px;border:1px solid #e1dfdd;border-radius:2px;display:inline-flex;align-items:center;font-size:13.5px;font-weight:600;background-color:#fff;color:#217346}.cui-topBar2 .cui-ctl-medium.DocumentActionButton .cui-ctl-mediumlabel,.cui-topBar2 .cui-ctl-medium.CommentsButton .cui-ctl-mediumlabel,.cui-topBar2 .cui-ctl-medium.ChangesButton .cui-ctl-mediumlabel{color:#217346;height:auto}.usehover .MLRVisualRefresh .cui-TabRowRight .DocumentActionButton:hover,.usehover .MLRVisualRefresh .cui-TabRowRight .CommentsButton:hover,.usehover .MLRVisualRefresh .cui-TabRowRight .ChangesButton:hover,.MLRVisualRefresh .cui-TabRowRight .DocumentActionButton:focus,.MLRVisualRefresh .cui-TabRowRight .CommentsButton:focus,.MLRVisualRefresh .cui-TabRowRight .ChangesButton:focus{border-color:#e1dfdd !important;background-color:#e1dfdd !important}.MLRVisualRefresh .cui-TabRowRight .DocumentActionButton.cui-ctl-active,.MLRVisualRefresh .cui-TabRowRight .CommentsButton.cui-ctl-active,.MLRVisualRefresh .cui-TabRowRight .ChangesButton.cui-ctl-active,.usehover .MLRVisualRefresh .cui-TabRowRight .DocumentActionButton.cui-ctl-active:hover,.usehover .MLRVisualRefresh .cui-TabRowRight .CommentsButton.cui-ctl-active:hover,.usehover .MLRVisualRefresh .cui-TabRowRight .ChangesButton.cui-ctl-active:hover{border-color:#d2d0ce !important;background-color:#d2d0ce !important}.cui-topBar1-transistionalHeaderUI{background-color:#217346}.cui-topBar1-transitionalReactHeaderUI{background-color:#217346}.cui-topBar1-transistionalHeaderUI .cui-ctl,.cui-topBar1-transistionalHeaderUI .cui-ctl.SkypeButton,.cui-topBar1-transistionalHeaderUI .cui-ctl-medium{background-color:inherit !important;color:inherit !important;border:0;margin:0;margin-left:4px;margin-right:5px;cursor:pointer;padding:15px 16px !important;position:relative}.cui-topBar1-transistionalHeaderUI .cui-ctl-medium:after,.cui-topBar1-transistionalHeaderUI .cui-ctl:after{content:\'\';right:-5px;background:#fff;height:20px;width:1px;bottom:15px;position:absolute;opacity:.3}.AppRtl .cui-topBar1-transistionalHeaderUI .cui-ctl,.AppRtl .cui-topBar1-transistionalHeaderUI .cui-ctl.SkypeButton,.AppRtl .cui-topBar1-transistionalHeaderUI .cui-ctl-medium{margin-right:4px;margin-left:5px}.AppRtl .cui-topBar1-transistionalHeaderUI .cui-ctl-medium:after,.AppRtl .cui-topBar1-transistionalHeaderUI .cui-ctl:after{left:-5px;right:initial}.usehover .cui-topBar1-transistionalHeaderUI .cui-ctl-medium:hover *,.usehover .cui-topBar1-transistionalHeaderUI .cui-ctl:hover *{cursor:pointer}.usehover .cui-topBar1-transistionalHeaderUI .cui-ctl:hover,.cui-topBar1-transistionalHeaderUI .cui-ctl:focus,.usehover .cui-topBar1-transistionalHeaderUI .cui-ctl.SkypeButton:hover,.cui-topBar1-transistionalHeaderUI .cui-ctl.SkypeButton:focus,.usehover .cui-topBar1-transistionalHeaderUI .cui-ctl-medium:hover,.cui-topBar1-transistionalHeaderUI .cui-ctl-medium:focus{background-color:#2d9c5f !important}.cui-topBar1-transistionalHeaderUI .cui-ctl-active,.usehover .cui-topBar1-transistionalHeaderUI .cui-ctl-active:hover,.cui-topBar1-transistionalHeaderUI .cui-ctl.SkypeButton.cui-ctl-active,.cui-topBar1-transistionalHeaderUI .cui-ctl.SkypeButton.activated{background-color:#175030 !important}.AppHeaderPanel #WACTopbarPlaceholder{position:absolute;top:0;left:0;right:0;z-index:1;transition:opacity 350ms,visibility 0s linear 400ms}.cui-topBar1-transistionalHeaderUI #btnToggleRibbon_Header{display:inline-block;height:100%;color:inherit;font-size:14px;box-sizing:border-box}.usehover .cui-topBar1-transistionalHeaderUI #btnToggleRibbon_Header:hover{background-color:inherit !important}.cui-topBar1-transistionalHeaderUI #btnToggleRibbon_Header .toggleButton-iconContainer{display:inline-block;vertical-align:top;height:20px;width:40px;cursor:pointer}.cui-topBar1-transistionalHeaderUI #btnToggleRibbon_Header .toggleButton-iconContainer:focus{outline:#fff dotted thin}.cui-topBar1-transistionalHeaderUI #btnToggleRibbon_Header .toggleButton-label{display:inline-block;height:18px;padding:1px 0;vertical-align:top;margin-left:10px;cursor:initial}.AppRtl .cui-topBar1-transistionalHeaderUI #btnToggleRibbon_Header .toggleButton-label{margin-left:0;margin-right:10px}@media screen and (-ms-high-contrast:active){.cui-topBar1 .cui-disabled .cui-img-container,.cui-topBar1 .cui-disabled .cui-img-cont-float,.cui-TabRowInline .cui-disabled .cui-img-container,.cui-TabRowInline .cui-disabled .cui-img-cont-float,.cui-TabRowRight .cui-disabled .cui-img-container,.cui-TabRowRight .cui-disabled .cui-img-cont-float,.usehover .cui-topBar1 .cui-ctl.cui-disabled:hover,.usehover .cui-TabRowInline .cui-ctl.cui-disabled:hover,.usehover .cui-TabRowInline .cui-ctl-medium.cui-disabled:hover,.usehover .cui-TabRowRight .cui-ctl.cui-disabled:hover,.usehover .cui-TabRowRight .cui-ctl-medium.cui-disabled:hover,.cui-topBar1 .cui-ctl.cui-disabled:focus,.cui-topBar1 .cui-ctl.cui-disabled:focus:hover,.cui-TabRowInline .cui-ctl.cui-disabled:focus,.cui-TabRowInline .cui-ctl.cui-disabled:focus:hover,.cui-TabRowInline .cui-ctl-medium.cui-disabled:focus,.cui-TabRowInline .cui-ctl-medium.cui-disabled:focus:hover,.cui-TabRowRight .cui-ctl.cui-disabled:focus,.cui-TabRowRight .cui-ctl.cui-disabled:focus:hover,.cui-TabRowRight .cui-ctl-medium.cui-disabled:focus,.cui-TabRowRight .cui-ctl-medium.cui-disabled:focus:hover,.cui-disabled .cui-keytip{color:GrayText !important;opacity:1}.cui-topBar1-transistionalHeaderUI .cui-ctl-medium:after,.cui-topBar1-transistionalHeaderUI .cui-ctl:after{-ms-high-contrast-adjust:none;background-color:WindowText !important;opacity:1}.cui-topBar1 .cui-ctl.cui-disabled:focus,.cui-topBar1 .cui-ctl.cui-disabled:focus:hover,.cui-TabRowInline .cui-ctl.cui-disabled:focus,.cui-TabRowInline .cui-ctl.cui-disabled:focus:hover,.cui-TabRowInline .cui-ctl-medium.cui-disabled:focus,.cui-TabRowInline .cui-ctl-medium.cui-disabled:focus:hover,.cui-TabRowRight .cui-ctl.cui-disabled:focus,.cui-TabRowRight .cui-ctl.cui-disabled:focus:hover,.cui-TabRowRight .cui-ctl-medium.cui-disabled:focus,.cui-TabRowRight .cui-ctl-medium.cui-disabled:focus:hover{-ms-high-contrast-adjust:none;background-color:Highlight !important;outline-color:inherit !important}.usehover .cui-topBar1 .cui-ctl-medium:hover,.cui-topBar1 .cui-ctl-medium:focus,.cui-topBar1 .cui-ctl-active,.cui-topBar1 .usehover .cui-ctl-active:hover,.usehover .cui-topBar1 .cui-ctl:hover,.usehover .cui-TabRowInline .cui-ctl:hover,.usehover .cui-TabRowInline .cui-ctl-medium:hover,.usehover .cui-TabRowRight .cui-ctl:hover,.usehover .cui-TabRowRight .cui-ctl-medium:hover,.cui-topBar1 .cui-ctl:focus,.cui-TabRowInline .cui-ctl:focus,.cui-TabRowInline .cui-ctl-medium:focus,.cui-TabRowRight .cui-ctl:focus,.cui-TabRowRight .cui-ctl-medium:focus,.cui-TabRowInline .cui-ctl-active,.cui-TabRowRight .cui-ctl-active,.usehover .cui-topBar1 .cui-ctl-active:hover,.usehover .cui-TabRowInline .cui-ctl-active:hover,.usehover .cui-TabRowRight .cui-ctl-active:hover,.cui-TabRowInline .cui-fa-dropped,.cui-TabRowRight .cui-fa-dropped,.usehover .cui-jewel-jewelMenuLauncher:hover .cui-jewel-label,.cui-jewel-jewelMenuLauncher:focus .cui-jewel-label,.usehover .cui-jewel-jewelMenuLauncher:hover,.cui-jewel-jewelMenuLauncher:focus,.usehover .cui-viewerchrome .cui-emphasized:hover,.cui-viewerchrome .cui-emphasized.cui-fa-dropped,.usehover .cui-viewerchrome .cui-emphasized.cui-ctl-active,.usehover .cui-viewerchrome .cui-emphasized.cui-ctl-active:hover,.usehover .cui-topBar1 .cui-ctl.SkypeButton:hover,.SkypeButton.cui-ctl-active,.usehover .SkypeButton.cui-ctl-active:hover,.usehover .cui-ctl.SkypeButton:hover .SkypeUCBBackground,.SkypeUCBBackground:hover,.usehover .MLRVisualRefresh .cui-TabRowRight .DocumentActionButton:hover,.MLRVisualRefresh .cui-TabRowRight .DocumentActionButton:focus,.MLRVisualRefresh .cui-TabRowRight .DocumentActionButton.cui-ctl-active,.usehover .MLRVisualRefresh .cui-TabRowRight .DocumentActionButton.cui-ctl-active:hover{-ms-high-contrast-adjust:none;background-color:Highlight !important;color:HighlightText !important;outline-color:inherit !important}.cui-topBar1 .cui-disabled .cui-img-container,.cui-topBar1 .cui-disabled .cui-img-cont-float,.cui-TabRowInline .cui-disabled .cui-img-container,.cui-TabRowInline .cui-disabled .cui-img-cont-float,.cui-TabRowRight .cui-disabled .cui-img-container,.cui-TabRowRight .cui-disabled .cui-img-cont-float{-ms-high-contrast-adjust:none;background-color:Highlight !important;color:GrayText !important;outline-color:inherit !important}.cui-tt-s>.cui-tt-a,.usehover .cui-tt-a:hover,.cui-tt-a:focus,.usehover .cui-cg-or .cui-tt-a:hover,.cui-cg-or .cui-tt-s>.cui-tt-a,.cui-cg-or .cui-tt-a:focus,.cui-cg-or .cui-tt-s>.cui-tt-a:focus,.usehover .cui-cg-gr .cui-tt-a:hover,.cui-cg-gr .cui-tt-s>.cui-tt-a,.cui-cg-gr .cui-tt-a:focus,.cui-cg-gr .cui-tt-s>.cui-tt-a:focus,.usehover .cui-cg-yl .cui-tt-a:hover,.cui-cg-yl .cui-tt-s>.cui-tt-a,.cui-cg-yl .cui-tt-a:focus,.cui-cg-yl .cui-tt-s>.cui-tt-a:focus,.usehover .cui-cg-pp .cui-tt-a:hover,.cui-cg-pp .cui-tt-s>.cui-tt-a,.cui-cg-pp .cui-tt-a:focus,.cui-cg-pp .cui-tt-s>.cui-tt-a:focus,usehover .cui-cg-mg .cui-tt-a:hover,.cui-cg-mg .cui-tt-s>.cui-tt-a,.cui-cg-mg .cui-tt-a:focus,.cui-cg-mg .cui-tt-s>.cui-tt-a:focus{-ms-high-contrast-adjust:none;background-color:Highlight !important;color:HighlightText !important;outline-color:inherit !important}}.o365cs-base button:not(:focus)[class^=\"clearButton\"]{border:1px solid transparent}.o365cs-base button:focus[class^=\"clearButton\"]{border:1px solid}.o365cs-base svg[class^=\"ms-searchux\"]{fill:#217346}.o365cs-base button:not(:focus)[class^=\"submitSuggestion\"]{border:1px solid transparent;color:#217346}.o365cs-base button:focus[class^=\"submitSuggestion\"]{border:1px solid #217346;color:#217346}.o365cs-base a:not(:focus)[class^=\"suggestion-selector\"]{border:1px solid transparent}.o365cs-base a:focus[class^=\"suggestion-selector\"]{border:1px solid #797673;background:#f3f2f1}.o365cs-base a[class^=\"suggestion-selector\"]{line-height:initial}.o365cs-base .ms-suiteux-search-box input[type=search]{-ms-user-select:auto !important;-webkit-user-select:auto !important}a.cui-ctl,a.cui-ctl-medium,a.cui-ctl-large,a.cui-ctl-menu,.cui-toolbar-toolbar a.cui-fslb{border:1px solid transparent;display:inline-block;cursor:default}.cui-ctl,.cui-ctl *,.cui-ctl-medium,.cui-ctl-medium *,.cui-ctl-large,.cui-ctl-large *,.cui-ctl-thin,.cui-ctl-thin *{-ms-touch-action:none;touch-action:none}.cui-shortcut-container{overflow:auto}.cui-shortcut-hint{float:right}a.cui-shortcut-container span.cui-shortcut-hint{padding:0}.AppRtl .cui-shortcut-hint{float:left}.cui-ctl{margin:0 1px;display:inline-block}a.cui-ctl{padding:2px;cursor:default}.cui-touch .cui-row-tworow a.cui-ctl,.cui-touch .cui-row-threerow a.cui-ctl{margin-left:1px;margin-right:10px}.AppRtl .cui-touch .cui-row-tworow a.cui-ctl,.AppRtl .cui-touch .cui-row-threerow a.cui-ctl{margin-right:1px;margin-left:10px}.cui-touch a.cui-ctl{padding:4px 5px 4px}.cui-touch .cui-row-tworow a.cui-ctl{padding:6px 5px 7px}.cui-touch a.cui-ctl.cui-fa-sm{margin-left:1px;margin-right:2px}.AppRtl .cui-touch a.cui-ctl.cui-fa-sm{margin-left:2px;margin-right:1px}.cui-ctl .cui-ctl-smalllabel{padding:6px 3px 7px;vertical-align:top;float:left}.AppRtl .cui-ctl .cui-ctl-smalllabel{float:right}.cui-ctl .cui-ctl-small24label{padding:1px 2px;vertical-align:top;float:left}.AppRtl .cui-ctl .cui-ctl-small24label{float:right}.cui-touch .cui-ctl .cui-ctl-smalllabel{padding-right:0}.AppRtl .cui-touch .cui-ctl .cui-ctl-smalllabel{padding-left:0;padding-right:3px}.cui-touch .cui-fa-sm .cui-img-16by16{margin-left:0;margin-right:5px}.AppRtl .cui-touch .cui-fa-sm .cui-img-16by16{margin-left:5px;margin-right:0}.cui-ctl-smalllabel .cui-img-5by3,.cui-ctl-small .cui-ctl-a2 .cui-img-5by3{display:block}.cui-ctl,a.cui-ctl-medium{white-space:nowrap}.cui-ctl-iconContainer{width:16px;height:16px;display:inline-block;float:left}.cui-ctl-large16IconContainer{width:16px;height:16px;display:block;margin:auto}.cui-ctl-spinner{display:table;margin-left:auto;margin-right:auto;margin-top:16px;margin-bottom:16px}.AppRtl .cui-ctl-iconContainer{float:right}.cui-ctl-iconContainer14{width:14px;height:14px;display:inline-block;float:left;margin:1px}.AppRtl .cui-ctl-iconContainer14{float:right}a.cui-ctl-medium{margin:0 1px;padding:2px}.cui-touch a.cui-ctl-medium{padding-top:4px;padding-bottom:4px}.cui-touch .cui-row-tworow a.cui-ctl-medium{padding-top:6px;padding-bottom:7px}a.cui-ctl-medium .cui-ctl-mediumlabel,.cui-toolbar-toolbar a.cui-fslb .cui-ctl-mediumlabel{display:inline-block;margin-left:3px;margin-right:0}.AppRtl a.cui-ctl-medium .cui-ctl-mediumlabel,.AppRtl .cui-toolbar-toolbar a.cui-fslb .cui-ctl-mediumlabel{margin-left:0;margin-right:3px}a.cui-ctl-medium .cui-ctl-mediumlabel:first-child,.cui-toolbar-toolbar a.cui-fslb .cui-ctl-mediumlabel:first-child{margin-left:0;margin-right:0}.cui-ctl-mediumlabel .cui-img-5by3{top:-3px;margin-left:1px}.AppRtl .cui-ctl-mediumlabel .cui-img-5by3{margin-left:auto;margin-right:1px}.cui-ctl-iconContainer20{width:20px;height:20px;display:inline-block;float:left}.AppRtl .cui-ctl-iconContainer20{float:right}.cui-ctl-iconContainer24{width:24px;height:24px;display:inline-block;float:left}.AppRtl .cui-ctl-iconContainer24{float:right}.cui-ctl-mediumlabel,.cui-ctl-largelabel,.cui-ctl-menulabel,.cui-btn-menu-description{color:#444}.cui-ctl-medium20.cui-ctl-medium{height:30px;margin-bottom:3px}.cui-ctl-medium20.cui-ctl-medium .cui-ctl-a1{height:22px;padding-top:4px}.cui-ctl-medium20.cui-ctl-medium .cui-ctl-a1Internal{height:30px}.cui-ctl-medium20.cui-ctl-medium .cui-ctl-a2{height:17px;padding-top:6px}.cui-ctl-medium20.cui-ctl-medium .cui-ctl-mediumlabel{display:inline-block;overflow:hidden}.cui-ctl-large{overflow:hidden;text-align:center;vertical-align:top;display:inline-block;cursor:default;margin:0;padding:0}.cui-touch .cui-ctl-large{margin-left:2px;margin-right:2px}.cui-ctl-largeIconContainer,.cui-ctl-large30IconContainer,.cui-ctl-large .cui-ctl-a1Internal{margin:auto}.cui-ctl-largeIconContainer,.cui-ctl-large .cui-ctl-a1Internal,.cui-ctl-menu32 .cui-ctl-iconContainer{width:32px;height:32px}.cui-ctl-menu48 .cui-ctl-iconContainer{width:48px;height:48px}.cui-ctl-large30IconContainer{width:30px;height:30px}.cui-ctl-largeIconContainer,.cui-ctl-large30IconContainer,.cui-ctl-large .cui-ctl-a1Internal,.cui-ctl-menu32 .cui-ctl-iconContainer,.cui-ctl-menu48 .cui-ctl-iconContainer{padding:1px 4px;display:block}.cui-touch .cui-ctl-largeIconContainer,.cui-touch .cui-ctl-large30IconContainer,.cui-touch .cui-ctl-large .cui-ctl-a1Internal{padding:4px 6px 3px}.cui-ctl-largeIconContainer,.cui-ctl-large30IconContainer,.cui-ctl-menu32 .cui-ctl-iconContainer,.cui-ctl-menu48 .cui-ctl-iconContainer{border-bottom:1px solid transparent}.cui-ctl-largelabel{height:30px;line-height:1.25;display:block;padding:1px 1px 1px}.cui-ctl-largelabel .cui-img-5by3{vertical-align:middle;margin-top:0}.cui-ctl-a1,.cui-ctl-a2{display:block;border:1px solid transparent;cursor:default}span.cui-ctl .cui-ctl-a1,span.cui-ctl .cui-ctl-a2{float:left;outline:none !important}.AppRtl span.cui-ctl .cui-ctl-a1,.AppRtl span.cui-ctl .cui-ctl-a2{float:right}span.cui-ctl .cui-ctl-a1{width:16px;height:16px;padding:2px}.cui-touch span.cui-ctl .cui-ctl-a1{padding:6px 4px 7px 3px}.cui-touch .cui-row-threerow span.cui-ctl .cui-ctl-a1{padding-top:4px;padding-bottom:4px}span.cui-ctl .cui-ctl-a2{border-left-width:0;border-right-width:1px;padding:8px 3px 9px}.AppRtl span.cui-ctl .cui-ctl-a2{border-left-width:1px;border-right-width:0}.cui-touch span.cui-ctl .cui-ctl-a2{padding-top:13px;padding-bottom:13px}.cui-touch .cui-row-threerow span.cui-ctl .cui-ctl-a2{padding-top:11px;padding-bottom:10px}span.cui-ctl-medium .cui-ctl-a1{width:auto;height:16px}span.cui-ctl-medium .cui-ctl-a2{height:15px;border-left-width:0;border-right-width:1px;padding:0 3px 5px}.AppRtl span.cui-ctl-medium .cui-ctl-a2{border-left-width:1px;border-right-width:0}.cui-touch span.cui-ctl-medium .cui-ctl-a2{height:15px;padding-top:3px;padding-bottom:11px}span.cui-img-16by16{float:left}.AppRtl span.cui-img-16by16{float:right}span.cui-ctl-medium .cui-ctl-mediumlabel{padding-left:3px}.AppRtl span.cui-ctl-medium .cui-ctl-mediumlabel{padding-right:3px}.cui-touch .cui-row-threerow span.cui-ctl-medium .cui-ctl-a2{padding-top:3px;padding-bottom:6px}.cui-touch span.cui-ctl-large>a.cui-ctl-a1{border-bottom:1px solid #e1e1e1}.cui-ctl-large .cui-ctl-a2{border-top-width:0}.ButtonOpenInClient{height:16px}.cui-topBar2 a.cui-jewel-jewelMenuLauncher,.cui-topBar2 a.cui-tt-a,.cui-TabRowInline a.cui-ctl-medium,.cui-TabRowInline span.cui-sb,.cui-groupBody a.cui-ctl,.cui-groupBody a.cui-ctl-medium,.cui-groupBody a.cui-ctl-large,.cui-groupBody span.cui-cb,.cui-groupBody span.cui-dd,.cui-groupBody span.cui-spn,.cui-groupBody span.cui-tb,.cui-groupBody span[aria-haspopup=\"true\"],.cui-groupBody a[aria-haspopup=\'true\'].cui-ctl-thin,.cui-menusection a.cui-ctl-menu{position:relative}.cui-groupBody a.cui-ctl-large,.cui-groupBody span.cui-ctl-large,.cui-groupBody a[aria-haspopup=\'true\'].cui-ctl-thin{overflow:visible}a.cui-ctl-menu{padding:3px;margin:1px;min-width:75px;display:block}.cui-touch a.cui-ctl-menu{padding:5px 6px;margin-top:9px}.cui-touch .cui-menusection-firstitem a.cui-ctl-menu{margin-top:0}.cui-sb-menu .cui-ctl-menu,.cui-dd-menu .cui-ctl-menu{min-width:inherit}.cui-fa-menuitem{position:relative}a.cui-ctl-menu16 .cui-ctl-iconContainer{margin-left:0;margin-right:12px}.AppRtl a.cui-ctl-menu16 .cui-ctl-iconContainer{margin-left:12px;margin-right:0}a.cui-ctl-menu16 .cui-ctl-mediumlabel{display:inline-block;padding-left:0;padding-right:23px}.AppRtl a.cui-ctl-menu16 .cui-ctl-mediumlabel{padding-left:23px;padding-right:0}.cui-fa-menuitem .cui-fa-menu-arrow{position:absolute;top:4px;right:3px}.AppRtl .cui-fa-menuitem .cui-fa-menu-arrow{left:3px;right:auto}.cui-fslb.cui-ctl-menu .cui-ctl-iconContainer{width:auto}a.cui-ctl-menu.cui-ctl-menu20{height:20px;padding-top:10px;padding-bottom:10px;padding-left:0;padding-right:20px}.AppRtl a.cui-ctl-menu.cui-ctl-menu20{padding-left:20px;padding-right:0}.cui-ctl-menu20 .cui-ctl-mediumlabel{display:inline-block;margin-top:1px;margin-left:4px;margin-right:4px}.cui-ctl-menu20 .cui-ctl-iconContainer20{padding-left:4px;padding-right:4px}.cui-ctl-menulabel{padding-left:2px;padding-right:2px;display:inline-block}.cui-ctl-menu32 .cui-ctl-menulabel{min-height:35px}.cui-ctl-menu48 .cui-ctl-menulabel{min-height:51px}.cui-ctl-menu32 .cui-ctl-mediumlabel,.cui-ctl-menu48 .cui-ctl-mediumlabel{padding:3px 0;margin-right:13px}.cui-ctl-menu32 .cui-ctl-mediumlabel-nodescription{position:relative;top:8px;padding:3px 0;margin-right:13px}.cui-btn-menu-description{max-width:200px;margin-left:0;margin-right:13px;padding-top:3px;white-space:normal;word-wrap:break-word}.AppRtl .cui-btn-menu-description{margin-left:13px;margin-right:0}.cui-ctl-menu32 .cui-fa-menu-arrow{top:14px}.cui-ctl-menu48 .cui-fa-menu-arrow{top:21px}.cui-ctl-initials{background-color:#ffa500;width:32px;height:32px;border-radius:17px;font-size:120%;text-align:center;line-height:32px;margin-left:4px;margin-right:4px;overflow:hidden;float:left;color:#fff}.AppRtl .cui-ctl-initials{float:right}.cui-inRibbonGallery{height:60px;border:1px solid #e1e1e1}.cui-touch .cui-inRibbonGallery{margin-top:5px}.cui-inRibbonGallery .cui-gallerybutton{vertical-align:top}.cui-inRibbonGallery .cui-gallerybutton-a{height:48px}.cui-inRibbonGallery .cui-gallerybutton-Size48by48 .cui-gallerybutton-a{width:48px}.cui-inRibbonGallery cui-gallerybutton-Size64by48 .cui-gallerybutton-a{width:64px}.cui-inRibbonGallery cui-gallerybutton-Size70by48 .cui-gallerybutton-a{width:70px}.cui-ctl-thin{height:50px;border:1px solid transparent;border-left-color:#e1e1e1;padding:4px;vertical-align:top;overflow:hidden;display:inline-block;cursor:default}.AppRtl .cui-ctl-thin{border:1px solid transparent;border-right:1px solid #e1e1e1}.cui-touch .cui-ctl-thin{width:18px;text-align:center}.cui-ctl-thin span{margin-top:46px}.cui-touch .cui-ctl-thin span{margin-top:25px}.cui-ctl-thin .cui-keytip span{margin-top:0}.cui-touch .cui-ctl-thin .cui-keytip span{margin-top:0}.cui-gallery{margin:0;border:0;border-spacing:0}.cui-gallery-td{margin:0;padding:0}.cui-gallery-element-Size16by16{width:23px;height:23px;overflow:hidden}.cui-gallery-element-Size40by40{width:47px;height:47px;overflow:hidden}.cui-gallery-element-Size48by48{width:55px;height:55px;overflow:hidden}.cui-gallery-element-Size61by75{width:68px;height:82px;overflow:hidden}.cui-gallery-element-Size64by48{width:71px;height:55px;overflow:hidden}.cui-gallery-element-Size85by16{width:92px;height:23px;overflow:hidden}.cui-gallery-element-Size85by48{width:92px;height:55px;overflow:hidden}.cui-gallery-element-Size32by32{width:39px;height:39px;overflow:hidden}.cui-gallery-element-Size120by20{width:127px;height:27px;overflow:hidden}.cui-gallery-element-Size20by20{width:27px;height:27px;overflow:hidden}.cui-gallery-element-Size24by24{width:31px;height:31px;overflow:hidden}.cui-gallery-element-Size84by21{width:91px;height:28px;overflow:hidden}.cui-gallery-element-Size90by21{width:97px;height:28px;overflow:hidden}.cui-gallery-element-Size200by200{width:200px;height:200px;overflow:hidden}.cui-gallery-element-Size70by48{width:77px;height:55px;overflow:hidden}.cui-gallerybutton,.cui-gallerybutton *{-ms-touch-action:none;touch-action:none}.cui-gallerybutton{border:1px solid transparent;display:inline-block;margin-left:0;margin-right:2px}.AppRtl .cui-gallerybutton{margin-left:2px;margin-right:0}.cui-gallerybutton-Size16by16{width:26px;height:26px;overflow:hidden}.cui-gallerybutton-Size40by40{width:50px;height:50px;overflow:hidden}.cui-gallerybutton-Size48by48{width:58px;height:58px;overflow:hidden}.cui-gallerybutton-Size61by75{width:71px;height:85px;overflow:hidden}.cui-gallerybutton-Size64by48{width:74px;height:58px;overflow:hidden}.cui-gallerybutton-Size70by48{width:80px;height:58px;overflow:hidden}.cui-gallerybutton-Size85by16{width:95px;height:26px;overflow:hidden}.cui-gallerybutton-Size85by48{width:95px;height:58px;overflow:hidden}.cui-gallerybutton-Size110by75{width:120px;height:85px;overflow:hidden}.cui-gallerybutton-Size32by32{width:42px;height:42px;overflow:hidden}.cui-gallerybutton-Size120by20{width:130px;height:30px;overflow:hidden}.cui-gallerybutton-Size20by20{width:30px;height:30px;overflow:hidden}.cui-gallerybutton-Size24by24{width:34px;height:34px;overflow:hidden}.cui-gallerybutton-Size84by21{width:94px;height:31px;overflow:hidden}.cui-gallerybutton-Size90by21{width:100px;height:31px;overflow:hidden}.cui-gallerybutton-Size200by200{width:200px;height:200px;overflow:hidden}.cui-gallerybutton-a{display:block;text-align:center;vertical-align:middle;border:3px solid transparent;padding:2px;overflow:hidden;cursor:default}.cui-gallerybutton-a.cui-gallerybutton-a-ltr{direction:ltr;text-align:left}.cui-gallerybutton-a.cui-gallerybutton-a-rtl{direction:rtl;text-align:right}.cui-gallerybutton-a.cui-gallerybutton-a-ltr .ListMultilevelPreview .level0{margin-left:0}.cui-gallerybutton-a.cui-gallerybutton-a-rtl .ListMultilevelPreview .level0{margin-right:0}.cui-gallerybutton-a.cui-gallerybutton-a-ltr .ListMultilevelPreview .level1{margin-left:5pt}.cui-gallerybutton-a.cui-gallerybutton-a-rtl .ListMultilevelPreview .level1{margin-right:5pt}.cui-gallerybutton-a.cui-gallerybutton-a-ltr .ListMultilevelPreview .level2{margin-left:10pt}.cui-gallerybutton-a.cui-gallerybutton-a-rtl .ListMultilevelPreview .level2{margin-right:10pt}.cui-gallerybutton-Size16by16>.cui-gallerybutton-a{width:16px;height:16px}.cui-gallerybutton-Size40by40>.cui-gallerybutton-a{width:40px;height:40px}.cui-gallerybutton-Size48by48>.cui-gallerybutton-a{width:48px;height:48px}.cui-gallerybutton-Size61by75>.cui-gallerybutton-a{width:61px;height:75px}.cui-gallerybutton-Size64by48>.cui-gallerybutton-a{width:64px;height:48px}.cui-gallerybutton-Size70by48>.cui-gallerybutton-a{width:70px;height:48px}.cui-gallerybutton-Size85by16>.cui-gallerybutton-a{width:85px;height:16px}.cui-gallerybutton-Size85by48>.cui-gallerybutton-a{width:85px;height:48px}.cui-gallerybutton-Size110by75>.cui-gallerybutton-a{width:110px;height:75px}.cui-gallerybutton-Size32by32>.cui-gallerybutton-a{width:32px;height:32px}.cui-gallerybutton-Size120by20>.cui-gallerybutton-a{width:120px;height:20px}.cui-gallerybutton-Size20by20>.cui-gallerybutton-a{width:20px;height:20px}.cui-gallerybutton-Size24by24>.cui-gallerybutton-a{width:24px;height:24px}.cui-gallerybutton-Size84by21>.cui-gallerybutton-a{width:84px;height:21px}.cui-gallerybutton-Size90by21>.cui-gallerybutton-a{width:90px;height:21px}.cui-colorpicker-table{padding:2px}.cui-touch .cui-colorpicker-table{padding:0}.cui-colorpicker-cell{width:13px;height:13px;padding:4px 0 0 4px}.AppRtl .cui-colorpicker-cell{padding:4px 4px 0 0}.cui-touch .cui-colorpicker-cell{width:21px;height:21px;padding-top:9px;padding-left:9px}.AppRtl .cui-touch .cui-colorpicker-cell{padding-left:0;padding-right:9px}.cui-colorpicker-cell-large{width:21px;height:21px}.cui-colorpicker-firstrow .cui-colorpicker-cell{padding-top:0 !important}.cui-colorpicker-firstcol.cui-colorpicker-cell{padding-left:0 !important}.AppRtl .cui-touch .cui-colorpicker-firstcol.cui-colorpicker-cell{padding-left:0;padding-right:0 !important}.cui-colorpicker-mcurow .cui-colorpicker-cell{padding-bottom:4px}.cui-touch .cui-colorpicker-mcurow .cui-colorpicker-cell{padding-bottom:6px}.cui-colorpicker-compactrow .cui-colorpicker-cell{padding-top:0}.cui-colorpicker-spacedrow .cui-colorpicker-cell{padding-top:2px}.cui-touch .cui-colorpicker-spacedrow .cui-colorpicker-cell,.cui-touch .cui-colorpicker-compactrow .cui-colorpicker-cell{padding-top:9px}.cui-colorpicker-cell-a{outline:none}.cui-colorpicker-celldiv{width:11px;height:11px;border-style:solid;border-color:#e1e1e1;padding:1px}.cui-touch .cui-colorpicker-celldiv{width:19px;height:19px !important;border-width:1px !important}.cui-colorpicker-cell-large .cui-colorpicker-celldiv{width:19px;height:19px}.cui-colorpicker-mcurow .cui-colorpicker-celldiv,.cui-colorpicker-spacedrow .cui-colorpicker-celldiv{border-width:1px}.cui-colorpicker-compactrow .cui-colorpicker-celldiv{border-width:0 1px;height:13px}.cui-colorpicker-compactrow.cui-colorpicker-firstcompactrow .cui-colorpicker-celldiv{border-top-width:1px;height:12px}.cui-colorpicker-compactrow.cui-colorpicker-lastcompactrow .cui-colorpicker-celldiv{border-bottom-width:1px;height:12px}.cui-colorpicker-cellinternaldiv{width:9px;height:9px;border:1px solid transparent}.cui-touch .cui-colorpicker-cellinternaldiv{width:17px;height:17px}.cui-colorpicker-cell-large .cui-colorpicker-cellinternaldiv{width:17px;height:17px}.cui-it{cursor:default;-ms-touch-action:none;touch-action:none}.cui-it td{padding:1px;-ms-touch-action:none;touch-action:none}.cui-touch .cui-it td{padding:7px 0 0 7px}.AppRtl .cui-touch .cui-it td{padding:7px 7px 0 0}.cui-touch .cui-it-firstrow td{padding-top:0 !important}.cui-touch td.cui-it-firstcol{padding-left:0 !important}.AppRtl .cui-touch td.cui-it-firstcol{padding-left:0;padding-right:0 !important}.cui-it-activeCell,.cui-it-inactiveCell{width:12px;height:12px}.cui-touch .cui-it-activeCell,.cui-touch .cui-it-inactiveCell{width:26px;height:26px}.cui-it-inactiveCellOuter{border:1px solid transparent}.cui-touch .cui-it-inactiveCellOuter{border-width:1px}.cui-it-inactiveCell{border:1px solid #e1e1e1}.cui-tb,.cui-tb *,.cui-spn,.cui-spn *,.cui-sb,.cui-sb *,.cui-dd,.cui-dd *,.cui-cb,.cui-cb *{-ms-touch-action:none;touch-action:none}.cui-spn,.cui-sb,.cui-dd,.cui-cb{margin:0 1px;display:inline-block;white-space:nowrap}.cui-touch .cui-tb,.cui-touch .cui-spn,.cui-touch .cui-dd,.cui-touch .cui-cb{vertical-align:top}.cui-tb{margin:8px 1px;display:inline-block;white-space:nowrap}.cui-txtbx,.cui-spn-txtbx,.cui-sb-input,.cui-cb-input{cursor:text;color:#444;background-color:#fff}.cui-dd-text{cursor:default}.cui-txtbx,.cui-spn-txtbx{autocomplete:off}.cui-txtbx,.cui-spn-txtbx,.cui-sb-input,.cui-dd-text,.cui-cb-input{width:48px;height:16px;border:1px solid #e1e1e1;border-right-width:0;padding:2px;background-color:#fff;display:block;float:left;white-space:nowrap;overflow:hidden;font:inherit;color:#444;-webkit-appearance:none;-webkit-border-radius:0}.cui-txtbx{border-right-width:1px}.cui-txtbx.cui-txtbx-multiline{resize:none;white-space:normal}.cui-tb .cui-ctl-smalllabel,.cui-tb .cui-ctl-mediumlabel,.cui-tb .cui-ctl-largelabel{display:block}.cui-sb-input{border:1px solid #fff;padding:1px 1px 1px 4px !important;background-color:#fff;text-overflow:ellipsis}.cui-sb-input.tellme-flight{border:1px solid transparent;padding:1px SEARCHBOX_RIGHTINPUT_PADDING 1px 1px !important;background-color:transparent;text-overflow:ellipsis}.AppRtl .cui-txtbx,.AppRtl .cui-spn-txtbx,.AppRtl .cui-dd-text,.AppRtl .cui-cb-input{border-left-width:0;border-right-width:1px;float:right}.AppRtl .cui-txtbx{border-left-width:1px}.AppRtl .cui-sb-input{padding:1px 4px 1px 1px !important;float:right}.cui-touch .cui-txtbx{width:90px;border-left-width:1px;border-right-width:1px}.cui-touch .cui-spn-txtbx{width:90px;border-left-width:1px;border-right-width:1px}.cui-sb-image-button,.cui-dd-arrow-button,.cui-spn-arwbx{height:20px;border:1px solid #e1e1e1;border-left-width:0;display:block;float:left;cursor:default}.cui-sb-image-button{height:16px;padding:1px 0;background-color:#fff;border-color:#fff}.tellme-flight.cui-sb-image-button{background-color:transparent;border-color:transparent;border-left-width:1px;border-right-width:1px}span.sb-img{float:right !important}.AppRtl .cui-sb-image-button,.AppRtl .cui-dd-arrow-button,.AppRtl .cui-spn-arwbx{border-right-width:0;border-left-width:1px;float:right}input::-webkit-outer-spin-button,input::-webkit-inner-spin-button{display:none}.cui-sb-input::-webkit-input-placeholder{color:#767676 !important}.cui-sb-input::-moz-placeholder{color:#767676 !important}.cui-sb-input:-ms-input-placeholder{color:#767676 !important}.cui-sb-placeholder{color:#767676 !important}span.cui-fa-dropped>.cui-sb-input.tellme-flight,span.cui-sb-hover>.cui-sb-input.tellme-flight{background-color:#a7a9ac !important;color:#fff !important}.cui-sb-input.tellme-flight::-webkit-input-placeholder{color:#595959 !important}.cui-sb-input.tellme-flight::-moz-placeholder{color:#595959 !important}.cui-sb-input.tellme-flight:-ms-input-placeholder{color:#595959 !important}.cui-sb-input.tellme-flight::-ms-input-placeholder{color:#595959 !important}.cui-sb-input.cui-sb-hover::-webkit-input-placeholder{color:#fff !important}.cui-sb-input.cui-sb-hover::-moz-placeholder{color:#fff !important}.cui-sb-input.cui-sb-hover:-ms-input-placeholder{color:#fff !important}.cui-sb-input.cui-sb-hover::-ms-input-placeholder{color:#fff !important}span.cui-fa-dropped>.cui-sb-input.tellme-flight{color:#fff !important}.cui-sb-input.cui-sb-focus::-webkit-input-placeholder{color:transparent !important}.cui-sb-input.cui-sb-focus::-moz-placeholder{color:transparent !important}.cui-sb-input.cui-sb-focus:-ms-input-placeholder{color:transparent !important}span.cui-fa-dropped>.cui-sb-input.tellme-flight:not(.cui-sb-focus)::-webkit-input-placeholder{color:#fff !important}.cui-sb-input::-ms-clear{display:none}.cui-sb-liveregion{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.cui-txtbx,.cui-spn-txtbx{direction:ltr;text-align:left}.cui-spn-btnup,.cui-spn-btndown{width:13px;height:6px;border:1px solid transparent;padding-top:2px;background-color:transparent;display:block;text-align:center;cursor:default}.cui-spn-imgcnt{display:inline-block;vertical-align:top}.cui-dd-arrow-button{padding-right:0;margin-bottom:-2px}.cui-sb-image-button{width:20px}.cui-dd-arrow-button{width:9px;padding-left:5px}.AppRtl .cui-dd-arrow-button{padding-left:0;padding-right:5px}.cui-cb-fill-container{display:flex}.cui-cb-fill-input{flex-grow:1}.cui-fslb{display:inline-block;padding:4px 3px 1px 0;margin-left:1px;margin-right:1px;vertical-align:top;color:#444;cursor:default}.AppRtl .cui-fslb{padding:4px 0 1px 3px}.cui-touch .cui-fslb{padding-top:6px;padding-bottom:7px}.cui-touch .cui-row-threerow .cui-fslb{padding-top:4px;padding-bottom:4px}.cui-fslb .cui-ctl-iconContainer{width:22px;height:22px;vertical-align:top;display:inline-block;text-align:center}.cui-separator{display:inline-block;background-color:#c6c6c6;width:1px;height:16px;margin:7px 7px 0;cursor:default;vertical-align:top}.cui-singlerowlayout .cui-separator{margin:5px 7px 0}.cui-sldr{display:inline-block;text-align:center;cursor:default;border:1px solid transparent}.cui-sldr-input{-webkit-appearance:none;margin-top:12px;width:150px;display:block}.cui-sldr-input::-webkit-slider-runnable-track{width:150px;height:10px;background:#ddd;border:1px solid transparent;border-radius:10px}.cui-sldr-input::-webkit-slider-thumb{-webkit-appearance:none;height:12px;width:12px;border:1px solid #777;border-radius:50%;background:#eee;margin-top:-1px}.cui-sldr-input:focus{outline:none}.cui-sldr-input:focus::-webkit-slider-runnable-track{background:#ddd}.cui-sldr-input::-moz-range-track{width:150px;height:10px;background:#ddd;border:1px solid transparent;border-radius:10px}.cui-sldr-input::-moz-range-thumb{height:12px;width:12px;border:1px solid #777;border-radius:50%;background:#eee}.cui-sldr-input::-moz-focus-outer{border:0}.cui-sldr-input::-ms-tooltip{display:none}.cui-sldr-input::-ms-track{height:10px;background:transparent;border-color:transparent;color:transparent;border-width:2px 0}.cui-sldr-input::-ms-fill-lower{background:#4d82b8;border-radius:10px;border:1px solid #4d82b8}.cui-sldr-input::-ms-fill-upper{background:#ddd;border-radius:10px;border:1px solid #ddd}.cui-sldr-input::-ms-thumb{height:12px;width:12px;border:1px solid #777;border-radius:50%;background:#eee}.cui-ctl-on{border-color:#9fd5b7;background-color:#9fd5b7;outline:2px solid transparent}.cui-ctl-unchkd img{visibility:hidden}.cui-gallerybutton-highlighted{border-color:#9fd5b7;outline:2px solid transparent}.cui-gallerybutton-highlighted .cui-gallerybutton-a{border-color:#9fd5b7}.cui-gallerybutton-highlighted.cui-gallerybutton-Size16by16 .cui-gallerybutton-a{background-color:#9fd5b7}.cui-gallerybutton-highlighted.cui-gallerybutton-Size20by20 .cui-gallerybutton-a{background-color:#9fd5b7}.cui-gallerybutton-highlighted.cui-gallerybutton-Size24by24 .cui-gallerybutton-a{background-color:#9fd5b7}.cui-gallerybutton-highlighted.cui-gallerybutton-Size84by21 .cui-gallerybutton-a{background-color:#9fd5b7}.cui-gallerybutton-highlighted.cui-gallerybutton-Size90by21 .cui-gallerybutton-a{background-color:#9fd5b7}.usehover .cui-ctl:hover *,.usehover .cui-ctl-medium:hover *,.usehover a.cui-ctl-large:hover *,.usehover a.cui-ctl-a1:hover *,.usehover .cui-ctl-a2:hover *,.usehover a.cui-ctl-thin:hover *{cursor:default}.usehover .cui-tb:hover .cui-txtbx,.cui-tb-focus .cui-txtbx,.usehover .cui-spn:hover .cui-spn-txtbx,.usehover .cui-spn:hover .cui-spn-arwbx,.cui-spn-focus .cui-spn-txtbx,.cui-spn-focus .cui-spn-arwbx,.usehover span:hover>.cui-dd-arrow-button,.usehover .cui-dd:hover .cui-dd-text,.cui-dd:focus .cui-dd-text,.cui-dd:focus .cui-dd-arrow-button,.usehover .cui-cb:hover .cui-cb-input,.cui-cb-focus .cui-cb-input,.cui-cb-focus .cui-dd-arrow-button,.WACDialogList:focus{border-color:#86bfa0;outline:2px dashed transparent}.usehover .cui-dd-arrow-button:hover{border-left-width:1px;border-right-width:1px;padding-right:0;outline:2px dashed transparent}.usehover .cui-dd-arrow-button:hover{padding-left:4px;outline:2px dashed transparent}.AppRtl.usehover .cui-dd-arrow-button:hover{padding-left:0;padding-right:4px;outline:2px dashed transparent}.usehover .cui-ctl:hover,.cui-ctl:focus,.usehover .cui-ctl-medium:hover,.cui-ctl-medium:focus,.usehover .cui-ctl-large:hover,.cui-ctl-large:focus,.usehover .cui-sldr:hover,.cui-sldr-onfocus,.cui-ctl-split-hovered,.cui-ctl-split-hovered-primary,.cui-ctl-menu-hovered-without-focus,.cui-ctl-menu:focus,.cui-gallerybutton-Size16by16.cui-gallerybutton-focused,.cui-gallerybutton-Size16by16.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size20by20.cui-gallerybutton-focused,.cui-gallerybutton-Size20by20.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size24by24.cui-gallerybutton-focused,.cui-gallerybutton-Size24by24.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size84by21.cui-gallerybutton-focused,.cui-gallerybutton-Size84by21.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size90by21.cui-gallerybutton-focused,.cui-gallerybutton-Size90by21.cui-gallerybutton-focused .cui-gallerybutton-a,.usehover .cui-ctl-thin:hover,.cui-ctl-thin:focus,.usehover .cui-spn-btnup:hover,.usehover .cui-spn-btndown:hover,.usehover .cui-dd-arrow-button:hover,.WACZoomDialogRadioRow-highlight,.WACZoomDialogRadioRow:hover{border-color:#d3f0e0;background-color:#d3f0e0;outline:2px dashed transparent}.WACDialogCheckboxDiv:hover,.WACDialogCheckboxDivHighlight{border:1px solid #000;outline:2px dashed transparent}.cui-ctl-menu{-webkit-tap-highlight-color:#d3f0e0}.usehover .cui-groupBody .cui-gallerybutton-Size40by40:hover,.usehover .cui-groupBody .cui-gallerybutton-Size40by40:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size48by48:hover,.usehover .cui-groupBody .cui-gallerybutton-Size48by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size64by48:hover,.usehover .cui-groupBody .cui-gallerybutton-Size64by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size70by48:hover,.usehover .cui-groupBody .cui-gallerybutton-Size70by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size85by16:hover,.usehover .cui-groupBody .cui-gallerybutton-Size85by16:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size85by48:hover,.usehover .cui-groupBody .cui-gallerybutton-Size85by48:hover .cui-gallerybutton-a,.usehover .cui-gallerybutton-Size110by75:hover,.usehover .cui-gallerybutton-Size110by75:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size32by32:hover,.usehover .cui-groupBody .cui-gallerybutton-Size32x32:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size120x20:hover,.usehover .cui-groupBody .cui-gallerybutton-Size120x20:hover .cui-gallerybutton-a,.cui-gallerybutton-Size40by40.cui-gallerybutton-focused,.cui-gallerybutton-Size40by40.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size48by48.cui-gallerybutton-focused,.cui-gallerybutton-Size48by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size61by75.cui-gallerybutton-focused,.cui-gallerybutton-Size61by75.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size64by48.cui-gallerybutton-focused,.cui-gallerybutton-Size64by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size70by48.cui-gallerybutton-focused,.cui-gallerybutton-Size70by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size85by16.cui-gallerybutton-focused,.cui-gallerybutton-Size85by48.cui-gallerybutton-focused,.cui-gallerybutton-Size85by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size32by32.cui-gallerybutton-focused,.cui-gallerybutton-Size32by32.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size120by20.cui-gallerybutton-focused,.cui-gallerybutton-Size120by20.cui-gallerybutton-focused .cui-gallerybutton-a{border-color:#d3f0e0;outline:2px dashed transparent}.cui-ctl-split-hovered-secondary{border-color:#d3f0e0;background-color:#fff;outline:2px dashed transparent}.cui-colorpicker-cell.cui-colorpicker-hoveredOver .cui-colorpicker-celldiv{height:11px !important;border-color:#86bfa0;border-width:1px;outline:2px dashed transparent}.cui-touch .cui-colorpicker-cell.cui-colorpicker-hoveredOver .cui-colorpicker-celldiv{height:19px !important;outline:2px dashed transparent}.cui-colorpicker-cell-large.cui-colorpicker-hoveredOver .cui-colorpicker-celldiv{height:19px !important;outline:2px dashed transparent}.cui-colorpicker-cell.cui-colorpicker-hoveredOver .cui-colorpicker-cellinternaldiv{border-color:#d3f0e0}.cui-colorpicker-cell.cui-colorpicker-selected .cui-colorpicker-celldiv{height:11px !important;border-color:#9fd5b7;border-width:1px;outline:2px solid transparent}.cui-touch .cui-colorpicker-cell.cui-colorpicker-selected .cui-colorpicker-celldiv{height:19px !important;outline:2px solid transparent}.cui-colorpicker-cell-large.cui-colorpicker-selected .cui-colorpicker-celldiv{height:19px !important;outline:2px solid transparent}.cui-colorpicker-cell.cui-colorpicker-selected .cui-colorpicker-cellinternaldiv{border-color:#d3f0e0}.cui-it-activeCellOuter{border:1px solid #86bfa0;outline:2px dashed transparent !important}.cui-touch .cui-it-activeCellOuter{border-width:1px;outline:2px dashed transparent}.cui-it-activeCell{border:1px solid #d3f0e0;outline:2px dashed transparent !important}.cui-touch .cui-it-activeCell{border-color:#86bfa0}.usehover .cui-ctl.cui-ctl-on:hover,.cui-ctl-on:focus,.cui-ctl-on .cui-ctl-split-hovered,.cui-ctl-on .cui-ctl-split-hovered-primary{border-color:#86bfa0;background-color:#d3f0e0;outline:2px dashed transparent}.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48:hover,.usehover .cui-gallerybutton-highlighted.cui-gallerybutton-Size110by75:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20:hover,.cui-gallerybutton-highlighted.cui-gallerybutton-Size16by16.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size61by75.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size20by20.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size24by24.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size84by21.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size90by21.cui-gallerybutton-focused{border-color:#86bfa0;outline:2px dashed transparent}.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48:hover .cui-gallerybutton-a,.usehover .cui-gallerybutton-highlighted.cui-gallerybutton-Size110by75:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20:hover .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size61by75.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size84by21.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size90by21.cui-gallerybutton-focused .cui-gallerybutton-a{border-color:#d3f0e0;outline:2px dashed transparent}.cui-gallerybutton-highlighted.cui-gallerybutton-Size16by16.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size20by20.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size24by24.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size84by21.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size90by21.cui-gallerybutton-focused .cui-gallerybutton-a{border-color:#d3f0e0;background-color:#d3f0e0;outline:2px dashed transparent}.cui-ctl-active,.usehover .cui-ctl-active:hover,.cui-gallerybutton-Size16by16.cui-ctl-active,.cui-gallerybutton-Size16by16.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size20by20.cui-ctl-active,.cui-gallerybutton-Size20by20.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size24by24.cui-ctl-active,.cui-gallerybutton-Size24by24.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size84by21.cui-ctl-active,.cui-gallerybutton-Size84by21.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size90by21.cui-ctl-active,.cui-gallerybutton-Size90by21.cui-ctl-active .cui-gallerybutton-a,.cui-fa-dropped,.cui-fa-dropped .cui-ctl-a1,.cui-fa-dropped .cui-ctl-a2{border-color:#86bfa0;background-color:#86bfa0}.cui-ctl-menu.cui-fa-dropped{border-color:#d3f0e0;background-color:#d3f0e0}.cui-section.cui-fa-dropped{background-color:transparent}.cui-gallerybutton-Size40by40.cui-ctl-active,.cui-gallerybutton-Size40by40.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size48by48.cui-ctl-active,.cui-gallerybutton-Size48by48.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size61by75.cui-ctl-active,.cui-gallerybutton-Size61by75.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size64by48.cui-ctl-active,.cui-gallerybutton-Size64by48.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size70by48.cui-ctl-active,.cui-gallerybutton-Size70by48.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size85by16.cui-ctl-active,.cui-gallerybutton-Size85by16.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size85by48.cui-ctl-active,.cui-gallerybutton-Size85by48.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size110by75.cui-ctl-active,.cui-gallerybutton-Size110by75.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size32by32.cui-ctl-active,.cui-gallerybutton-Size32by32.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size120by20.cui-ctl-active,.cui-gallerybutton-Size120by20.cui-ctl-active .cui-gallerybutton-a{border-color:#86bfa0;background-color:#fff}.MLRVisualRefresh .cui-ctl-on{border-color:#c8c6c4;background-color:#c8c6c4}.MLRVisualRefresh .cui-gallerybutton-highlighted{border-color:#c8c6c4}.MLRVisualRefresh .cui-gallerybutton-highlighted .cui-gallerybutton-a{border-color:#c8c6c4}.MLRVisualRefresh .cui-gallerybutton-highlighted.cui-gallerybutton-Size16by16 .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-highlighted.cui-gallerybutton-Size20by20 .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-highlighted.cui-gallerybutton-Size24by24 .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-highlighted.cui-gallerybutton-Size84by21 .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-highlighted.cui-gallerybutton-Size90by21 .cui-gallerybutton-a{background-color:#c8c6c4}.usehover .MLRVisualRefresh .cui-ctl:hover,.MLRVisualRefresh .cui-ctl:focus,.usehover .MLRVisualRefresh .cui-ctl-medium:hover,.MLRVisualRefresh .cui-ctl-medium:focus,.usehover .MLRVisualRefresh .cui-ctl-large:hover,.MLRVisualRefresh .cui-ctl-large:focus,.usehover .MLRVisualRefresh .cui-sldr:hover,.MLRVisualRefresh .cui-sldr-onfocus,.MLRVisualRefresh .cui-ctl-split-hovered,.MLRVisualRefresh .cui-ctl-split-hovered-primary,.MLRVisualRefresh .cui-ctl-menu-hovered-without-focus,.MLRVisualRefresh .cui-ctl-menu:focus,.MLRVisualRefresh .cui-gallerybutton-Size16by16.cui-gallerybutton-focused,.MLRVisualRefresh .cui-gallerybutton-Size16by16.cui-gallerybutton-focused .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size20by20.cui-gallerybutton-focused,.MLRVisualRefresh .cui-gallerybutton-Size20by20.cui-gallerybutton-focused .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size24by24.cui-gallerybutton-focused,.MLRVisualRefresh .cui-gallerybutton-Size24by24.cui-gallerybutton-focused .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size84by21.cui-gallerybutton-focused,.MLRVisualRefresh .cui-gallerybutton-Size84by21.cui-gallerybutton-focused .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size90by21.cui-gallerybutton-focused,.MLRVisualRefresh .cui-gallerybutton-Size90by21.cui-gallerybutton-focused .cui-gallerybutton-a,.usehover .MLRVisualRefresh .cui-ctl-thin:hover,.MLRVisualRefresh .cui-ctl-thin:focus,.usehover .MLRVisualRefresh .cui-spn-btnup:hover,.usehover .MLRVisualRefresh .cui-spn-btndown:hover,.usehover .MLRVisualRefresh .cui-dd-arrow-button:hover,.MLRVisualRefresh .WACZoomDialogRadioRow-highlight,.MLRVisualRefresh .WACZoomDialogRadioRow:hover{border-color:#e1dfdd;background-color:#e1dfdd}.MLRVisualRefresh .WACDialogCheckboxDiv:hover,.MLRVisualRefresh .WACDialogCheckboxDivHighlight{border:1px solid #000}.usehover .MLRVisualRefresh .cui-tb:hover .cui-txtbx,.MLRVisualRefresh .cui-tb-focus .cui-txtbx,.usehover .MLRVisualRefresh .cui-spn:hover .cui-spn-txtbx,.usehover .MLRVisualRefresh .cui-spn:hover .cui-spn-arwbx,.MLRVisualRefresh .cui-spn-focus .cui-spn-txtbx,.MLRVisualRefresh .cui-spn-focus .cui-spn-arwbx,.usehover .MLRVisualRefresh span:hover>.cui-dd-arrow-button,.usehover .MLRVisualRefresh .cui-dd:hover .cui-dd-text,.MLRVisualRefresh .cui-dd:focus .cui-dd-text,.MLRVisualRefresh .cui-dd:focus .cui-dd-arrow-button,.usehover .MLRVisualRefresh .cui-cb:hover .cui-cb-input,.MLRVisualRefresh .cui-cb-focus .cui-cb-input,.MLRVisualRefresh .cui-cb-focus .cui-dd-arrow-button,.MLRVisualRefresh .WACDialogList:focus{border-color:#969696}.MLRVisualRefresh .cui-ctl-split-hovered-secondary{border-color:#e1dfdd}.MLRVisualRefresh .cui-ctl-menu{-webkit-tap-highlight-color:#e1dfdd}.usehover .MLRVisualRefresh .cui-groupBody .cui-gallerybutton:hover,.usehover .MLRVisualRefresh .cui-groupBody .cui-gallerybutton:hover .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton.cui-gallerybutton-focused,.MLRVisualRefresh .cui-gallerybutton.cui-gallerybutton-focused .cui-gallerybutton-a{border-color:#e1dfdd}.usehover .MLRVisualRefresh .cui-ctl.cui-ctl-on:hover,.MLRVisualRefresh .cui-ctl-on:focus,.MLRVisualRefresh .cui-ctl-on .cui-ctl-split-hovered,.MLRVisualRefresh .cui-ctl-on .cui-ctl-split-hovered-primary{border-color:#797673;background-color:#c8c6c4}.usehover .MLRVisualRefresh .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton:hover,.MLRVisualRefresh .cui-gallerybutton-highlighted.cui-gallerybutton.cui-gallerybutton-focused{border-color:#797673}.MLRVisualRefresh .cui-ctl-active,.usehover .MLRVisualRefresh .cui-ctl-active:hover,.MLRVisualRefresh .cui-gallerybutton-Size16by16.cui-ctl-active,.MLRVisualRefresh .cui-gallerybutton-Size16by16.cui-ctl-active .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size20by20.cui-ctl-active,.MLRVisualRefresh .cui-gallerybutton-Size20by20.cui-ctl-active .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size24by24.cui-ctl-active,.MLRVisualRefresh .cui-gallerybutton-Size24by24.cui-ctl-active .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size84by21.cui-ctl-active,.MLRVisualRefresh .cui-gallerybutton-Size84by21.cui-ctl-active .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size90by21.cui-ctl-active,.MLRVisualRefresh .cui-gallerybutton-Size90by21.cui-ctl-active .cui-gallerybutton-a,.MLRVisualRefresh .cui-fa-dropped,.MLRVisualRefresh .cui-fa-dropped .cui-ctl-a1,.MLRVisualRefresh .cui-fa-dropped .cui-ctl-a2{border-color:#d2d0ce;background-color:#d2d0ce}.MLRVisualRefresh .cui-gallerybutton.cui-ctl-active,.MLRVisualRefresh .cui-gallerybutton.cui-ctl-active .cui-gallerybutton-a{border-color:#d2d0ce}.MLRVisualRefresh .cui-separator{visibility:hidden}.MLRVisualRefresh .cui-disabled:focus,.MLRVisualRefresh .cui-disabled:focus:hover,.MLRVisualRefresh .cui-disabled .cui-ctl-split-hovered-primary,.MLRVisualRefresh .cui-disabled .cui-ctl-split-hovered-secondary{border-color:#e1dfdd !important;background-color:#e1dfdd !important}.MLRVisualRefresh .cui-disabled.cui-gallerybutton.cui-gallerybutton-focused,.MLRVisualRefresh .cui-disabled.cui-gallerybutton.cui-gallerybutton-focused .cui-gallerybutton-a,.MLRVisualRefresh .cui-groupBody .cui-disabled.cui-gallerybutton.cui-gallerybutton-focused:hover,.MLRVisualRefresh .cui-groupBody .cui-disabled.cui-gallerybutton.cui-gallerybutton-focused:hover .cui-gallerybutton-a{border-color:#e1dfdd !important}.MLRVisualRefresh .cui-disabled:focus .cui-img-container,.MLRVisualRefresh .cui-disabled:focus .cui-img-cont-float{background-color:#e1dfdd !important}.MLRVisualRefresh .cui-dd-arrow-button .cui-img-8by8{top:1px;left:-1px}.AppRtl .MLRVisualRefresh .cui-dd-arrow-button .cui-img-8by8{left:0;right:-2px}.MLRVisualRefresh .cui-ctl .cui-ctl-a2{padding:1px 1px 3px 2px}.MLRVisualRefresh .cui-ctl .cui-ctl-smalllabel{padding:0;padding-left:3px;margin-top:-2px}.AppRtl .MLRVisualRefresh .cui-ctl .cui-ctl-smalllabel{padding-left:0;padding-right:2px}.MLRVisualRefresh .cui-ctl-thin{padding-left:3px;padding-right:2px}.AppRtl .MLRVisualRefresh .cui-ctl-thin{padding-right:3px;padding-left:2px}.MLRVisualRefresh .cui-ctl-thin .cui-img-8by8{margin-top:42px}.MLRVisualRefresh .cui-ctl-large .cui-img-8by8{left:1px}.MLRVisualRefresh .cui-spn-btnup,.MLRVisualRefresh .cui-spn-btndown{padding-top:0;padding-bottom:2px}.MLRVisualRefresh .cui-spn-btnup .cui-img-8by8,.MLRVisualRefresh .cui-spn-btndown .cui-img-8by8{left:1px}.AppRtl .MLRVisualRefresh .cui-spn-btnup .cui-img-8by8,.AppRtl .MLRVisualRefresh .cui-spn-btndown .cui-img-8by8{left:0}.MLRVisualRefresh .cui-ctl-largeFloatieIconContainer .cui-img-8by8{margin-bottom:8px}.MLRVisualRefresh .PeoplesWellControl .cui-img-8by8{top:-2px}.MLRVisualRefresh.cui-floatie .cui-dd-arrow-button,.MLRVisualRefresh.cui-floatie .cui-ctl .cui-ctl-smalllabel,.MLRVisualRefresh.cui-floatie .cui-ctl .cui-ctl-a2{font-size:12px}.MLRVisualRefresh.cui-floatie.cui-touch .cui-dd-arrow-button .cui-img-8by8{top:6px}.MLRVisualRefresh.cui-floatie.cui-touch .cui-ctl .cui-ctl-a2{padding-top:6px;padding-bottom:7px}.MLRVisualRefresh.cui-floatie.cui-touch .cui-ctl .cui-ctl-smalllabel{margin-top:0}.MLRVisualRefresh .cui-touch .cui-row-threerow .cui-ctl .cui-ctl-a2{padding-top:3px;padding-bottom:5px}.MLRVisualRefresh .cui-touch .cui-row-tworow .cui-ctl .cui-ctl-a2{padding-top:6px;padding-bottom:7px}.MLRVisualRefresh .cui-touch .cui-ctl .cui-ctl-smalllabel{margin-top:-1px}.tellme-flight.cui-sb{background-color:transparent;border-color:transparent}.tellme-flight.cui-sb-hover,.tellme-flight.cui-sb-focus,.tellme-flight.cui-fa-dropped{background-color:#a7a9ac !important;color:#fff !important;z-index:1001}span.tellme-flight.cui-sb-hover,span.tellme-flight.cui-sb-focus{outline:2px dashed transparent}.cui-disabled *{color:#b1b1b1 !important}.cui-disabled .cui-img-container,.cui-disabled .cui-img-cont-float{opacity:.3}.InternetExplorer.v8 .cui-disabled .cui-img-container,.InternetExplorer.v8 .cui-disabled .cui-img-cont-float{-ms-filter:\"alpha(opacity=30)\"}.cui-disabled .cui-txtbx,.cui-disabled .cui-spn-txtbx,.cui-disabled .cui-cb-input{color:#b1b1b1 !important;background-color:#f0f0f0 !important;cursor:default}.cui-disabled .cui-txtbx,.cui-disabled .cui-spn-txtbx,.cui-disabled .cui-spn-arwbx,.cui-disabled .cui-dd-arrow-button,.cui-disabled .cui-dd-text,.cui-disabled .cui-cb-input{border-color:#e1e1e1 !important}.cui-disabled.cui-ctl-on{border-color:transparent !important;background-color:transparent !important}.cui-disabled.cui-gallerybutton-highlighted{border-color:transparent !important}.cui-disabled.cui-gallerybutton-highlighted .cui-gallerybutton-a{border-color:transparent !important}.usehover .cui-disabled:hover .cui-txtbx,.usehover .cui-disabled:hover .cui-spn-txtbx,.usehover .cui-disabled:hover .cui-spn-arwbx,.usehover .cui-disabled:hover .cui-dd-text,.usehover .cui-disabled:hover .cui-cb-input,.usehover .cui-disabled .cui-dd-arrow-button:hover{border-color:#e1e1e1 !important;outline:none}.usehover .cui-disabled .cui-dd-arrow-button:hover{border-width:1px;border-left-width:0;background-color:transparent !important;padding-right:0 !important;outline:none}.usehover .cui-disabled .cui-dd-arrow-button:hover{padding-left:5px !important;outline:none}.AppRtl.usehover .cui-disabled .cui-dd-arrow-button:hover{border-width:1px;border-right-width:0;padding-left:0 !important;outline:none}.AppRtl.usehover .cui-disabled .cui-dd-arrow-button:hover{padding-right:5px !important;outline:none}.usehover .cui-disabled:hover *{outline:none !important}.usehover .cui-disabled:hover,.usehover .cui-disabled.cui-ctl-on:hover,.cui-disabled.cui-ctl-split-hovered,.cui-disabled .cui-ctl-split-hovered-primary,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton:hover,.usehover .cui-disabled.cui-gallerybutton:hover .cui-gallerybutton-a,.usehover .cui-disabled .cui-spn-btnup:hover,.usehover .cui-disabled .cui-spn-btndown:hover{border-color:transparent !important;background-color:transparent !important;outline:none}.usehover .cui-disabled.cui-ctl-thin:hover{border-color:transparent !important;border-left-color:#e1e1e1 !important;outline:none}.AppRtl.usehover .cui-disabled.cui-ctl-thin:hover{border-color:transparent !important;border-right-color:#e1e1e1 !important;outline:none}.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48:hover,.usehover .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size110by75:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20:hover{border-color:transparent !important}.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48:hover .cui-gallerybutton-a,.usehover .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size110by75:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20:hover .cui-gallerybutton-a{border-color:transparent !important}.cui-disabled:focus,.cui-disabled:focus:hover,.cui-disabled .cui-ctl-split-hovered-primary,.cui-disabled .cui-ctl-split-hovered-secondary{border-color:#d3f0e0 !important;background-color:#d3f0e0 !important;outline:2px dotted transparent}.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size40by40,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size40by40 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size48by48,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size48by48 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size61by75,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size61by75 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size64by48,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size64by48 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size70by48,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size70by48 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by16,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by16 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by48,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by48 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size110by75,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size110by75 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size32by32,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size32by32 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size120by20,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size120by20 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size110by75:hover,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size110by75:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size40by40:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size40by40:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size48by48:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size48by48:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size64by48:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size64by48:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size70by48:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size70by48:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by16:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by16:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by48:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by48:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size32by32:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size32by32:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size120by20:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size120by20:hover .cui-gallerybutton-a{border-color:#d3f0e0 !important;outline:2px dotted transparent}.cui-disabled:focus .cui-img-container,.cui-disabled:focus .cui-img-cont-float{background-color:#d3f0e0 !important}.cui-touch .cui-hideInTouch{display:none}div#AccessibilityHelpDialogBody{margin-top:10px}table.SelectableDialogTable{border:1px solid #ccc;border-collapse:collapse;cursor:default}.SelectableDialogTable thead,.SelectableDialogTable tbody{display:block}.SelectableDialogTable thead{border-bottom:1px solid #ccc}.SelectableDialogTable tbody{overflow:auto}.SelectableDialogTable th,.SelectableDialogTable td{width:300px;text-align:left;padding:5px}.AppRtl .SelectableDialogTable th,.AppRtl .SelectableDialogTable td{text-align:right}.SelectableDialogTable tbody tr:focus{background-color:Highlight;color:HighlightText;outline:2px dashed transparent}.SelectableDialogTable tbody tr.inactiveRowSelection{background-color:#eee;outline:2px dashed transparent}@media screen and (-ms-high-contrast:active){.cui-disabled *,.cui-disabled .cui-img-container,.cui-disabled .cui-img-cont-float,.cui-disabled .cui-txtbx,.cui-disabled .cui-spn-txtbx,.cui-disabled .cui-spn-arwbx,.cui-disabled .cui-dd-arrow-button,.cui-disabled .cui-dd-text,.cui-disabled .cui-cb-input,.usehover .cui-disabled.cui-ctl:hover *,.usehover .cui-disabled.cui-ctl-medium:hover *,.usehover a.cui-disabled.cui-ctl-large:hover *,.usehover a.cui-disabled.cui-ctl-a1:hover *,.usehover .cui-disabled.cui-ctl-a2:hover *,.usehover a.cui-disabled.cui-ctl-thin:hover *,.usehover .cui-disabled:hover .cui-txtbx,.usehover .cui-disabled:hover .cui-spn-txtbx,.usehover .cui-disabled:hover .cui-spn-arwbx,.usehover .cui-disabled:hover .cui-dd-text,.usehover .cui-disabled:hover .cui-cb-input,.usehover .cui-disabled .cui-dd-arrow-button:hover,.AppRtl.usehover .cui-disabled .cui-dd-arrow-button:hover,.usehover .cui-disabled:hover *,.usehover .cui-disabled:hover,.usehover .cui-disabled.cui-ctl-on:hover,.cui-disabled.cui-ctl-split-hovered,.cui-disabled .cui-ctl-split-hovered-primary,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton:hover,.usehover .cui-disabled.cui-gallerybutton:hover .cui-gallerybutton-a,.usehover .cui-disabled .cui-spn-btnup:hover,.usehover .cui-disabled .cui-spn-btndown:hover,.usehover .cui-disabled.cui-ctl-thin:hover,.AppRtl.usehover .cui-disabled.cui-ctl-thin:hover{color:GrayText !important;opacity:1}.cui-disabled.cui-ctl-on,.cui-disabled.cui-gallerybutton-highlighted,.cui-disabled.cui-gallerybutton-highlighted .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48:hover,.usehover .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size110by75:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20:hover,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48:hover .cui-gallerybutton-a,.usehover .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size110by75:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-disabled.cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20:hover .cui-gallerybutton-a,.cui-disabled:focus,.cui-disabled:focus:hover,.cui-disabled .cui-ctl-split-hovered-primary,.cui-disabled .cui-ctl-split-hovered-secondary,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size40by40,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size40by40 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size48by48,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size48by48 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size61by75,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size61by75 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size64by48,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size64by48 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size70by48,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size70by48 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by16,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by16 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by48,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by48 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size110by75,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size110by75 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size110by75:hover,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size110by75:hover .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size32by32,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size32by32 .cui-gallerybutton-a,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size120by20,.cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size120by20 .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size40by40:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size40by40:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size48by48:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size48by48:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size64by48:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size64by48:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size70by48:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size70by48:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by16:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by16:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by48:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size85by48:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size32by32:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size32by32:hover .cui-gallerybutton-a,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size120by20:hover,.cui-groupBody .cui-disabled.cui-gallerybutton-focused.cui-gallerybutton-Size120by20:hover .cui-gallerybutton-a,.cui-disabled:focus .cui-img-container,.cui-disabled:focus .cui-img-cont-float,.MLRVisualRefresh .cui-disabled:focus,.MLRVisualRefresh .cui-disabled:focus:hover,.MLRVisualRefresh .cui-disabled .cui-ctl-split-hovered-primary,.MLRVisualRefresh .cui-disabled .cui-ctl-split-hovered-secondary,.MLRVisualRefresh .cui-disabled.cui-gallerybutton.cui-gallerybutton-focused,.MLRVisualRefresh .cui-disabled.cui-gallerybutton.cui-gallerybutton-focused .cui-gallerybutton-a,.MLRVisualRefresh .cui-groupBody .cui-disabled.cui-gallerybutton.cui-gallerybutton-focused:hover,.MLRVisualRefresh .cui-groupBody .cui-disabled.cui-gallerybutton.cui-gallerybutton-focused:hover .cui-gallerybutton-a,.MLRVisualRefresh .cui-disabled:focus .cui-img-container,.MLRVisualRefresh .cui-disabled:focus .cui-img-cont-float{-ms-high-contrast-adjust:none;background-color:Highlight !important;color:GrayText !important;opacity:1;outline-color:inherit !important}.usehover .cui-disabled:hover *{background-color:transparent}.cui-sldr-input:focus,.cui-ctl-on,.cui-gallerybutton-highlighted,.cui-gallerybutton-highlighted .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size16by16 .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size20by20 .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size24by24 .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size84by21 .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size90by21 .cui-gallerybutton-a,.usehover .cui-ctl:hover *,.usehover .cui-ctl-medium:hover *,.usehover a.cui-ctl-large:hover *,.usehover a.cui-ctl-a1:hover *,.usehover .cui-ctl-a2:hover *,.usehover a.cui-ctl-thin:hover *,.usehover .cui-tb:hover .cui-txtbx,.usehover .cui-spn:hover .cui-spn-txtbx,.usehover .cui-spn:hover .cui-spn-arwbx,.cui-tb-focus .cui-txtbx,.cui-spn-focus .cui-spn-txtbx,.cui-spn-focus .cui-spn-arwbx,.usehover span:hover>.cui-dd-arrow-button,.usehover .cui-dd:hover .cui-dd-text,.cui-dd:focus .cui-dd-text,.cui-dd:focus .cui-dd-arrow-button,.usehover .cui-cb:hover .cui-cb-input,.cui-cb-focus .cui-cb-input,.cui-cb-focus .cui-dd-arrow-button,.usehover .cui-dd-arrow-button:hover,.AppRtl.usehover .cui-dd-arrow-button:hover,.usehover .cui-ctl:hover,.cui-ctl:focus,.usehover .cui-ctl-medium:hover,.cui-ctl-medium:focus,.usehover .cui-ctl-large:hover,.cui-ctl-large:focus,.cui-ctl-split-hovered,.cui-ctl-split-hovered-primary,.cui-ctl-menu-hovered-without-focus,.cui-ctl-menu:focus,.cui-gallerybutton-Size16by16.cui-gallerybutton-focused,.cui-gallerybutton-Size16by16.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size20by20.cui-gallerybutton-focused,.cui-gallerybutton-Size20by20.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size24by24.cui-gallerybutton-focused,.cui-gallerybutton-Size24by24.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size84by21.cui-gallerybutton-focused,.cui-gallerybutton-Size84by21.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size90by21.cui-gallerybutton-focused,.cui-gallerybutton-Size90by21.cui-gallerybutton-focused .cui-gallerybutton-a,.usehover .cui-ctl-thin:hover,.cui-ctl-thin:focus,.usehover .cui-spn-btnup:hover,.usehover .cui-spn-btndown:hover,.WACZoomDialogRadioRow-highlight,.WACZoomDialogRadioRow:hover,.WACDialogCheckboxDiv:hover,.WACDialogCheckboxDivHighlight,.usehover .cui-groupBody .cui-gallerybutton-Size40by40:hover,.usehover .cui-groupBody .cui-gallerybutton-Size40by40:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size48by48:hover,.usehover .cui-groupBody .cui-gallerybutton-Size48by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size64by48:hover,.usehover .cui-groupBody .cui-gallerybutton-Size64by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size70by48:hover,.usehover .cui-groupBody .cui-gallerybutton-Size70by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size85by16:hover,.usehover .cui-groupBody .cui-gallerybutton-Size85by16:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size85by48:hover,.usehover .cui-groupBody .cui-gallerybutton-Size85by48:hover .cui-gallerybutton-a,.usehover .cui-gallerybutton-Size110by75:hover,.usehover .cui-gallerybutton-Size110by75:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size32by32:hover,.usehover .cui-groupBody .cui-gallerybutton-Size32by32:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-Size120by20:hover,.usehover .cui-groupBody .cui-gallerybutton-Size120by20:hover .cui-gallerybutton-a,.cui-gallerybutton-Size40by40.cui-gallerybutton-focused,.cui-gallerybutton-Size40by40.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size48by48.cui-gallerybutton-focused,.cui-gallerybutton-Size48by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size61by75.cui-gallerybutton-focused,.cui-gallerybutton-Size61by75.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size64by48.cui-gallerybutton-focused,.cui-gallerybutton-Size64by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size70by48.cui-gallerybutton-focused,.cui-gallerybutton-Size70by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size85by16.cui-gallerybutton-focused,.cui-gallerybutton-Size85by48.cui-gallerybutton-focused,.cui-gallerybutton-Size85by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size32by32.cui-gallerybutton-focused,.cui-gallerybutton-Size32by32.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-Size120by20.cui-gallerybutton-focused,.cui-gallerybutton-Size120by20.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-ctl-split-hovered-secondary,.usehover .cui-ctl.cui-ctl-on:hover,.cui-ctl-on:focus,.cui-ctl-on .cui-ctl-split-hovered,.cui-ctl-on .cui-ctl-split-hovered-primary,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48:hover,.usehover .cui-gallerybutton-highlighted.cui-gallerybutton-Size110by75:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32:hover,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20:hover,.cui-gallerybutton-highlighted.cui-gallerybutton-Size16by16.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size20by20.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size24by24.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size61by75.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size84by21.cui-gallerybutton-focused,.cui-gallerybutton-highlighted.cui-gallerybutton-Size90by21.cui-gallerybutton-focused,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48:hover .cui-gallerybutton-a,.usehover .cui-gallerybutton-highlighted.cui-gallerybutton-Size110by75:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32:hover .cui-gallerybutton-a,.usehover .cui-groupBody .cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20:hover .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size40by40.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size48by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size61by75.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size64by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size70by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by16.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size85by48.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size32by32.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size120by20.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size16by16.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size20by20.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size24by24.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size84by21.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-gallerybutton-highlighted.cui-gallerybutton-Size90by21.cui-gallerybutton-focused .cui-gallerybutton-a,.cui-ctl-active,.usehover .cui-ctl-active:hover,.cui-gallerybutton-Size16by16.cui-ctl-active,.cui-gallerybutton-Size16by16.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size20by20.cui-ctl-active,.cui-gallerybutton-Size20by20.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size24by24.cui-ctl-active,.cui-gallerybutton-Size24by24.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size84by21.cui-ctl-active,.cui-gallerybutton-Size84by21.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size90by21.cui-ctl-active,.cui-gallerybutton-Size90by21.cui-ctl-active .cui-gallerybutton-a,.cui-fa-dropped,.cui-fa-dropped .cui-ctl-a1,.cui-fa-dropped .cui-ctl-a2,.cui-ctl-menu.cui-fa-dropped,.cui-section.cui-fa-dropped,.cui-gallerybutton-Size40by40.cui-ctl-active,.cui-gallerybutton-Size40by40.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size48by48.cui-ctl-active,.cui-gallerybutton-Size48by48.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size61by75.cui-ctl-active,.cui-gallerybutton-Size61by75.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size64by48.cui-ctl-active,.cui-gallerybutton-Size64by48.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size70by48.cui-ctl-active,.cui-gallerybutton-Size70by48.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size85by16.cui-ctl-active,.cui-gallerybutton-Size85by16.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size85by48.cui-ctl-active,.cui-gallerybutton-Size85by48.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size110by75.cui-ctl-active,.cui-gallerybutton-Size110by75.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size32by32.cui-ctl-active,.cui-gallerybutton-Size32by32.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton-Size120by20.cui-ctl-active,.cui-gallerybutton-Size120by20.cui-ctl-active .cui-gallerybutton-a,.cui-gallerybutton *:hover .PreviewStyleLabel,.cui-gallerybutton-focused .PreviewStyleLabel,.cui-gallerybutton-highlighted .PreviewStyleLabel,.MLRVisualRefresh .cui-ctl-on,.MLRVisualRefresh .cui-gallerybutton-highlighted.cui-gallerybutton-Size16by16 .cui-gallerybutton-a,.usehover .MLRVisualRefresh .cui-ctl:hover,.MLRVisualRefresh .cui-ctl:focus,.usehover .MLRVisualRefresh .cui-ctl-medium:hover,.MLRVisualRefresh .cui-ctl-medium:focus,.usehover .MLRVisualRefresh .cui-ctl-large:hover,.MLRVisualRefresh .cui-ctl-large:focus,.usehover .MLRVisualRefresh .cui-sldr:hover,.MLRVisualRefresh .cui-sldr-onfocus,.MLRVisualRefresh .cui-ctl-split-hovered,.MLRVisualRefresh .cui-ctl-split-hovered-primary,.MLRVisualRefresh .cui-ctl-menu-hovered-without-focus,.MLRVisualRefresh .cui-ctl-menu:focus,.MLRVisualRefresh .cui-gallerybutton-Size16by16.cui-gallerybutton-focused,.MLRVisualRefresh .cui-gallerybutton-Size16by16.cui-gallerybutton-focused .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size20by20.cui-gallerybutton-focused,.MLRVisualRefresh .cui-gallerybutton-Size20by20.cui-gallerybutton-focused .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size24by24.cui-gallerybutton-focused,.MLRVisualRefresh .cui-gallerybutton-Size24by24.cui-gallerybutton-focused .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size84by21.cui-gallerybutton-focused,.MLRVisualRefresh .cui-gallerybutton-Size84by21.cui-gallerybutton-focused .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size90by21.cui-gallerybutton-focused,.MLRVisualRefresh .cui-gallerybutton-Size90by21.cui-gallerybutton-focused .cui-gallerybutton-a,.usehover .MLRVisualRefresh .cui-ctl-thin:hover,.MLRVisualRefresh .cui-ctl-thin:focus,.usehover .MLRVisualRefresh .cui-spn-btnup:hover,.usehover .MLRVisualRefresh .cui-spn-btndown:hover,.usehover .MLRVisualRefresh .cui-dd-arrow-button:hover,.MLRVisualRefresh .WACZoomDialogRadioRow-highlight,.MLRVisualRefresh .WACZoomDialogRadioRow:hover,.MLRVisualRefresh .WACDialogCheckboxDiv:hover,.MLRVisualRefresh .WACDialogCheckboxDivHighlight,.usehover .MLRVisualRefresh .cui-ctl.cui-ctl-on:hover,.MLRVisualRefresh .cui-ctl-on:focus,.MLRVisualRefresh .cui-ctl-on .cui-ctl-split-hovered,.MLRVisualRefresh .cui-ctl-on .cui-ctl-split-hovered-primary,.MLRVisualRefresh .cui-ctl-active,.usehover .MLRVisualRefresh .cui-ctl-active:hover,.MLRVisualRefresh .cui-gallerybutton-Size16by16.cui-ctl-active,.MLRVisualRefresh .cui-gallerybutton-Size16by16.cui-ctl-active .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size20by20.cui-ctl-active,.MLRVisualRefresh .cui-gallerybutton-Size20by20.cui-ctl-active .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size24by24.cui-ctl-active,.MLRVisualRefresh .cui-gallerybutton-Size24by24.cui-ctl-active .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size84by21.cui-ctl-active,.MLRVisualRefresh .cui-gallerybutton-Size84by21.cui-ctl-active .cui-gallerybutton-a,.MLRVisualRefresh .cui-gallerybutton-Size90by21.cui-ctl-active,.MLRVisualRefresh .cui-gallerybutton-Size90by21.cui-ctl-active .cui-gallerybutton-a,.MLRVisualRefresh .cui-fa-dropped,.MLRVisualRefresh .cui-fa-dropped .cui-ctl-a1,.MLRVisualRefresh .cui-fa-dropped .cui-ctl-a2{-ms-high-contrast-adjust:none;background-color:Highlight !important;color:HighlightText !important;outline-color:inherit !important}.cui-txtbx,.cui-tb.cui-tb-focus .cui-txtbx,.cui-spn-txtbx,.cui-spn.cui-spn-focus .cui-spn-txtbx,.cui-sb-input,.cui-dd-text,.cui-cb-input,.cui-cb.cui-cb-focus .cui-cb-input{background-color:Background !important;color:WindowText !important}.cui-colorpicker-cell.cui-colorpicker-hoveredOver .cui-colorpicker-celldiv,.cui-touch .cui-colorpicker-cell.cui-colorpicker-hoveredOver .cui-colorpicker-celldiv,.cui-colorpicker-cell-large.cui-colorpicker-hoveredOver .cui-colorpicker-celldiv,.cui-colorpicker-cell.cui-colorpicker-hoveredOver .cui-colorpicker-cellinternaldiv,.cui-colorpicker-cell.cui-colorpicker-selected .cui-colorpicker-celldiv,.cui-touch .cui-colorpicker-cell.cui-colorpicker-selected .cui-colorpicker-celldiv,.cui-colorpicker-cell-large.cui-colorpicker-selected .cui-colorpicker-celldiv,.cui-colorpicker-cell.cui-colorpicker-selected .cui-colorpicker-cellinternaldiv,.cui-it-activeCellOuter,.cui-touch .cui-it-activeCellOuter,.cui-it-activeCell,.cui-touch .cui-it-activeCell{-ms-high-contrast-adjust:none;background-color:Highlight !important;color:HighlightText !important;outline-color:inherit !important}.PreviewStyleLabel,.cui-ctl-mediumlabel,.cui-ctl-largelabel,.cui-ctl-menulabel,.cui-btn-menu-description{color:inherit}.cui-ctl-mediumlabel,.cui-ctl-largelabel{display:inline !important;overflow:hidden}.cui-ctl-large,.cui-sldr{height:72px !important;padding:0 3px 0 3px !important}.SelectableDialogTable tbody tr:focus,.SelectableDialogTable tbody tr.inactiveRowSelection{-ms-high-contrast-adjust:none;background-color:Highlight;color:HighlightText}span.cui-fa-dropped>.cui-sb-input.tellme-flight,span.cui-sb-hover>.cui-sb-input.tellme-flight,.tellme-flight.cui-sb-hover,.tellme-flight.cui-sb-focus,.tellme-flight.cui-fa-dropped{background-color:transparent !important;color:WindowText !important}.cui-sb-input.tellme-flight,.tellme-flight.cui-sb-image-button{border-color:inherit !important}.usehover .cui-disabled:hover,.usehover .cui-disabled:hover *,.usehover a.cui-disabled:hover,.usehover a.cui-disabled:hover *{background-color:transparent !important}.usehover a.cui-ctl.cui-disabled:hover,.usehover a.cui-ctl-medium.cui-disabled:hover,.usehover a.cui-ctl-large.cui-disabled:hover{border:1px solid WindowText !important}.usehover a.cui-disabled:hover .cui-ctl-largeIconContainer,.usehover a.cui-disabled:hover .cui-ctl-large30IconContainer,.usehover a.cui-disabled:hover .cui-ctl-menu32 .cui-ctl-iconContainer,.usehover a.cui-disabled:hover .cui-ctl-menu48 .cui-ctl-iconContainer{border-bottom:1px solid GrayText !important}}.cui-menu{border:1px solid #c6c6c6;background-color:#fff}.iPad.v6up .cui-menu{-webkit-overflow-scrolling:touch;overflow:scroll}.cui-menu,.cui-menu *{outline:none}.cui-menu .cui-ctl-on{outline:2px solid transparent}.cui-touch.cui-menu{padding:9px}.cui-menu ul{margin:0;padding:0}ul.cui-menusection-items{margin:0}.cui-menusection-items-scrollable{clear:both;overflow-y:auto;overflow-x:hidden}.cui-menusection-title{padding:8px 4px;border:solid #f0f0f0;border-width:1px 1px;background-color:#f0f0f0;color:#444;cursor:default}.cui-menusection-title-lightBackground{padding:8px;background-color:#fff}li.cui-menusection-contextmenu-title{background-color:#f0f0f0;color:#444;cursor:default}.cui-touch .cui-menusection-title{margin-top:9px;margin-bottom:9px}.cui-touch .cui-menusection-title.cui-menusection-titleAtTop{margin-top:0}.cui-menusection-title-empty{border-bottom:solid #f0f0f0 1px}ul.cui-menusection-items li.cui-menusection-items{list-style-type:none;white-space:nowrap}.cui-menusection-separator{height:1px;margin-left:20px;margin-right:5px;background-color:#e1e1e1;cursor:default;display:block;overflow:hidden}.AppRtl .cui-menusection-separator{margin-left:5px;margin-right:20px}.cui-touch .cui-menusection-separator{margin-top:9px;margin-bottom:9px;margin-right:0}.AppRtl .cui-touch .cui-menusection-separator{margin-left:0;margin-right:20px}.cui-menu-large .cui-menusection-separator{margin-left:36px;margin-right:10px}.AppRtl .cui-menu-large .cui-menusection-separator{margin-left:10px;margin-right:36px}@media screen and (-ms-high-contrast:active){.cui-menu .cui-ctl-on{-ms-high-contrast-adjust:none;background-color:Highlight !important;color:HighlightText !important;outline-color:inherit !important}}.cui-img-container,.cui-img-cont-float{margin-left:auto;margin-right:auto;position:relative;overflow:hidden;text-align:left;z-index:0}.cui-img-container img,.cui-img-cont-float img{position:absolute}.cui-img-cont-float{display:inline-block}.cui-img-1by16{width:1px;height:16px}.cui-img-5by3{width:5px;height:3px}.cui-img-8by8{width:8px;height:8px}.cui-img-13by13{width:13px;height:13px}.cui-img-14by14{width:14px;height:14px}.cui-img-16by16{width:16px;height:16px}.cui-img-20by20{height:20px;width:20px}.cui-img-24by24{width:24px;height:24px}.cui-img-30by30{height:30px;width:30px}.cui-img-32by32{width:32px;height:32px}.cui-img-48by48{width:48px;height:48px}.cui-img-56by24{width:56px;height:24px}.cui-img-64by48{width:64px;height:48px}.cui-img-72by96{width:72px;height:96px}.cui-img-85by48{width:85px;height:48px}.cui-img-96by72{width:96px;height:72px}.cui-img-96by96{width:96px;height:96px}.cui-img-120by20{width:120px;height:20px}.cui-jewelmenu,.cui-jewelsubmenu{bottom:0}.cui-touch.cui-menu.cui-jewelmenu{padding:0}.cui-jewelsubmenu .cui-footerbutton,.cui-jewelsubmenu .cui-templatebutton-label-portrait,.cui-jewelsubmenu .cui-templatebutton-label-landscape,.cui-jewelsubmenu .cui-templatebutton-label-square,.cui-jewelsubmenu .cui-mrubutton-title,.cui-jewelsubmenu .cui-mrubutton-description{color:#444}.cui-jewelsubmenu .cui-ctl-filenamelabel.cui-menusection-filenametitle{color:#217346;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.cui-jewelsubmenu .cui-menusection-filenametitle{margin-top:6px;margin-bottom:24px}.cui-jewelmenu .cui-ctl-menu,.cui-touch.cui-jewelmenu .cui-ctl-menu{margin:0;border:0;padding-top:6px;padding-right:26px;padding-bottom:6px;padding-left:26px;white-space:normal}.AppRtl .cui-jewelmenu .cui-ctl-menu{padding-right:26px;padding-left:26px}.cui-jewelsubmenu .cui-ctl-menu.cui-ctl-on{background-color:#fdec9a}.cui-jewelmenu #jbtnBackArrow-Menu32,.cui-jewelmenu .cui-ctl-menu.cui-disabled,.usehover .cui-jewelmenu .cui-ctl-menu.cui-disabled:hover{background-color:transparent !important}.cui-jewelsubmenu .cui-ctl-menu.cui-ctl-on.cui-disabled{background-color:#fdec9a !important}.cui-jewelmenu #jbtnBackArrow-Menu32{outline:none}.cui-jewelmenu-backarrowrefresh #jbtnBackArrow-Menu32{padding-top:16px;padding-left:24px;padding-bottom:20px;margin-top:28px !important;margin-bottom:20px}.cui-jewelmenu .cui-ctl-menulabel{min-height:27px}.cui-jewelmenu .cui-ctl-iconContainer{display:none}.cui-jewelmenu #jbtnBackArrow-Menu32 .cui-ctl-iconContainer{display:inline-block;border:none}.cui-jewelmenu .cui-disabled .cui-img-container{visibility:hidden}.cui-jewelmenu{background-color:#217346;border-color:#217346;border-top-width:1px;border-bottom-width:1px;border-left-width:0;border-right-width:0;min-width:120px;max-width:200px;width:auto}.cui-jewelsubmenu{background-color:#fff;border:1px solid #217346;border-left-width:0}.AppRtl .cui-jewelsubmenu{border-left-width:1px;border-right-width:0}.cui-jewelmenu span{color:#fff}.cui-jewelmenu .cui-disabled span{color:#439467 !important}.cui-jewelmenu .cui-menusection{margin-bottom:6px}.cui-jewelmenu .cui-menusection-separator{margin-top:5px;margin-bottom:7px;margin-left:25px;width:68px;background-color:#439467}.cui-jewelmenu .cui-btn-title{max-width:165px}.cui-jewelsubmenu .cui-ctl-iconContainer{width:72px;height:72px;padding:0}.cui-jewelsubmenu .cui-img-48by48{margin-left:12px;margin-right:auto;margin-top:12px}.AppRtl .cui-jewelsubmenu .cui-img-48by48{margin-left:auto;margin-right:12px}.cui-jewelsubmenu .cui-menusection{clear:both}.cui-jewelsubmenu .cui-menusection-titleAtTop{background-color:transparent;padding-right:0;padding-left:37px;margin:0;border:0}.AppRtl .cui-jewelsubmenu .cui-menusection-titleAtTop{padding-right:37px;padding-left:0}.cui-jewelsubmenu .cui-ctl-menu:focus{border:0 none transparent !important}.cui-jewelsubmenu .cui-ctl-menu.cui-ctl-active .cui-ctl-iconContainer,.cui-jewelsubmenu .cui-ctl-menu.cui-ctl-active:hover .cui-ctl-iconContainer{border-color:#439467}.usehover .cui-jewelsubmenu .cui-disabled .cui-ctl-iconContainer:hover,.usehover .cui-jewelsubmenu .cui-disabled:hover .cui-ctl-iconContainer,.cui-jewelsubmenu .cui-disabled:focus .cui-ctl-iconContainer{border-color:#e1e1e1;background-color:transparent}.cui-jewelsubmenu .cui-ctl-menulabel{padding-left:13px;max-width:470px}.AppRtl .cui-jewelsubmenu .cui-ctl-menulabel{padding-left:0;padding-right:13px}.cui-jewelsubmenu .cui-btn-menu-description{max-width:470px;color:#666}.cui-jewelsubmenu .cui-ctl-menu{padding:0;margin-top:0;border:0;min-height:74px}.cui-jewelmenu #jbtnBackArrow-Menu32 .cui-img-cont-float{background-color:#fff}.cui-jewelmenu-backarrowrefresh #jbtnBackArrow-Menu32 .cui-img-cont-float{background-color:transparent}.cui-jewelmenu #jbtnBackArrow-Menu32:hover .cui-img-cont-float,.cui-jewelmenu #jbtnBackArrow-Menu32:focus .cui-img-cont-float{background-color:#9fd5b7;outline:2px dashed transparent}.cui-jewelmenu-backarrowrefresh #jbtnBackArrow-Menu32:hover .cui-img-cont-float,.cui-jewelmenu-backarrowrefresh #jbtnBackArrow-Menu32:focus .cui-img-cont-float{background-color:transparent}.usehover .cui-jewelmenu-backarrowrefresh #jbtnBackArrow-Menu32:hover,.cui-jewelmenu-backarrowrefresh #jbtnBackArrow-Menu32:focus,.cui-jewelmenu-backarrowrefresh .cui-ctl-menu:focus #jbtnBackArrow-Menu32{background-color:#0a6332 !important}.cui-jewelmenu #jbtnBackArrow-Menu32 .cui-img-32by32{border-radius:15px}.cui-jewelmenu,.cui-jewelmenu *,.cui-jewelsubmenu,.cui-jewelsubmenu *{outline:none}.cui-jewelmenu .cui-menusection-items .cui-ctl-menu{opacity:0;filter:alpha(opacity=0)}.cui-jewelmenu .cui-ctl-mediumlabel{display:inline-block}.cui-jewelsubmenu .cui-templatebutton-label-portrait,.cui-jewelsubmenu .cui-templatebutton-label-landscape,.cui-jewelsubmenu .cui-templatebutton-label-square,.cui-mrubutton-description,.cui-mrubutton-title{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block}.cui-jewelsubmenu .cui-mrubutton{padding-top:8px;padding-bottom:8px;padding-left:10px;padding-right:0;margin-left:30px;margin-right:30px;position:relative}.AppRtl .cui-jewelsubmenu .cui-mrubutton{padding-left:0;padding-right:10px}.cui-mrubutton-description{width:470px;margin-top:-2px}.cui-jewelsubmenu .cui-mrubutton .cui-mrubutton-textcontainer{vertical-align:top;width:470px;padding-left:10px;padding-right:0}.AppRtl .cui-jewelsubmenu .cui-mrubutton .cui-mrubutton-textcontainer{padding-left:0;padding-right:10px}.cui-mrubutton-title{width:470px;position:relative;top:-3px}.cui-jewelsubmenu .cui-menusection-subsectiontitle,.cui-jewelsubmenu .cui-menusection-filenametitle,.cui-jewelsubmenu .cui-menusection-diagnostics-label,.cui-jewelsubmenu .cui-menusection-diagnostics-textbox,.cui-jewelsubmenu a.cui-footerbutton{margin-left:40px;margin-right:40px;display:inline-block;white-space:normal}.cui-jewelsubmenu .cui-menusection-diagnostics-textbox{width:100%}.cui-jewelsubmenu .cui-menusection-diagnostics-textbox .cui-menusection-diagnostics-textboxlabel{vertical-align:top;width:25%;display:inline-block}.cui-jewelsubmenu .cui-menusection-diagnostics-textbox textarea{color:inherit;resize:none;border:none;overflow:hidden;line-height:1;width:70%;text-align:left}.AppRtl .cui-jewelsubmenu .cui-menusection-diagnostics-textbox textarea{text-align:right}.cui-jewelsubmenu .cui-menusection-subsectiontitle{margin-bottom:20px}.cui-jewelsubmenu a.cui-footerbutton{margin-top:20px}.cui-jewelsubmenu a.cui-footerbutton,.cui-jewelsubmenu a.cui-subsectionlabellink{color:#369;cursor:pointer}.usehover a.cui-footerbutton:hover,.usehover a.cui-subsectionlabellink:hover{text-decoration:underline}a.cui-footerbutton:focus,a.cui-subsectionlabellink:focus{outline:#000 dotted 1px}.cui-jewelsubmenu .cui-menuloading{display:block;text-align:center}.cui-jewelsubmenu .cui-templatebutton-portrait,.cui-jewelsubmenu .cui-templatebutton-landscape,.cui-jewelsubmenu .cui-templatebutton-shortlandscape,.cui-jewelsubmenu .cui-templatebutton-square{padding-top:9px;padding-left:9px;padding-right:9px;float:left}.AppRtl .cui-jewelsubmenu .cui-templatebutton-portrait,.AppRtl .cui-jewelsubmenu .cui-templatebutton-landscape,.AppRtl .cui-jewelsubmenu .cui-templatebutton-shortlandscape,.AppRtl .cui-jewelsubmenu .cui-templatebutton-square{float:right}.cui-jewelsubmenu .cui-templatebutton-portrait{margin-left:30px;margin-right:28px;height:152px}.AppRtl .cui-jewelsubmenu .cui-templatebutton-portrait{margin-right:30px;margin-left:28px}.cui-jewelsubmenu .cui-templatebutton-square{margin-left:50px;margin-right:auto;margin-bottom:31px;height:129px}.AppRtl .cui-jewelsubmenu .cui-templatebutton-square{margin-right:50px;margin-left:auto}.cui-jewelsubmenu .cui-templatebutton-landscape{margin-left:30px;margin-right:auto;margin-bottom:28px;height:124px}.cui-jewelsubmenu .cui-templatebutton-shortlandscape{margin-left:30px;margin-right:auto;margin-bottom:54px;height:98px}.AppRtl .cui-jewelsubmenu .cui-templatebutton-landscape,.AppRtl .cui-jewelsubmenu .cui-templatebutton-shortlandscape{margin-right:30px;margin-left:auto}.cui-jewelsubmenu .cui-img-95by123,.cui-menu .cui-img-95by123{width:95px;height:123px;border:1px solid #e1e1e1}.cui-jewelsubmenu .cui-img-123by95,.cui-menu .cui-img-123by95{width:123px;height:95px;border:1px solid #e1e1e1}.cui-jewelsubmenu .cui-img-123by69,.cui-menu .cui-img-123by69{width:123px;height:69px;border:1px solid #e1e1e1}.cui-jewelsubmenu .cui-img-100by100,.cui-menu .cui-img-100by100{width:80px;height:80px;padding-top:10px;padding-right:10px;padding-bottom:10px;padding-left:10px;border:1px solid #e1e1e1}.cui-jewelsubmenu .cui-templatebutton-label-portrait,.cui-jewelsubmenu .cui-templatebutton-label-landscape,.cui-jewelsubmenu .cui-templatebutton-label-square{margin-top:3px;display:inline-block}.cui-jewelsubmenu .cui-ctl-medium .cui-templatebutton-label-portrait{width:95px}.cui-jewelsubmenu .cui-ctl-medium .cui-templatebutton-label-landscape{width:123px}.cui-jewelsubmenu .cui-ctl-medium .cui-templatebutton-label-square{width:100px}.cui-jewelsubmenu .cui-headerbutton{margin-left:36px;margin-right:auto;margin-top:-4px;margin-bottom:12px}.AppRtl .cui-jewelsubmenu .cui-headerbutton{margin-left:auto;margin-right:36px}.cui-jewelsubmenu .cui-headerbutton-img{vertical-align:-10px}.usehover .cui-jewelsubmenu .cui-templatebutton-portrait:hover,.usehover .cui-jewelsubmenu .cui-templatebutton-landscape:hover,.usehover .cui-jewelsubmenu .cui-templatebutton-shortlandscape:hover,.usehover .cui-jewelsubmenu .cui-templatebutton-square:hover,.usehover .cui-jewelsubmenu .cui-headerbutton:hover,.usehover .cui-jewelsubmenu .cui-mrubutton:hover,.cui-jewelsubmenu .cui-templatebutton-portrait:focus,.cui-jewelsubmenu .cui-templatebutton-landscape:focus,.cui-jewelsubmenu .cui-templatebutton-shortlandscape:focus,.cui-jewelsubmenu .cui-templatebutton-square:focus,.cui-jewelsubmenu .cui-headerbutton:focus,.cui-jewelsubmenu .cui-mrubutton:focus{border-color:#d3f0e0 !important;background-color:#d3f0e0 !important}@media screen and (-ms-high-contrast:active){.cui-jewelmenu #jbtnBackArrow-Menu32,.cui-jewelmenu .cui-ctl-menu.cui-disabled,.usehover .cui-jewelmenu .cui-ctl-menu.cui-disabled:hover,.cui-jewelmenu .cui-disabled span,.usehover .cui-jewelsubmenu .cui-disabled .cui-ctl-iconContainer:hover,.usehover .cui-jewelsubmenu .cui-disabled:hover .cui-ctl-iconContainer,.cui-jewelsubmenu .cui-disabled:focus .cui-ctl-iconContainer{color:GrayText !important;opacity:1}.cui-jewelsubmenu .cui-disabled:focus .cui-ctl-iconContainer{-ms-high-contrast-adjust:none;background-color:Highlight !important;outline-color:inherit !important}.usehover .cui-jewelmenu .cui-ctl-menu:hover,.cui-jewelmenu .cui-ctl-menu:focus,.usehover .cui-jewelmenu .cui-ctl-menu:hover .cui-ctl-mediumlabel,.cui-jewelmenu .cui-ctl-menu:focus .cui-ctl-mediumlabel,.cui-jewelsubmenu .cui-ctl-menu:focus,.usehover .cui-jewelsubmenu .cui-ctl-iconContainer:hover,.usehover .cui-jewelsubmenu .cui-ctl-menu:hover .cui-ctl-iconContainer,.cui-jewelsubmenu .cui-ctl-menu:focus .cui-ctl-iconContainer,.cui-jewelsubmenu .cui-ctl-menu.cui-ctl-active .cui-ctl-iconContainer,.cui-jewelsubmenu .cui-ctl-menu.cui-ctl-active:hover .cui-ctl-iconContainer,.cui-jewelsubmenu .cui-ctl-menu.cui-ctl-active,.cui-jewelmenu .cui-fa-dropped.cui-ctl-menu,.cui-jewelmenu .cui-fa-dropped.cui-ctl-menu .cui-ctl-mediumlabel,.cui-jewelmenu #jbtnBackArrow-Menu32:hover .cui-img-cont-float,.cui-jewelmenu #jbtnBackArrow-Menu32:focus .cui-img-cont-float,.usehover .cui-jewelsubmenu .cui-templatebutton-portrait:hover,.usehover .cui-jewelsubmenu .cui-templatebutton-landscape:hover,.usehover .cui-jewelsubmenu .cui-templatebutton-shortlandscape:hover,.usehover .cui-jewelsubmenu .cui-templatebutton-square:hover,.usehover .cui-jewelsubmenu .cui-headerbutton:hover,.usehover .cui-jewelsubmenu .cui-mrubutton:hover,.cui-jewelsubmenu .cui-templatebutton-portrait:focus,.cui-jewelsubmenu .cui-templatebutton-landscape:focus,.cui-jewelsubmenu .cui-templatebutton-shortlandscape:focus,.cui-jewelsubmenu .cui-templatebutton-square:focus,.cui-jewelsubmenu .cui-headerbutton:focus,.cui-jewelsubmenu .cui-mrubutton:focus{-ms-high-contrast-adjust:none;background-color:Highlight !important;color:HighlightText !important;outline-color:inherit !important}}.cui-jewelmenu{overflow:hidden}.cui-jewelmenu .cui-jewelmenu .cui-ctl-menulabel{min-height:28px}.cui-jewelsubmenu .cui-menusection-filenametitle{color:#707070 !important}.usehover .cui-jewelmenu .cui-ctl-menu:hover{background-color:#2d9c5f !important}.usehover .cui-jewelsubmenu.cui-jewelsubmenu #btnProtectDocument-Menu48:hover.cui-ctl-menu.cui-ctl-on.cui-disabled,.usehover .cui-jewelsubmenu.cui-jewelsubmenu #btnProtectDocument-Menu48:hover.cui-ctl-menu.cui-ctl-on.cui-disabled .cui-ctl-iconContainer{background-color:#fdec9a !important}.cui-jewelmenu .cui-ctl-menu:focus{background-color:#2d9c5f !important;border:1px;border-style:solid;border-color:#fff !important;padding:5px 25px 5px 25px}.cui-jewelmenu #jbtnBackArrow-Menu32:focus{background-color:#2d9c5f !important;padding:15px 25px 19px 23px}.cui-jewelmenu .cui-fa-dropped.cui-ctl-menu{background-color:#164b2e !important}.cui-jewelmenu #jbtnBackArrow-Menu32{padding-top:16px;padding-left:24px;padding-bottom:20px;margin-top:28px !important;margin-bottom:20px}.cui-jewelmenu #jbtnBackArrow-Menu32 .cui-ctl-iconContainer{padding:0 !important}.cui-jewelmenu-backarrowrefresh #jbtnBackArrow-Menu32 .cui-ctl-iconContainer{padding:0 0 0 2px !important}.cui-jewelsubmenu .cui-ctl-iconContainer{margin-left:0;border:none}.cui-jewelsubmenu .cui-menusection-titleAtTop{color:#217346}.usehover .cui-jewelsubmenu .cui-ctl-menu:hover,.cui-jewelsubmenu .cui-ctl-menu:focus{background-color:#d3f0e0 !important}.usehover .cui-jewelsubmenu .cui-ctl-iconContainer:hover,.usehover .cui-jewelsubmenu .cui-ctl-menu:hover .cui-ctl-iconContainer,.cui-jewelsubmenu .cui-ctl-menu:focus .cui-ctl-iconContainer{border-color:#d3f0e0;background-color:#d3f0e0}.cui-jewelsubmenu .cui-ctl-menu.cui-ctl-active .cui-ctl-iconContainer,.cui-jewelsubmenu .cui-ctl-menu.cui-ctl-active:hover .cui-ctl-iconContainer{background-color:#9fd5b7}.cui-jewelsubmenu .cui-ctl-menu.cui-ctl-active,.cui-jewelsubmenu .cui-ctl-menu.cui-ctl-active:hover{background-color:#9fd5b7 !important}.cui-jewelsubmenu .cui-ctl-menulabel{padding-top:12px}.cui-jewelsubmenu .cui-ctl-mediumlabel{display:block;padding-top:0;padding-bottom:0}.cui-jewelsubmenu .cui-btn-menu-description{padding-top:4px}.cui-jewelsubmenu .cui-ctl-menu{margin-bottom:0;margin-left:16px;margin-right:16px}.cui-jewelmenu .cui-fa-dropped{border:none}.usehover .cui-jewelmenu #jbtnBackArrow-Menu32:hover,.cui-jewelmenu .cui-ctl-menu:focus #jbtnBackArrow-Menu32{background-color:#2d9c5f !important}.cui-jewelsubmenu #SaveAsInformationMenuSection{margin-left:60px !important;margin-top:32px}.AppRtl .cui-jewelsubmenu #SaveAsInformationMenuSection{margin-right:60px !important}.AppRtl .cui-jewelsubmenu .cui-ctl-iconContainer{margin-left:0;margin-right:0}.cui-jewelsubmenu #lblWheresTheSaveButton-MenuSaveButton,.cui-jewelsubmenu #lblDiagnostics-MenuDiagnostics{display:inline-block !important}.cui-jewelsubmenu .cui-menusection-filenametitle{margin-left:37px !important;padding-top:8px}.cui-jewelsubmenu .cui-mrubutton-textcontainer{padding-top:0 !important}.cui-jewelsubmenu #AboutInformationMenuSectionDiagnostics{padding-top:16px}.cui-jewelsubmenu .cui-menusection-titleAtTop{padding-top:34px;padding-bottom:21px}.cui-jewelsubmenu .cui-ctl-mediumlabel{color:#212121}.cui-jewelmenu .cui-btn-menu-description{padding-top:0}.cui-jewelsubmenu #lblMessage-MenuMru{margin-top:14px}.cui-jewelsubmenu #lblRecentDocuments-MenuMru{margin-top:14px}.usehover .cui-jewelmenu .cui-ctl-menu:hover,.cui-jewelmenu .cui-ctl-menu:focus,.usehover .cui-jewelsubmenu .cui-ctl-menu:hover,.cui-jewelsubmenu .cui-ctl-menu:focus,.usehover .cui-jewelmenu #jbtnBackArrow-Menu32:hover,.cui-jewelmenu .cui-ctl-menu:focus #jbtnBackArrow-Menu32{outline:2px dashed transparent}.cui-jewelmenu #jbtnBackArrow-Menu32:hover .cui-img-cont-float,.cui-jewelmenu #jbtnBackArrow-Menu32:focus .cui-img-cont-float{outline:none !important;outline-color:transparent !important}.usehover .cui-jewelmenu .cui-ctl-menu:hover,.cui-jewelmenu .cui-ctl-menu:focus,.usehover .cui-jewelsubmenu .cui-ctl-menu:hover,.cui-jewelsubmenu .cui-ctl-menu:focus,.usehover .cui-jewelmenu #jbtnBackArrow-Menu32:hover,.cui-jewelmenu .cui-ctl-menu:focus #jbtnBackArrow-Menu32{outline:2px dashed transparent}.cui-jewelmenu .cui-fa-dropped.cui-ctl-menu{outline:2px solid transparent}.AppRtl .cui-jewelmenu #jbtnBackArrow-Menu32{padding-right:38px;padding-left:12px}.AppRtl .cui-jewelmenu #jbtnBackArrow-Menu32:focus{padding-right:37px;padding-left:11px}@media screen and (-ms-high-contrast:active){.usehover .cui-jewelmenu .cui-ctl-menu:hover,.cui-jewelmenu .cui-ctl-menu:focus,.usehover .cui-jewelsubmenu .cui-ctl-menu:hover,.cui-jewelsubmenu .cui-ctl-menu:focus,.usehover .cui-jewelmenu-backarrowrefresh #jbtnBackArrow-Menu32:hover,.usehover .cui-jewelmenu #jbtnBackArrow-Menu32:hover,.cui-jewelmenu-backarrowrefresh #jbtnBackArrow-Menu32:focus,.cui-jewelmenu #jbtnBackArrow-Menu32:focus,.cui-jewelmenu-backarrowrefresh .cui-ctl-menu:focus #jbtnBackArrow-Menu32,.cui-jewelmenu .cui-ctl-menu:focus #jbtnBackArrow-Menu32{background-color:Highlight !important;color:HighlightText !important;outline:2px dashed transparent !important;outline-color:inherit !important}.usehover .cui-jewelsubmenu .cui-ctl-menu:hover .cui-btn-title,.cui-jewelsubmenu .cui-ctl-menu:focus .cui-btn-title,.usehover .cui-jewelsubmenu .cui-ctl-menu:hover .cui-btn-menu-description,.cui-jewelsubmenu .cui-ctl-menu:focus .cui-btn-menu-description{-ms-high-contrast-adjust:none;background-color:highlight;color:highlightText;display:block !important}.cui-jewelmenu .cui-fa-dropped.cui-ctl-menu{background-color:Highlight !important;color:HighlightText !important;outline:2px solid transparent !important;outline-color:inherit !important}.cui-jewelmenu-backarrowrefresh #jbtnBackArrow-Menu32:hover .cui-img-cont-float,.cui-jewelmenu #jbtnBackArrow-Menu32:hover .cui-img-cont-float,.cui-jewelmenu-backarrowrefresh #jbtnBackArrow-Menu32:focus .cui-img-cont-float,.cui-jewelmenu #jbtnBackArrow-Menu32:focus .cui-img-cont-float{outline:none !important;outline-color:transparent !important}}.cui-statusbar{height:22px;background-color:#fff;border-top:1px solid #e1e1e1}.dark .cui-statusbar{background-color:#444;border-top:1px solid #555}.cui-statusbar .cui-toolbar-buttondock{margin-top:0;height:22px;padding:0;margin-left:5px;margin-right:5px}.cui-statusbar a.cui-ctl-medium,.cui-statusbar a.cui-fslb,.cui-statusbar span.cui-fslb{height:16px;margin-left:4px;margin-right:4px}.cui-statusbar span.cui-ctl-compact{height:16px;margin-left:1px;margin-right:1px}.cui-statusbar a.cui-ctl-compact{height:16px;width:16px;margin-left:1px;margin-right:1px}.cui-statusbar .cui-ctl,.cui-statusbar .cui-ctl-medium,.cui-statusbar .cui-fslb{padding-top:2px;padding-bottom:2px}.cui-statusbar .cui-ctl{padding:2px 9px 2px}.cui-statusbar .cui-toolbar-button-center{vertical-align:top}.cui-statusbar .cui-ctl-mediumlabel,.InternetExplorer.v8 .cui-statusbar .cui-ctl-mediumlabel{margin-top:1px}.InternetExplorer .cui-statusbar .cui-ctl-mediumlabel{margin-top:0}.cui-statusbar span.cui-fslb{border:1px solid transparent}span.cui-fslb .cui-ctl-mediumlabel{display:inline-block;margin-left:3px;margin-right:0}.AppRtl span.cui-fslb .cui-ctl-mediumlabel{margin-left:0;margin-right:3px}span.cui-fslb .cui-ctl-mediumlabel:first-child{margin-left:0;margin-right:0}.cui-statusbar .cui-ctl,.cui-statusbar .cui-ctl-medium{border-color:transparent}.dark .cui-statusbar .cui-ctl,.dark .cui-statusbar .cui-ctl-medium{border-color:transparent}.cui-statusbar .cui-ctl-mediumlabel,.cui-statusbar .cui-fslb{color:#444}.dark .cui-statusbar .cui-ctl-mediumlabel,.dark .cui-statusbar .cui-fslb{color:#fff}.cui-statusbar .cui-ctl-on{border-color:#9fd5b7;background-color:#9fd5b7}.dark .cui-statusbar .cui-ctl-on{border-color:#777;background-color:#777}.usehover .cui-statusbar .cui-ctl:hover,.cui-statusbar .cui-ctl:focus,.usehover .cui-statusbar .cui-ctl-medium:hover,.cui-statusbar .cui-ctl-medium:focus{border-color:#d3f0e0;background-color:#d3f0e0}.usehover .dark .cui-statusbar .cui-ctl:hover,.dark .cui-statusbar .cui-ctl:focus,.usehover .dark .cui-statusbar .cui-ctl-medium:hover,.dark .cui-statusbar .cui-ctl-medium:focus{border-color:#777;background-color:#777}.usehover .cui-statusbar .cui-ctl-on:hover,.cui-statusbar .cui-ctl-on:focus{border-color:#86bfa0;background-color:#d3f0e0}.usehover .dark .cui-statusbar .cui-ctl-on:hover,.dark .cui-statusbar .cui-ctl-on:focus{border-color:#262626;background-color:#777}.cui-statusbar .cui-ctl.cui-ctl-active,.usehover .cui-statusbar .cui-ctl.cui-ctl-active:hover,.cui-statusbar .cui-ctl-medium.cui-ctl-active,.usehover .cui-statusbar .cui-ctl-medium.cui-ctl-active:hover,.cui-statusbar .cui-fa-dropped{border-color:#86bfa0;background-color:#86bfa0}.dark .cui-statusbar .cui-ctl.cui-ctl-active,.usehover .dark .cui-statusbar .cui-ctl.cui-ctl-active:hover,.dark .cui-statusbar .cui-ctl-medium.cui-ctl-active,.usehover .dark .cui-statusbar .cui-ctl-medium.cui-ctl-active:hover,.dark .cui-statusbar .cui-fa-dropped{border-color:#262626;background-color:#262626}.MLRVisualRefresh .cui-statusbar .cui-ctl-mediumlabel{margin-top:0}.MLRVisualRefresh .cui-statusbar .cui-ctl-on{border-color:#c8c6c4;background-color:#c8c6c4}.usehover .MLRVisualRefresh .cui-statusbar .cui-ctl:hover,.MLRVisualRefresh .cui-statusbar .cui-ctl:focus,.usehover .MLRVisualRefresh .cui-statusbar .cui-ctl-medium:hover,.MLRVisualRefresh .cui-statusbar .cui-ctl-medium:focus{border-color:#e1dfdd;background-color:#e1dfdd}.usehover .MLRVisualRefresh .cui-statusbar .cui-ctl-on:hover,.MLRVisualRefresh .cui-statusbar .cui-ctl-on:focus{border-color:#797673;background-color:#e1dfdd}.MLRVisualRefresh .cui-statusbar .cui-ctl.cui-ctl-active,.usehover .MLRVisualRefresh .cui-statusbar .cui-ctl.cui-ctl-active:hover,.MLRVisualRefresh .cui-statusbar .cui-ctl-medium.cui-ctl-active,.usehover .MLRVisualRefresh .cui-statusbar .cui-ctl-medium.cui-ctl-active:hover,.MLRVisualRefresh .cui-statusbar .cui-fa-dropped{border-color:#d2d0ce;background-color:#d2d0ce}.cui-statusbar .cui-disabled *{color:#b1b1b1 !important}.dark .cui-statusbar .cui-disabled *{color:#b1b1b1 !important}.cui-statusbar .cui-disabled .cui-img-container,.cui-statusbar .cui-disabled .cui-img-cont-float{background-color:#fff}.dark .cui-statusbar .cui-disabled .cui-img-container,.dark .cui-statusbar .cui-disabled .cui-img-cont-float{background-color:#444}.cui-statusbar .cui-disabled.cui-ctl-on{border-color:transparent !important;background-color:transparent !important}.dark .cui-statusbar .cui-disabled.cui-ctl-on{border-color:transparent !important;background-color:transparent !important}.usehover .cui-statusbar .cui-disabled:hover{border-color:transparent !important;background-color:transparent !important}.usehover .dark .cui-statusbar .cui-disabled:hover{border-color:transparent !important;background-color:transparent !important}.cui-statusbar .cui-disabled:focus{border-color:#d3f0e0 !important;background-color:#d3f0e0 !important}.dark .cui-statusbar .cui-disabled:focus{border-color:#777 !important;background-color:#777 !important}.MLRVisualRefresh .cui-statusbar .cui-disabled:focus{border-color:#e1dfdd !important;background-color:#e1dfdd !important}@media screen and (-ms-high-contrast:active){.cui-statusbar .cui-disabled *,.cui-statusbar .cui-disabled .cui-img-container,.cui-statusbar .cui-disabled .cui-img-cont-float,.cui-statusbar .cui-disabled.cui-ctl-on,.usehover .cui-statusbar .cui-disabled:hover,.cui-statusbar .cui-disabled:focus,.MLRVisualRefresh .cui-statusbar .cui-disabled:focus{color:GrayText !important;opacity:1}.cui-statusbar .cui-disabled.cui-ctl-on,.cui-statusbar .cui-disabled:focus{-ms-high-contrast-adjust:none;background-color:Highlight !important;outline-color:inherit !important}.usehover .cui-statusbar .cui-disabled:hover{background-color:transparent}.cui-statusbar .cui-ctl-on,.usehover .cui-statusbar .cui-ctl:hover,.cui-statusbar .cui-ctl:focus,.usehover .cui-statusbar .cui-ctl-medium:hover,.cui-statusbar .cui-ctl-medium:focus,.usehover .cui-statusbar .cui-ctl-on:hover,.cui-statusbar .cui-ctl-on:focus,.cui-statusbar .cui-ctl.cui-ctl-active,.usehover .cui-statusbar .cui-ctl.cui-ctl-active:hover,.cui-statusbar .cui-ctl-medium.cui-ctl-active,.usehover .cui-statusbar .cui-ctl-medium.cui-ctl-active:hover,.cui-statusbar .cui-fa-dropped,.MLRVisualRefresh .cui-statusbar .cui-ctl-on,.usehover .MLRVisualRefresh .cui-statusbar .cui-ctl:hover,.MLRVisualRefresh .cui-statusbar .cui-ctl:focus,.usehover .MLRVisualRefresh .cui-statusbar .cui-ctl-medium:hover,.MLRVisualRefresh .cui-statusbar .cui-ctl-medium:focus,.usehover .MLRVisualRefresh .cui-statusbar .cui-ctl-on:hover,.MLRVisualRefresh .cui-statusbar .cui-ctl-on:focus,.MLRVisualRefresh .cui-statusbar .cui-ctl.cui-ctl-active,.usehover .MLRVisualRefresh .cui-statusbar .cui-ctl.cui-ctl-active:hover,.MLRVisualRefresh .cui-statusbar .cui-ctl-medium.cui-ctl-active,.usehover .MLRVisualRefresh .cui-statusbar .cui-ctl-medium.cui-ctl-active:hover,.MLRVisualRefresh .cui-statusbar .cui-fa-dropped{-ms-high-contrast-adjust:none;background-color:Highlight !important;color:HighlightText !important;outline-color:inherit !important}.cui-statusbar .cui-ctl-mediumlabel,.cui-statusbar .cui-fslb{color:inherit !important}}.cui-floatie#PowerPoint_PasteFloatie{border:1px solid #c6c6c6;background-color:#fff;position:absolute;white-space:nowrap;vertical-align:top;padding-left:0;padding-right:0;z-index:1000}.cui-floatie{border:1px solid #c6c6c6;background-color:#fff;position:absolute;white-space:nowrap;vertical-align:top;padding-left:4px;padding-right:4px}.cui-floatie .cui-group{margin-top:0;vertical-align:top;height:auto}.InternetExplorer.v8 .cui-floatie .cui-group{display:inline}.cui-floatie .cui-groupBody{height:auto}.cui-floatie.cui-touch span.cui-groupContainer{vertical-align:top}.cui-floatie .cui-section-alignmiddle{display:block}.cui-floatie .cui-row-onerow{margin-top:3px;margin-bottom:3px}.cui-floatie.cui-touch .cui-row-onerow{margin-top:8px;margin-bottom:8px}.cui-floatie .cui-row-tworow{margin-top:5px;height:auto;vertical-align:top}.cui-floatie.cui-touch .cui-row-tworow{margin-top:9px}.cui-floatie.cui-touch .cui-row-tworow.cui-row-2{margin-top:8px}.cui-floatie .cui-row-onerow a.cui-ctl{padding:2px 4px;min-width:30px;text-align:center;vertical-align:top}.cui-floatie.cui-touch .cui-row-onerow a.cui-ctl{padding:11px 8px 0}.cui-ctl-largeFloatieIconContainer{display:block;width:29px;height:24px;margin-left:auto;margin-right:auto;text-align:center}.cui-ctl-largeFloatieIconContainer .cui-img-5by3{margin-bottom:10px}.cui-floatie.cui-touch .cui-cb .cui-img-cont-float.cui-img-5by3{margin-top:13px}.cui-floatie .cui-ctl-largelabel{height:auto}.cui-floatie .cui-ctl-largelabel-singleline{padding-top:6px;padding-bottom:7px}.cui-floatie.cui-touch .cui-ctl-largelabel-singleline{padding-top:14px;padding-bottom:10px}.cui-floatie .cui-ctl-largelabel-twoline{padding-top:0;padding-bottom:0}.cui-floatie.cui-touch .cui-ctl-largelabel-twoline{padding-top:5px;padding-bottom:5px}.cui-floatie.cui-touch .cui-row-onerow a.cui-ctl.context-menu-dd{min-width:0;padding:24px 0 24px}.cui-floatie.cui-touch .context-menu-dd .cui-ctl-largelabel-singleline{padding-top:0;padding-bottom:0}.cui-floatie.cui-touch .context-menu-dd .cui-ctl-largeFloatieIconContainer{width:24px}.cui-floatie .cui-groupSeparator{height:55px;margin-top:3px;vertical-align:top}.cui-floatie.cui-touch .cui-groupSeparator{height:74px;margin-top:8px;vertical-align:top}.cui-floatie.cui-touch .cui-cb-input{height:25px}.cui-floatie.cui-touch .cui-cb .cui-dd-arrow-button{height:29px}.cui-taskpane{background-color:#fff;position:relative;height:100%;white-space:nowrap;vertical-align:top}.WACTaskPaneContainer.alignLeft .cui-taskpane,.AppRtl .WACTaskPaneContainer.alignRight .cui-taskpane{float:right}.WACTaskPaneContainer.alignRight .cui-taskpane,.AppRtl .WACTaskPaneContainer.alignLeft .cui-taskpane{float:left}.cui-taskpane .cui-taskPaneTitleBar{height:30px;width:100%;padding:0 0 8px}.cui-taskpane .cui-taskPaneTitle{position:absolute;left:0;right:30px;padding:8px 15px 0;color:#217346;overflow:hidden;text-overflow:ellipsis}.cui-flexPaneTitle{left:0;right:30px;padding:10px 10px 6px;overflow:hidden;text-overflow:ellipsis}.AppRtl .cui-taskpane .cui-taskPaneTitle{left:30px;right:0}.cui-taskpane .cui-taskPaneClose{position:absolute;right:0;border-color:transparent !important;margin-top:8px}.AppRtl .cui-taskpane .cui-taskPaneClose{left:0;right:auto}.cui-taskpane .alignRight{position:absolute;right:15px}.AppRtl .cui-taskpane .alignRight{position:absolute;right:auto;left:15px}.cui-taskpane .textAlignRight{text-align:right}.AppRtl .cui-taskpane .textAlignRight{text-align:left}.cui-taskpane .stretchedHorizontally{width:100%;margin-left:0;margin-right:0;box-sizing:border-box}.cui-flexpane{display:flex;flex-direction:column}.cui-taskpane .cui-group{margin-top:0;vertical-align:top;text-align:left;height:auto;display:block}.AppRtl .cui-taskpane .cui-group{text-align:right}.cui-taskpane .cui-group.stretched{margin-top:0;vertical-align:top;position:absolute;bottom:0;width:100%;overflow:auto}.InternetExplorer.v8 .cui-taskpane .cui-group{display:inline}.cui-taskpane .cui-groupBody{height:auto;text-align:left;padding-bottom:0;padding-top:0;padding-left:15px;padding-right:15px;display:block;position:relative}.AppRtl .cui-taskpane .cui-groupBody{text-align:right}.cui-taskpane .cui-group.stretched span.cui-groupBody{padding:0;width:100%;height:100%}.cui-taskpane .cui-groupContainer{vertical-align:top;height:auto;display:block}.cui-taskpane .cui-group.stretched .cui-groupContainer{width:100%;height:100%}.cui-taskpane .cui-section.alignRight{margin-left:0;margin-right:0}.cui-taskpane .cui-section.verticalArrange{display:block}.cui-taskpane .cui-row,.cui-taskpane .cui-row-onerow,.cui-taskpane .cui-row-tworow,.cui-taskpane .cui-row-threerow{margin-top:5px;height:auto;width:100%}.cui-taskpane .cui-row-tworow.cui-row-1{margin-top:5px}.cui-taskpane .cui-row-tworow.cui-row-2{margin-top:5px}.cui-taskpane .cui-row-threerow.cui-row-2{margin-top:5px}.cui-taskpane .cui-row-threerow.cui-row-3{margin-top:5px}.cui-taskpane a.cui-ctl.showBorder,.cui-taskpane a.cui-ctl-medium.showBorder,.cui-taskpane a.cui-ctl-large.showBorder{border-color:#ababab}.usehover .cui-taskpane a.cui-ctl.showBorder:hover,.usehover .cui-taskpane a.cui-ctl-medium.showBorder:hover,.usehover .cui-taskpane a.cui-ctl-large.showBorder:hover,.cui-taskpane a.cui-ctl.showBorder:focus,.cui-taskpane a.cui-ctl-medium.showBorder:focus,.cui-taskpane a.cui-ctl-large.showBorder:focus{border-color:#86bfa0 !important}.cui-taskpane a.cui-ctl-active.cui-ctl.showBorder,.cui-taskpane a.cui-ctl-active.cui-ctl-medium.showBorder,.cui-taskpane a.cui-ctl-active.cui-ctl-large.showBorder,.cui-taskpane a.cui-ctl-active.cui-ctl.showBorder:hover,.cui-taskpane a.cui-ctl-active.cui-ctl-medium.showBorder:hover,.cui-taskpane a.cui-ctl-active.cui-ctl-large.showBorder:hover{border-color:#439467 !important}.cui-taskpane .cui-disabled.cui-ctl.showBorder,.cui-taskpane .cui-disabled.cui-ctl-medium.showBorder,.cui-taskpane .cui-disabled.cui-ctl-large.showBorder,.usehover .cui-taskpane .cui-disabled.cui-ctl.showBorder:hover,.usehover .cui-taskpane .cui-disabled.cui-ctl-medium.showBorder:hover,.usehover .cui-taskpane .cui-disabled.cui-ctl-large.showBorder:hover{border-color:#e1e1e1 !important}.cui-taskpane .cui-ctl-mediumlabel.showBorder{padding-left:10px;padding-right:10px}.cui-taskpane .cui-fslb .cui-ctl-mediumlabel{padding-left:0;padding-right:0}@media screen and (-ms-high-contrast:active){.cui-taskpane .cui-disabled.cui-ctl.showBorder,.cui-taskpane .cui-disabled.cui-ctl-medium.showBorder,.cui-taskpane .cui-disabled.cui-ctl-large.showBorder,.usehover .cui-taskpane .cui-disabled.cui-ctl.showBorder:hover,.usehover .cui-taskpane .cui-disabled.cui-ctl-medium.showBorder:hover,.usehover .cui-taskpane .cui-disabled.cui-ctl-large.showBorder:hover{color:GrayText !important;opacity:1}.usehover .cui-taskpane a.cui-ctl.showBorder:hover,.usehover .cui-taskpane a.cui-ctl-medium.showBorder:hover,.usehover .cui-taskpane a.cui-ctl-large.showBorder:hover,.cui-taskpane a.cui-ctl.showBorder:focus,.cui-taskpane a.cui-ctl-medium.showBorder:focus,.cui-taskpane a.cui-ctl-large.showBorder:focus,.cui-taskpane a.cui-ctl-active.cui-ctl.showBorder,.cui-taskpane a.cui-ctl-active.cui-ctl-medium.showBorder,.cui-taskpane a.cui-ctl-active.cui-ctl-large.showBorder,.cui-taskpane a.cui-ctl-active.cui-ctl.showBorder:hover,.cui-taskpane a.cui-ctl-active.cui-ctl-medium.showBorder:hover,.cui-taskpane a.cui-ctl-active.cui-ctl-large.showBorder:hover{-ms-high-contrast-adjust:none;background-color:Highlight !important;color:HighlightText !important;outline-color:inherit !important}}.rmt-nov-sel{background-color:#fff;border:1px solid #000;border-right-width:0;margin:0}.rmt-nov-sel-lbl{line-height:16px;padding:0 4px;cursor:default;vertical-align:middle}.rmt-nov-cntr{margin-top:3px}.ewa-root-ltr .rmt-nov-cntr{float:right;margin-right:-4px;white-space:nowrap}.ewa-root-rtl .rmt-nov-cntr{float:left;margin-left:-4px;white-space:nowrap}.ewa-readmodetoolbar-nov{display:inline-block}.ewa-readmodetoolbar{height:51px}.ewa-ribbon{position:relative;height:149px;background-color:#fff}.ewa-readmodetoolbar,.ewa-ribbon{width:100%;white-space:nowrap;outline:none;border:0 solid transparent;margin:0}.ewa-readmodetoolbar-nov .rmt-nov-cntr{float:none;margin-left:-4px;margin-right:30px;padding-top:6px}.AppRtl .ewa-readmodetoolbar-nov .rmt-nov-cntr{margin-right:-4px;margin-left:30px}.ewa-readmodetoolbar-nov .cui-toolbar-singledock{text-align:left}.AppRtl .ewa-readmodetoolbar-nov .cui-toolbar-singledock{text-align:right}.cui-TabRowInline #btnOpenInClient-Medium .cui-ctl-mediumlabel{display:block}.ewa-ribbon-flex{height:auto}');
}


Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames = function Microsoft_Office_Excel_WebUI_Client_ExcelRibbon_CssClassNames() {
}


Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds = function Microsoft_Office_Excel_WebUI_Client_ExcelRibbon_CssElementIds() {
}


_Ewa._microsoftOfficeExcelWebUIClientExcelRibbonCssMain.registerClass('_Ewa._microsoftOfficeExcelWebUIClientExcelRibbonCssMain');
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.registerClass('Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames');
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.registerClass('Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds');
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiRibbon = 'cui-ribbon';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiToolbarToolbar = 'cui-toolbar-toolbar';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiViewerchrome = 'cui-viewerchrome';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiQAT = 'cui-QAT';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtl = 'cui-ctl';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiRibbonTopBars = 'cui-ribbonTopBars';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTabBody = 'cui-tabBody';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCgI = 'cui-cg-i';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtUl = 'cui-ct-ul';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTabContainer = 'cui-tabContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCg = 'cui-cg';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiPinButton = 'cui-pinButton';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.appRtl = 'AppRtl';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiDialogLauncherButton = 'cui-dialogLauncherButton';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTopBar1 = 'cui-topBar1';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.empty = 'empty';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTopBar2 = 'cui-topBar2';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.elevatedToolbar = 'elevated-toolbar';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSinglerowlayout = 'cui-singlerowlayout';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlMedium = 'cui-ctl-medium';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.usehover = 'usehover';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlActive = 'cui-ctl-active';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiQATRowLeft = 'cui-QATRowLeft';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.appAndBrandContainer = 'AppAndBrandContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiQATRowCenter = 'cui-QATRowCenter';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTopBar1TransistionalHeaderUI = 'cui-topBar1-transistionalHeaderUI';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiQATRowRight = 'cui-QATRowRight';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTabRowLeft = 'cui-TabRowLeft';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiToolbarOnerow = 'cui-toolbar-onerow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiToolbarButtondock = 'cui-toolbar-buttondock';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTabRowInline = 'cui-TabRowInline';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTabRowRight = 'cui-TabRowRight';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSb = 'cui-sb';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiFaDropped = 'cui-fa-dropped';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiDisabled = 'cui-disabled';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImgContainer = 'cui-img-container';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImgContFloat = 'cui-img-cont-float';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiJewelContainer = 'cui-jewel-container';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTts = 'cui-tts';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTtsScale1 = 'cui-tts-scale-1';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTtsScale2 = 'cui-tts-scale-2';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiJewelJewelMenuLauncher = 'cui-jewel-jewelMenuLauncher';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiJewelLabel = 'cui-jewel-label';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTt = 'cui-tt';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtFirst = 'cui-ct-first';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTtA = 'cui-tt-a';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTtS = 'cui-tt-s';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTtSpan = 'cui-tt-span';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCgT = 'cui-cg-t';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCgTI = 'cui-cg-t-i';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCgOr = 'cui-cg-or';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCgGr = 'cui-cg-gr';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCgYl = 'cui-cg-yl';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCgPp = 'cui-cg-pp';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCgMg = 'cui-cg-mg';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.mlrVisualRefresh = 'MLRVisualRefresh';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTouch = 'cui-touch';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGroup = 'cui-group';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGroupContainer = 'cui-groupContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGroupBody = 'cui-groupBody';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCs = 'cui-cs';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCsTitle = 'cui-cs-title';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCsBody = 'cui-cs-body';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGroupTitle = 'cui-groupTitle';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGroupSeparator = 'cui-groupSeparator';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSection = 'cui-section';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSectionAlignmiddle = 'cui-section-alignmiddle';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiLayout = 'cui-layout';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiRow = 'cui-row';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiRowOnerow = 'cui-row-onerow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiRowTworowmiddle = 'cui-row-tworowmiddle';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiRowTworow = 'cui-row-tworow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiRowThreerow = 'cui-row-threerow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiRow1 = 'cui-row-1';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiRow2 = 'cui-row-2';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiRow3 = 'cui-row-3';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSectionDivider = 'cui-section-divider';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSectionDividerSeparator = 'cui-section-divider-separator';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.alignleft = 'alignleft';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.aligncenter = 'aligncenter';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.alignright = 'alignright';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTb = 'cui-tb';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCb = 'cui-cb';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCbInput = 'cui-cb-input';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiDdArrowButton = 'cui-dd-arrow-button';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiFslb = 'cui-fslb';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlCompact = 'cui-ctl-compact';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiToolbarButtonCenter = 'cui-toolbar-button-center';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiToolbarButtonRight = 'cui-toolbar-button-right';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiHidden = 'cui-hidden';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.iPad = 'iPad';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.v6up = 'v6up';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.v8 = 'v8';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiBlock = 'cui-block';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiKeytip = 'cui-keytip';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiKeytipSpan = 'cui-keytip-span';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.tellMeSearchBox = 'TellMeSearchBox';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.buttonOpenInClient = 'ButtonOpenInClient';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlMenu = 'cui-ctl-menu';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiJewelmenu = 'cui-jewelmenu';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiJewelsubmenu = 'cui-jewelsubmenu';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlLarge = 'cui-ctl-large';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiToolbarSingledock = 'cui-toolbar-singledock';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiHerobarToolbarContainer = 'cui-herobar-toolbarContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiHerobarDocumentTitleContainer = 'cui-herobar-documentTitleContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.breadcrumbItem = 'BreadcrumbItem';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiHerobarBreadcrumbContainer = 'cui-herobar-breadcrumbContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.folderSeparator = 'FolderSeparator';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.appBrandSeparator = 'AppBrandSeparator';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiHerodock = 'cui-herodock';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlLargelabel = 'cui-ctl-largelabel';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiEmphasized = 'cui-emphasized';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.skypeButton = 'SkypeButton';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.activated = 'activated';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.skypeUnreadConversationsDiv = 'SkypeUnreadConversationsDiv';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.skypeUnreadConversationsBubble = 'SkypeUnreadConversationsBubble';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.skypeUCBBackground = 'SkypeUCBBackground';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.skypeUCBWide = 'SkypeUCBWide';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.documentActionButton = 'DocumentActionButton';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.commentsButton = 'CommentsButton';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.changesButton = 'ChangesButton';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTopBar1TransitionalReactHeaderUI = 'cui-topBar1-transitionalReactHeaderUI';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.toggleButtonIconContainer = 'toggleButton-iconContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.toggleButtonLabel = 'toggleButton-label';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.o365csBase = 'o365cs-base';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.msSuiteuxSearchBox = 'ms-suiteux-search-box';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlThin = 'cui-ctl-thin';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiShortcutContainer = 'cui-shortcut-container';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiShortcutHint = 'cui-shortcut-hint';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiFaSm = 'cui-fa-sm';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlSmalllabel = 'cui-ctl-smalllabel';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlSmall24label = 'cui-ctl-small24label';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg16by16 = 'cui-img-16by16';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg5by3 = 'cui-img-5by3';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlSmall = 'cui-ctl-small';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlA2 = 'cui-ctl-a2';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlIconContainer = 'cui-ctl-iconContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlLarge16IconContainer = 'cui-ctl-large16IconContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlSpinner = 'cui-ctl-spinner';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlIconContainer14 = 'cui-ctl-iconContainer14';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlIconContainer20 = 'cui-ctl-iconContainer20';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlIconContainer24 = 'cui-ctl-iconContainer24';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlMenulabel = 'cui-ctl-menulabel';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiBtnMenuDescription = 'cui-btn-menu-description';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlMedium20 = 'cui-ctl-medium20';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlA1 = 'cui-ctl-a1';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlA1Internal = 'cui-ctl-a1Internal';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlLargeIconContainer = 'cui-ctl-largeIconContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlLarge30IconContainer = 'cui-ctl-large30IconContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlMenu32 = 'cui-ctl-menu32';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlMenu48 = 'cui-ctl-menu48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiDd = 'cui-dd';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSpn = 'cui-spn';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusection = 'cui-menusection';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionFirstitem = 'cui-menusection-firstitem';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSbMenu = 'cui-sb-menu';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiDdMenu = 'cui-dd-menu';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiFaMenuitem = 'cui-fa-menuitem';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlMenu16 = 'cui-ctl-menu16';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiFaMenuArrow = 'cui-fa-menu-arrow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlMenu20 = 'cui-ctl-menu20';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlMediumlabelNodescription = 'cui-ctl-mediumlabel-nodescription';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlInitials = 'cui-ctl-initials';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiInRibbonGallery = 'cui-inRibbonGallery';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybutton = 'cui-gallerybutton';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonA = 'cui-gallerybutton-a';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize48by48 = 'cui-gallerybutton-Size48by48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallery = 'cui-gallery';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryTd = 'cui-gallery-td';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize16by16 = 'cui-gallery-element-Size16by16';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize40by40 = 'cui-gallery-element-Size40by40';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize48by48 = 'cui-gallery-element-Size48by48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize61by75 = 'cui-gallery-element-Size61by75';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize64by48 = 'cui-gallery-element-Size64by48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize85by16 = 'cui-gallery-element-Size85by16';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize85by48 = 'cui-gallery-element-Size85by48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize32by32 = 'cui-gallery-element-Size32by32';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize120by20 = 'cui-gallery-element-Size120by20';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize20by20 = 'cui-gallery-element-Size20by20';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize24by24 = 'cui-gallery-element-Size24by24';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize84by21 = 'cui-gallery-element-Size84by21';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize90by21 = 'cui-gallery-element-Size90by21';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize200by200 = 'cui-gallery-element-Size200by200';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGalleryElementSize70by48 = 'cui-gallery-element-Size70by48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize16by16 = 'cui-gallerybutton-Size16by16';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize40by40 = 'cui-gallerybutton-Size40by40';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize61by75 = 'cui-gallerybutton-Size61by75';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize64by48 = 'cui-gallerybutton-Size64by48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize70by48 = 'cui-gallerybutton-Size70by48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize85by16 = 'cui-gallerybutton-Size85by16';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize85by48 = 'cui-gallerybutton-Size85by48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize110by75 = 'cui-gallerybutton-Size110by75';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize32by32 = 'cui-gallerybutton-Size32by32';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize120by20 = 'cui-gallerybutton-Size120by20';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize20by20 = 'cui-gallerybutton-Size20by20';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize24by24 = 'cui-gallerybutton-Size24by24';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize84by21 = 'cui-gallerybutton-Size84by21';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize90by21 = 'cui-gallerybutton-Size90by21';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize200by200 = 'cui-gallerybutton-Size200by200';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonALtr = 'cui-gallerybutton-a-ltr';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonARtl = 'cui-gallerybutton-a-rtl';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.listMultilevelPreview = 'ListMultilevelPreview';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.level0 = 'level0';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.level1 = 'level1';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.level2 = 'level2';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerTable = 'cui-colorpicker-table';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerCell = 'cui-colorpicker-cell';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerCellLarge = 'cui-colorpicker-cell-large';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerFirstrow = 'cui-colorpicker-firstrow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerFirstcol = 'cui-colorpicker-firstcol';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerMcurow = 'cui-colorpicker-mcurow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerCompactrow = 'cui-colorpicker-compactrow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerSpacedrow = 'cui-colorpicker-spacedrow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerCellA = 'cui-colorpicker-cell-a';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerCelldiv = 'cui-colorpicker-celldiv';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerFirstcompactrow = 'cui-colorpicker-firstcompactrow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerLastcompactrow = 'cui-colorpicker-lastcompactrow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerCellinternaldiv = 'cui-colorpicker-cellinternaldiv';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiIt = 'cui-it';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiItFirstrow = 'cui-it-firstrow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiItFirstcol = 'cui-it-firstcol';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiItActiveCell = 'cui-it-activeCell';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiItInactiveCell = 'cui-it-inactiveCell';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiItInactiveCellOuter = 'cui-it-inactiveCellOuter';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTxtbx = 'cui-txtbx';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSpnTxtbx = 'cui-spn-txtbx';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSbInput = 'cui-sb-input';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiDdText = 'cui-dd-text';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTxtbxMultiline = 'cui-txtbx-multiline';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.tellmeFlight = 'tellme-flight';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSbImageButton = 'cui-sb-image-button';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSpnArwbx = 'cui-spn-arwbx';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.sbImg = 'sb-img';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSbPlaceholder = 'cui-sb-placeholder';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSbHover = 'cui-sb-hover';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSbFocus = 'cui-sb-focus';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSbLiveregion = 'cui-sb-liveregion';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSpnBtnup = 'cui-spn-btnup';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSpnBtndown = 'cui-spn-btndown';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSpnImgcnt = 'cui-spn-imgcnt';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCbFillContainer = 'cui-cb-fill-container';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCbFillInput = 'cui-cb-fill-input';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSeparator = 'cui-separator';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSldr = 'cui-sldr';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSldrInput = 'cui-sldr-input';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlOn = 'cui-ctl-on';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlUnchkd = 'cui-ctl-unchkd';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonHighlighted = 'cui-gallerybutton-highlighted';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTbFocus = 'cui-tb-focus';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSpnFocus = 'cui-spn-focus';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCbFocus = 'cui-cb-focus';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.wacDialogList = 'WACDialogList';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSldrOnfocus = 'cui-sldr-onfocus';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlSplitHovered = 'cui-ctl-split-hovered';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlSplitHoveredPrimary = 'cui-ctl-split-hovered-primary';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlMenuHoveredWithoutFocus = 'cui-ctl-menu-hovered-without-focus';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonFocused = 'cui-gallerybutton-focused';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.wacZoomDialogRadioRowHighlight = 'WACZoomDialogRadioRow-highlight';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.wacZoomDialogRadioRow = 'WACZoomDialogRadioRow';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.wacDialogCheckboxDiv = 'WACDialogCheckboxDiv';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.wacDialogCheckboxDivHighlight = 'WACDialogCheckboxDivHighlight';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize32x32 = 'cui-gallerybutton-Size32x32';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiGallerybuttonSize120x20 = 'cui-gallerybutton-Size120x20';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlSplitHoveredSecondary = 'cui-ctl-split-hovered-secondary';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerHoveredOver = 'cui-colorpicker-hoveredOver';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiColorpickerSelected = 'cui-colorpicker-selected';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiItActiveCellOuter = 'cui-it-activeCellOuter';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg8by8 = 'cui-img-8by8';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlLargeFloatieIconContainer = 'cui-ctl-largeFloatieIconContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.peoplesWellControl = 'PeoplesWellControl';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiFloatie = 'cui-floatie';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiHideInTouch = 'cui-hideInTouch';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.selectableDialogTable = 'SelectableDialogTable';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.inactiveRowSelection = 'inactiveRowSelection';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.previewStyleLabel = 'PreviewStyleLabel';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionItems = 'cui-menusection-items';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionItemsScrollable = 'cui-menusection-items-scrollable';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionTitle = 'cui-menusection-title';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionTitleLightBackground = 'cui-menusection-title-lightBackground';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionContextmenuTitle = 'cui-menusection-contextmenu-title';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionTitleAtTop = 'cui-menusection-titleAtTop';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionTitleEmpty = 'cui-menusection-title-empty';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionSeparator = 'cui-menusection-separator';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenuLarge = 'cui-menu-large';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg1by16 = 'cui-img-1by16';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg13by13 = 'cui-img-13by13';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg14by14 = 'cui-img-14by14';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg20by20 = 'cui-img-20by20';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg24by24 = 'cui-img-24by24';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg30by30 = 'cui-img-30by30';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg32by32 = 'cui-img-32by32';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg48by48 = 'cui-img-48by48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg56by24 = 'cui-img-56by24';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg64by48 = 'cui-img-64by48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg72by96 = 'cui-img-72by96';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg85by48 = 'cui-img-85by48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg96by72 = 'cui-img-96by72';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg96by96 = 'cui-img-96by96';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg120by20 = 'cui-img-120by20';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiFooterbutton = 'cui-footerbutton';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTemplatebuttonLabelPortrait = 'cui-templatebutton-label-portrait';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTemplatebuttonLabelLandscape = 'cui-templatebutton-label-landscape';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTemplatebuttonLabelSquare = 'cui-templatebutton-label-square';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMrubuttonTitle = 'cui-mrubutton-title';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMrubuttonDescription = 'cui-mrubutton-description';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlFilenamelabel = 'cui-ctl-filenamelabel';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionFilenametitle = 'cui-menusection-filenametitle';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiJewelmenuBackarrowrefresh = 'cui-jewelmenu-backarrowrefresh';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiBtnTitle = 'cui-btn-title';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMrubutton = 'cui-mrubutton';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMrubuttonTextcontainer = 'cui-mrubutton-textcontainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionSubsectiontitle = 'cui-menusection-subsectiontitle';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionDiagnosticsLabel = 'cui-menusection-diagnostics-label';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionDiagnosticsTextbox = 'cui-menusection-diagnostics-textbox';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenusectionDiagnosticsTextboxlabel = 'cui-menusection-diagnostics-textboxlabel';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiSubsectionlabellink = 'cui-subsectionlabellink';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiMenuloading = 'cui-menuloading';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTemplatebuttonPortrait = 'cui-templatebutton-portrait';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTemplatebuttonLandscape = 'cui-templatebutton-landscape';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTemplatebuttonShortlandscape = 'cui-templatebutton-shortlandscape';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTemplatebuttonSquare = 'cui-templatebutton-square';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg95by123 = 'cui-img-95by123';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg123by95 = 'cui-img-123by95';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg123by69 = 'cui-img-123by69';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiImg100by100 = 'cui-img-100by100';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiHeaderbutton = 'cui-headerbutton';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiHeaderbuttonImg = 'cui-headerbutton-img';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiStatusbar = 'cui-statusbar';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.dark = 'dark';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlLargelabelSingleline = 'cui-ctl-largelabel-singleline';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiCtlLargelabelTwoline = 'cui-ctl-largelabel-twoline';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.contextMenuDd = 'context-menu-dd';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTaskpane = 'cui-taskpane';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.wacTaskPaneContainer = 'WACTaskPaneContainer';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.alignLeft = 'alignLeft';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.alignRight = 'alignRight';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTaskPaneTitleBar = 'cui-taskPaneTitleBar';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTaskPaneTitle = 'cui-taskPaneTitle';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiFlexPaneTitle = 'cui-flexPaneTitle';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiTaskPaneClose = 'cui-taskPaneClose';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.textAlignRight = 'textAlignRight';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.stretchedHorizontally = 'stretchedHorizontally';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.cuiFlexpane = 'cui-flexpane';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.stretched = 'stretched';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.verticalArrange = 'verticalArrange';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.showBorder = 'showBorder';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.rmtNovSel = 'rmt-nov-sel';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.rmtNovSelLbl = 'rmt-nov-sel-lbl';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.rmtNovCntr = 'rmt-nov-cntr';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.ewaReadmodetoolbarNov = 'ewa-readmodetoolbar-nov';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.ewaReadmodetoolbar = 'ewa-readmodetoolbar';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.ewaRibbon = 'ewa-ribbon';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssClassNames.ewaRibbonFlex = 'ewa-ribbon-flex';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.breadcrumbTitle = 'BreadcrumbTitle';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.breadcrumbAppBrand = 'BreadcrumbAppBrand';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.tabApps = 'tabApps';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.wacTopbarPlaceholder = 'WACTopbarPlaceholder';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.btnToggleRibbonHeader = 'btnToggleRibbon_Header';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.accessibilityHelpDialogBody = 'AccessibilityHelpDialogBody';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.jbtnBackArrowMenu32 = 'jbtnBackArrow-Menu32';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.btnProtectDocumentMenu48 = 'btnProtectDocument-Menu48';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.saveAsInformationMenuSection = 'SaveAsInformationMenuSection';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.lblWheresTheSaveButtonMenuSaveButton = 'lblWheresTheSaveButton-MenuSaveButton';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.lblDiagnosticsMenuDiagnostics = 'lblDiagnostics-MenuDiagnostics';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.aboutInformationMenuSectionDiagnostics = 'AboutInformationMenuSectionDiagnostics';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.lblMessageMenuMru = 'lblMessage-MenuMru';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.lblRecentDocumentsMenuMru = 'lblRecentDocuments-MenuMru';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.powerPointPasteFloatie = 'PowerPoint_PasteFloatie';
Microsoft.Office.Excel.WebUI.Client.ExcelRibbon.CssElementIds.btnOpenInClientMedium = 'btnOpenInClient-Medium';
_Ewa._microsoftOfficeExcelWebUIClientExcelRibbonCssMain.main();
Type.registerNamespace('_Ewa');

Type.registerNamespace('Microsoft.Office.Excel.WebUI.Client.FormulaBar');

_Ewa._microsoftOfficeExcelWebUIClientFormulaBarCssMain = function _Ewa__microsoftOfficeExcelWebUIClientFormulaBarCssMain() {
}
_Ewa._microsoftOfficeExcelWebUIClientFormulaBarCssMain.main = function _Ewa__microsoftOfficeExcelWebUIClientFormulaBarCssMain$main$st() {
    Common.StyleSheet.importStyleSheetFromText('.ewa-fb{height:20px;background-color:#fff;color:#444;overflow:hidden;padding:10px 8px;position:relative;margin:auto}.grid-visual-refresh .ewa-fb{height:32px;overflow:hidden;padding:0;background-color:#edebe9}.ewa-fb-placeholder{color:#bbb}.ewa-root-ltr .ewa-fb{padding-right:4px}.ewa-root-rtl .ewa-fb{padding-left:4px}.ewa-fb-text-box,.ewa-fb-presence-cover{display:inline-block;margin:0 0 0 1px;padding:0 1px 0 0;height:18px;width:100%;z-index:101}.ewa-fb-presence-cover{opacity:.2;position:absolute;margin:1px 10px 0 10px}.ms-core-needIEFilter .ewa-fb-presence-cover{filter:alpha(opacity=20);-ms-filter:\"alpha(opacity=20)\"}.ewa-fb-text-box{overflow:hidden;border:1px solid #e6e7e8;outline:none;resize:none;position:relative;flex-grow:1;white-space:pre}.grid-visual-refresh .ewa-fb-text-box{background-color:#fff;height:18px;line-height:22px;margin:0 0 0 0;top:4px;width:auto;position:relative;padding:2px}.grid-visual-refresh .ewa-fb-text-box.ewa-fb-text-box-new{background-color:#fff;height:18px;line-height:18px;margin:0;top:4px;width:auto;position:relative;padding:2px}.ewa-fb-text-box.ewa-fb-text-box-new .ewa-rteTextElement{height:18px;overflow:hidden;margin-top:1px}.grid-visual-refresh .ewa-fb-text-box.not-ie .ewa-rteTextElement>.ewa-rteLine{line-height:inherit;height:inherit}.grid-visual-refresh .ewa-fb-text-box.ie .ewa-rteTextElement>.ewa-rteLine{line-height:inherit}.ewa-root-ltr .ewa-fb-text-box,.ewa-root-ltr .ewa-fb-presence-cover{left:33px}.ewa-root-ltr .grid-visual-refresh .ewa-fb-text-box{right:4px;left:38px}.ewa-root-rtl .ewa-fb-text-box .ewa-root-rtl .ewa-fb-presence-cover{right:33px}.ewa-root-rtl .grid-visual-refresh .ewa-fb-text-box{right:38px;left:4px}.ewa-fb .functionbox{position:relative;top:10px;width:29px;height:18px;background-color:#fff;border:1px solid #e6e7e8;z-index:101}.green-fill-paths:hover path{fill:#217346}.grid-visual-refresh .ewa-fb .functionbox{position:relative;top:4px;height:22px;background-color:FORMULA_BAR_FUNCTIONBOX_COLOR}.ewa-root-ltr .grid-visual-refresh .ewa-fb .functionbox{margin-right:3px}.ewa-root-rtl .grid-visual-refresh .ewa-fb .functionbox{margin-left:3px}.ewa-fb-presence-cover-internal{height:100%}.ewa-root-ltr .ewa-fb-presence-cover-internal{margin-right:50px}.ewa-root-rtl .ewa-fb-presence-cover-internal{margin-left:50px}.ewa-fb .functionbox .clip13x13{margin:2px 8px 1px 8px}.grid-visual-refresh .ewa-fb .functionbox .clip13x13{margin-top:4px;margin-bottom:4px}.ewa-fb .functionbox:hover .ewaboot_formulabar13{margin-top:-13px}@media screen and (-ms-high-contrast:active){.ewa-fb .functionbox{background-color:#fff}}@media screen and (-ms-high-contrast:active){.grid-visual-refresh .ewa-fb .functionbox{background-color:FORMULA_BAR_FUNCTIONBOX_COLOR}.ewa-fb .okbox{background-color:#fff}.ewa-fb .cancelbox{background-color:#fff}}.ewa-root-ltr .ewa-fb.drop-down{padding-left:3px}.ewa-root-rtl .ewa-fb.drop-down{padding-right:3px}.ewa-fb .ok-cancel-buttons-container{position:relative;z-index:101;display:none;flex-flow:row}.grid-visual-refresh .ewa-fb .ok-cancel-buttons-container{position:relative}.ewa-fb .okbox{position:relative;top:10px;width:29px;height:18px;background-color:#fff;border:1px solid #e6e7e8;z-index:101;margin:0 2px 0 2px;display:flex;justify-content:center;align-items:center}.grid-visual-refresh .ewa-fb .okbox{position:relative;top:4px;height:22px;background-color:FORMULA_BAR_FUNCTIONBOX_COLOR}.ewa-fb .cancelbox{position:relative;top:10px;width:29px;height:18px;background-color:#fff;border:1px solid #e6e7e8;z-index:101;display:flex;justify-content:center;align-items:center}.grid-visual-refresh .ewa-fb .cancelbox{position:relative;top:4px;height:22px;background-color:FORMULA_BAR_FUNCTIONBOX_COLOR}.ewa-fb-nb{display:flex;flex-flow:row}.grid-visual-refresh .ewa-fb-nb{background-color:#edebe9;height:32px}.ewa-fb-nb .ewa-fb.drop-down{flex:1 1 auto}.grid-visual-refresh .ewa-fb-nb .ewa-fb.drop-down{right:0;height:32px;display:flex;flex-flow:row}.ewa-fb-name-box-placeholder{position:relative;width:118px;float:left;display:block;overflow:hidden;height:20px;background-color:#fff;padding:2px;align-self:center;margin:0 0 0 4px}.ewa-root-rtl .ewa-fb-name-box-placeholder{float:right;margin:0 4px 0 0}.button-disabled{pointer-events:none;background-color:#f0f0f0 !important}.ewa-fb-nb .cui-cb{flex:0 1 auto;align-self:center;z-index:101}.ewa-root-ltr .grid-visual-refresh .ewa-fb-nb .cui-cb{position:relative;margin:0 0 0 4px}.ewa-root-rtl .grid-visual-refresh .ewa-fb-nb .cui-cb{position:relative;margin:0 4px 0 0}.ewa-fb-nb .cui-cb-input{height:14px;font-size:14.7px;font-family:Calibri}.grid-visual-refresh .ewa-fb-nb .cui-cb-input{height:18px}.ewa-fb-nb .cui-dd-arrow-button{height:18px;background-color:#fff}.grid-visual-refresh .ewa-fb-nb .cui-dd-arrow-button{height:18px;padding-top:2px;padding-bottom:2px}');
}


Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames = function Microsoft_Office_Excel_WebUI_Client_FormulaBar_CssClassNames() {
}


Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssElementIds = function Microsoft_Office_Excel_WebUI_Client_FormulaBar_CssElementIds() {
}


_Ewa._microsoftOfficeExcelWebUIClientFormulaBarCssMain.registerClass('_Ewa._microsoftOfficeExcelWebUIClientFormulaBarCssMain');
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.registerClass('Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames');
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssElementIds.registerClass('Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssElementIds');
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.ewaFb = 'ewa-fb';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.ewaFbPlaceholder = 'ewa-fb-placeholder';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.ewaFbTextBox = 'ewa-fb-text-box';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.ewaFbPresenceCover = 'ewa-fb-presence-cover';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.ewaFbTextBoxNew = 'ewa-fb-text-box-new';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.notIe = 'not-ie';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.ewaRteLine = 'ewa-rteLine';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.ie = 'ie';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.functionbox = 'functionbox';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.greenFillPaths = 'green-fill-paths';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.ewaFbPresenceCoverInternal = 'ewa-fb-presence-cover-internal';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.okbox = 'okbox';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.cancelbox = 'cancelbox';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.dropDown = 'drop-down';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.okCancelButtonsContainer = 'ok-cancel-buttons-container';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.ewaFbNb = 'ewa-fb-nb';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.ewaFbNameBoxPlaceholder = 'ewa-fb-name-box-placeholder';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.buttonDisabled = 'button-disabled';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.cuiCb = 'cui-cb';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.cuiCbInput = 'cui-cb-input';
Microsoft.Office.Excel.WebUI.Client.FormulaBar.CssClassNames.cuiDdArrowButton = 'cui-dd-arrow-button';
_Ewa._microsoftOfficeExcelWebUIClientFormulaBarCssMain.main();
Type.registerNamespace('_Ewa');

Type.registerNamespace('Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher');

_Ewa._microsoftOfficeExcelWebUIClientOfficeSwitcherCssMain = function _Ewa__microsoftOfficeExcelWebUIClientOfficeSwitcherCssMain() {
}
_Ewa._microsoftOfficeExcelWebUIClientOfficeSwitcherCssMain.main = function _Ewa__microsoftOfficeExcelWebUIClientOfficeSwitcherCssMain$main$st() {
    Common.StyleSheet.importStyleSheetFromText('img{border:none}.ci{display:inline-block}.swBar{display:none;position:fixed !important;z-index:999;background-color:#fff;padding:20px 10px 10px 20px;top:30px;left:auto;right:auto;border:1px solid #b6b6b6;margin:10px;box-sizing:content-box;box-shadow:0 1px 15px rgba(0,0,0,.4);opacity:0;transition-property:opacity,top;transition-duration:.5s;transition-timing-function:cubic-bezier(0,0,0,1);transition-delay:0s;width:600px;-moz-user-select:-moz-none;-khtml-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.swBar:focus{outline:none}.swBar.closeAnimation{transition-duration:.2s;transition-timing-function:cubic-bezier(.33,0,.67,1)}.swBar.HeaderRtl.O365Switcher{padding-left:10px;padding-right:20px}@media(min-width:660px){.swBar,.swBar.O365Switcher{width:600px}}@media(min-width:900px){.swBar.O365Switcher{width:840px}}@media(max-width:899px) and (min-width:780px){.swBar.O365Switcher{width:720px}}@media(max-width:659px){.swBar,.swBar.O365Switcher{width:480px}}@media(max-width:539px){.swBar,.swBar.O365Switcher{width:360px}}@media(max-width:419px){.swBar,.swBar.O365Switcher{width:240px}}.swBar.SwitcherLoading{width:270px;height:130px;text-align:center;padding:0}.swBar.SwitcherError{width:250px;padding:20px}.swBar .swLoadingErrorText{display:none}.swBar.SwitcherError .swLoadingErrorText{display:inline}.swBar .swLoadingText{display:none}.swBar.SwitcherLoading .swLoadingText{display:inline}.swLoadingText{color:#000;font-size:20px;line-height:130px}.swLoadingErrorText{color:#000}.swErrorTitle{font-size:20px}.swErrorBody{font-size:14px}.swBar a{text-decoration:none}.swBar .arrow{display:block;position:absolute;top:-8px;left:6px;margin:0;border-bottom:8px solid #fff;border-left:8px solid transparent;border-right:8px solid transparent;border-top:0;padding:0;width:0;height:0;font-size:0;line-height:0}.HeaderRtl.swBar .arrow{left:auto;right:6px}.swBar .border-arrow{border-bottom-color:#b6b6b6;top:-9px}.swTileList{list-style:none outside none;margin:0;padding:0;display:inline-block}.swTile{margin-bottom:10px;margin-right:10px}.swTileLink{border:0 solid transparent;margin:0;position:relative;text-align:center;color:#fff}.swTileLink:hover,.swTileLink:focus{border:2px solid;margin:-2px;text-decoration:none}.swTileLink:focus{outline:0}.swTile,.swTileLink{display:inline-block;width:110px;height:110px}.swTile.tilePressed{transform:scale(.9215)}.swTileText{max-width:90px;position:absolute;bottom:6px;left:10px;line-height:110%;text-align:left}.HeaderRtl .swTileText{left:auto;right:10px;text-align:right}.headerBarBG{display:none;position:fixed;left:0;right:0;top:0;bottom:0;background-color:#fff;opacity:0;filter:alpha(opacity=0);z-index:998}.clip110x110{position:relative;overflow:hidden}.clip110x110{width:110px;height:110px}.clip110x110 img,.clip110x110 input{position:absolute;margin:0;padding:0;width:auto;height:auto}.wapsw_ODC_TileExcel_110x110x32{top:-1px;left:-1px}.wapsw_ODC_TileOfficeOnline_110x110x32{top:-1px;left:-113px}.wapsw_ODC_TileOutlook_110x110x32{top:-113px;left:-1px}.wapsw_ODC_TilePowerPoint_110x110x32{top:-113px;left:-113px}.wapsw_ODC_TileSway_110x110x32{top:-1px;left:-225px}.wapsw_ODC_TileWord_110x110x32{top:-113px;left:-225px}.wapsw_ODC_TileSkype_110x110x32{top:-225px;left:-1px}.wapsw_ODC_TilePeople_110x110x32{top:-225px;left:-113px}.wapsw_ODC_TileOneNote_110x110x32{top:-225px;left:-225px}.wapsw_ODC_TileFlow_110x110x32{top:-1px;left:-337px}.wapsw_ODC_TileCloudLogo_110x110x32{top:-113px;left:-337px}.wapsw_ODC_TileCalendar_110x110x32{top:-225px;left:-337px}');
}


Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames = function Microsoft_Office_Excel_WebUI_Client_OfficeSwitcher_CssClassNames() {
}


Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssElementIds = function Microsoft_Office_Excel_WebUI_Client_OfficeSwitcher_CssElementIds() {
}


_Ewa._microsoftOfficeExcelWebUIClientOfficeSwitcherCssMain.registerClass('_Ewa._microsoftOfficeExcelWebUIClientOfficeSwitcherCssMain');
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.registerClass('Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames');
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssElementIds.registerClass('Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssElementIds');
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.ci = 'ci';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.swBar = 'swBar';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.closeAnimation = 'closeAnimation';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.headerRtl = 'HeaderRtl';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.o365Switcher = 'O365Switcher';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.switcherLoading = 'SwitcherLoading';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.switcherError = 'SwitcherError';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.swLoadingErrorText = 'swLoadingErrorText';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.swLoadingText = 'swLoadingText';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.swErrorTitle = 'swErrorTitle';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.swErrorBody = 'swErrorBody';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.arrow = 'arrow';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.borderArrow = 'border-arrow';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.swTileList = 'swTileList';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.swTile = 'swTile';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.swTileLink = 'swTileLink';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.tilePressed = 'tilePressed';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.swTileText = 'swTileText';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.headerBarBG = 'headerBarBG';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.clip110x110 = 'clip110x110';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTileExcel110x110x32 = 'wapsw_ODC_TileExcel_110x110x32';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTileOfficeOnline110x110x32 = 'wapsw_ODC_TileOfficeOnline_110x110x32';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTileOutlook110x110x32 = 'wapsw_ODC_TileOutlook_110x110x32';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTilePowerPoint110x110x32 = 'wapsw_ODC_TilePowerPoint_110x110x32';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTileSway110x110x32 = 'wapsw_ODC_TileSway_110x110x32';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTileWord110x110x32 = 'wapsw_ODC_TileWord_110x110x32';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTileSkype110x110x32 = 'wapsw_ODC_TileSkype_110x110x32';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTilePeople110x110x32 = 'wapsw_ODC_TilePeople_110x110x32';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTileOneNote110x110x32 = 'wapsw_ODC_TileOneNote_110x110x32';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTileFlow110x110x32 = 'wapsw_ODC_TileFlow_110x110x32';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTileCloudLogo110x110x32 = 'wapsw_ODC_TileCloudLogo_110x110x32';
Microsoft.Office.Excel.WebUI.Client.OfficeSwitcher.CssClassNames.wapswODCTileCalendar110x110x32 = 'wapsw_ODC_TileCalendar_110x110x32';
_Ewa._microsoftOfficeExcelWebUIClientOfficeSwitcherCssMain.main();
Type.registerNamespace('_Ewa');

_Ewa.AddinCommandsInitService = function _Ewa_AddinCommandsInitService(ewa) {
    _Ewa.AddinCommandsInitService.initializeBase(this, [ ewa.get_stopwatchBuilder() ]);
    this._$$pf_EwaControl$p$1 = ewa;
    Common.AddinHostApp.set_hostApplicationName('WAC_Excel');
}
_Ewa.AddinCommandsInitService.prototype = {
    
    get_appUILocale: function _Ewa_AddinCommandsInitService$get_appUILocale$in() {
        return this._$$pf_EwaControl$p$1.get_bootstrapContext().UICultureTag;
    },
    
    _$$pf_EwaControl$p$1: null,
    
    tryInitializeAddinCommands: function _Ewa_AddinCommandsInitService$tryInitializeAddinCommands$in() {
        this.initializeAllAddinCommands();
    },
    
    getAvailableProviders: function _Ewa_AddinCommandsInitService$getAvailableProviders$in() {
        var providers = new ($$sc.EnumDictionary$2.$$(Common.AddinProviderType, Common.AddinCommandsLaunchOperationType))();
        if (this._$$pf_EwaControl$p$1.get_sessionStateManager().get_fullDocumentOptions().get(27)) {
            providers.set_item(0, 2);
        }
        if (this._$$pf_EwaControl$p$1.get_sessionStateManager().get_fullDocumentOptions().get(33)) {
            providers.set_item(1, 1);
        }
        if (this._$$pf_EwaControl$p$1.isServerFeatureEnabled(63)) {
            providers.set_item(8, 1);
        }
        if (this._$$pf_EwaControl$p$1.isServerFeatureEnabled(560)) {
            if (this._$$pf_EwaControl$p$1.get_basicDocumentOptions().get(35)) {
                providers.set_item(10, 5);
            }
        }
        else {
            if (this._$$pf_EwaControl$p$1.get_sessionStateManager().get_fullDocumentOptions().get(35)) {
                providers.set_item(10, 5);
            }
        }
        return providers;
    },
    
    processCommandActionWithData: function _Ewa_AddinCommandsInitService$processCommandActionWithData$in(commandId, actionData) {
        var $$t_6 = this;
        this.ensureCommandUIBeAvailable(function(task) {
            var newCommandInfo = new _Ewa.RibbonCommandInfo(commandId, 0, $$t_6._$$pf_EwaControl$p$1.get_frameMode(), 0, null);
            $$t_6._$$pf_EwaControl$p$1.get_commandHandlerManager().handleRibbonCommand(newCommandInfo, actionData, null);
        });
    },
    
    ensureCommandUIBeAvailable: function _Ewa_AddinCommandsInitService$ensureCommandUIBeAvailable$in(onCommandUIAvailable) {
        var $$t_7 = this;
        var isServiceDeferred = function(serviceName) {
            var service = $$t_7._$$pf_EwaControl$p$1.get_serviceRegistry().getService(Object, serviceName, false);
            return !!service && _Ewa.DeferredExecutionServiceProxyFactory.isDeferredExecutionServiceProxy(service);
        };
        if (isServiceDeferred(198)) {
            var addinUICommandTaskSource = new ($$sc.TaskCompletionSource$1.$$(_Ewa.ICommandHandler))();
            var $$t_8 = this;
            this._$$pf_EwaControl$p$1.get_serviceRegistry().getServiceAsync(_Ewa.ICommandHandler, 198, function(result) {
                onCommandUIAvailable(result);
            });
        }
        else {
            onCommandUIAvailable(null);
        }
    }
}


_Ewa.AddinCommandsInitServiceFactory = function _Ewa_AddinCommandsInitServiceFactory(ewa) {
    this.$$d__onSessionIdChanged$p$4 = Function.createDelegate(this, this._onSessionIdChanged$p$4);
    _Ewa.AddinCommandsInitServiceFactory.initializeBase(this);
    this._$$pf_EwaControl$p$4 = ewa;
    this.raiseFactoryReadyEvent();
}
_Ewa.AddinCommandsInitServiceFactory.attach = function _Ewa_AddinCommandsInitServiceFactory$attach$st(ewaControl) {
    ewaControl.get_serviceRegistry().registerService(_Ewa.IServiceFactory$1.$$(_Ewa.IAddinCommandsInitService), 201, new _Ewa.AddinCommandsInitServiceFactory(ewaControl));
}
_Ewa.AddinCommandsInitServiceFactory.prototype = {
    _$$pf_EwaControl$p$4: null,
    _$$pf_AddinCommandsInitService$p$4: null,
    
    create: function _Ewa_AddinCommandsInitServiceFactory$create$in() {
        var $$t_2 = this;
        this._$$pf_EwaControl$p$4.get_serviceRegistry().getServiceAsync(_Ewa.ICommandUIManager, 53, function(service) {
            $$t_2.raiseServiceCreatedEvent($$t_2._$$pf_AddinCommandsInitService$p$4 || ($$t_2._$$pf_AddinCommandsInitService$p$4 = new _Ewa.AddinCommandsInitService($$t_2._$$pf_EwaControl$p$4)));
            if ($$t_2._$$pf_EwaControl$p$4.get_sessionStateManager().get_isSessionActive()) {
                Diag.ULS.sendTraceTag(38410402, 0, 50, 'AddinCommandsInitServiceFactory.Create: calling TryInitializeAddinCommands, isEditMode: [{0}], showCommandUI [{1}] ', $$t_2._$$pf_EwaControl$p$4.get_isEditMode(), !!($$t_2._$$pf_EwaControl$p$4.get_modeCapabilities() & 16384));
                $$t_2._$$pf_AddinCommandsInitService$p$4.tryInitializeAddinCommands();
            }
            else {
                $$t_2._$$pf_EwaControl$p$4.get_sessionStateManager().add_sessionIdChanged($$t_2.$$d__onSessionIdChanged$p$4);
            }
        });
    },
    
    _onSessionIdChanged$p$4: function _Ewa_AddinCommandsInitServiceFactory$_onSessionIdChanged$p$4$in(sender, e) {
        Diag.ULS.sendTraceTag(38410403, 0, 50, 'AddinCommandsInitServiceFactory.OnSessionIdChanged: isSessionActive {0}, isEditMode {1} , showCommandUI [{2}] ', this._$$pf_EwaControl$p$4.get_sessionStateManager().get_isSessionActive(), this._$$pf_EwaControl$p$4.get_isEditMode(), !!(this._$$pf_EwaControl$p$4.get_modeCapabilities() & 16384));
        this._$$pf_AddinCommandsInitService$p$4.tryInitializeAddinCommands();
        this._$$pf_EwaControl$p$4.get_sessionStateManager().remove_sessionIdChanged(this.$$d__onSessionIdChanged$p$4);
    }
}


_Ewa.AddinCommandsInitService.registerClass('_Ewa.AddinCommandsInitService', Common.App.AddinCommands.AddinCommandsInitializerHost, _Ewa.IAddinCommandsInitService);
_Ewa.AddinCommandsInitServiceFactory.registerClass('_Ewa.AddinCommandsInitServiceFactory', _Ewa.ServiceFactoryBase$1.$$(_Ewa.IAddinCommandsInitService));
Type.registerNamespace('_Ewa');

_Ewa._addinCommandsInitBootstrapper = function _Ewa__addinCommandsInitBootstrapper() {
}
_Ewa._addinCommandsInitBootstrapper.main = function _Ewa__addinCommandsInitBootstrapper$main$st() {
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(_Ewa.AddinCommandsInitServiceFactory.attach);
}


_Ewa._addinCommandsInitBootstrapper.registerClass('_Ewa._addinCommandsInitBootstrapper');
_Ewa._addinCommandsInitBootstrapper.main();
window['dynamicScriptLoaderDependencies'] = [{identifier:"appChrome",dependencies:["common","excel-app-intl"]},{identifier:"sharedComments",dependencies:["common","common50","comment-pane-strings"]},{identifier:"dialogControls",dependencies:["common","common50","excel-app-intl"]},{identifier:"catchUpActivity",dependencies:["common","common50","excel-catchup-activity-intl"]},{identifier:"cardviewui",dependencies:["common","common50","excel-cardview-sprite","excel-cardview-strings"]},{identifier:"regionComposer",dependencies:["common"]},{identifier:"excelVersionHistory",dependencies:["common","common50","versionHistory"]},{identifier:"versionHistory",dependencies:["common","common50","office-version-history-strings","friendly-dates-strings","version-history-sprite"]},{identifier:"cellLineage",dependencies:["common","common50","friendly-dates-strings","excel-ribbon-strings"]},{identifier:"excelPrintPreviewer",dependencies:["common","common50","printPreviewer","excel-print-preview-sprite"]},{identifier:"printPreviewer",dependencies:["common","office-common-sprite-lazy"]},{identifier:"iePolyfills",dependencies:[]},{identifier:"excel-app-intl",isLocalized:true},{identifier:"excel-app-intl-mlr",isLocalized:true},{identifier:"excel-ribbon-sprite-lazy",isLocalized:true},{identifier:"excel-app-mlr-sprite-lazy",isLocalized:true},{identifier:"excel-app-intl-mlr-lazy",isLocalized:true},{identifier:"comment-pane-strings",isLocalized:true},{identifier:"tellme-strings",isLocalized:true},{identifier:"excel-catchup-activity-intl",isLocalized:true},{identifier:"excel-cardview-sprite",isLocalized:true},{identifier:"excel-cardview-strings",isLocalized:true},{identifier:"friendly-dates-strings",isLocalized:true},{identifier:"version-history-sprite",isLocalized:true},{identifier:"excel-uiSlice20-sprite",isLocalized:true},{identifier:"office-version-history-strings",isLocalized:true},{identifier:"uiSlice20",dependencies:["excel-uiSlice20-sprite"]},{identifier:"excel-app-mlr-sprite",isLocalized:true},{identifier:"excel-ribbon-strings",isLocalized:true},{identifier:"excel-print-preview-sprite",isLocalized:true},{identifier:"office-common-sprite-lazy",isLocalized:true}];

window['dynamicScriptLoaderDependenciesExperimental'] = [{identifier:"appChrome",dependencies:["common","runtime","excel-app-intl"]},{identifier:"sharedComments",dependencies:["common","common50","runtime","comment-pane-strings"]},{identifier:"dialogControls",dependencies:["common","common50","runtime","excel-app-intl"]},{identifier:"catchUpActivity",dependencies:["common","common50","runtime","excel-catchup-activity-intl"]},{identifier:"cardviewui",dependencies:["common","common50","runtime","excel-cardview-sprite","excel-cardview-strings"]},{identifier:"regionComposer",dependencies:["common","runtime"]},{identifier:"excelVersionHistory",dependencies:["common","common50","runtime","versionHistory"]},{identifier:"versionHistory",dependencies:["common","common50","runtime","office-version-history-strings","friendly-dates-strings","version-history-sprite"]},{identifier:"cellLineage",dependencies:["common","common50","runtime","friendly-dates-strings","excel-ribbon-strings"]},{identifier:"excelPrintPreviewer",dependencies:["common","common50","runtime","printPreviewer","excel-print-preview-sprite"]},{identifier:"printPreviewer",dependencies:["common","runtime","office-common-sprite-lazy"]},{identifier:"iePolyfills",dependencies:["runtime"]},{identifier:"runtime",dependencies:[]},{identifier:"excel-app-intl",isLocalized:true},{identifier:"excel-app-intl-mlr",isLocalized:true},{identifier:"excel-ribbon-sprite-lazy",isLocalized:true},{identifier:"excel-app-mlr-sprite-lazy",isLocalized:true},{identifier:"excel-app-intl-mlr-lazy",isLocalized:true},{identifier:"comment-pane-strings",isLocalized:true},{identifier:"tellme-strings",isLocalized:true},{identifier:"excel-catchup-activity-intl",isLocalized:true},{identifier:"excel-cardview-sprite",isLocalized:true},{identifier:"excel-cardview-strings",isLocalized:true},{identifier:"friendly-dates-strings",isLocalized:true},{identifier:"version-history-sprite",isLocalized:true},{identifier:"excel-uiSlice20-sprite",isLocalized:true},{identifier:"office-version-history-strings",isLocalized:true},{identifier:"uiSlice20",dependencies:["excel-uiSlice20-sprite"]},{identifier:"excel-app-mlr-sprite",isLocalized:true},{identifier:"excel-ribbon-strings",isLocalized:true},{identifier:"excel-print-preview-sprite",isLocalized:true},{identifier:"office-common-sprite-lazy",isLocalized:true}];

var dynamicScriptLoader =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./lib/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../common/temp/node_modules/.pnpm/office.pkgs.visualstudio.com/toposort/1.0.7/node_modules/toposort/index.js":
/*!******************************************************************************************************************************!*\
  !*** C:/_work/5/s/common/temp/node_modules/.pnpm/office.pkgs.visualstudio.com/toposort/1.0.7/node_modules/toposort/index.js ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * Topological sorting function
 *
 * @param {Array} edges
 * @returns {Array}
 */

module.exports = function(edges){
  return toposort(uniqueNodes(edges), edges)
}

module.exports.array = toposort

function toposort(nodes, edges) {
  var cursor = nodes.length
    , sorted = new Array(cursor)
    , visited = {}
    , i = cursor

  while (i--) {
    if (!visited[i]) visit(nodes[i], i, [])
  }

  return sorted

  function visit(node, i, predecessors) {
    if(predecessors.indexOf(node) >= 0) {
      var nodeRep 
      try {
        nodeRep = ", node was:" + JSON.stringify(node)
      } catch(e) {
        nodeRep = ""
      }
      throw new Error('Cyclic dependency' + nodeRep)
    }

    if (!~nodes.indexOf(node)) {
      throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: '+JSON.stringify(node))
    }

    if (visited[i]) return;
    visited[i] = true

    // outgoing edges
    var outgoing = edges.filter(function(edge){
      return edge[0] === node
    })
    if (i = outgoing.length) {
      var preds = predecessors.concat(node)
      do {
        var child = outgoing[--i][1]
        visit(child, nodes.indexOf(child), preds)
      } while (i)
    }

    sorted[--cursor] = node
  }
}

function uniqueNodes(arr){
  var res = []
  for (var i = 0, len = arr.length; i < len; i++) {
    var edge = arr[i]
    if (res.indexOf(edge[0]) < 0) res.push(edge[0])
    if (res.indexOf(edge[1]) < 0) res.push(edge[1])
  }
  return res
}


/***/ }),

/***/ "./lib/DynamicScriptLoader.js":
/*!************************************!*\
  !*** ./lib/DynamicScriptLoader.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var getOrderedScriptAndDependencies_1 = __webpack_require__(/*! ./getOrderedScriptAndDependencies */ "./lib/getOrderedScriptAndDependencies.js");
var loadScript_1 = __webpack_require__(/*! ./loadScript */ "./lib/loadScript.js");
var preloadScript_1 = __webpack_require__(/*! ./preloadScript */ "./lib/preloadScript.js");
var DynamicScriptLoader = /** @class */ (function () {
    function DynamicScriptLoader(config) {
        var _this = this;
        this.config = config;
        // This map contains all the script downloads that were already invoked. If the resource is requested again, the previous promise will be returned.
        this.requestedScripts = new Map();
        this.knownScriptMap = new Map();
        /**
         * Downloads a script with the given identifier. If this script has dependencies, those will also be downloaded. It returns a promise that will resolve
         * when the script loads or fails to load with the URL of the requested script as the result. Calling this multiple times for the same identifier will not cause
         * the script to be downloaded again.
         * @param identifier - The unique identifier for this script as it appears in dependency graphs
         */
        this.loadScript = function (identifier) {
            var _a = _this.config, crossOriginAttributeValue = _a.crossOriginAttributeValue, loadScriptHandler = _a.loadScriptHandler;
            var orderedScripts = getOrderedScriptAndDependencies_1.getOrderedScriptAndDependencies(identifier, _this.knownScriptMap);
            var orderedScriptsPromises = orderedScripts.map(function (script) {
                var cachedPromise = _this.requestedScripts.get(script);
                if (!cachedPromise) {
                    cachedPromise = (loadScriptHandler || loadScript_1.loadScript)(script, _this.getUrlFromScriptIdentifier(script), crossOriginAttributeValue);
                    _this.requestedScripts.set(script, cachedPromise);
                }
                return cachedPromise;
            });
            return Promise.all(orderedScriptsPromises).then(function () { return identifier; });
        };
        /**
         * Preloads a script and all of it's dependencies to improve performance.
         */
        this.preloadScript = function (identifier) {
            var orderedScripts = getOrderedScriptAndDependencies_1.getOrderedScriptAndDependencies(identifier, _this.knownScriptMap);
            orderedScripts.forEach(function (identifier) {
                return preloadScript_1.preloadScript(_this.getUrlFromScriptIdentifier(identifier), _this.config.crossOriginAttributeValue);
            });
        };
        if (config.knownScripts) {
            config.knownScripts.forEach(function (script) {
                var lowercaseScriptIdentifier = script.identifier.toLowerCase();
                if (_this.knownScriptMap.has(lowercaseScriptIdentifier)) {
                    throw new Error("The knownScripts passed into the DynamicScriptLoader config contains multiple entries for the script with identifier: " + lowercaseScriptIdentifier);
                }
                _this.knownScriptMap.set(lowercaseScriptIdentifier, script);
            });
        }
    }
    /**
     * Given an identifier for a script, this returns the URL of that script.
     */
    DynamicScriptLoader.prototype.getUrlFromScriptIdentifier = function (identifier) {
        var scriptInfo = this.knownScriptMap.get(identifier) || { identifier: identifier };
        return this.config.resolveScript(scriptInfo);
    };
    return DynamicScriptLoader;
}());
exports.DynamicScriptLoader = DynamicScriptLoader;
//# sourceMappingURL=DynamicScriptLoader.js.map

/***/ }),

/***/ "./lib/getOrderedScriptAndDependencies.js":
/*!************************************************!*\
  !*** ./lib/getOrderedScriptAndDependencies.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var toposort = __webpack_require__(/*! toposort */ "../../common/temp/node_modules/.pnpm/office.pkgs.visualstudio.com/toposort/1.0.7/node_modules/toposort/index.js");
/*
 * Given a script, get the ordered list of this script and its dependencies
 * ASSUMPTION: All keys for the knownScriptMap are lower cased
 */
function getOrderedScriptAndDependencies(identifier, knownScriptMap) {
    // A set containing all the scripts we are going to download
    var scriptsToDownloadSet = new Set();
    // A list of scripts that will be added to the script map, along with their dependencies.
    // This list should not contain scripts that are already in the scriptMap.
    var scriptsToAdd = [identifier.toLowerCase()];
    // This is the list of all dependency edges.
    // Each entry is in the following order [ parent, child ]
    var dependencyEdges = [];
    var _loop_1 = function () {
        var script = scriptsToAdd.shift();
        scriptsToDownloadSet.add(script);
        // If this script has dependencies, add them to the list of scriptsToAdd.
        // Also add the list of dependency edges
        var scriptInfo = knownScriptMap.get(script);
        if (scriptInfo && scriptInfo.dependencies) {
            scriptInfo.dependencies.forEach(function (dep) {
                var lowerDep = dep.toLowerCase();
                // Only add scripts that we have not already visited
                if (!scriptsToDownloadSet.has(lowerDep)) {
                    scriptsToAdd.push(lowerDep);
                }
                // Add all the edges to the graph corresponding to this dependency
                dependencyEdges.push([lowerDep, script]);
            });
        }
    };
    while (scriptsToAdd.length > 0) {
        _loop_1();
    }
    var scriptsToDownloadArray = [];
    scriptsToDownloadSet.forEach(function (item) { return scriptsToDownloadArray.push(item); });
    // Once we have all the edges in the graph, do a topological sort to return a legal ordering of script tags
    return toposort.array(scriptsToDownloadArray, dependencyEdges);
}
exports.getOrderedScriptAndDependencies = getOrderedScriptAndDependencies;
//# sourceMappingURL=getOrderedScriptAndDependencies.js.map

/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./DynamicScriptLoader */ "./lib/DynamicScriptLoader.js"));
__export(__webpack_require__(/*! ./loadScript */ "./lib/loadScript.js"));
__export(__webpack_require__(/*! ./preloadScript */ "./lib/preloadScript.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./lib/loadScript.js":
/*!***************************!*\
  !*** ./lib/loadScript.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Adds a script tag to the page. Returns a promise that will be invoked with the URL on success or failure.
 * @param identifier - A friendly name for the script that will be the value returned when the returned promise resolves
 * @param scriptUrl - The URL that will be set as the src of the script tag
 * @param crossOriginAttributeValue - The crossorigin attribute to apply on the script tag
 * @param maxRetries - The number of times that we should try to load a script in the event that it fails. The default is 1
 */
function loadScript(identifier, scriptUrl, crossOriginAttributeValue, maxRetries) {
    return loadScriptInternal(identifier, scriptUrl, crossOriginAttributeValue, maxRetries);
}
exports.loadScript = loadScript;
function loadScriptInternal(identifier, scriptUrl, crossOriginAttributeValue, retriesRemaining, outerResolve, outerReject) {
    return new Promise(function (resolve, reject) {
        var script = document.createElement('script');
        // Dynamically added scripts are async by default. By setting async to false, we are enabling the scripts
        // to be downloaded in parallel, but executed in order. This ensures that a script is executed after all of
        // its dependencies have been loaded and executed.
        script.async = false;
        script.src = scriptUrl;
        if (crossOriginAttributeValue !== undefined) {
            script.crossOrigin = crossOriginAttributeValue;
        }
        script.onload = function () {
            outerResolve ? outerResolve(identifier) : resolve(identifier);
        };
        script.onerror = function () {
            // if the script fails to load AND there are retries left, remove the tag from the page and recurse
            if (retriesRemaining && retriesRemaining > 0) {
                document.head.removeChild(script);
                // tslint:disable-next-line: no-floating-promises
                loadScriptInternal(identifier, scriptUrl, crossOriginAttributeValue, retriesRemaining - 1, outerResolve || resolve, outerReject || reject);
            }
            else {
                var err = new Error("Failed to download the script with identifier: " + identifier + " at url: " + scriptUrl);
                outerReject ? outerReject(err) : reject(err);
            }
        };
        document.head.appendChild(script);
    });
}
//# sourceMappingURL=loadScript.js.map

/***/ }),

/***/ "./lib/preloadScript.js":
/*!******************************!*\
  !*** ./lib/preloadScript.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Adds a prefetch tag to the page, which gives the browser a hint to start downloading a script tag that will be needed later.
 * @param scriptUrl - The URL of the script to load
 */
function preloadScript(scriptUrl, crossOriginAttributeValue) {
    var link = document.createElement('link');
    link.rel = 'preload';
    link.href = scriptUrl;
    link.setAttribute('as', 'script');
    if (crossOriginAttributeValue !== undefined) {
        link.crossOrigin = crossOriginAttributeValue;
    }
    document.head.appendChild(link);
}
exports.preloadScript = preloadScript;
//# sourceMappingURL=preloadScript.js.map

/***/ })

/******/ });
//# sourceMappingURL=dynamicScriptLoader.js.mapwindow["dynamicScriptLoader"] = dynamicScriptLoader;


Type.registerNamespace('_Ewa');

_Ewa.DynamicScriptLoaderProviderFactory = function _Ewa_DynamicScriptLoaderProviderFactory(ewa) {
    this.$$d__loadScript$p$4 = Function.createDelegate(this, this._loadScript$p$4);
    _Ewa.DynamicScriptLoaderProviderFactory.initializeBase(this);
    this._$$pf_EwaControl$p$4 = ewa;
    this.raiseFactoryReadyEvent();
}
_Ewa.DynamicScriptLoaderProviderFactory.attach = function _Ewa_DynamicScriptLoaderProviderFactory$attach$st(ewa) {
    ewa.get_serviceRegistry().registerService(_Ewa.IServiceFactory$1.$$(Common.IDynamicScriptLoaderProvider), 284, new _Ewa.DynamicScriptLoaderProviderFactory(ewa));
}
_Ewa.DynamicScriptLoaderProviderFactory.isMapSupported = function _Ewa_DynamicScriptLoaderProviderFactory$isMapSupported$st() {
    var result = true;
    try {
        result = (window.Map !== undefined); var myMap = new Map();;
    }
    catch ($$e_1) {
        result = false;
    }
    return result;
}
_Ewa.DynamicScriptLoaderProviderFactory.prototype = {
    _$$pf_EwaControl$p$4: null,
    
    create: function _Ewa_DynamicScriptLoaderProviderFactory$create$in() {
        if (!_Ewa.DynamicScriptLoaderProviderFactory.isMapSupported()) {
            Diag.ULS.sendTraceTag(50730753, 0, 15, 'DynamicScriptLoaderBootstrapper.Main: Map is undefined, DynamicScriptLoaderProvider service will never be registered.');
            return;
        }
        var config = Common.DynamicScriptLoaderConfigBuilder.buildConfig('anonymous', 'dynamicScriptLoaderDependencies');
        config.loadScriptHandler = this.$$d__loadScript$p$4;
        var dynamicScriptLoaderProvider = new Common.DynamicScriptLoaderProvider(new dynamicScriptLoader.DynamicScriptLoader(config));
        this._$$pf_EwaControl$p$4.get_serviceRegistry().registerService(Common.IDynamicScriptLoaderProvider, 283, dynamicScriptLoaderProvider);
        var $$t_2 = this;
        Common.Utils.Container.get_instance().register(Common.IDynamicScriptLoaderProvider, '').singleInstance().usingFactory(function() {
            return dynamicScriptLoaderProvider;
        });
        this.raiseServiceCreatedEvent(dynamicScriptLoaderProvider);
    },
    
    _loadScript$p$4: function _Ewa_DynamicScriptLoaderProviderFactory$_loadScript$p$4$in(identifier, scriptUrl, crossOriginAttributeValue) {
        var $$t_T = this;
        return new Promise(function(resolve, reject) {
            _Ewa.ClientHostingPlatform.loadAbsoluteUrlScript(scriptUrl, 4, false, false, false, 0, 4).CW(function(task) {
                if (task.get_status() === 6) {
                    resolve(identifier);
                }
                else {
                    var message = String.format('(Ewa)DynamicScriptLoader.LoadScript: Failed to download the script with identifier: {0} at url: {1}.', identifier, scriptUrl);
                    if (task.get_exception()) {
                        message += ' ' + task.get_exception().message;
                    }
                    Diag.ULS.sendTraceTag(594925004, 0, 15, message);
                    reject(Error.create(message));
                }
            });
        });
    },
    
    dispose: function _Ewa_DynamicScriptLoaderProviderFactory$dispose$in() {
        this._$$pf_EwaControl$p$4 = null;
        _Ewa.BaseEventSource.prototype.dispose.call(this);
    }
}


_Ewa.DynamicScriptLoaderProviderFactory.registerClass('_Ewa.DynamicScriptLoaderProviderFactory', _Ewa.ServiceFactoryBase$1.$$(Common.IDynamicScriptLoaderProvider));
Type.registerNamespace('_Ewa');

_Ewa._dynamicScriptLoaderBootstrapper = function _Ewa__dynamicScriptLoaderBootstrapper() {
}
_Ewa._dynamicScriptLoaderBootstrapper.main = function _Ewa__dynamicScriptLoaderBootstrapper$main$st() {
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(function(ewa) {
        _Ewa.DynamicScriptLoaderProviderFactory.attach(ewa);
    });
}


_Ewa._dynamicScriptLoaderBootstrapper.registerClass('_Ewa._dynamicScriptLoaderBootstrapper');
_Ewa._dynamicScriptLoaderBootstrapper.main();
Type.registerNamespace('_Ewa');

_Ewa._editNotificationBootstrapper = function _Ewa__editNotificationBootstrapper() {
}
_Ewa._editNotificationBootstrapper.main = function _Ewa__editNotificationBootstrapper$main$st() {
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(_Ewa._editNotificationManagerFactory.attach);
}


_Ewa._editNotificationManagerFactory = function _Ewa__editNotificationManagerFactory(ewaControl) {
    _Ewa._editNotificationManagerFactory.initializeBase(this);
    this._ewaControl$p$4 = ewaControl;
    this.raiseFactoryReadyEvent();
}
_Ewa._editNotificationManagerFactory.attach = function _Ewa__editNotificationManagerFactory$attach$st(ewaControl) {
    ewaControl.get_serviceRegistry().registerService(_Ewa.IServiceFactory$1.$$(Common.Interface.IEditNotificationManager), 162, new _Ewa._editNotificationManagerFactory(ewaControl));
}
_Ewa._editNotificationManagerFactory.prototype = {
    _ewaControl$p$4: null,
    
    create: function _Ewa__editNotificationManagerFactory$create$in() {
        if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('EditNotificationIsEnabled')) {
            var hostPostmessengerTask = _Ewa.GetServiceTaskFactory.create(Common.IHostPostmessenger, this._ewaControl$p$4.get_serviceRegistry(), 137, this.get_cancelOnDisposeToken(), this.get_scriptLoadFlavor());
            var editNotificationManager = new Common.App.HostNotification.EditNotificationManager(Common.AFrameworkApplication.appSettingsManager.getIntAppSetting('EditNotificationTimeIntervalMs', 300000), Common.TaskManager.get_instance(), hostPostmessengerTask, new Common.App.HostNotification.EditNotificationEventSource(), null, Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('EditNotificationPostMessageIsEnabled'), 0);
            this.raiseServiceCreatedEvent(editNotificationManager);
        }
    }
}


_Ewa._editNotificationBootstrapper.registerClass('_Ewa._editNotificationBootstrapper');
_Ewa._editNotificationManagerFactory.registerClass('_Ewa._editNotificationManagerFactory', _Ewa.ServiceFactoryBase$1.$$(Common.Interface.IEditNotificationManager));
_Ewa._editNotificationBootstrapper.main();
Type.registerNamespace('_Ewa');

_Ewa.FileOpSliceDownloaderBootStraper = function _Ewa_FileOpSliceDownloaderBootStraper(ewa) {
    this.$$d__onModeChanged$p$1 = Function.createDelegate(this, this._onModeChanged$p$1);
    this.$$d__onCommandUIAttachCompleted$p$1 = Function.createDelegate(this, this._onCommandUIAttachCompleted$p$1);
    _Ewa.FileOpSliceDownloaderBootStraper.initializeBase(this);
    this._$$pf_EwaControl$p$1 = ewa;
}
_Ewa.FileOpSliceDownloaderBootStraper.main = function _Ewa_FileOpSliceDownloaderBootStraper$main$st() {
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(function(ewa) {
        new _Ewa.FileOpSliceDownloaderBootStraper(ewa)._downloadFileOpSlice$p$1();
    });
}
_Ewa.FileOpSliceDownloaderBootStraper.prototype = {
    _$$pf_EwaControl$p$1: null,
    
    dispose: function _Ewa_FileOpSliceDownloaderBootStraper$dispose$in() {
        if (!!(!!this._$$pf_EwaControl$p$1 & !!_Ewa.CommandUIExtensions.commandUIEventManager(this._$$pf_EwaControl$p$1))) {
            _Ewa.CommandUIExtensions.commandUIEventManager(this._$$pf_EwaControl$p$1).remove_onCommandUIAttachCompleted(this.$$d__onCommandUIAttachCompleted$p$1);
            this._$$pf_EwaControl$p$1.get_sessionStateManager().remove_applicationModeChanged(this.$$d__onModeChanged$p$1);
        }
        this._$$pf_EwaControl$p$1 = null;
        _Ewa.CancelOnDisposeTokenSource.prototype.dispose.call(this);
    },
    
    _downloadFileOpSlice$p$1: function _Ewa_FileOpSliceDownloaderBootStraper$_downloadFileOpSlice$p$1$in() {
        if (Common.AFrameworkApplication.isRenameSupported()) {
            if (!this._initializeRenameFileManager$p$1()) {
                _Ewa.CommandUIExtensions.commandUIEventManager(this._$$pf_EwaControl$p$1).add_onCommandUIAttachCompleted(this.$$d__onCommandUIAttachCompleted$p$1);
                this._$$pf_EwaControl$p$1.get_sessionStateManager().add_applicationModeChanged(this.$$d__onModeChanged$p$1);
            }
        }
    },
    
    _initializeRenameFileManager$p$1: function _Ewa_FileOpSliceDownloaderBootStraper$_initializeRenameFileManager$p$1$in() {
        if (this._$$pf_EwaControl$p$1.get_isEditMode() && (Common.AFrameworkApplication.documentTitleInputElement || _Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isReactSharedHeaderUxEnabled())) {
            _Ewa.CommandUIExtensions.commandUIEventManager(this._$$pf_EwaControl$p$1).remove_onCommandUIAttachCompleted(this.$$d__onCommandUIAttachCompleted$p$1);
            var $$t_2 = this;
            _Ewa.TaskExtensions.cw(_Ewa.GetServiceTaskFactory.create(_Ewa.IRenameFileManager, this._$$pf_EwaControl$p$1.get_serviceRegistry(), 119, this.get_cancelOnDisposeToken(), 1), function(task) {
                (task).get_result().initialize();
            }, this.get_cancelOnDisposeToken(), 3);
            return true;
        }
        return false;
    },
    
    _onModeChanged$p$1: function _Ewa_FileOpSliceDownloaderBootStraper$_onModeChanged$p$1$in(sender, args) {
        this._initializeRenameFileManager$p$1();
    },
    
    _onCommandUIAttachCompleted$p$1: function _Ewa_FileOpSliceDownloaderBootStraper$_onCommandUIAttachCompleted$p$1$in(sender, args) {
        this._initializeRenameFileManager$p$1();
    }
}


_Ewa.FileOpSliceDownloaderBootStraper.registerClass('_Ewa.FileOpSliceDownloaderBootStraper', _Ewa.CancelOnDisposeTokenSource);
_Ewa.FileOpSliceDownloaderBootStraper.main();
Type.registerNamespace('_Ewa');

_Ewa.MsFormInfoUpdatingService = function _Ewa_MsFormInfoUpdatingService(ewa) {
    this.$$d__onMsFormDeleted$p$0 = Function.createDelegate(this, this._onMsFormDeleted$p$0);
    this.$$d__updateMsFormInfoAndAutoFocus$p$0 = Function.createDelegate(this, this._updateMsFormInfoAndAutoFocus$p$0);
    this._$$pf_EwaControl$p$0 = ewa;
}
_Ewa.MsFormInfoUpdatingService.prototype = {
    _formInformation$p$0: null,
    _$$pf_EwaControl$p$0: null,
    
    tryInitializeMsFormInfoUpdating: function _Ewa_MsFormInfoUpdatingService$tryInitializeMsFormInfoUpdating$in() {
        this._formInformation$p$0 = _Ewa.MsFormInformation.get_current();
        this._updateMsFormInfoAndAutoFocus$p$0(null, null);
        this._$$pf_EwaControl$p$0.get_sheets().add_itemInserted(this.$$d__updateMsFormInfoAndAutoFocus$p$0);
        this._$$pf_EwaControl$p$0.get_sheets().add_itemDeleted(this.$$d__onMsFormDeleted$p$0);
    },
    
    dispose: function _Ewa_MsFormInfoUpdatingService$dispose$in() {
        this._$$pf_EwaControl$p$0.get_sheets().remove_itemInserted(this.$$d__updateMsFormInfoAndAutoFocus$p$0);
    },
    
    _isValidMsFormConnected$p$0: function _Ewa_MsFormInfoUpdatingService$_isValidMsFormConnected$p$0$in(originalWorkbookId) {
        if (_Ewa.StringExtensions.isNullOrEmpty(originalWorkbookId)) {
            return true;
        }
        var regEx = new RegExp('-', 'g');
        var workbookUrl = this._$$pf_EwaControl$p$0.get_workbookContext().MsFormDocUrl.toLowerCase();
        if (workbookUrl.indexOf(originalWorkbookId.toLowerCase()) >= 0 || workbookUrl.indexOf(originalWorkbookId.toLowerCase().replace(regEx, '')) >= 0) {
            return true;
        }
        return false;
    },
    
    _updateMsFormInfoAndAutoFocus$p$0: function _Ewa_MsFormInfoUpdatingService$_updateMsFormInfoAndAutoFocus$p$0$in(sender, e) {
        if (!this._$$pf_EwaControl$p$0.get_sessionStateManager().get_fullDocumentOptions().get(61) || _Ewa.WorkbookOptionsExtensions.isMsFormInfoUpdated(this._$$pf_EwaControl$p$0.get_workbookOptions())) {
            if (_Ewa.WorkbookOptionsExtensions.isMsFormInfoUpdated(this._$$pf_EwaControl$p$0.get_workbookOptions()) && e && e.get_item().get_name() === this._formInformation$p$0.get_formResponseSheetName()) {
                this._autoFocusToMsFormResponseSheet$p$0();
            }
            return;
        }
        if (this._$$pf_EwaControl$p$0.get_sheets().existsName(this._formInformation$p$0.get_formMetaDataSheetName())) {
            var sheetRange = ({});
            sheetRange.SheetName = this._formInformation$p$0.get_formMetaDataSheetName();
            sheetRange.NamedObjectName = this._formInformation$p$0.get_formMetaDataSheetName();
            sheetRange.FirstColumn = 0;
            sheetRange.FirstRow = 0;
            sheetRange.LastColumn = 0;
            sheetRange.LastRow = 2;
            var $$t_C = this;
            var callback = function(result, userContext, methodName) {
                if (!_Ewa.WorkbookOptionsExtensions.isMsFormInfoUpdated($$t_C._$$pf_EwaControl$p$0.get_workbookOptions())) {
                    if (result && result.Result) {
                        $$t_C._$$pf_EwaControl$p$0.get_workbookContext().MsFormId = (result.Result)[0][0];
                        $$t_C._formInformation$p$0.set_formResponseSheetName((result.Result)[1][0]);
                        var originalWorkbookId = (result.Result)[2][0];
                        $$t_C._setContextOption$p$0(!_Ewa.StringExtensions.isNullOrEmpty($$t_C._$$pf_EwaControl$p$0.get_workbookContext().MsFormId) && $$t_C._isValidMsFormConnected$p$0(originalWorkbookId), 1024);
                        $$t_C._autoFocusToMsFormResponseSheet$p$0();
                    }
                    if (_Ewa.WorkbookOptionsExtensions.hasMsForm($$t_C._$$pf_EwaControl$p$0.get_workbookOptions())) {
                        if (e) {
                            Diag.ULS.sendTraceTag(20001736, 0, 50, 'Created MsForm successfully, Form Id:{0}', Common.StringUtils.calcHashCode($$t_C._$$pf_EwaControl$p$0.get_workbookContext().MsFormId).toString());
                        }
                        else {
                            Diag.ULS.sendTraceTag(22591708, 0, 50, 'Reopening workbook that is connected to MsForm, Form Id:{0}', Common.StringUtils.calcHashCode($$t_C._$$pf_EwaControl$p$0.get_workbookContext().MsFormId).toString());
                        }
                    }
                    if (_Ewa.WorkbookOptionsExtensions.hasMsForm($$t_C._$$pf_EwaControl$p$0.get_workbookOptions()) && !e) {
                        Diag.ULS.sendTraceTag(22638932, 0, 50, 'reopening workbook that is connected to MsForm, Form Id:{0}', Common.StringUtils.calcHashCode($$t_C._$$pf_EwaControl$p$0.get_workbookContext().MsFormId).toString());
                    }
                    if (_Ewa.WorkbookOptionsExtensions.hasMsForm($$t_C._$$pf_EwaControl$p$0.get_workbookOptions()) || !e) {
                        $$t_C._setContextOption$p$0(true, 2048);
                    }
                }
            };
            var ajaxCallContext = this._$$pf_EwaControl$p$0.get_connectionManager().get_privateWebServiceProxy().createAjaxCallContext(false);
            var $$t_D = this;
            var callWebServiceDelegate = function(successCallback, failedCallback) {
                return _Ewa.EwaInternalWebServiceProxyExtensions.getRangeValues($$t_D._$$pf_EwaControl$p$0.get_connectionManager().get_omWebServiceProxy(), sheetRange, false, _Ewa.WebServiceHelperMethods.chainSuccessCallbacks(successCallback, callback), failedCallback, null, ajaxCallContext);
            };
            this._$$pf_EwaControl$p$0.get_userOperationManager().enqueueProgrammaticOperation(new _Ewa.UserWebMethodOperation(159, 0, callWebServiceDelegate, 16, null));
        }
        else if (!e) {
            this._setContextOption$p$0(true, 2048);
        }
    },
    
    _onMsFormDeleted$p$0: function _Ewa_MsFormInfoUpdatingService$_onMsFormDeleted$p$0$in(sender, e) {
        if (e && e.get_item().get_name() === this._formInformation$p$0.get_formMetaDataSheetName()) {
            this._setContextOption$p$0(false, 1024);
            this._setContextOption$p$0(true, 2048);
        }
    },
    
    _autoFocusToMsFormResponseSheet$p$0: function _Ewa_MsFormInfoUpdatingService$_autoFocusToMsFormResponseSheet$p$0$in() {
        if (_Ewa.WorkbookOptionsExtensions.hasMsForm(this._$$pf_EwaControl$p$0.get_workbookOptions()) && !_Ewa.StringExtensions.isNullOrEmpty(this._formInformation$p$0.get_formResponseSheetName()) && this._$$pf_EwaControl$p$0.get_sheets().get_activeItem().get_name() !== this._formInformation$p$0.get_formResponseSheetName()) {
            if (this._$$pf_EwaControl$p$0.get_sheets().existsName(this._formInformation$p$0.get_formResponseSheetName())) {
                this._$$pf_EwaControl$p$0.get_sheets().getItemByName(this._formInformation$p$0.get_formResponseSheetName()).activate(false);
            }
        }
    },
    
    _setContextOption$p$0: function _Ewa_MsFormInfoUpdatingService$_setContextOption$p$0$in(value, option) {
        this._$$pf_EwaControl$p$0.get_workbookContext().Options = _Ewa.HelperMethods.setFlag(Number, value, this._$$pf_EwaControl$p$0.get_workbookContext().Options, option);
    }
}


_Ewa.MsFormInfoUpdatingServiceFactory = function _Ewa_MsFormInfoUpdatingServiceFactory(ewa) {
    _Ewa.MsFormInfoUpdatingServiceFactory.initializeBase(this);
    this._$$pf_EwaControl$p$4 = ewa;
    this.raiseFactoryReadyEvent();
}
_Ewa.MsFormInfoUpdatingServiceFactory.attach = function _Ewa_MsFormInfoUpdatingServiceFactory$attach$st(ewaControl) {
    ewaControl.get_serviceRegistry().registerService(_Ewa.IServiceFactory$1.$$(_Ewa.IMsFormInfoUpdatingService), 236, new _Ewa.MsFormInfoUpdatingServiceFactory(ewaControl));
}
_Ewa.MsFormInfoUpdatingServiceFactory.prototype = {
    _$$pf_EwaControl$p$4: null,
    _$$pf_MsFormInfoUpdatingService$p$4: null,
    
    create: function _Ewa_MsFormInfoUpdatingServiceFactory$create$in() {
        this.raiseServiceCreatedEvent(this._$$pf_MsFormInfoUpdatingService$p$4 || (this._$$pf_MsFormInfoUpdatingService$p$4 = new _Ewa.MsFormInfoUpdatingService(this._$$pf_EwaControl$p$4)));
        this._$$pf_MsFormInfoUpdatingService$p$4.tryInitializeMsFormInfoUpdating();
    }
}


_Ewa.MsFormInfoUpdatingService.registerClass('_Ewa.MsFormInfoUpdatingService', null, _Ewa.IMsFormInfoUpdatingService, Sys.IDisposable);
_Ewa.MsFormInfoUpdatingServiceFactory.registerClass('_Ewa.MsFormInfoUpdatingServiceFactory', _Ewa.ServiceFactoryBase$1.$$(_Ewa.IMsFormInfoUpdatingService));
Type.registerNamespace('_Ewa');

_Ewa._msFormInfoUpdatingBootstrapper = function _Ewa__msFormInfoUpdatingBootstrapper() {
}
_Ewa._msFormInfoUpdatingBootstrapper.main = function _Ewa__msFormInfoUpdatingBootstrapper$main$st() {
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(_Ewa.MsFormInfoUpdatingServiceFactory.attach);
}


_Ewa._msFormInfoUpdatingBootstrapper.registerClass('_Ewa._msFormInfoUpdatingBootstrapper');
_Ewa._msFormInfoUpdatingBootstrapper.main();
Type.registerNamespace('_Ewa');

_Ewa.IStyleSheetShim = function() {}
_Ewa.IStyleSheetShim.registerInterface('_Ewa.IStyleSheetShim');


_Ewa.ISwitcher = function() {}
_Ewa.ISwitcher.registerInterface('_Ewa.ISwitcher');


_Ewa._commonStyleSheet = function _Ewa__commonStyleSheet() {
}
_Ewa._commonStyleSheet.prototype = {
    
    importStyleSheetFromText: function _Ewa__commonStyleSheet$importStyleSheetFromText$in(text) {
        Common.StyleSheet.importStyleSheetFromText(text);
    }
}


_Ewa._officeSwitcher = function _Ewa__officeSwitcher() {
}
_Ewa._officeSwitcher.prototype = {
    
    attachEvents: function _Ewa__officeSwitcher$attachEvents$in(controls) {
        Common.AppSwitcher.attachSwitcherEvents(controls);
        Common.AppSwitcher.attachSwitcherTileEvents(controls);
    },
    
    openDropdown: function _Ewa__officeSwitcher$openDropdown$in() {
        Common.AppSwitcher.openSwitcher();
    },
    
    closeDropdown: function _Ewa__officeSwitcher$closeDropdown$in() {
        Common.AppSwitcher.closeSwitcher();
    }
}


_Ewa.OfficeSwitcherCommandHandler = function _Ewa_OfficeSwitcherCommandHandler(ewaControl, frameElement, switcher, officeSwitcherInitializer, keyInputManager, taskScheduler) {
    this.$$d__onWorkbookOpened$p$2 = Function.createDelegate(this, this._onWorkbookOpened$p$2);
    _Ewa.OfficeSwitcherCommandHandler.initializeBase(this, [ false ]);
    this._frameElement$p$2 = frameElement;
    this._keyInputManager$p$2 = keyInputManager;
    this._officeSwitcherInitializer$p$2 = officeSwitcherInitializer;
    this._switcher$p$2 = switcher;
    this._ewaControl$p$2 = ewaControl;
    this._taskScheduler$p$2 = taskScheduler || $$sc.TaskScheduler.get_default();
    this._ewaControl$p$2.add_workbookOpened(this.$$d__onWorkbookOpened$p$2);
}
_Ewa.OfficeSwitcherCommandHandler.prototype = {
    _ewaControl$p$2: null,
    _frameElement$p$2: null,
    _keyInputManager$p$2: null,
    _officeSwitcherInitializer$p$2: null,
    _switcher$p$2: null,
    _taskScheduler$p$2: null,
    _eventsAttached$p$2: false,
    
    dispose: function _Ewa_OfficeSwitcherCommandHandler$dispose$in() {
        if (this._ewaControl$p$2) {
            this._ewaControl$p$2.remove_workbookOpened(this.$$d__onWorkbookOpened$p$2);
        }
        this._eventsAttached$p$2 = false;
        _Ewa.ExplicitDisposable.prototype.dispose.call(this);
    },
    
    shouldDisable: function _Ewa_OfficeSwitcherCommandHandler$shouldDisable$in(selectionMode, command) {
        return false;
    },
    
    executeCommand: function _Ewa_OfficeSwitcherCommandHandler$executeCommand$in(selectionMode, commandInfo, properties, data) {
        var returnedTask;
        var command = commandInfo.get_command();
        switch (command) {
            case 546757057:
                returnedTask = this._handleOpenOfficeSwitcherAsync$p$2();
                break;
            case -464428069:
                returnedTask = this._handleCloseSwitcherAsync$p$2();
                break;
            default:
                returnedTask = _Ewa.RibbonCommandExtensions.createTaskForUnhandledCommand(command);
                break;
        }
        return returnedTask;
    },
    
    canExecuteCommand: function _Ewa_OfficeSwitcherCommandHandler$canExecuteCommand$in(selectionMode, commandInfo, properties, data) {
        var canExecuteCommand = false;
        switch (commandInfo.get_command()) {
            case 546757057:
            case -464428069:
                canExecuteCommand = true;
                break;
        }
        return canExecuteCommand;
    },
    
    populateMenu: function _Ewa_OfficeSwitcherCommandHandler$populateMenu$in(selectionMode, populateCommand, menuProperties) {
        return false;
    },
    
    _handleCloseSwitcherAsync$p$2: function _Ewa_OfficeSwitcherCommandHandler$_handleCloseSwitcherAsync$p$2$in() {
        var $$t_2 = this;
        return _Ewa.TaskExtensions.cs(this._officeSwitcherInitializer$p$2.initializeAsync(), function(unused) {
            $$t_2._keyInputManager$p$2.deinitializeForElement($$t_2._frameElement$p$2);
            $$t_2._switcher$p$2.closeDropdown();
        }, this.get_cancelOnDisposeToken(), 3, this._taskScheduler$p$2);
    },
    
    _handleOpenOfficeSwitcherAsync$p$2: function _Ewa_OfficeSwitcherCommandHandler$_handleOpenOfficeSwitcherAsync$p$2$in() {
        var $$t_4 = this;
        return _Ewa.TaskExtensions.cs(this._officeSwitcherInitializer$p$2.initializeAsync(), function(unused) {
            if (!$$t_4._eventsAttached$p$2) {
                var breadcrumbControls = $$t_4._ewaControl$p$2.get_breadcrumbControls();
                Diag.ULS.debugAssertTag(6034373, 0, !!breadcrumbControls, 'OfficeSwitcherCommandHandler.HandleOpenOfficeSwitcherAsync: expecting not null breadcrumb');
                $$t_4._switcher$p$2.attachEvents(breadcrumbControls);
                $$t_4._eventsAttached$p$2 = true;
            }
            $$t_4._keyInputManager$p$2.initializeForElement($$t_4._frameElement$p$2);
            $$t_4._switcher$p$2.openDropdown();
        }, this.get_cancelOnDisposeToken(), 3, this._taskScheduler$p$2);
    },
    
    _onWorkbookOpened$p$2: function _Ewa_OfficeSwitcherCommandHandler$_onWorkbookOpened$p$2$in(sender, e) {
        if (e.get_isSwitchCachedContent()) {
            return;
        }
        this._eventsAttached$p$2 = false;
    }
}


_Ewa.OfficeSwitcherCommandHandlerFactory = function _Ewa_OfficeSwitcherCommandHandlerFactory(ewaControl) {
    _Ewa.OfficeSwitcherCommandHandlerFactory.initializeBase(this, [ ewaControl ]);
}
_Ewa.OfficeSwitcherCommandHandlerFactory.attach = function _Ewa_OfficeSwitcherCommandHandlerFactory$attach$st(ewa) {
    _Ewa.CommandHandlerFactoryBase.attachAndRegister(138, new _Ewa.OfficeSwitcherCommandHandlerFactory(ewa));
}
_Ewa.OfficeSwitcherCommandHandlerFactory.prototype = {
    _$$pf_OfficeSwitcherCommandHandler$p$5: null,
    
    dispose: function _Ewa_OfficeSwitcherCommandHandlerFactory$dispose$in() {
        System.IDisposableExtensions.safeDispose(this._$$pf_OfficeSwitcherCommandHandler$p$5);
        this._$$pf_OfficeSwitcherCommandHandler$p$5 = null;
        _Ewa.CommandHandlerFactoryBase.prototype.dispose.call(this);
    },
    
    createCommandHandlersAsync: function _Ewa_OfficeSwitcherCommandHandlerFactory$createCommandHandlersAsync$in() {
        var ewaControl = this.get_ewaControl();
        var $$t_3 = this;
        _Ewa.TaskExtensions.cw(_Ewa.GetServiceTaskFactory.create(_Ewa.IOfficeSwitcherInitializer, this.get_ewaControl().get_serviceRegistry(), 140, this.get_cancelOnDisposeToken(), -2), function(officeSwitcherInitializerTask) {
            $$t_3._$$pf_OfficeSwitcherCommandHandler$p$5 = new _Ewa.OfficeSwitcherCommandHandler(ewaControl, ewaControl.get_frame().getDOMElement(), new _Ewa._officeSwitcher(), (officeSwitcherInitializerTask).get_result(), ewaControl.get_frame().get_theKeyInputManager(), null);
            $$t_3.onCommandHandlersCreated([ $$t_3._$$pf_OfficeSwitcherCommandHandler$p$5 ], null);
        }, this.get_cancelOnDisposeToken(), 3);
    }
}


_Ewa.OfficeSwitcherInitializer = function _Ewa_OfficeSwitcherInitializer(ewaControl, frameElement, proxy, styleSheet) {
    this._ewaControl$p$0 = ewaControl;
    this._proxy$p$0 = proxy;
    this._styleSheet$p$0 = styleSheet;
    this._frameElement$p$0 = frameElement;
    ewaControl.get_serviceRegistry().registerService(_Ewa.IOfficeSwitcherInitializer, 139, this);
}
_Ewa.OfficeSwitcherInitializer.prototype = {
    _frameElement$p$0: null,
    _ewaControl$p$0: null,
    _proxy$p$0: null,
    _styleSheet$p$0: null,
    _uiCultureTagLcid$p$0: 0,
    _downloadSwitcherTask$p$0: null,
    
    get__downloadSwitcherTask$p$0: function _Ewa_OfficeSwitcherInitializer$get__downloadSwitcherTask$p$0$in() {
        if (!this._downloadSwitcherTask$p$0) {
            this._uiCultureTagLcid$p$0 = this._ewaControl$p$0.get_uiCultureTagLcid();
            var tcs = _Ewa.TimedTaskScheduler.createTimedTaskCompletionSource(Boolean, _Ewa.TelemetryExtensions.telemetryManager(), this._ewaControl$p$0.get_cancelOnDisposeToken(), 'Task', Object.getType(this).getName());
            this._downloadSwitcherTask$p$0 = tcs.get_task();
            var $$t_D = this, $$t_E = this;
            _Ewa.OfficeSwitcherWebServiceProxyExtensions.getOfficeSwitcherContent(this._proxy$p$0, function(result, context, name) {
                $$t_D._injectSwitcherContent$p$0(result, tcs);
                if (Common.AFrameworkApplication.useO365ShellService) {
                    _Ewa.ClientHostingPlatform.loadScript(24, 0, false, false, 0, -1);
                }
            }, function(args, context, name) {
                tcs.SX(Error.create('Network'));
            }, null, this._uiCultureTagLcid$p$0, Common.AFrameworkApplication.useO365ShellService);
        }
        return this._downloadSwitcherTask$p$0;
    },
    
    initializeAsync: function _Ewa_OfficeSwitcherInitializer$initializeAsync$in() {
        return this.get__downloadSwitcherTask$p$0();
    },
    
    _injectSwitcherContent$p$0: function _Ewa_OfficeSwitcherInitializer$_injectSwitcherContent$p$0$in(result, tcs) {
        Diag.ULS.debugAssertTag(16869267, 0, !_Ewa.EwaErrorExtensions.areServerMessagesPresent(result.Errors), 'Expecting no errors');
        var response = result.Result;
        if (!response.Html || !response.LocalizedCss) {
            tcs.SX(Error.create('Empty Response'));
            return;
        }
        this._styleSheet$p$0.importStyleSheetFromText(response.LocalizedCss);
        var element = document.createElement('div');
        _Ewa.DOMElementExtensions.setInnerHtmlSafe(element, response.Html);
        this._frameElement$p$0.appendChild(element);
        tcs.setResult(true);
    }
}


_Ewa.OfficeSwitcherInitializerFactory = function _Ewa_OfficeSwitcherInitializerFactory(ewa) {
    _Ewa.OfficeSwitcherInitializerFactory.initializeBase(this);
    this._ewaControl$p$4 = ewa;
    this.raiseFactoryReadyEvent();
}
_Ewa.OfficeSwitcherInitializerFactory.attach = function _Ewa_OfficeSwitcherInitializerFactory$attach$st(ewa) {
    ewa.get_serviceRegistry().registerService(_Ewa.IServiceFactory$1.$$(_Ewa.IOfficeSwitcherInitializer), 140, new _Ewa.OfficeSwitcherInitializerFactory(ewa));
}
_Ewa.OfficeSwitcherInitializerFactory.prototype = {
    _ewaControl$p$4: null,
    
    create: function _Ewa_OfficeSwitcherInitializerFactory$create$in() {
        this.raiseServiceCreatedEvent(this._ewaControl$p$4.get_serviceRegistry().getService(_Ewa.IOfficeSwitcherInitializer, 139, false) || new _Ewa.OfficeSwitcherInitializer(this._ewaControl$p$4, this._ewaControl$p$4.get_frame().getDOMElement(), this._ewaControl$p$4.get_connectionManager().get_privateWebServiceProxy(), new _Ewa._commonStyleSheet()));
    }
}


_Ewa.OfficeSwitcherWebServiceProxyExtensions = function _Ewa_OfficeSwitcherWebServiceProxyExtensions() {
}
_Ewa.OfficeSwitcherWebServiceProxyExtensions.getOfficeSwitcherContent = function _Ewa_OfficeSwitcherWebServiceProxyExtensions$getOfficeSwitcherContent$st(webServiceProxy, successCallback, failedCallback, userContext, uiCulture, useO365ShellService) {
    var parameters = webServiceProxy.verifyAndPrepareCommonParameters(1, null);
    parameters['uiCulture'] = uiCulture;
    parameters['useO365ShellService'] = useO365ShellService;
    return webServiceProxy.callWebMethodEwaResult('GetOfficeSwitcherContent', parameters, successCallback, failedCallback, userContext, 5, null);
}


_Ewa._commonStyleSheet.registerClass('_Ewa._commonStyleSheet', null, _Ewa.IStyleSheetShim);
_Ewa._officeSwitcher.registerClass('_Ewa._officeSwitcher', null, _Ewa.ISwitcher);
_Ewa.OfficeSwitcherCommandHandler.registerClass('_Ewa.OfficeSwitcherCommandHandler', _Ewa.ExplicitDisposable, _Ewa.ICommandHandler);
_Ewa.OfficeSwitcherCommandHandlerFactory.registerClass('_Ewa.OfficeSwitcherCommandHandlerFactory', _Ewa.CommandHandlerFactoryBase);
_Ewa.OfficeSwitcherInitializer.registerClass('_Ewa.OfficeSwitcherInitializer', null, _Ewa.IOfficeSwitcherInitializer);
_Ewa.OfficeSwitcherInitializerFactory.registerClass('_Ewa.OfficeSwitcherInitializerFactory', _Ewa.ServiceFactoryBase$1.$$(_Ewa.IOfficeSwitcherInitializer));
_Ewa.OfficeSwitcherWebServiceProxyExtensions.registerClass('_Ewa.OfficeSwitcherWebServiceProxyExtensions');
Type.registerNamespace('_Ewa');

_Ewa.OfficeSwitcherBootstrapper = function _Ewa_OfficeSwitcherBootstrapper() {
}
_Ewa.OfficeSwitcherBootstrapper.main = function _Ewa_OfficeSwitcherBootstrapper$main$st() {
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(_Ewa.OfficeSwitcherCommandHandlerFactory.attach);
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(_Ewa.OfficeSwitcherInitializerFactory.attach);
}


_Ewa.OfficeSwitcherBootstrapper.registerClass('_Ewa.OfficeSwitcherBootstrapper');
_Ewa.OfficeSwitcherBootstrapper.main();
Type.registerNamespace('_Ewa');

_Ewa.RegionComposerManagerFactory = function _Ewa_RegionComposerManagerFactory(ewaControl) {
    _Ewa.RegionComposerManagerFactory.initializeBase(this);
    this._ewaControl$p$4 = ewaControl;
    this.raiseFactoryReadyEvent();
}
_Ewa.RegionComposerManagerFactory.attach = function _Ewa_RegionComposerManagerFactory$attach$st(ewaControl) {
    ewaControl.get_serviceRegistry().registerService(_Ewa.IServiceFactory$1.$$(_Ewa.IRegionComposerManager), 341, new _Ewa.RegionComposerManagerFactory(ewaControl));
}
_Ewa.RegionComposerManagerFactory.prototype = {
    _ewaControl$p$4: null,
    
    create: function _Ewa_RegionComposerManagerFactory$create$in() {
        var $$t_4 = this;
        _Ewa.TaskExtensions.cw(_Ewa.ClientHostingPlatform.loadScript(106, 4, false, false, 341, this.get_scriptLoadFlavor()), function(result) {
            if (_Ewa.HelperMethods.isFieldDefined(window, 'adaptiveLayout')) {
                var regionComposerManager = new _Ewa.RegionComposerManager($$t_4._ewaControl$p$4);
                $$t_4._ewaControl$p$4.get_frame().set_adaptiveLayoutInstance(_Ewa.EwaApplication.get_activeAppFrame().set_regionComposerManager(regionComposerManager));
                $$t_4.raiseServiceCreatedEvent(regionComposerManager);
            }
            else {
                Diag.ULS.sendTraceTag(594375002, 1, 15, 'RegionComposerManagerFactory.Create: adaptiveLayout is undefined, taskStatus = {0}', result.get_status());
            }
        }, this.get_cancelOnDisposeToken(), 3);
    }
}


_Ewa.RegionComposerManagerFactory.registerClass('_Ewa.RegionComposerManagerFactory', _Ewa.ServiceFactoryBase$1.$$(_Ewa.IRegionComposerManager));
Type.registerNamespace('_Ewa');

_Ewa.RegionComposerBootstrapper = function _Ewa_RegionComposerBootstrapper() {
}
_Ewa.RegionComposerBootstrapper.main = function _Ewa_RegionComposerBootstrapper$main$st() {
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(_Ewa.RegionComposerManagerFactory.attach);
}


_Ewa.RegionComposerBootstrapper.registerClass('_Ewa.RegionComposerBootstrapper');
_Ewa.RegionComposerBootstrapper.main();
Type.registerNamespace('_Ewa');

_Ewa.RB = function _Ewa_RB(id, alt, command, queryCommand, cluster, imageClass, imageType, label, description, menuItemId, disabled, keytip, addDisabledStateToId) {
    _Ewa.RB.initializeBase(this, [ id, alt, command, cluster, imageClass, imageType, label, disabled, keytip, addDisabledStateToId ]);
    this._$$pf_Description$p$1 = (!description) ? null : _Ewa.ClientStringManager.get_instance().getString(description);
    this._$$pf_MenuItemId$p$1 = menuItemId;
    this._$$pf_QueryCommand$p$1 = queryCommand;
}
_Ewa.RB.prototype = {
    _$$pf_Description$p$1: null,
    
    get_description: function _Ewa_RB$get_description$in() {
        return this._$$pf_Description$p$1;
    },
    
    _$$pf_GeneratedXml$p$1: null,
    
    get_generatedXml: function _Ewa_RB$get_generatedXml$in() {
        return this._$$pf_GeneratedXml$p$1;
    },
    
    _$$pf_MenuItemId$p$1: null,
    
    get_menuItemId: function _Ewa_RB$get_menuItemId$in() {
        return this._$$pf_MenuItemId$p$1;
    },
    
    _$$pf_QueryCommand$p$1: null,
    
    get_queryCommand: function _Ewa_RB$get_queryCommand$in() {
        return this._$$pf_QueryCommand$p$1;
    },
    
    buildCuiXml: function _Ewa_RB$buildCuiXml$in() {
        return Common.CuiXmlUtils.getXmlFromCuiButtonProps(this.buildProps());
    },
    
    setDescription: function _Ewa_RB$setDescription$in(description) {
        this._$$pf_Description$p$1 = description;
    },
    
    toString: function _Ewa_RB$toString$in() {
        if (_Ewa.StringExtensions.isNullOrEmpty(this._$$pf_GeneratedXml$p$1)) {
            this._$$pf_GeneratedXml$p$1 = this.buildCuiXml();
        }
        return this._$$pf_GeneratedXml$p$1;
    },
    
    buildProps: function _Ewa_RB$buildProps$in() {
        var props = new Common.CuiButtonProps();
        this.fillProps(props);
        props.MenuItemId = this._$$pf_MenuItemId$p$1;
        props.QueryCommand = this._$$pf_QueryCommand$p$1;
        props.Description = this._$$pf_Description$p$1;
        return props;
    }
}


_Ewa.RibbonColorPicker = function _Ewa_RibbonColorPicker(populateDynamicHelper, applyColorCommand, automaticColorCommand, automaticColorTitle, clearColorCommand, noColorTitle) {
    this._applyColorCommand$p$0 = applyColorCommand;
    this._automaticColorCommand$p$0 = automaticColorCommand;
    this._clearColorCommand$p$0 = clearColorCommand;
    this._automaticColorTitle$p$0 = automaticColorTitle;
    this._noColorTitle$p$0 = noColorTitle;
    this._populateDynamicHelper$p$0 = populateDynamicHelper;
}
_Ewa.RibbonColorPicker.prototype = {
    _applyColorCommand$p$0: 0,
    _automaticColorCommand$p$0: null,
    _clearColorCommand$p$0: null,
    _automaticColorTitle$p$0: null,
    _noColorTitle$p$0: null,
    _populateDynamicHelper$p$0: null,
    
    buildCuiXml: function _Ewa_RibbonColorPicker$buildCuiXml$in() {
        var builder = new Sys.StringBuilder();
        var colorPickerXml = this._populateDynamicHelper$p$0.getColorPickerSections(this._applyColorCommand$p$0, this._automaticColorCommand$p$0, this._automaticColorTitle$p$0, this._clearColorCommand$p$0, this._noColorTitle$p$0);
        for (var $$arr_2 = colorPickerXml, $$len_3 = $$arr_2.length, $$idx_4 = 0; $$idx_4 < $$len_3; ++$$idx_4) {
            var colorPickerSection = $$arr_2[$$idx_4];
            builder.append(colorPickerSection);
        }
        return builder.toString();
    },
    
    buildMenuProps: function _Ewa_RibbonColorPicker$buildMenuProps$in() {
        return this._populateDynamicHelper$p$0.getColorPickerMenuProps(this._applyColorCommand$p$0, this._automaticColorCommand$p$0, this._automaticColorTitle$p$0, this._clearColorCommand$p$0, this._noColorTitle$p$0, null, null, null);
    }
}


_Ewa.RibbonComboBox = function _Ewa_RibbonComboBox(id, menuId, command, populateDynamically, populateOnlyOnce, queryCommand, populateQueryCommand, alt, allowFreeForm, width, allowDefaultContent, autoComplete, arrowImageId) {
    this._id$p$0 = id;
    this._command$p$0 = command;
    this._populateDynamically$p$0 = populateDynamically;
    this._populateOnlyOnce$p$0 = populateOnlyOnce;
    this._queryCommand$p$0 = queryCommand;
    this._populateQueryCommand$p$0 = populateQueryCommand;
    this._alt$p$0 = alt;
    this._allowFreeForm$p$0 = allowFreeForm;
    this._width$p$0 = width;
    this._allowDefaultContent$p$0 = allowDefaultContent;
    this._autoComplete$p$0 = autoComplete;
    this._$$pf_Menu$p$0 = new _Ewa.RibbonMenu(menuId);
    this._arrowImageId$p$0 = arrowImageId;
    if (populateDynamically && populateQueryCommand) {
        var menuSection = new _Ewa.RibbonMenuSection();
        menuSection.set_displayMode('MenuLoading');
        var label = new _Ewa._ribbonLabel(menuId + 'LoadingLabel', '');
        Array.add(menuSection.get_buttons(), label);
        Array.add(this._$$pf_Menu$p$0.get_menuSections(), menuSection);
    }
}
_Ewa.RibbonComboBox.prototype = {
    _id$p$0: null,
    _command$p$0: null,
    _populateDynamically$p$0: false,
    _populateOnlyOnce$p$0: false,
    _queryCommand$p$0: null,
    _populateQueryCommand$p$0: null,
    _alt$p$0: null,
    _allowFreeForm$p$0: false,
    _width$p$0: null,
    _allowDefaultContent$p$0: false,
    _autoComplete$p$0: false,
    _arrowImageId$p$0: null,
    
    buildCuiXml: function _Ewa_RibbonComboBox$buildCuiXml$in() {
        return this._buildComboBoxXml$p$0();
    },
    
    _$$pf_Menu$p$0: null,
    
    get_menu: function _Ewa_RibbonComboBox$get_menu$in() {
        return this._$$pf_Menu$p$0;
    },
    
    _buildComboBoxXml$p$0: function _Ewa_RibbonComboBox$_buildComboBoxXml$p$0$in() {
        var comboBoxXml = Common.CuiXmlUtils.buildComboBoxXml(this._id$p$0, this._command$p$0, this._populateDynamically$p$0, this._populateOnlyOnce$p$0, this._queryCommand$p$0, this._populateQueryCommand$p$0, this._alt$p$0, this._allowFreeForm$p$0, this._width$p$0);
        var indexOfEndTag = comboBoxXml.indexOf(' />');
        comboBoxXml = comboBoxXml.substring(0, indexOfEndTag);
        comboBoxXml += String.format(' {0}=\"{1}\"', 'AllowDefaultContent', this._allowDefaultContent$p$0.toString());
        comboBoxXml += String.format(' {0}=\"{1}\"', 'AutoComplete', (this._autoComplete$p$0) ? 'true' : 'false');
        if (this._arrowImageId$p$0) {
            comboBoxXml += String.format(' {0}=\"{1}\"', 'ArrowImgId', this._arrowImageId$p$0);
        }
        comboBoxXml += '>';
        comboBoxXml += this._$$pf_Menu$p$0.buildCuiXml();
        comboBoxXml += '</ComboBox>';
        return comboBoxXml;
    }
}


_Ewa._ribbonComboBoxItem = function _Ewa__ribbonComboBoxItem(id, alt, command, queryCommand, cluster, imageClass, imageType, label, description, menuItemId, disabled, styles, data) {
    _Ewa._ribbonComboBoxItem.initializeBase(this, [ id, alt, command, cluster, imageClass, imageType, label, disabled, 0, false ]);
    this._$$pf_Description$p$1 = (!description) ? null : _Ewa.ClientStringManager.get_instance().getString(description);
    this._$$pf_MenuItemId$p$1 = menuItemId;
    this._$$pf_QueryCommand$p$1 = queryCommand;
    this._$$pf_Styles$p$1 = styles;
    this._$$pf_Data$p$1 = data;
}
_Ewa._ribbonComboBoxItem.prototype = {
    _$$pf_Description$p$1: null,
    
    get_description: function _Ewa__ribbonComboBoxItem$get_description$in() {
        return this._$$pf_Description$p$1;
    },
    
    _$$pf_GeneratedXml$p$1: null,
    
    get_generatedXml: function _Ewa__ribbonComboBoxItem$get_generatedXml$in() {
        return this._$$pf_GeneratedXml$p$1;
    },
    
    _$$pf_MenuItemId$p$1: null,
    
    get_menuItemId: function _Ewa__ribbonComboBoxItem$get_menuItemId$in() {
        return this._$$pf_MenuItemId$p$1;
    },
    
    _$$pf_QueryCommand$p$1: null,
    
    get_queryCommand: function _Ewa__ribbonComboBoxItem$get_queryCommand$in() {
        return this._$$pf_QueryCommand$p$1;
    },
    
    _$$pf_Styles$p$1: null,
    
    get_styles: function _Ewa__ribbonComboBoxItem$get_styles$in() {
        return this._$$pf_Styles$p$1;
    },
    
    _$$pf_Data$p$1: null,
    
    get_data: function _Ewa__ribbonComboBoxItem$get_data$in() {
        return this._$$pf_Data$p$1;
    },
    
    buildCuiXml: function _Ewa__ribbonComboBoxItem$buildCuiXml$in() {
        return Common.CuiXmlUtils.getXmlFromCuiButtonProps(this.buildProps());
    },
    
    setDescription: function _Ewa__ribbonComboBoxItem$setDescription$in(description) {
        this._$$pf_Description$p$1 = description;
    },
    
    toString: function _Ewa__ribbonComboBoxItem$toString$in() {
        if (_Ewa.StringExtensions.isNullOrEmpty(this._$$pf_GeneratedXml$p$1)) {
            this._$$pf_GeneratedXml$p$1 = this.buildCuiXml();
        }
        return this._$$pf_GeneratedXml$p$1;
    },
    
    buildProps: function _Ewa__ribbonComboBoxItem$buildProps$in() {
        var props = new Common.ComboBoxItemButtonProps();
        this.fillProps(props);
        props.MenuItemId = this._$$pf_MenuItemId$p$1;
        props.QueryCommand = this._$$pf_QueryCommand$p$1;
        props.Description = this._$$pf_Description$p$1;
        props.Styles = this._$$pf_Styles$p$1;
        props.Data = this._$$pf_Data$p$1;
        return props;
    }
}


_Ewa._ribbonControl = function _Ewa__ribbonControl(id, alt, command, cluster, imageClass, imageType, label, disabled, keytip, addDisabledStateToId) {
    this._id$p$0 = id;
    this._alt$p$0 = _Ewa.ClientStringManager.get_instance().getString(alt);
    this._command$p$0 = (command).toString();
    this._$$pf_Label$p$0 = _Ewa.ClientStringManager.get_instance().getString(label);
    this._imageType$p$0 = imageType;
    this._disabled$p$0 = disabled;
    this._keytip$p$0 = (!keytip) ? null : _Ewa.ClientStringManager.get_instance().getString(keytip);
    this._addDisabledStateToExternalId$p$0 = addDisabledStateToId;
    if (imageType !== 'None') {
        this.setImage(imageType, cluster, imageClass);
    }
}
_Ewa._ribbonControl.get__alwaysDisableCommand$p = function _Ewa__ribbonControl$get__alwaysDisableCommand$p$st() {
    return _Ewa._ribbonControl._alwaysDisabledCommand$p || (_Ewa._ribbonControl._alwaysDisabledCommand$p = (-251203935).toString());
}
_Ewa._ribbonControl.addNonEmptyAttribute = function _Ewa__ribbonControl$addNonEmptyAttribute$st(attribute, value, builder) {
    if (!_Ewa.StringExtensions.isNullOrEmpty(value)) {
        builder.append(String.format(' {0}=\"{1}\"', attribute, value));
    }
}
_Ewa._ribbonControl.prototype = {
    _id$p$0: null,
    _alt$p$0: null,
    _command$p$0: null,
    _imageUri$p$0: null,
    _imageClass$p$0: null,
    _imageType$p$0: 'None',
    _disabled$p$0: false,
    _keytip$p$0: null,
    _addDisabledStateToExternalId$p$0: false,
    
    get_imageUri: function _Ewa__ribbonControl$get_imageUri$in() {
        return this._imageUri$p$0;
    },
    
    _$$pf_Label$p$0: null,
    
    get_label: function _Ewa__ribbonControl$get_label$in() {
        return this._$$pf_Label$p$0;
    },
    
    set_label: function _Ewa__ribbonControl$set_label$in(value) {
        this._$$pf_Label$p$0 = value;
        return value;
    },
    
    get_alt: function _Ewa__ribbonControl$get_alt$in() {
        return this._alt$p$0;
    },
    
    buildCuiXml: function _Ewa__ribbonControl$buildCuiXml$in() {
        throw Error.notImplemented('GetCuiXml must be implemented before being invoked.');
    },
    
    setImage: function _Ewa__ribbonControl$setImage$in(imageType, cluster, imageClass) {
        this.setCustomizedImage(imageType, _Ewa.ClientHostingPlatform.getClusterUri(cluster), imageClass);
    },
    
    setCustomizedImage: function _Ewa__ribbonControl$setCustomizedImage$in(imageType, imageUri, imageClass) {
        this._imageType$p$0 = imageType;
        this._imageUri$p$0 = imageUri;
        this._imageClass$p$0 = imageClass;
    },
    
    setAlt: function _Ewa__ribbonControl$setAlt$in(alt) {
        this._alt$p$0 = alt;
    },
    
    clearImage: function _Ewa__ribbonControl$clearImage$in() {
        this.setCustomizedImage('None', null, null);
    },
    
    renderAttributes: function _Ewa__ribbonControl$renderAttributes$in(builder) {
        var imageClassAttrib = this._imageType$p$0 + 'Class';
        _Ewa._ribbonControl.addNonEmptyAttribute('Id', this._id$p$0, builder);
        _Ewa._ribbonControl.addNonEmptyAttribute('Alt', this._alt$p$0, builder);
        _Ewa._ribbonControl.addNonEmptyAttribute('Command', (this._disabled$p$0) ? _Ewa._ribbonControl.get__alwaysDisableCommand$p() : this._command$p$0, builder);
        _Ewa._ribbonControl.addNonEmptyAttribute('LabelText', this._$$pf_Label$p$0, builder);
        _Ewa._ribbonControl.addNonEmptyAttribute(this._imageType$p$0, this._imageUri$p$0, builder);
        _Ewa._ribbonControl.addNonEmptyAttribute(imageClassAttrib, this._imageClass$p$0, builder);
        _Ewa._ribbonControl.addNonEmptyAttribute('Keytip', this._keytip$p$0, builder);
    },
    
    fillProps: function _Ewa__ribbonControl$fillProps$in(props) {
        props.Id = this._id$p$0;
        props.ExternalId = this._id$p$0 + ((this._addDisabledStateToExternalId$p$0) ? ((this._disabled$p$0) ? '_Disabled' : '_Enabled') : '');
        props.Alt = this._alt$p$0;
        props.Command = (this._disabled$p$0) ? _Ewa._ribbonControl.get__alwaysDisableCommand$p() : this._command$p$0;
        props.LabelText = this._$$pf_Label$p$0;
        props.KeyTip = this._keytip$p$0;
        props.Image32by32 = (this._imageType$p$0 === 'Image32by32') ? this._imageUri$p$0 : null;
        props.Image32by32Class = (this._imageType$p$0 === 'Image32by32') ? this._imageClass$p$0 : null;
        props.Image16by16 = (this._imageType$p$0 === 'Image16by16') ? this._imageUri$p$0 : null;
        props.Image16by16Class = (this._imageType$p$0 === 'Image16by16') ? this._imageClass$p$0 : null;
    },
    
    buildProps: function _Ewa__ribbonControl$buildProps$in() {
        throw Error.notImplemented('GetProps must be implemented before being invoked.');
    }
}


_Ewa.RibbonControlsBootstrapper = function _Ewa_RibbonControlsBootstrapper() {
}
_Ewa.RibbonControlsBootstrapper.main = function _Ewa_RibbonControlsBootstrapper$main$st() {
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(_Ewa.RibbonControlsFactory.attach);
}


_Ewa.RibbonControlsFactory = function _Ewa_RibbonControlsFactory(ewaControl) {
    _Ewa.RibbonControlsFactory.initializeBase(this);
    this._ewaControl$p$4 = ewaControl;
    this.raiseFactoryReadyEvent();
}
_Ewa.RibbonControlsFactory.attach = function _Ewa_RibbonControlsFactory$attach$st(ewaControl) {
    ewaControl.get_serviceRegistry().registerService(_Ewa.IServiceFactory$1.$$(_Ewa.IRibbonControlsManager), 102, new _Ewa.RibbonControlsFactory(ewaControl));
}
_Ewa.RibbonControlsFactory.prototype = {
    _ribbonControlsManager$p$4: null,
    _ewaControl$p$4: null,
    
    create: function _Ewa_RibbonControlsFactory$create$in() {
        var ewa = this._ewaControl$p$4;
        var populateDynamicHelperTask = _Ewa.GetServiceTaskFactory.create(_Ewa.IPopulateDynamicHelper, ewa.get_serviceRegistry(), 111, this.get_cancelOnDisposeToken(), this.get_scriptLoadFlavor());
        var dictionaryTask = _Ewa.GetServiceTaskFactory.create(Object, ewa.get_serviceRegistry(), 155, this.get_cancelOnDisposeToken(), this.get_scriptLoadFlavor());
        var $$t_5 = this;
        _Ewa.TaskExtensions.cw(_Ewa.TaskExtensions.ws([ populateDynamicHelperTask, dictionaryTask ], this.get_cancelOnDisposeToken(), 3), function(unused) {
            $$t_5.raiseServiceCreatedEvent($$t_5._ribbonControlsManager$p$4 || ($$t_5._ribbonControlsManager$p$4 = new _Ewa.RibbonControlsManager(populateDynamicHelperTask.get_result(), _Ewa.IsFeatureEnabledExtensions.isReactContextMenusEnabled($$t_5._ewaControl$p$4), $$t_5._ewaControl$p$4.isChangeGateEnabled('OfficeVSO:3913665_AddEnabledDisabledStateToContexMenuProps'), $$t_5._ewaControl$p$4.isChangeGateEnabled('VSO:4099151_FixFlyoutAnchorImageNotShowing'))));
        }, this.get_cancelOnDisposeToken(), 3);
    }
}


_Ewa.RibbonControlsManager = function _Ewa_RibbonControlsManager(populateDynamicHelper, reactContextualUIActive, addDisabledStateToId, fixFlyoutAnchorImageNotShowing) {
    this._populateDynamicHelper$p$0 = populateDynamicHelper;
    this._reactContextualUIActive$p$0 = reactContextualUIActive;
    this._addDisabledStateToId$p$0 = addDisabledStateToId;
    this._fixFlyoutAnchorImageNotShowing$p$0 = fixFlyoutAnchorImageNotShowing;
}
_Ewa.RibbonControlsManager.prototype = {
    _populateDynamicHelper$p$0: null,
    _reactContextualUIActive$p$0: false,
    _addDisabledStateToId$p$0: false,
    _fixFlyoutAnchorImageNotShowing$p$0: false,
    
    createMenu: function _Ewa_RibbonControlsManager$createMenu$in(menuId) {
        return new _Ewa.RibbonMenu(menuId);
    },
    
    createMenuSection: function _Ewa_RibbonControlsManager$createMenuSection$in() {
        return new _Ewa.RibbonMenuSection();
    },
    
    createButton: function _Ewa_RibbonControlsManager$createButton$in(type) {
        var button = _Ewa.EwaDictionary.tryGetValue(_Ewa.RibbonControlsManager._buttonCache$p, type.toString(), null);
        if (button) {
            return button;
        }
        var disabled = false;
        switch (type) {
            case 234:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.Show.ChartTaskPane', 1221897806, 'ewachart_taskpaneFormat16', 4, 858, false, null);
            case 140:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.None.BoxWhisker', 374300079, 'ewachart_dataLabelsNoneBoxAndWhisker32', 804, 805, 1383);
            case 0:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.None.Column', 374300079, 'ewachart_dataLabelsNone32', 804, 805, 1383);
            case 1:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.None.Line', 374300079, 'ewachart_dataLabelsNoneLine32', 804, 805, 1383);
            case 2:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.None.Pie', 374300079, 'ewachart_dataLabelsNonePie32', 804, 805, 1383);
            case 3:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Show.Column', -1809877936, 'ewachart_dataLabelsCenter32', 806, 807, 1384);
            case 142:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Show.Funnel', -1809877936, 'ewachart_dataLabelsCenter32', 806, 809, 1384);
            case 143:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Show.Treemap', -1809877936, 'ewachart_dataLabelsInsideBase32', 806, 813, 1384);
            case 144:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Show.Sunburst', -1809877936, 'ewachart_dataLabelsCenterPie32', 806, 809, 1384);
            case 4:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Center.Column', -1996266048, 'ewachart_dataLabelsCenter32', 808, 809, 1385);
            case 5:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Center.Line', -1996266048, 'ewachart_dataLabelsCenterLine32', 808, 809, 1385);
            case 6:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Center.Pie', -1996266048, 'ewachart_dataLabelsCenterPie32', 808, 809, 1385);
            case 7:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.InsideEnd.Column', 493396546, 'ewachart_dataLabelsInsideEnd32', 810, 811, 1386);
            case 8:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.InsideEnd.Pie', 493396546, 'ewachart_dataLabelsInsideEndPie32', 810, 811, 1386);
            case 9:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.InsideBase.Column', 1599247052, 'ewachart_dataLabelsInsideBase32', 812, 813, 1387);
            case 10:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.OutsideEnd.Column', 342855531, 'ewachart_dataLabelsOutsideEnd32', 814, 815, 1388);
            case 11:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.OutsideEnd.Pie', 342855531, 'ewachart_dataLabelsOutsideEndPie32', 814, 815, 1388);
            case 139:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Left.BoxWhisker', -472675112, 'ewachart_dataLabelsLeftBoxAndWhisker32', 816, 817, 1389);
            case 12:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Left.Line', -472675112, 'ewachart_dataLabelsLeft32', 816, 817, 1389);
            case 141:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Right.BoxWhisker', -1774499423, 'ewachart_dataLabelsRightBoxAndWhisker32', 818, 819, 1390);
            case 13:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Right.Line', -1774499423, 'ewachart_dataLabelsRight32', 818, 819, 1390);
            case 137:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Above.BoxWhisker', -204160914, 'ewachart_dataLabelsAboveBoxAndWhisker32', 820, 821, 1391);
            case 14:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Above.Line', -204160914, 'ewachart_dataLabelsTop32', 820, 821, 1391);
            case 138:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Below.BoxWhisker', -87783054, 'ewachart_dataLabelsBelowBoxAndWhisker32', 822, 823, 1392);
            case 15:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.Below.Line', -87783054, 'ewachart_dataLabelsBottom32', 822, 823, 1392);
            case 16:
                return this._createAndCacheCommonChartButton$p$0(type, 'DataLabels.BestFit.Pie', 1650379138, 'ewachart_dataLabelsBestFit32', 824, 825, 1393);
            case 17:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Horizontal.None', 895828731, 'ewachart_axisHorizontalNone32', 804, 826, 1396);
            case 18:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Horizontal.ShowLTR', 683614408, 'ewachart_axisHorizontalShowLTR32', 827, 828, 1397);
            case 19:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Horizontal.NoLabels', -1612014670, 'ewachart_axisHorizontalNoLabels32', 831, 832, 1398);
            case 20:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Horizontal.ShowRTL', 1259259728, 'ewachart_axisHorizontalReverse32', 833, 834, 1399);
            case 21:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Horizontal.Default', 683614408, 'ewachart_axisHorizontalShowLTR32', 829, 830, 1400);
            case 22:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Horizontal.Thousands', -220179662, 'ewachart_axisHorizontalThousands32', 835, 836, 1401);
            case 23:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Horizontal.Millions', 1534680966, 'ewachart_axisHorizontalMillions32', 837, 838, 1402);
            case 24:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Horizontal.Billions', -238895611, 'ewachart_axisHorizontalBillions32', 839, 840, 1403);
            case 25:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Horizontal.LogScale', -892714755, 'ewachart_axisHorizontalLog32', 841, 842, 1404);
            case 26:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Vertical.None', 2006508979, 'ewachart_axisVerticalNone32', 804, 826, 1396);
            case 27:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Vertical.Default', 252405382, 'ewachart_axisVerticalShow32', 829, 830, 1400);
            case 28:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Vertical.Thousands', 670842692, 'ewachart_axisVerticalThousands32', 835, 836, 1401);
            case 29:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Vertical.Millions', -572426128, 'ewachart_axisVerticalMillions32', 837, 838, 1402);
            case 30:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Vertical.Billions', -806496391, 'ewachart_axisVerticalBillions32', 839, 840, 1403);
            case 31:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Vertical.LogScale', -1700998151, 'ewachart_axisVerticalLog32', 841, 842, 1404);
            case 32:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Vertical.NoLabels', 2104548628, 'ewachart_axisVerticalNoLabels32', 831, 832, 1398);
            case 33:
                return this._createAndCacheCommonChartButton$p$0(type, 'Axes.Vertical.ShowRTL', 1717508862, 'ewachart_axisVerticalReverse32', 833, 834, 1399);
            case 34:
                return this._createAndCacheCommonChartButton$p$0(type, 'Gridlines.Horizontal.None', 80515665, 'ewachart_gridlinesHorizontalNone32', 804, 845, 1407);
            case 35:
                return this._createAndCacheCommonChartButton$p$0(type, 'Gridlines.Horizontal.Major', -306129902, 'ewachart_gridlinesHorizontalMajor32', 847, 848, 1408);
            case 36:
                return this._createAndCacheCommonChartButton$p$0(type, 'Gridlines.Horizontal.Minor', 2147076534, 'ewachart_gridlinesHorizontalMinor32', 850, 851, 1409);
            case 37:
                return this._createAndCacheCommonChartButton$p$0(type, 'Gridlines.Horizontal.MajorMinor', -1253752845, 'ewachart_gridlinesHorizontalMinorMajor32', 853, 854, 1410);
            case 38:
                return this._createAndCacheCommonChartButton$p$0(type, 'Gridlines.Vertical.None', 1711257557, 'ewachart_gridlinesVerticalNone32', 804, 846, 1407);
            case 39:
                return this._createAndCacheCommonChartButton$p$0(type, 'Gridlines.Vertical.Major', -1772953364, 'ewachart_gridlinesVerticalMajor32', 847, 849, 1408);
            case 40:
                return this._createAndCacheCommonChartButton$p$0(type, 'Gridlines.Vertical.Minor', 680253336, 'ewachart_gridlinesVerticalMinor32', 850, 852, 1409);
            case 41:
                return this._createAndCacheCommonChartButton$p$0(type, 'Gridlines.Vertical.MajorMinor', -215161981, 'ewachart_gridlinesVerticalMinorMajor32', 853, 855, 1410);
            case 134:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.NumberFormating', 2105621672, 'ewaboot_general16', 1, 428, type !== 134, null);
            case 135:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.NumberFormatingApplyToPivotField', -168056295, 'ewaboot_general16', 1, 428, type !== 135, null);
            case 42:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.Cut', -1985798686, 'ewaboot_cut16', 1, 11, false, null);
            case 43:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.Copy', -911352779, 'ewaboot_copy16', 1, 10, false, null);
            case 210:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertCopiedCells', -160032004, 'ewaother_insertcells16', 3, 14, false, null);
            case 211:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertCutCells', -1065525230, 'ewaother_insertcells16', 3, 20, false, null);
            case 44:
            case 57:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.Paste', 237279923, 'ewaboot_paste16', 1, 12, type !== 44, 'Paste');
            case 233:
                return this._createAndCacheContextMenuButton$p$0(type, 'PasteAdvancedOptionsGallery', 237279923, 'ewaboot_paste16', 1, 12, type !== 44, 'Paste');
            case 45:
            case 119:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.EditHyperlink', -1583422759, 'ewamenu_edithyperlink', 8, 985, type !== 45, 'EditHyperlink');
            case 46:
            case 120:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertHyperlink', -1583422759, 'ewamenu_edithyperlink', 8, 986, type !== 46, 'InsertHyperlink');
            case 47:
            case 121:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.RemoveHyperlink', -1253126584, 'ewamenu_removehyperlink', 8, 987, type !== 47, 'RemoveHyperlink');
            case 48:
            case 122:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.RemoveHyperlinks', -1253126584, 'ewamenu_removehyperlink', 8, 988, type !== 48, 'RemoveHyperlinks');
            case 235:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.ContextMenuSmartLookup', -983891024, 1540, false, null);
            case 185:
            case 186:
            case 163:
            case 171:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertCellsShiftRight', 1035996630, 'ewaboot_insertcellsshiftright16', 1, (type === 163 || type === 171) ? 301 : 302, type === 171 || type === 186, 'InsertCellsShiftRight');
            case 164:
            case 172:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertCellsShiftDown', 1035996630, 'ewaboot_insertcellsshiftdown16', 1, 304, type !== 164, 'InsertCellsShiftDown');
            case 187:
            case 188:
            case 165:
            case 173:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.DeleteCellsShiftLeft', 1035996630, 'ewaboot_deletecellsshiftleft16', 1, (type === 165 || type === 173) ? 302 : 301, type === 173 || type === 188, 'DeleteCellsShiftLeft');
            case 166:
            case 174:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.DeleteCellsShiftUp', 1035996630, 'ewaboot_deletecellsshiftup16', 1, 303, type !== 166, 'DeleteCellsShiftUp');
            case 175:
            case 181:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertRowsSheet', -1113896058, 'ewaboot_insertrows16', 1, 383, type !== 175, 'InsertRows');
            case 49:
            case 115:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertRows', -1113896058, 'ewaboot_insertrows16', 1, 306, type !== 49, 'InsertRows');
            case 159:
            case 167:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertRowsTable', 942362098, 'ewaboot_insertlistrow16', 1, 377, type !== 159, 'InsertRowsTable');
            case 50:
            case 116:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertColumns', 1415868706, 'ewaboot_insertcolumns16', 1, 364, type !== 50, 'InsertColumns');
            case 176:
            case 182:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertColumnsSheet', 1415868706, 'ewaboot_insertcolumns16', 1, 382, type !== 176, 'InsertColumns');
            case 189:
            case 190:
            case 160:
            case 168:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertColumnsTable', 622604322, 'ewaboot_insertlistcolumn16', 1, (type === 160 || type === 168) ? 375 : 376, type === 168 || type === 190, 'InsertColumnsTable');
            case 177:
            case 183:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.DeleteRowsSheet', 1554436520, 'ewaboot_deleterows16', 1, 383, type !== 177, 'DeleteRows');
            case 51:
            case 117:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.DeleteRows', 1554436520, 'ewaboot_deleterows16', 1, 366, type !== 51, 'DeleteRows');
            case 161:
            case 169:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.DeleteRowsTable', 1405456548, 'ewaboot_deleterows16', 1, 374, type !== 161, 'DeleteRowsTable');
            case 180:
            case 184:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.DeleteColumnsSheet', 674605324, 'ewaboot_deletecolumns16', 1, 382, type !== 180, 'DeleteColumns');
            case 52:
            case 118:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.DeleteColumns', 674605324, 'ewaboot_deletecolumns16', 1, 367, type !== 52, 'DeleteColumns');
            case 162:
            case 170:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.DeleteColumnsTable', 284490184, 'ewaboot_deletecolumns16', 1, 373, type !== 162, 'DeleteColumnsTable');
            case 53:
            case 123:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.OpenHyperlink', -1396319072, 989, type !== 53, 'OpenHyperlink');
            case 248:
                return this._createAndCacheContextMenuButton$p$0(type, 'SheetOpsContextMenu.ShowChanges', 1834994092, 'ewamenu_showChangesExcel16', 8, 395, false, 'SheetOpsContextMenu');
            case 247:
                return this._createAndCacheContextMenuButton$p$0(type, 'GridContextMenu.ShowChanges', 1834994092, 'ewamenu_showChangesExcel16', 8, 395, false, 'GridContextMenu');
            case 54:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertSheet', -1935155518, 'ewaboot_insertsheet16', 1, 465, false, null);
            case 56:
            case 126:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.DeleteSheet', 1880294140, 'ewaboot_deletesheet16', 1, 466, type !== 56, 'DeleteSheet');
            case 55:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.RenameSheet', 817296323, 467, false, null);
            case 124:
            case 125:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.ReorderSheet', -383100692, 468, type !== 124, 'ReorderSheet');
            case 156:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.DuplicateSheet', -1254662242, 393, false, null);
            case 111:
            case 113:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.HideSheet', 1458540255, 470, type !== 111, 'HideSheet');
            case 112:
            case 114:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.UnhideSheet', 1129633328, 471, type !== 112, 'UnhideSheet');
            case 228:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.PivotExpandCollapse', 589118293, 1005, false, null);
            case 229:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.PivotExpand', -1687560254, 'ewaboot_pivotFieldExpand16', 9, 1006, false, null);
            case 230:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.PivotCollapse', 1176256599, 'ewaboot_pivotFieldCollapse16', 9, 1007, false, null);
            case 231:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.PivotExpandEntireField', -1751201991, 'ewaboot_pivotFieldExpand16', 9, 1008, false, null);
            case 232:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.PivotCollapseEntireField', -232434744, 'ewaboot_pivotFieldCollapse16', 9, 1009, false, null);
            case 59:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.PivotFieldListShow', 2140436015, 'ewaboot_pivotFieldListShow16', 9, 1010, false, null);
            case 58:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.PivotFieldListHide', -1006032470, 'ewaboot_pivotFieldListShow16', 9, 1011, false, null);
            case 243:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.PivotSettingsPaneShow', 1529441790, 'ewapivottable_ShowSetting16', 17, 580, false, null);
            case 242:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.PivotSettingsPaneHide', 1529441790, 'ewapivottable_ShowSetting16', 17, 581, false, null);
            case 244:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.PivotTableNoSubtotal', -2016405815, 582, false, null);
            case 245:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.PivotTableSubtotalOnTop', 671485366, 583, false, null);
            case 246:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.PivotTableSubtotalOnBottom', 772221736, 584, false, null);
            case 60:
            case 64:
                disabled = type !== 60;
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, (!disabled) ? 'ContextMenu.FieldWellMoveUp' : 'ContextMenu.FieldWellMoveUpDisabled', -1170196828, 934, disabled, null);
            case 61:
            case 65:
                disabled = type !== 61;
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, (!disabled) ? 'ContextMenu.FieldWellMoveDown' : 'ContextMenu.FieldWellMoveDownDisabled', -889576107, 935, disabled, null);
            case 62:
            case 66:
                disabled = type !== 62;
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, (!disabled) ? 'ContextMenu.FieldWellMoveToBeginning' : 'ContextMenu.FieldWellMoveToBeginningDisabled', 389774337, 936, disabled, null);
            case 63:
            case 67:
                disabled = type !== 63;
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, (!disabled) ? 'ContextMenu.FieldWellMoveToEnd' : 'ContextMenu.FieldWellMoveToEndDisabled', 2033235475, 937, disabled, null);
            case 68:
            case 72:
                disabled = type !== 68;
                return this._createAndCacheContextMenuButton$p$0(type, (!disabled) ? 'ContextMenu.FieldWellMoveToReportFilter' : 'ContextMenu.FieldWellMoveToReportFilterDisabled', -96230454, 'ewaboot_addtoFilter16', 9, 938, disabled, null);
            case 69:
            case 73:
                disabled = type !== 69;
                return this._createAndCacheContextMenuButton$p$0(type, (!disabled) ? 'ContextMenu.FieldWellMoveToRowLabels' : 'ContextMenu.FieldWellMoveToRowLabelsDisabled', 74086617, 'ewaboot_addtoRows16', 9, 939, disabled, null);
            case 70:
            case 74:
                disabled = type !== 70;
                return this._createAndCacheContextMenuButton$p$0(type, (!disabled) ? 'ContextMenu.FieldWellMoveToColumnLabels' : 'ContextMenu.FieldWellMoveToColumnLabelsDisabled', 1529312473, 'ewaboot_addtoCols16', 9, 940, disabled, null);
            case 71:
            case 75:
                disabled = type !== 71;
                return this._createAndCacheContextMenuButton$p$0(type, (!disabled) ? 'ContextMenu.FieldWellMoveToValues' : 'ContextMenu.FieldWellMoveToValuesDisabled', 563292088, 'ewaboot_addtoValues16', 9, 943, disabled, null);
            case 76:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.FieldWellRemoveField', -1092351914, 'ewaboot_deleteField16', 9, 944, false, null);
            case 77:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.FieldWellValueFieldSettings', -2141589616, 'ewaboot_valueFieldSettings16', 9, 945, false, null);
            case 78:
            case 82:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.FieldListMoveToReportFilter', 359279088, 'ewaboot_addtoFilter16', 9, 927, type !== 78, null);
            case 79:
            case 83:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.FieldListMoveToRowLabels', -67292059, 'ewaboot_addtoRows16', 9, 928, type !== 79, null);
            case 80:
            case 84:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.FieldListMoveToColumnsLabels', 745182485, 'ewaboot_addtoCols16', 9, 929, type !== 80, null);
            case 81:
            case 85:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.FieldListMoveToValues', 926905850, 'ewaboot_addtoValues16', 9, 932, type !== 81, null);
            case 94:
            case 96:
                disabled = type !== 94;
                return this._createAndCacheContextMenuButton$p$0(type, (!disabled) ? 'ContextMenu.FieldWellMoveToRowChartLabels' : 'ContextMenu.FieldWellMoveToRowChartLabelsDisabled', 74086617, 'ewaboot_addtoRows16', 9, 941, disabled, null);
            case 95:
            case 97:
                disabled = type !== 95;
                return this._createAndCacheContextMenuButton$p$0(type, (!disabled) ? 'ContextMenu.FieldWellMoveToColumnChartLabels' : 'ContextMenu.FieldWellMoveToColumnChartLabelsDisabled', 1529312473, 'ewaboot_addtoCols16', 9, 942, disabled, null);
            case 90:
            case 92:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.FieldListMoveToRowChartLabels', -67292059, 'ewaboot_addtoRows16', 9, 930, type !== 90, null);
            case 91:
            case 93:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.FieldListMoveToColumnChartLabels', 745182485, 'ewaboot_addtoCols16', 9, 931, type !== 91, null);
            case 98:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.BIExploreShowCallout', 1529658657, 'ewaboot_bixLaunch', 9, 1030, false, null);
            case 99:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.ContextMenuRefresh', 2054778433, 'ewaboot_refreshMenu', 9, 1018, false, null);
            case 101:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.EditCell', 324156914, 'ewamenu_pencil16', 8, 523, false, null);
            case 100:
                return this._createAndCacheContextMenuButton$p$0(type, 'Contextenu.DeleteChart', 2045211913, 'ewamenu_delete16', 8, 522, false, null);
            case 145:
                return this._createAndCacheContextMenuButton$p$0(type, 'Contextenu.AltText', 1804967129, 'ewamenu_editalttext', 8, 720, false, null);
            case 158:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertComment', -1667294294, 'ewamenu_newcomment', 8, 991, false, null);
            case 217:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.DeleteComment', 467845448, 'ewamenu_deletecomment', 8, 1000, false, null);
            case 157:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.InsertReply', -1667294294, 'ewamenu_newreply', 8, 990, false, null);
            case 222:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.ShowOrHideNote', 1627476102, 999, false, null);
            case 102:
                return this.createAndCacheRibbonButton(type, 'Form.InsertForm', 1305810481, 'ewaboot_newForm16', 1, 'Image16by16', 1094, 0, null, false, 1378);
            case 106:
                return this.createAndCacheRibbonButton(type, 'Form.ViewForm', 330035228, 'ewaboot_newForm16', 1, 'Image16by16', 1096, 0, null, false, 1379);
            case 103:
                return this.createAndCacheRibbonButton(type, 'Form.EditForm', 1305810481, 'ewaboot_editForm16', 1, 'Image16by16', 1095, 0, null, false, 1380);
            case 104:
                return this.createAndCacheRibbonButton(type, 'Form.DeleteForm', -509039657, 'ewaboot_deleteForm16', 1, 'Image16by16', 1097, 0, null, false, 1381);
            case 105:
                return this.createAndCacheRibbonButton(type, 'Form.ShareForm', 1334518759, 'ewaboot_shareForm16', 1, 'Image16by16', 1098, 0, null, false, 1382);
            case 146:
            case 147:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.ClearContent', -848953656, 397, type !== 146, null);
            case 148:
            case 149:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.RowHeight', 2040891415, 'ewamenu_rowheight', 8, 386, type === 149, null);
            case 150:
            case 151:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.ColumnWidth', 957527587, 'ewamenu_columnwidth', 8, 385, type === 151, null);
            case 107:
            case 152:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.HideRows', 1051390410, 384, type === 152, null);
            case 109:
            case 154:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.UnhideRows', 1542466017, 391, type === 154, null);
            case 108:
            case 153:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.HideColumns', -706918724, 390, type === 153, null);
            case 110:
            case 155:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.UnhideColumns', 369708605, 392, type === 155, null);
            case 214:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.ShowCard', -843616717, 1519, type !== 214, null);
            case 213:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.ConvertLinkedEntityToText', 311599363, 1518, type !== 213, null);
            case 215:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.RefreshLinkedEntities', 439914789, 1520, type !== 215, null);
            case 216:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.ChangeLinkedEntityObject', 2127195269, 1524, type !== 216, null);
            case 219:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.SortAscending', -1010737776, 'ewaboot_SortedAZ16', 1, 203, false, null);
            case 220:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.SortDescending', 2123420468, 'ewaboot_SortedZA16', 1, 204, false, null);
            case 221:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.SortCustom', -207540907, 'ewaboot_XLSortRibbon16', 1, 205, false, null);
            case 224:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.ConvertToRange', 323142015, 'ewaboot_convertToRange16', 1, 655, false, null);
            case 225:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.IgnoreError', 886009118, 'ewamenu_ignoreissue', 8, 1793, type !== 225, null);
            case 226:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.IgnoreErrors', 886009118, 'ewamenu_ignoreissue', 8, 1794, type !== 226, null);
            case 227:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.ShowError', -1779556985, 1795, type !== 227, null);
            case 236:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.SlicerRefresh', -231711729, 'ewaboot_refresh', 0, 1836, type !== 236, null);
            case 237:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.SlicerClearFilter', -1909381757, 'ewaboot_deletefilter', 0, 1837, type !== 237, null);
            case 239:
                return this._createAndCacheContextMenuButtonNoImage$p$0(type, 'ContextMenu.SlicerDelete', 2045211913, 1840, type !== 239, null);
            case 238:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.SlicerMultiSelect', 2108047455, 'ewaboot_multiselect', 0, 1839, type !== 238, null);
            case 240:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.SlicerSortAscending', -923375148, 'ewamenu_SortedAZ', 8, 1842, type !== 240, null);
            case 241:
                return this._createAndCacheContextMenuButton$p$0(type, 'ContextMenu.SlicerSortDescending', 1164937340, 'ewamenu_SortedZA', 8, 1841, type !== 241, null);
            case 127:
                return this._createAndCacheOutlineWeightButton$p$0(type, -619033944, 1, 1234);
            case 128:
                return this._createAndCacheOutlineWeightButton$p$0(type, -619033944, 2, 1236);
            case 129:
                return this._createAndCacheOutlineWeightButton$p$0(type, -619033944, 3, 1238);
            case 130:
                return this._createAndCacheOutlineWeightButton$p$0(type, -619033944, 4, 1239);
            case 131:
                return this._createAndCacheOutlineDashesButton$p$0(type, -1736601456, 7, 1243);
            case 132:
                return this._createAndCacheOutlineDashesButton$p$0(type, -1736601456, 8, 1245);
            case 133:
                return this._createAndCacheOutlineDashesButton$p$0(type, -1736601456, 0, 1246);
            case 194:
                return this._createAndCacheOutlineWeightButton$p$0(type, -2136556471, 1, 1234);
            case 196:
                return this._createAndCacheOutlineWeightButton$p$0(type, -2136556471, 2, 1236);
            case 198:
                return this._createAndCacheOutlineWeightButton$p$0(type, -2136556471, 3, 1238);
            case 199:
                return this._createAndCacheOutlineWeightButton$p$0(type, -2136556471, 4, 1239);
            case 202:
                return this._createAndCacheOutlineDashesButton$p$0(type, 1201641489, 0, 1243);
            case 203:
                return this._createAndCacheOutlineDashesButton$p$0(type, 1201641489, 1, 1244);
            case 204:
                return this._createAndCacheOutlineDashesButton$p$0(type, 1201641489, 7, 1245);
            case 205:
                return this._createAndCacheOutlineDashesButton$p$0(type, 1201641489, 2, 1246);
            case 206:
                return this._createAndCacheOutlineDashesButton$p$0(type, 1201641489, 4, 1247);
            case 207:
                return this._createAndCacheOutlineDashesButton$p$0(type, 1201641489, 3, 1248);
            case 208:
                return this._createAndCacheOutlineDashesButton$p$0(type, 1201641489, 5, 1249);
            case 209:
                return this._createAndCacheOutlineDashesButton$p$0(type, 1201641489, 6, 1250);
            default:
                Diag.ULS.debugAssertTag(4527766, 0, false, 'RibbonButton.Create: Unknown ribbon button type: {0}.', type);
                break;
        }
        return null;
    },
    
    createAndCacheRibbonButton: function _Ewa_RibbonControlsManager$createAndCacheRibbonButton$in(type, id, command, cssClass, cluster, imageType, labelAndAlt, description, menuItemId, disabled, keytip) {
        var button = new _Ewa.RB(id, labelAndAlt, command, null, cluster, cssClass, imageType, labelAndAlt, description, menuItemId, disabled, keytip, this._reactContextualUIActive$p$0 && this._addDisabledStateToId$p$0);
        _Ewa.RibbonControlsManager._buttonCache$p[type.toString()] = button;
        return button;
    },
    
    createRibbonComboBoxItem: function _Ewa_RibbonControlsManager$createRibbonComboBoxItem$in(type, id, command, cssClass, cluster, imageType, labelAndAlt, description, menuItemId, disabled, styles, data) {
        return new _Ewa._ribbonComboBoxItem(id, labelAndAlt, command, null, cluster, cssClass, imageType, labelAndAlt, description, menuItemId, disabled, styles, data);
    },
    
    createLabel: function _Ewa_RibbonControlsManager$createLabel$in(id, text) {
        return new _Ewa._ribbonLabel(id, text);
    },
    
    createAndCacheRibbonToggleButton: function _Ewa_RibbonControlsManager$createAndCacheRibbonToggleButton$in(type, id, command, isChecked, cluster, checkedImage) {
        return new _Ewa._ribbonToggleButton(id, 0, command, null, cluster, null, 'None', 0, 0, null, false, 0, isChecked, checkedImage);
    },
    
    createAndCacheCustomizedButton: function _Ewa_RibbonControlsManager$createAndCacheCustomizedButton$in(id, labelAndAlt, command, imageUri, imageType, menuItemId, disabled, imageClass) {
        var button = _Ewa.EwaDictionary.tryGetValue(_Ewa.RibbonControlsManager._buttonCache$p, id, null);
        if (button) {
            return button;
        }
        button = new _Ewa.RB(id, 0, command, null, 3, null, 'None', 0, 0, menuItemId, disabled, 0, false);
        button.setAlt(labelAndAlt);
        button.set_label(labelAndAlt);
        button.setDescription(labelAndAlt);
        button.setCustomizedImage(imageType, imageUri, imageClass);
        _Ewa.RibbonControlsManager._buttonCache$p[id] = button;
        return button;
    },
    
    removeCustomizedButton: function _Ewa_RibbonControlsManager$removeCustomizedButton$in(buttonId) {
        if (this.isButtonExisting(buttonId)) {
            delete _Ewa.RibbonControlsManager._buttonCache$p[buttonId];
        }
    },
    
    isButtonExisting: function _Ewa_RibbonControlsManager$isButtonExisting$in(buttonId) {
        return (buttonId) in _Ewa.RibbonControlsManager._buttonCache$p;
    },
    
    createCustomizedFlyoutAnchor: function _Ewa_RibbonControlsManager$createCustomizedFlyoutAnchor$in(id, menuId, labelAndAlt, command) {
        var flyoutAnchor = new _Ewa._ribbonFlyoutAnchor(id, menuId, 0, command, 3, null, 'None', 0, false);
        flyoutAnchor.setAlt(labelAndAlt);
        flyoutAnchor.set_label(labelAndAlt);
        return flyoutAnchor;
    },
    
    createCustomizedFlyoutAnchorWithImage: function _Ewa_RibbonControlsManager$createCustomizedFlyoutAnchorWithImage$in(id, menuId, labelAndAlt, command, cluster, imageClass, imageType) {
        var flyoutAnchor = new _Ewa._ribbonFlyoutAnchor(id, menuId, 0, command, cluster, imageClass, imageType, 0, this._fixFlyoutAnchorImageNotShowing$p$0);
        flyoutAnchor.setAlt(labelAndAlt);
        flyoutAnchor.set_label(labelAndAlt);
        return flyoutAnchor;
    },
    
    createRibbonComboBox: function _Ewa_RibbonControlsManager$createRibbonComboBox$in(id, menuId, command, populateDynamically, populateOnlyOnce, queryCommand, populateQueryCommand, alt, allowFreeForm, width, allowDefaultContent, autoComplete, arrowImageId) {
        return new _Ewa.RibbonComboBox(id, menuId, command, populateDynamically, populateOnlyOnce, queryCommand, populateQueryCommand, alt, allowFreeForm, width, allowDefaultContent, autoComplete, arrowImageId);
    },
    
    getXmlForControl: function _Ewa_RibbonControlsManager$getXmlForControl$in(control) {
        Diag.ULS.sendTraceTag(36790726, 0, 50, 'RibbonControlsManager.GetXmlForControl: Generating control xml from control props');
        Diag.ULS.debugAssertTag(42858563, 0, !!control, 'RibbonControlsManager.GetXmlForControl: control is null');
        if (!control) {
            Diag.ULS.sendTraceTag(42858564, 0, 10, 'RibbonControlsManager.GetXmlForControl: control is null');
            return null;
        }
        else {
            return control.buildCuiXml();
        }
    },
    
    createColorPicker: function _Ewa_RibbonControlsManager$createColorPicker$in(applyColorCommand, automaticColorCommand, automaticColorTitle, clearColorCommand, noColorTitle) {
        Diag.ULS.debugAssertTag(26035422, 0, !!this._populateDynamicHelper$p$0, 'populateDynamicHelper should be initialized');
        return new _Ewa.RibbonColorPicker(this._populateDynamicHelper$p$0, applyColorCommand, automaticColorCommand, automaticColorTitle, clearColorCommand, noColorTitle);
    },
    
    createGallery: function _Ewa_RibbonControlsManager$createGallery$in(id, width, elementDimensions, title) {
        var $$t_4;
        return $$t_4 = new _Ewa.RibbonGallery(), $$t_4._$$pf_Id$p$0 = id, $$t_4._$$pf_Width$p$0 = width, $$t_4._$$pf_ElementDimensions$p$0 = elementDimensions, $$t_4._$$pf_Title$p$0 = title, $$t_4;
    },
    
    _createAndCacheCommonChartButton$p$0: function _Ewa_RibbonControlsManager$_createAndCacheCommonChartButton$p$0$in(type, id, command, cssClass, labelAndAlt, description, keytip) {
        if (!keytip) {
            _Ewa.ULS.debugSendTraceTag(19718538, 0, 50, 'RibbonControlsManager.CreateAndCacheCommonChartButton: Creating a chart button without keytip. Control id: {0}', id);
        }
        return this.createAndCacheRibbonButton(type, id, command, cssClass, 4, 'Image32by32', labelAndAlt, description, null, false, keytip);
    },
    
    _createAndCacheContextMenuButton$p$0: function _Ewa_RibbonControlsManager$_createAndCacheContextMenuButton$p$0$in(type, id, command, cssClass, cluster, label, disabled, menuItemId) {
        return this.createAndCacheRibbonButton(type, id, command, cssClass, cluster, 'Image16by16', label, (this._reactContextualUIActive$p$0) ? 0 : label, menuItemId, disabled, 0);
    },
    
    _createAndCacheContextMenuButtonNoImage$p$0: function _Ewa_RibbonControlsManager$_createAndCacheContextMenuButtonNoImage$p$0$in(type, id, command, label, disabled, menuItemId) {
        return this.createAndCacheRibbonButton(type, id, command, null, 1, 'None', label, (this._reactContextualUIActive$p$0) ? 0 : label, menuItemId, disabled, 0);
    },
    
    _createAndCacheCommonOutlineButton$p$0: function _Ewa_RibbonControlsManager$_createAndCacheCommonOutlineButton$p$0$in(type, id, command, cssClass, labelAndAlt, value) {
        return this.createAndCacheRibbonButton(type, id, command, cssClass, 4, 'Image16by16', labelAndAlt, 0, value.toString(), false, 0);
    },
    
    _createAndCacheOutlineDashesButton$p$0: function _Ewa_RibbonControlsManager$_createAndCacheOutlineDashesButton$p$0$in(type, command, outlineDashValue, labelAndAlt) {
        return this._createAndCacheCommonOutlineButton$p$0(type, 'OutlineDashStylePresent,' + outlineDashValue, command, 'ewaboot_dashStyle16', labelAndAlt, outlineDashValue);
    },
    
    _createAndCacheOutlineWeightButton$p$0: function _Ewa_RibbonControlsManager$_createAndCacheOutlineWeightButton$p$0$in(type, command, outlineWeightValue, labelAndAlt) {
        return this._createAndCacheCommonOutlineButton$p$0(type, 'OutlineWidthPresent,' + outlineWeightValue, command, 'ewaboot_galLineWidth16', labelAndAlt, outlineWeightValue);
    }
}


_Ewa._ribbonFlyoutAnchor = function _Ewa__ribbonFlyoutAnchor(id, menuId, alt, command, cluster, imageClass, imageType, label, fixFlyoutAnchorImageNotShowing) {
    _Ewa._ribbonFlyoutAnchor.initializeBase(this, [ id, alt, command, cluster, imageClass, imageType, label, false, 0, false ]);
    this._$$pf_Menu$p$1 = new _Ewa.RibbonMenu(menuId);
    this._$$pf_ImageVisibility$p$1 = true;
    this._fixFlyoutAnchorImageNotShowing$p$1 = fixFlyoutAnchorImageNotShowing;
}
_Ewa._ribbonFlyoutAnchor.prototype = {
    _fixFlyoutAnchorImageNotShowing$p$1: false,
    _$$pf_PopulateOnlyOnce$p$1: false,
    
    get_populateOnlyOnce: function _Ewa__ribbonFlyoutAnchor$get_populateOnlyOnce$in() {
        return this._$$pf_PopulateOnlyOnce$p$1;
    },
    
    set_populateOnlyOnce: function _Ewa__ribbonFlyoutAnchor$set_populateOnlyOnce$in(value) {
        this._$$pf_PopulateOnlyOnce$p$1 = value;
        return value;
    },
    
    _$$pf_PopulateCommand$p$1: null,
    
    get_populateCommand: function _Ewa__ribbonFlyoutAnchor$get_populateCommand$in() {
        return this._$$pf_PopulateCommand$p$1;
    },
    
    set_populateCommand: function _Ewa__ribbonFlyoutAnchor$set_populateCommand$in(value) {
        this._$$pf_PopulateCommand$p$1 = value;
        return value;
    },
    
    _$$pf_MenuOpenCommand$p$1: null,
    
    get_menuOpenCommand: function _Ewa__ribbonFlyoutAnchor$get_menuOpenCommand$in() {
        return this._$$pf_MenuOpenCommand$p$1;
    },
    
    set_menuOpenCommand: function _Ewa__ribbonFlyoutAnchor$set_menuOpenCommand$in(value) {
        this._$$pf_MenuOpenCommand$p$1 = value;
        return value;
    },
    
    _$$pf_MenuCloseCommand$p$1: null,
    
    get_menuCloseCommand: function _Ewa__ribbonFlyoutAnchor$get_menuCloseCommand$in() {
        return this._$$pf_MenuCloseCommand$p$1;
    },
    
    set_menuCloseCommand: function _Ewa__ribbonFlyoutAnchor$set_menuCloseCommand$in(value) {
        this._$$pf_MenuCloseCommand$p$1 = value;
        return value;
    },
    
    _$$pf_KeyTip$p$1: null,
    
    get_keyTip: function _Ewa__ribbonFlyoutAnchor$get_keyTip$in() {
        return this._$$pf_KeyTip$p$1;
    },
    
    set_keyTip: function _Ewa__ribbonFlyoutAnchor$set_keyTip$in(value) {
        this._$$pf_KeyTip$p$1 = value;
        return value;
    },
    
    _$$pf_Menu$p$1: null,
    
    get_menu: function _Ewa__ribbonFlyoutAnchor$get_menu$in() {
        return this._$$pf_Menu$p$1;
    },
    
    buildCuiXml: function _Ewa__ribbonFlyoutAnchor$buildCuiXml$in() {
        return Common.CuiXmlUtils.getXmlFromFlyoutAnchorProps(this.buildProps());
    },
    
    _$$pf_ImageVisibility$p$1: false,
    
    get_imageVisibility: function _Ewa__ribbonFlyoutAnchor$get_imageVisibility$in() {
        return this._$$pf_ImageVisibility$p$1;
    },
    
    set_imageVisibility: function _Ewa__ribbonFlyoutAnchor$set_imageVisibility$in(value) {
        this._$$pf_ImageVisibility$p$1 = value;
        return value;
    },
    
    buildProps: function _Ewa__ribbonFlyoutAnchor$buildProps$in() {
        var props = new Common.FlyoutAnchorProps();
        this.fillProps(props);
        props.PopulateOnlyOnce = this._$$pf_PopulateOnlyOnce$p$1;
        props.MenuCloseCommand = (!this._$$pf_MenuCloseCommand$p$1) ? null : (this._$$pf_MenuCloseCommand$p$1 == null) ? 0 : this._$$pf_MenuCloseCommand$p$1.toString();
        props.MenuOpenCommand = (!this._$$pf_MenuOpenCommand$p$1) ? null : (this._$$pf_MenuOpenCommand$p$1 == null) ? 0 : this._$$pf_MenuOpenCommand$p$1.toString();
        props.PopulateQueryCommand = (!this._$$pf_PopulateCommand$p$1) ? null : (this._$$pf_PopulateCommand$p$1 == null) ? 'PopulateDataLabelsMenu' : this._$$pf_PopulateCommand$p$1;
        props.KeyTip = this._$$pf_KeyTip$p$1;
        props.Menu = this._$$pf_Menu$p$1.buildMenuProps();
        if (this._fixFlyoutAnchorImageNotShowing$p$1) {
            props.ImageIsVisible = this._$$pf_ImageVisibility$p$1;
        }
        return props;
    }
}


_Ewa.RibbonGallery = function _Ewa_RibbonGallery() {
    this._galleryItems$p$0 = [];
}
_Ewa.RibbonGallery.prototype = {
    _$$pf_Id$p$0: null,
    
    get_id: function _Ewa_RibbonGallery$get_id$in() {
        return this._$$pf_Id$p$0;
    },
    
    set_id: function _Ewa_RibbonGallery$set_id$in(value) {
        this._$$pf_Id$p$0 = value;
        return value;
    },
    
    _$$pf_Width$p$0: 0,
    
    get_width: function _Ewa_RibbonGallery$get_width$in() {
        return this._$$pf_Width$p$0;
    },
    
    set_width: function _Ewa_RibbonGallery$set_width$in(value) {
        this._$$pf_Width$p$0 = value;
        return value;
    },
    
    _$$pf_ElementDimensions$p$0: null,
    
    get_elementDimensions: function _Ewa_RibbonGallery$get_elementDimensions$in() {
        return this._$$pf_ElementDimensions$p$0;
    },
    
    set_elementDimensions: function _Ewa_RibbonGallery$set_elementDimensions$in(value) {
        this._$$pf_ElementDimensions$p$0 = value;
        return value;
    },
    
    _$$pf_Title$p$0: null,
    
    get_title: function _Ewa_RibbonGallery$get_title$in() {
        return this._$$pf_Title$p$0;
    },
    
    set_title: function _Ewa_RibbonGallery$set_title$in(value) {
        this._$$pf_Title$p$0 = value;
        return value;
    },
    
    buildCuiXml: function _Ewa_RibbonGallery$buildCuiXml$in() {
        return Common.CuiXmlUtils.getXmlFromGalleryProps(this.buildGalleryProps(false));
    },
    
    addGalleryItem: function _Ewa_RibbonGallery$addGalleryItem$in(id, command, queryCommand, altJsStringId, menuItemId, iconName, imageCluster, imageClass, altString, labelText) {
        this.insertGalleryItem(this._galleryItems$p$0.length, id, command, queryCommand, (!altJsStringId) ? altString : _Ewa.ClientStringManager.get_instance().getString(altJsStringId), menuItemId, iconName, imageCluster, imageClass, labelText);
    },
    
    insertGalleryItem: function _Ewa_RibbonGallery$insertGalleryItem$in(position, id, command, queryCommand, alt, menuItemId, iconName, imageCluster, imageClass, labelText) {
        if (position > this._galleryItems$p$0.length || position < 0) {
            Error.argumentOutOfRange('Invalid Index');
        }
        var $$t_A;
        this._galleryItems$p$0.splice(position, 0, ($$t_A = new Common.IconGalleryButtonProps(), $$t_A.Id = id, $$t_A.Command = command.toString(), $$t_A.QueryCommand = (!queryCommand) ? null : (queryCommand == null) ? 'QueryBreadcrumbDocName' : queryCommand, $$t_A.Alt = alt, $$t_A.MenuItemId = menuItemId, $$t_A.Icon = iconName, $$t_A.Image = (!imageCluster) ? null : _Ewa.ClientHostingPlatform.getClusterUri(imageCluster), $$t_A.ImageClass = imageClass, $$t_A.LabelText = labelText, $$t_A));
    },
    
    buildGalleryProps: function _Ewa_RibbonGallery$buildGalleryProps$in(showLabelsBelowIcons) {
        var fullIconStyle = null;
        var galleryStyle = null;
        switch (this._$$pf_ElementDimensions$p$0) {
            case 'Size120by20':
                fullIconStyle = this._buildIconStyle$p$0(120, 20, showLabelsBelowIcons);
                galleryStyle = this._buildGalleryStyle$p$0(130, 30, showLabelsBelowIcons);
                break;
            case 'Size90by21':
                fullIconStyle = this._buildIconStyle$p$0(90, 21, showLabelsBelowIcons);
                galleryStyle = this._buildGalleryStyle$p$0(100, 33, showLabelsBelowIcons);
                break;
            case 'Size24by24':
                fullIconStyle = this._buildIconStyle$p$0(28, 28, showLabelsBelowIcons);
                galleryStyle = this._buildGalleryStyle$p$0(38, 38, showLabelsBelowIcons);
                break;
            case 'Size112by64':
                fullIconStyle = this._buildIconStyle$p$0(24, 24, showLabelsBelowIcons);
                galleryStyle = this._buildGalleryStyle$p$0(112, 64, showLabelsBelowIcons);
                break;
            default:
                Diag.ULS.debugAssertTag(50931292, 0, true, 'Invalid element size.');
                break;
        }
        for (var i = 0; i < this._galleryItems$p$0.length; i++) {
            this._galleryItems$p$0[i].FullIconStyle = fullIconStyle;
        }
        var $$t_4;
        return $$t_4 = new Common.GalleryProps(), $$t_4.Id = this._$$pf_Id$p$0, $$t_4.ExternalId = this._$$pf_Id$p$0, $$t_4.Type = 3, $$t_4.Title = this._$$pf_Title$p$0, $$t_4.Width = this._$$pf_Width$p$0, $$t_4.ElementDimensions = this._$$pf_ElementDimensions$p$0, $$t_4.GalleryItems = this._galleryItems$p$0, $$t_4.GalleryStyle = galleryStyle, $$t_4;
    },
    
    _buildIconStyle$p$0: function _Ewa_RibbonGallery$_buildIconStyle$p$0$in(width, height, showLabelsBelowIcons) {
        var iconStyle = {};
        var rootStyle = {};
        rootStyle['width'] = width;
        rootStyle['height'] = height;
        if (showLabelsBelowIcons) {
            rootStyle['alignSelf'] = 'center';
            rootStyle['marginBottom'] = '4px';
        }
        iconStyle['root'] = rootStyle;
        return iconStyle;
    },
    
    _buildGalleryStyle$p$0: function _Ewa_RibbonGallery$_buildGalleryStyle$p$0$in(width, height, showLabelsBelowIcons) {
        var galleryStyle = {};
        var buttonInExpanded = {};
        var rootStyle = {};
        rootStyle['width'] = width;
        rootStyle['height'] = height;
        buttonInExpanded['root'] = rootStyle;
        if (showLabelsBelowIcons) {
            var flexContainer = {};
            flexContainer['display'] = 'flex';
            flexContainer['flexDirection'] = 'column';
            flexContainer['alignItems'] = 'stretch';
            buttonInExpanded['flexContainer'] = flexContainer;
        }
        galleryStyle['galleryButtonInExpanded'] = buttonInExpanded;
        return galleryStyle;
    }
}


_Ewa._ribbonLabel = function _Ewa__ribbonLabel(id, text) {
    this._id$p$0 = id;
    this._text$p$0 = text;
}
_Ewa._ribbonLabel.prototype = {
    _id$p$0: null,
    _text$p$0: null,
    
    get_id: function _Ewa__ribbonLabel$get_id$in() {
        return this._id$p$0;
    },
    
    get_text: function _Ewa__ribbonLabel$get_text$in() {
        return this._text$p$0;
    },
    
    get_label: function _Ewa__ribbonLabel$get_label$in() {
        throw Error.notImplemented('RibbonLabel doesn\'t have get implementation for the Label property');
    },
    
    set_label: function _Ewa__ribbonLabel$set_label$in(value) {
        throw Error.notImplemented('RibbonLabel doesn\'t have set implementation for the Label property');
        return value;
    },
    
    get_alt: function _Ewa__ribbonLabel$get_alt$in() {
        throw Error.notImplemented('RibbonLabel doesn\'t have get implementation for the Alt property');
    },
    
    buildCuiXml: function _Ewa__ribbonLabel$buildCuiXml$in() {
        return String.format('<Label id=\"{0}\" LabelText=\"{1}\" />', this._id$p$0, this._text$p$0);
    },
    
    setImage: function _Ewa__ribbonLabel$setImage$in(imageType, cluster, imageClass) {
        throw Error.notImplemented('RibbonLabel doesn\'t have SetImage implementation ');
    },
    
    setCustomizedImage: function _Ewa__ribbonLabel$setCustomizedImage$in(imageType, imageUri, imageClass) {
        throw Error.notImplemented('RibbonLabel doesn\'t have SetCustomizedImage implementation ');
    },
    
    setAlt: function _Ewa__ribbonLabel$setAlt$in(alt) {
        throw Error.notImplemented('RibbonLabel doesn\'t have SetAlt implementation ');
    },
    
    clearImage: function _Ewa__ribbonLabel$clearImage$in() {
        throw Error.notImplemented('RibbonLabel doesn\'t have ClearImage implementation ');
    },
    
    buildProps: function _Ewa__ribbonLabel$buildProps$in() {
        var $$t_0;
        return $$t_0 = new Common.LabelProps(), $$t_0.Id = this._id$p$0, $$t_0.LabelText = this._text$p$0, $$t_0;
    }
}


_Ewa.RibbonMenu = function _Ewa_RibbonMenu(menuId) {
    this._$$pf_MenuSections$p$0 = [];
    this._$$pf_Id$p$0 = menuId;
}
_Ewa.RibbonMenu.prototype = {
    _$$pf_MenuSections$p$0: null,
    
    get_menuSections: function _Ewa_RibbonMenu$get_menuSections$in() {
        return this._$$pf_MenuSections$p$0;
    },
    
    _$$pf_Id$p$0: null,
    
    get_id: function _Ewa_RibbonMenu$get_id$in() {
        return this._$$pf_Id$p$0;
    },
    
    set_id: function _Ewa_RibbonMenu$set_id$in(value) {
        this._$$pf_Id$p$0 = value;
        return value;
    },
    
    buildCuiXml: function _Ewa_RibbonMenu$buildCuiXml$in() {
        return Common.CuiXmlUtils.getXmlFromMenuProps(this.buildMenuProps());
    },
    
    buildMenuProps: function _Ewa_RibbonMenu$buildMenuProps$in() {
        var $$t_5;
        var menuProps = ($$t_5 = new Common.MenuProps(), $$t_5.Id = this._$$pf_Id$p$0, $$t_5.UpdateDynamically = true, $$t_5.MenuSectionList = [], $$t_5);
        for (var $$arr_1 = this._$$pf_MenuSections$p$0, $$len_2 = $$arr_1.length, $$idx_3 = 0; $$idx_3 < $$len_2; ++$$idx_3) {
            var menuSection = $$arr_1[$$idx_3];
            if (_Ewa.RibbonColorPicker.isInstanceOfType(menuSection)) {
                Array.addRange(menuProps.MenuSectionList, ($$as(_Ewa.RibbonColorPicker, menuSection)).buildMenuProps().MenuSectionList);
            }
            else {
                Array.add(menuProps.MenuSectionList, menuSection.buildMenuSectionProps());
            }
        }
        return menuProps;
    }
}


_Ewa.RibbonMenuSection = function _Ewa_RibbonMenuSection() {
    this._$$pf_Buttons$p$0 = [];
    this._$$pf_DisplayMode$p$0 = 'Menu16';
    this._$$pf_ShowTitleIcon$p$0 = true;
    this._$$pf_ShowTitleBackground$p$0 = true;
    this._$$pf_TitleFocusable$p$0 = true;
}
_Ewa.RibbonMenuSection.prototype = {
    _$$pf_Buttons$p$0: null,
    
    get_buttons: function _Ewa_RibbonMenuSection$get_buttons$in() {
        return this._$$pf_Buttons$p$0;
    },
    
    _$$pf_Title$p$0: null,
    
    get_title: function _Ewa_RibbonMenuSection$get_title$in() {
        return this._$$pf_Title$p$0;
    },
    
    set_title: function _Ewa_RibbonMenuSection$set_title$in(value) {
        this._$$pf_Title$p$0 = value;
        return value;
    },
    
    _$$pf_DisplayMode$p$0: null,
    
    get_displayMode: function _Ewa_RibbonMenuSection$get_displayMode$in() {
        return this._$$pf_DisplayMode$p$0;
    },
    
    set_displayMode: function _Ewa_RibbonMenuSection$set_displayMode$in(value) {
        this._$$pf_DisplayMode$p$0 = value;
        return value;
    },
    
    _$$pf_ShowTitleIcon$p$0: false,
    
    get_showTitleIcon: function _Ewa_RibbonMenuSection$get_showTitleIcon$in() {
        return this._$$pf_ShowTitleIcon$p$0;
    },
    
    set_showTitleIcon: function _Ewa_RibbonMenuSection$set_showTitleIcon$in(value) {
        this._$$pf_ShowTitleIcon$p$0 = value;
        return value;
    },
    
    _$$pf_ShowTitleBackground$p$0: false,
    
    get_showTitleBackground: function _Ewa_RibbonMenuSection$get_showTitleBackground$in() {
        return this._$$pf_ShowTitleBackground$p$0;
    },
    
    set_showTitleBackground: function _Ewa_RibbonMenuSection$set_showTitleBackground$in(value) {
        this._$$pf_ShowTitleBackground$p$0 = value;
        return value;
    },
    
    _$$pf_TitleFocusable$p$0: false,
    
    get_titleFocusable: function _Ewa_RibbonMenuSection$get_titleFocusable$in() {
        return this._$$pf_TitleFocusable$p$0;
    },
    
    set_titleFocusable: function _Ewa_RibbonMenuSection$set_titleFocusable$in(value) {
        this._$$pf_TitleFocusable$p$0 = value;
        return value;
    },
    
    buildCuiXml: function _Ewa_RibbonMenuSection$buildCuiXml$in() {
        return Common.CuiXmlUtils.getXmlFromMenuSectionProps(this.buildMenuSectionProps());
    },
    
    buildMenuSectionProps: function _Ewa_RibbonMenuSection$buildMenuSectionProps$in() {
        var $$t_5;
        var props = ($$t_5 = new Common.MenuSectionProps(), $$t_5.ControlList = [], $$t_5);
        if (this._$$pf_Buttons$p$0.length === 1 && _Ewa.IRibbonGallery.isInstanceOfType(this._$$pf_Buttons$p$0[0])) {
            Array.add(props.ControlList, (this._$$pf_Buttons$p$0[0]).buildGalleryProps(false));
        }
        else {
            var controlsId = '';
            for (var i = 0; i < this._$$pf_Buttons$p$0.length; i++) {
                var control = $$as(_Ewa.IRibbonControl, this._$$pf_Buttons$p$0[i]);
                if (!control) {
                    Diag.ULS.debugAssertTag(36275287, 0, false, 'RibbonMenuSection.Buttons must contain only IRibbonControl instances.');
                    continue;
                }
                var controlProps = (control).buildProps();
                Array.add(props.ControlList, controlProps);
                controlsId += controlProps.Id;
            }
            props.ControlsId = controlsId + '.Controls';
        }
        props.Title = this._$$pf_Title$p$0;
        props.DisplayMode = this._$$pf_DisplayMode$p$0;
        props.ShowMenuSectionTitleIcon = this._$$pf_ShowTitleIcon$p$0;
        props.ShowMenuSectionTitleBackground = this._$$pf_ShowTitleBackground$p$0;
        props.MenuSectionTitleFocusable = this._$$pf_TitleFocusable$p$0;
        return props;
    }
}


_Ewa._ribbonToggleButton = function _Ewa__ribbonToggleButton(id, alt, command, queryCommand, cluster, imageClass, imageType, label, description, menuItemId, disabled, keytip, isChecked, checkedImage) {
    _Ewa._ribbonToggleButton.initializeBase(this, [ id, alt, command, queryCommand, cluster, imageClass, imageType, label, description, menuItemId, disabled, keytip, false ]);
    this._isChecked$p$2 = isChecked;
    this._checkedImage$p$2 = checkedImage;
}
_Ewa._ribbonToggleButton.prototype = {
    _isChecked$p$2: false,
    _checkedImage$p$2: null,
    
    buildProps: function _Ewa__ribbonToggleButton$buildProps$in() {
        var props = new Common.CheckMarkToggleButtonProps();
        this.fillProps(props);
        props.MenuItemId = this._$$pf_MenuItemId$p$1;
        props.QueryCommand = this._$$pf_QueryCommand$p$1;
        props.Description = this._$$pf_Description$p$1;
        props.IsChecked = this._isChecked$p$2;
        props.CheckedImageClass = this._checkedImage$p$2;
        props.CheckedImage = this._imageUri$p$0;
        return props;
    }
}


_Ewa._ribbonControl.registerClass('_Ewa._ribbonControl', null, _Ewa.IRibbonControl, _Ewa.IRibbonXmlRenderer);
_Ewa.RB.registerClass('_Ewa.RB', _Ewa._ribbonControl, _Ewa.IRibbonButton, _Ewa.IRibbonControl, _Ewa.IRibbonXmlRenderer);
_Ewa.RibbonColorPicker.registerClass('_Ewa.RibbonColorPicker', null, _Ewa.IRibbonXmlRenderer);
_Ewa.RibbonComboBox.registerClass('_Ewa.RibbonComboBox', null, _Ewa.IRibbonComboBox, _Ewa.IRibbonXmlRenderer);
_Ewa._ribbonComboBoxItem.registerClass('_Ewa._ribbonComboBoxItem', _Ewa._ribbonControl, _Ewa.IRibbonButton, _Ewa.IRibbonControl, _Ewa.IRibbonXmlRenderer);
_Ewa.RibbonControlsBootstrapper.registerClass('_Ewa.RibbonControlsBootstrapper');
_Ewa.RibbonControlsFactory.registerClass('_Ewa.RibbonControlsFactory', _Ewa.ServiceFactoryBase$1.$$(_Ewa.IRibbonControlsManager));
_Ewa.RibbonControlsManager.registerClass('_Ewa.RibbonControlsManager', null, _Ewa.IRibbonControlsManager);
_Ewa._ribbonFlyoutAnchor.registerClass('_Ewa._ribbonFlyoutAnchor', _Ewa._ribbonControl, _Ewa.IRibbonFlyoutAnchor, _Ewa.IRibbonControl, _Ewa.IRibbonXmlRenderer);
_Ewa.RibbonGallery.registerClass('_Ewa.RibbonGallery', null, _Ewa.IRibbonGallery, _Ewa.IRibbonXmlRenderer);
_Ewa._ribbonLabel.registerClass('_Ewa._ribbonLabel', null, _Ewa.IRibbonLabel, _Ewa.IRibbonControl, _Ewa.IRibbonXmlRenderer);
_Ewa.RibbonMenu.registerClass('_Ewa.RibbonMenu', null, _Ewa.IRibbonMenu, _Ewa.IRibbonXmlRenderer);
_Ewa.RibbonMenuSection.registerClass('_Ewa.RibbonMenuSection', null, _Ewa.IRibbonMenuSection, _Ewa.IRibbonXmlRenderer);
_Ewa._ribbonToggleButton.registerClass('_Ewa._ribbonToggleButton', _Ewa.RB);
_Ewa._ribbonToggleButton.prototype.toString = _Ewa.RB.prototype.toString;
_Ewa._ribbonControl._alwaysDisabledCommand$p = null;
_Ewa.RibbonControlsManager._buttonCache$p = {};
_Ewa.RibbonControlsBootstrapper.main();
Type.registerNamespace('_Ewa');

_Ewa.StatusBarAggregateControl = function _Ewa_StatusBarAggregateControl(labelName, isEnabled, loggingName) {
    _Ewa.StatusBarAggregateControl.initializeBase(this, [ false ]);
    _Ewa.HelperMethods.verifyArgumentNotNull(labelName, 'labelName');
    _Ewa.HelperMethods.verifyArgumentNotNull(loggingName, 'loggingName');
    this._labelName$p$3 = labelName;
    this._isEnabled$p$3 = isEnabled;
    this._loggingName$p$3 = loggingName;
}
_Ewa.StatusBarAggregateControl.prototype = {
    _labelName$p$3: null,
    _loggingName$p$3: null,
    _isEnabled$p$3: false,
    
    add_enabledStateChanged: function _Ewa_StatusBarAggregateControl$add_enabledStateChanged$in(value) {
        this.addHandler('EnabledStateChanged', value);
    },
    
    remove_enabledStateChanged: function _Ewa_StatusBarAggregateControl$remove_enabledStateChanged$in(value) {
        this.removeHandler('EnabledStateChanged', value);
    },
    
    _$$pf_Value$p$3: null,
    
    get_value: function _Ewa_StatusBarAggregateControl$get_value$in() {
        return this._$$pf_Value$p$3;
    },
    
    set_value: function _Ewa_StatusBarAggregateControl$set_value$in(value) {
        this._$$pf_Value$p$3 = value;
        return value;
    },
    
    get_isEnabled: function _Ewa_StatusBarAggregateControl$get_isEnabled$in() {
        return this._isEnabled$p$3;
    },
    
    set_isEnabled: function _Ewa_StatusBarAggregateControl$set_isEnabled$in(value) {
        if (value !== this._isEnabled$p$3) {
            this._isEnabled$p$3 = value;
            this.raiseEvent('EnabledStateChanged', null, null);
        }
        return value;
    },
    
    get_isVisible: function _Ewa_StatusBarAggregateControl$get_isVisible$in() {
        return this._isEnabled$p$3 && !!this._$$pf_Value$p$3;
    },
    
    get_labelText: function _Ewa_StatusBarAggregateControl$get_labelText$in() {
        return (!this._$$pf_Value$p$3) ? this._labelName$p$3 : String.format(_Ewa.ClientStringManager.get_instance().getStringForStringFormat(72), this._labelName$p$3, this._$$pf_Value$p$3);
    },
    
    get_loggingName: function _Ewa_StatusBarAggregateControl$get_loggingName$in() {
        return this._loggingName$p$3;
    }
}


_Ewa.StatusBarAggregateControlCollection = function _Ewa_StatusBarAggregateControlCollection() {
    this.$$d__raiseAggregatesChangedEvent$p$3 = Function.createDelegate(this, this._raiseAggregatesChangedEvent$p$3);
    this._controls$p$3 = new _Ewa.EwaDictionary(false);
    _Ewa.StatusBarAggregateControlCollection.initializeBase(this, [ false ]);
    this._addControl$p$3(0, 343, 'Average', true);
    this._addControl$p$3(1, 344, 'Count', true);
    this._addControl$p$3(2, 345, 'NumericalCount', false);
    this._addControl$p$3(3, 346, 'Minimum', false);
    this._addControl$p$3(4, 347, 'Maximum', false);
    this._addControl$p$3(5, 348, 'Sum', true);
}
_Ewa.StatusBarAggregateControlCollection.get_emptyAggregateValues = function _Ewa_StatusBarAggregateControlCollection$get_emptyAggregateValues$st() {
    if (!_Ewa.StatusBarAggregateControlCollection._emptyAggregateValues$p) {
        _Ewa.StatusBarAggregateControlCollection._emptyAggregateValues$p = ({});
        _Ewa.StatusBarAggregateControlCollection._emptyAggregateValues$p.Average = _Ewa.StatusBarAggregateControlCollection._emptyAggregateValues$p.Count = _Ewa.StatusBarAggregateControlCollection._emptyAggregateValues$p.NumericalCount = _Ewa.StatusBarAggregateControlCollection._emptyAggregateValues$p.Minimum = _Ewa.StatusBarAggregateControlCollection._emptyAggregateValues$p.Minimum = _Ewa.StatusBarAggregateControlCollection._emptyAggregateValues$p.Sum = null;
    }
    return _Ewa.StatusBarAggregateControlCollection._emptyAggregateValues$p;
}
_Ewa.StatusBarAggregateControlCollection.prototype = {
    _aggregateValues$p$3: null,
    
    add_aggregatesChanged: function _Ewa_StatusBarAggregateControlCollection$add_aggregatesChanged$in(value) {
        this.addHandler('AggregatesChanged', value);
    },
    
    remove_aggregatesChanged: function _Ewa_StatusBarAggregateControlCollection$remove_aggregatesChanged$in(value) {
        this.removeHandler('AggregatesChanged', value);
    },
    
    get_aggregateValues: function _Ewa_StatusBarAggregateControlCollection$get_aggregateValues$in() {
        return this._aggregateValues$p$3 || _Ewa.StatusBarAggregateControlCollection.get_emptyAggregateValues();
    },
    
    set_aggregateValues: function _Ewa_StatusBarAggregateControlCollection$set_aggregateValues$in(value) {
        var newValues = value || _Ewa.StatusBarAggregateControlCollection.get_emptyAggregateValues();
        if (newValues !== this.get_aggregateValues()) {
            this._setControlValue$p$3(0, newValues.Average);
            this._setControlValue$p$3(1, newValues.Count);
            this._setControlValue$p$3(2, newValues.NumericalCount);
            this._setControlValue$p$3(3, newValues.Minimum);
            this._setControlValue$p$3(4, newValues.Maximum);
            this._setControlValue$p$3(5, newValues.Sum);
            this._aggregateValues$p$3 = newValues;
            this._raiseAggregatesChangedEvent$p$3(null, null);
        }
        return value;
    },
    
    dispose: function _Ewa_StatusBarAggregateControlCollection$dispose$in() {
        var controlsArray = this._controls$p$3.get_values();
        System.IDisposableExtensions.safeDisposeArray(controlsArray);
        this._controls$p$3.clear();
        _Ewa.BaseEventSource.prototype.dispose.call(this);
    },
    
    getControl: function _Ewa_StatusBarAggregateControlCollection$getControl$in(commandId) {
        return this._controls$p$3.getItem(commandId);
    },
    
    addCommandMappings: function _Ewa_StatusBarAggregateControlCollection$addCommandMappings$in(aggregateType) {
        var commandKeys = [];
        for (var $$pai_7 = 1; $$pai_7 < arguments.length; ++$$pai_7) {
            commandKeys[$$pai_7 - 1] = arguments[$$pai_7];
        }
        _Ewa.HelperMethods.verifyArgumentNotNull(commandKeys, 'commandKeys');
        var control = this.getControl(aggregateType.toString());
        for (var $$arr_3 = commandKeys, $$len_4 = $$arr_3.length, $$idx_5 = 0; $$idx_5 < $$len_4; ++$$idx_5) {
            var commandKey = $$arr_3[$$idx_5];
            this._controls$p$3.add(commandKey, control);
        }
    },
    
    _addControl$p$3: function _Ewa_StatusBarAggregateControlCollection$_addControl$p$3$in(aggregateType, labelNameStringId, loggingName, isEnabled) {
        var control = new _Ewa.StatusBarAggregateControl(_Ewa.ClientStringManager.get_instance().getStringUnencoded(labelNameStringId), isEnabled, loggingName);
        control.add_enabledStateChanged(this.$$d__raiseAggregatesChangedEvent$p$3);
        Diag.ULS.debugAssertTag(5252514, 0, !this._controls$p$3.containsKey(aggregateType.toString()), '');
        this._controls$p$3.add(aggregateType.toString(), control);
    },
    
    _setControlValue$p$3: function _Ewa_StatusBarAggregateControlCollection$_setControlValue$p$3$in(aggregateType, value) {
        var control = this.getControl(aggregateType.toString());
        control._$$pf_Value$p$3 = value;
    },
    
    _raiseAggregatesChangedEvent$p$3: function _Ewa_StatusBarAggregateControlCollection$_raiseAggregatesChangedEvent$p$3$in(sender, e) {
        this.raiseEvent('AggregatesChanged', null, null);
    }
}


_Ewa.StatusBarAggregateManager = function _Ewa_StatusBarAggregateManager(ewaControl, clientRequestManager, clock) {
    this.$$d__throttledUpdateAggregateValues$p$0 = Function.createDelegate(this, this._throttledUpdateAggregateValues$p$0);
    this.$$d__onBlockCacheItemEvicted$p$0 = Function.createDelegate(this, this._onBlockCacheItemEvicted$p$0);
    this.$$d__onBlockCacheItemChanged$p$0 = Function.createDelegate(this, this._onBlockCacheItemChanged$p$0);
    this.$$d__onSelectionChanging$p$0 = Function.createDelegate(this, this._onSelectionChanging$p$0);
    this.$$d__onWorkbookOpened$p$0 = Function.createDelegate(this, this._onWorkbookOpened$p$0);
    this.$$d__onSessionIdChanged$p$0 = Function.createDelegate(this, this._onSessionIdChanged$p$0);
    this._aggregateControls$p$0 = new _Ewa.StatusBarAggregateControlCollection();
    this._lastSeenGridBlockCacheDigests$p$0 = new _Ewa.EwaDictionary(true);
    _Ewa.HelperMethods.verifyArgumentNotNull(ewaControl, 'ewaControl');
    this._ewaControl$p$0 = ewaControl;
    this._clientRequestManager$p$0 = clientRequestManager || Common.AFrameworkApplication.theClientRequestManager;
    this._clock$p$0 = clock || _Ewa.IClock.get_defaultClock();
    this._ewaControl$p$0.get_sessionStateManager().add_sessionIdChanged(this.$$d__onSessionIdChanged$p$0);
    this._ewaControl$p$0.add_workbookOpened(this.$$d__onWorkbookOpened$p$0);
    this.get__selectionManager$p$0().add_selectionChanged(this.$$d__onSelectionChanging$p$0);
    this.get__blockManager$p$0().add_blockCacheItemChanged(this.$$d__onBlockCacheItemChanged$p$0);
    this.get__blockManager$p$0().add_blockCacheItemEvicted(this.$$d__onBlockCacheItemEvicted$p$0);
    this._setUpCommandMappings$p$0(0, 'Average', -1015637685);
    this._setUpCommandMappings$p$0(1, 'Count', 1957769939);
    this._setUpCommandMappings$p$0(2, 'NumericalCount', -1292677035);
    this._setUpCommandMappings$p$0(3, 'Minimum', 405783320);
    this._setUpCommandMappings$p$0(4, 'Maximum', 1210824414);
    this._setUpCommandMappings$p$0(5, 'Sum', 1265371067);
    this._statusBarManager$p$0 = this._ewaControl$p$0.get_serviceRegistry().getService(_Ewa.ICommandUIManager, 29, false);
    if (this._statusBarManager$p$0) {
        this._statusBarManager$p$0.addFeatureRootUser(this);
    }
    this._isDiscontinuousSelectionEnabled$p$0 = this._ewaControl$p$0.isServerFeatureEnabled(458);
}
_Ewa.StatusBarAggregateManager.initData = function _Ewa_StatusBarAggregateManager$initData$st() {
    var addCommandData = _Ewa.CommandDataManager.addCommandData;
    addCommandData(-1015637685, 1535, 0, 0);
    addCommandData(1957769939, 1535, 0, 0);
    addCommandData(-1292677035, 1535, 0, 0);
    addCommandData(405783320, 1535, 0, 0);
    addCommandData(1210824414, 1535, 0, 0);
    addCommandData(1265371067, 1535, 0, 0);
}
_Ewa.StatusBarAggregateManager.attach = function _Ewa_StatusBarAggregateManager$attach$st(ewaControl) {
    _Ewa.StatusBarAggregateManager.initData();
    var aggregateManager = new _Ewa.StatusBarAggregateManager(ewaControl, null, null);
    ewaControl.get_commandHandlerManager().addCommandHandler(aggregateManager, null);
    ewaControl.get_serviceRegistry().registerService(_Ewa.IStatusBarAggregateManager, 27, aggregateManager);
}
_Ewa.StatusBarAggregateManager._tryToCalculateAggregates$p = function _Ewa_StatusBarAggregateManager$_tryToCalculateAggregates$p$st(selectedRanges, calculatedValues) {
    calculatedValues.val = null;
    return selectedRanges.length === 1 && selectedRanges[0].get_isSingle();
}
_Ewa.StatusBarAggregateManager.prototype = {
    _clientRequestManager$p$0: null,
    _clock$p$0: null,
    _isDiscontinuousSelectionEnabled$p$0: false,
    _ewaControl$p$0: null,
    _updateAggregatesAsyncContext$p$0: null,
    _getAggregateValuesRequest$p$0: null,
    _statusBarManager$p$0: null,
    
    add_statusChanged: function _Ewa_StatusBarAggregateManager$add_statusChanged$in(value) {
        this._aggregateControls$p$0.add_aggregatesChanged(value);
    },
    
    remove_statusChanged: function _Ewa_StatusBarAggregateManager$remove_statusChanged$in(value) {
        this._aggregateControls$p$0.remove_aggregatesChanged(value);
    },
    
    get_aggregateValues: function _Ewa_StatusBarAggregateManager$get_aggregateValues$in() {
        return this._aggregateControls$p$0.get_aggregateValues();
    },
    
    set_aggregateValues: function _Ewa_StatusBarAggregateManager$set_aggregateValues$in(value) {
        this._aggregateControls$p$0.set_aggregateValues(value);
        return value;
    },
    
    get__blockManager$p$0: function _Ewa_StatusBarAggregateManager$get__blockManager$p$0$in() {
        return _Ewa.GridViewExtensions.grid(this._ewaControl$p$0).get_blockManager();
    },
    
    get__selectionManager$p$0: function _Ewa_StatusBarAggregateManager$get__selectionManager$p$0$in() {
        return _Ewa.GridViewExtensions.grid(this._ewaControl$p$0).get_selectionManager();
    },
    
    dispose: function _Ewa_StatusBarAggregateManager$dispose$in() {
        if (this._ewaControl$p$0) {
            this._ewaControl$p$0.get_sessionStateManager().remove_sessionIdChanged(this.$$d__onSessionIdChanged$p$0);
            this._ewaControl$p$0.remove_workbookOpened(this.$$d__onWorkbookOpened$p$0);
            this.get__selectionManager$p$0().remove_selectionChanged(this.$$d__onSelectionChanging$p$0);
            this.get__blockManager$p$0().remove_blockCacheItemChanged(this.$$d__onBlockCacheItemChanged$p$0);
            this.get__blockManager$p$0().remove_blockCacheItemEvicted(this.$$d__onBlockCacheItemEvicted$p$0);
            this._cancelOutstandingAggregateValuesRequest$p$0();
        }
        if (this._statusBarManager$p$0) {
            this._statusBarManager$p$0.removeFeatureRootUser(this);
            this._statusBarManager$p$0 = null;
        }
        System.IDisposableExtensions.safeDisposeArray([ this._updateAggregatesAsyncContext$p$0, this._aggregateControls$p$0 ]);
        this._updateAggregatesAsyncContext$p$0 = null;
        this._aggregateControls$p$0 = null;
        this._ewaControl$p$0 = null;
        if (this._lastSeenGridBlockCacheDigests$p$0) {
            this._lastSeenGridBlockCacheDigests$p$0.clear();
            this._lastSeenGridBlockCacheDigests$p$0 = null;
        }
    },
    
    executeRootCommand: function _Ewa_StatusBarAggregateManager$executeRootCommand$in(commandId, commandParams, commandSqmInfo, actionResultCallback, telemetryParams) {
        _Ewa.HelperMethods.verifyArgumentNotNull(commandParams, 'commandParams');
        var control = this._getControl$p$0(commandId);
        if (!control) {
            return false;
        }
        if (!this.getQueryCommandStatus(commandId, commandParams)) {
            Diag.ULS.debugAssertTag(4068959, 0, false, 'StatusBarAggregateManager.HandleQueryCommand: We thought we knew how to handle the command \'{0}\', but we actually don\'t', commandId);
            return false;
        }
        return true;
    },
    
    getQueryCommandStatus: function _Ewa_StatusBarAggregateManager$getQueryCommandStatus$in(commandId, commandParams) {
        _Ewa.HelperMethods.verifyArgumentNotNull(commandParams, 'commandParams');
        var control = this._getControl$p$0(commandId);
        if (!control) {
            return false;
        }
        if (commandId.endsWith('Label')) {
            commandParams['Value'] = control.get_labelText();
            commandParams['Visible'] = control.get_isVisible();
        }
        else if (commandId.endsWith('Button')) {
            commandParams['LabelText'] = control.get_labelText();
            commandParams['On'] = control.get_isEnabled();
        }
        else {
            return false;
        }
        return true;
    },
    
    isRootCommandEnabled: function _Ewa_StatusBarAggregateManager$isRootCommandEnabled$in(commandName, properties) {
        return true;
    },
    
    shouldDisable: function _Ewa_StatusBarAggregateManager$shouldDisable$in(selectionMode, command) {
        return false;
    },
    
    executeCommand: function _Ewa_StatusBarAggregateManager$executeCommand$in(selectionMode, commandInfo, properties, data) {
        var control = this._getControl$p$0(commandInfo.get_command());
        if (!control) {
            return _Ewa.RibbonCommandExtensions.createTaskForUnhandledCommand(commandInfo.get_command());
        }
        control.set_isEnabled(!control.get_isEnabled());
        this._logCustomizeStatusBar$p$0(control.get_loggingName(), control.get_isEnabled());
        return $$sc.Task.fromResult(Boolean, true);
    },
    
    canExecuteCommand: function _Ewa_StatusBarAggregateManager$canExecuteCommand$in(selectionMode, commandInfo, properties, data) {
        return !!this._getControl$p$0(commandInfo.get_command());
    },
    
    populateMenu: function _Ewa_StatusBarAggregateManager$populateMenu$in(selectionMode, populateCommand, menuProperties) {
        return false;
    },
    
    makeGetStatusBarAggregatesRequest: function _Ewa_StatusBarAggregateManager$makeGetStatusBarAggregatesRequest$in(activeCell, selectedRanges, successCallback) {
        var ewaControl = this._ewaControl$p$0;
        this._cancelOutstandingAggregateValuesRequest$p$0();
        if (this._ewaControl$p$0.get_sessionStateManager().get_isSessionActive()) {
            this._getAggregateValuesRequest$p$0 = _Ewa.StatusBarAggregatesWebServiceProxy.getStatusBarAggregates(ewaControl.get_connectionManager().get_privateWebServiceProxy(), _Ewa.RangeExtensions.createSheetCell(activeCell, ewaControl), _Ewa.RangeExtensions.createSheetMultiRangeFromEwaControlGeneral(selectedRanges, ewaControl), successCallback, null, null, null);
        }
    },
    
    _tryHarderToCalculateAggregates$p$0: function _Ewa_StatusBarAggregateManager$_tryHarderToCalculateAggregates$p$0$in(selectedRanges, calculatedValues) {
        return _Ewa.StatusBarAggregateManager._tryToCalculateAggregates$p(selectedRanges, calculatedValues) || (this._areAllCellsLoaded$p$0(selectedRanges) && this._areAllCellsEmpty$p$0(selectedRanges));
    },
    
    _areAllCellsLoaded$p$0: function _Ewa_StatusBarAggregateManager$_areAllCellsLoaded$p$0$in(ranges) {
        var loadedRange = _Ewa.GridViewExtensions.grid(this._ewaControl$p$0).get_loadedRange();
        var $$t_4 = this;
        return !!loadedRange && Common.ArrayUtils.all(_Ewa.Range, ranges, function(range) {
            return loadedRange.contains(range);
        });
    },
    
    _areAllCellsEmpty$p$0: function _Ewa_StatusBarAggregateManager$_areAllCellsEmpty$p$0$in(ranges) {
        if (_Ewa.RangeExtensions.cellCount(ranges) > 500) {
            return false;
        }
        var startTime = this._clock$p$0.get_timestampNow();
        var selectedCellEnumerator = _Ewa.GridViewExtensions.grid(this._ewaControl$p$0).createLoadedMultiRangeEnumerator('StatusBarAggregateManager.AreAllCellsEmpty', ranges, 2, true);
        try {
            for (var i = 0; selectedCellEnumerator.$$mn(); i++) {
                var currentCell = selectedCellEnumerator.$$cu();
                if (currentCell.get_unformattedCellText() || (!(i % 25) && _Ewa.IClockExtensions.getTimestampElapsedMillisecondsToNow(this._clock$p$0, startTime) > 100)) {
                    return false;
                }
            }
        }
        finally {
            if (selectedCellEnumerator) {
                selectedCellEnumerator.dispose();
            }
        }
        return true;
    },
    
    _getControl$p$0: function _Ewa_StatusBarAggregateManager$_getControl$p$0$in(commandId) {
        return this._aggregateControls$p$0.getControl(commandId);
    },
    
    _setUpCommandMappings$p$0: function _Ewa_StatusBarAggregateManager$_setUpCommandMappings$p$0$in(aggregateType, aggregateName, toggleLabelCommand) {
        this._aggregateControls$p$0.addCommandMappings(aggregateType, 'Query' + aggregateName + 'Label', 'Query' + aggregateName + 'Button', toggleLabelCommand.toString());
    },
    
    _onSelectionChanging$p$0: function _Ewa_StatusBarAggregateManager$_onSelectionChanging$p$0$in(sender, e) {
        this._updateAggregateValues$p$0();
    },
    
    _onBlockCacheItemChanged$p$0: function _Ewa_StatusBarAggregateManager$_onBlockCacheItemChanged$p$0$in(sender, e) {
        var blockCacheHash = e.get_blockHashPair().get_hash();
        var blockCacheItem = e.get_blockHashPair().get_block();
        var blockCacheDigest = blockCacheItem.get_digest();
        if (!(blockCacheItem.get_state() & 4) || !blockCacheDigest || blockCacheDigest === this._lastSeenGridBlockCacheDigests$p$0.getItem(blockCacheHash)) {
            return;
        }
        this._lastSeenGridBlockCacheDigests$p$0.add(blockCacheHash, blockCacheDigest);
        var gridBlock = (blockCacheItem.get_getBlockContentResponse()).Content;
        Diag.ULS.debugAssertTag(4490192, 0, !!gridBlock, 'StatusBarAggregateManager.OnBlockCacheItemChanged: Our assumption that a non-null Digest implies non-null Content was incorrect!');
        var gridBlockRange = _Ewa.GridViewExtensions.getRangeOfRowAndColumnNumbers(gridBlock.RowNumbers, gridBlock.ColumnNumbers);
        var selectedRanges = (this._isDiscontinuousSelectionEnabled$p$0) ? this.get__selectionManager$p$0().get_gridSelection().get_selectedRanges() : [ this.get__selectionManager$p$0().get_singleSelectedRange() ];
        var $$t_A = this;
        if (Common.ArrayUtils.any(_Ewa.Range, selectedRanges, function(range) {
            return range.intersects(gridBlockRange);
        })) {
            this._updateAggregateValues$p$0();
        }
    },
    
    _onBlockCacheItemEvicted$p$0: function _Ewa_StatusBarAggregateManager$_onBlockCacheItemEvicted$p$0$in(sender, e) {
        this._lastSeenGridBlockCacheDigests$p$0.remove(e.get_blockHashPair().get_hash());
    },
    
    _onWorkbookOpened$p$0: function _Ewa_StatusBarAggregateManager$_onWorkbookOpened$p$0$in(sender, eventArgs) {
        var $$t_4 = this;
        this._ewaControl$p$0.get_serviceRegistry().getServiceAsync(_Ewa.ICommandUIManager, 29, function(service) {
            $$t_4._statusBarManager$p$0 = service;
            service.addFeatureRootUser($$t_4);
        });
    },
    
    _onSessionIdChanged$p$0: function _Ewa_StatusBarAggregateManager$_onSessionIdChanged$p$0$in(sender, e) {
        var isSessionActive = (sender).get_isSessionActive();
        if (!isSessionActive && _Ewa.SessionIdChangedEventArgsExtensions.isNotDuringTotallySilentReopen(e)) {
            if (this._statusBarManager$p$0) {
                this._statusBarManager$p$0.removeFeatureRootUser(this);
                this._statusBarManager$p$0 = null;
            }
        }
    },
    
    _updateAggregateValues$p$0: function _Ewa_StatusBarAggregateManager$_updateAggregateValues$p$0$in() {
        if (!(this._ewaControl$p$0.get_modeCapabilities() & 4)) {
            return;
        }
        var calculatedValues;
        var $$t_1, $$t_2;
        if (($$t_2 = _Ewa.StatusBarAggregateManager._tryToCalculateAggregates$p((this._isDiscontinuousSelectionEnabled$p$0) ? this.get__selectionManager$p$0().get_gridSelection().get_selectedRanges() : [ this.get__selectionManager$p$0().get_singleSelectedRange() ], ($$t_1 = {'val': calculatedValues}))), calculatedValues = $$t_1.val, $$t_2) {
            this.set_aggregateValues(calculatedValues);
            return;
        }
        this.set_aggregateValues(null);
        this._updateAggregatesAsyncContext$p$0 = _Ewa.AsyncMethodContext.createOrRestart(this.$$d__throttledUpdateAggregateValues$p$0, 500, _Ewa.AsyncMethodName.statusBarAggregateManagerThrottledUpdateAggregateValues, this._updateAggregatesAsyncContext$p$0);
    },
    
    _throttledUpdateAggregateValues$p$0: function _Ewa_StatusBarAggregateManager$_throttledUpdateAggregateValues$p$0$in() {
        var calculatedValues;
        var $$t_1, $$t_2;
        if (($$t_2 = this._tryHarderToCalculateAggregates$p$0((this._isDiscontinuousSelectionEnabled$p$0) ? this.get__selectionManager$p$0().get_gridSelection().get_selectedRanges() : [ this.get__selectionManager$p$0().get_singleSelectedRange() ], ($$t_1 = {'val': calculatedValues}))), calculatedValues = $$t_1.val, $$t_2) {
            this.set_aggregateValues(calculatedValues);
            return;
        }
        this._requestAggregateValuesFromServer$p$0();
    },
    
    _requestAggregateValuesFromServer$p$0: function _Ewa_StatusBarAggregateManager$_requestAggregateValuesFromServer$p$0$in() {
        var selectionManager = this.get__selectionManager$p$0();
        var selectedRanges = (this._isDiscontinuousSelectionEnabled$p$0) ? Common.ArrayUtils.clone(this.get__selectionManager$p$0().get_gridSelection().get_selectedRanges()) : [ this.get__selectionManager$p$0().get_singleSelectedRange().clone() ];
        var $$t_7 = this;
        var onRequestAggregatesSucceeded = function(result, userContext, methodName) {
            var currentSelectedRanges = ($$t_7._isDiscontinuousSelectionEnabled$p$0) ? $$t_7.get__selectionManager$p$0().get_gridSelection().get_selectedRanges() : [ $$t_7.get__selectionManager$p$0().get_singleSelectedRange() ];
            if (_Ewa.RangeExtensions.isEqualAndSameOrder(selectedRanges, currentSelectedRanges)) {
                $$t_7.set_aggregateValues(result.Result);
            }
        };
        this.makeGetStatusBarAggregatesRequest(selectionManager.get_activeCell(), selectedRanges, onRequestAggregatesSucceeded);
    },
    
    _cancelOutstandingAggregateValuesRequest$p$0: function _Ewa_StatusBarAggregateManager$_cancelOutstandingAggregateValuesRequest$p$0$in() {
        if (this._getAggregateValuesRequest$p$0) {
            this._clientRequestManager$p$0.tryAbortRequest(this._getAggregateValuesRequest$p$0.get_asyncState());
            this._getAggregateValuesRequest$p$0 = null;
        }
    },
    
    _logCustomizeStatusBar$p$0: function _Ewa_StatusBarAggregateManager$_logCustomizeStatusBar$p$0$in(aggregateLoggingName, isAggregateVisible) {
        _Ewa.HelperMethods.verifyArgumentNotNull(aggregateLoggingName, 'aggregateLoggingName');
        var usageData = {};
        usageData.a = this._ewaControl$p$0.get_bootstrapContext().UserSessionId;
        usageData.b = aggregateLoggingName;
        usageData.c = isAggregateVisible;
        _Ewa.TelemetryExtensions.telemetryManager().logData(29, usageData, false);
    }
}


_Ewa.StatusBarAggregatesWebServiceProxy = function _Ewa_StatusBarAggregatesWebServiceProxy() {
}
_Ewa.StatusBarAggregatesWebServiceProxy.getStatusBarAggregates = function _Ewa_StatusBarAggregatesWebServiceProxy$getStatusBarAggregates$st(webServiceProxy, activeCell, selectedRanges, successCallback, failedCallback, userContext, ajaxContext) {
    _Ewa.HelperMethods.verifyArgumentNotNull(activeCell, 'activeCell');
    var parameters = webServiceProxy.verifyAndPrepareCommonParameters(1, ajaxContext);
    parameters['activeCell'] = activeCell;
    parameters['selectedRanges'] = selectedRanges;
    return _Ewa.EwaInternalWebServiceProxyExtensions.callWebMethodWithTask(webServiceProxy, 'GetStatusBarAggregates', parameters, successCallback, failedCallback, userContext, 4, null);
}


_Ewa.StatusBarAggregateControl.registerClass('_Ewa.StatusBarAggregateControl', _Ewa.BaseEventSource, _Ewa.IStatusBarAggregateControl);
_Ewa.StatusBarAggregateControlCollection.registerClass('_Ewa.StatusBarAggregateControlCollection', _Ewa.BaseEventSource);
_Ewa.StatusBarAggregateManager.registerClass('_Ewa.StatusBarAggregateManager', null, _Ewa.IStatusBarAggregateManager, Sys.IDisposable, _Ewa.ICommandUIFeatureRootUser, Common.IRootUser, _Ewa.ICommandHandler);
_Ewa.StatusBarAggregatesWebServiceProxy.registerClass('_Ewa.StatusBarAggregatesWebServiceProxy');
_Ewa.StatusBarAggregateControlCollection._emptyAggregateValues$p = null;
Type.registerNamespace('_Ewa');

_Ewa.StatusBarAggregatesBootstrapper = function _Ewa_StatusBarAggregatesBootstrapper() {
}
_Ewa.StatusBarAggregatesBootstrapper.main = function _Ewa_StatusBarAggregatesBootstrapper$main$st() {
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(function(ewa) {
        ewa.get_serviceRegistry().getServiceAsync(_Ewa.ICommandUIManager, 29, function(service) {
            _Ewa.StatusBarAggregateManager.attach(ewa);
        });
    });
}


_Ewa.StatusBarAggregatesBootstrapper.registerClass('_Ewa.StatusBarAggregatesBootstrapper');
_Ewa.StatusBarAggregatesBootstrapper.main();
Type.registerNamespace('CommandUI');

CommandUI.ControlSize = function() {}
CommandUI.ControlSize.prototype = {
    large: 0, 
    large30: 1, 
    large16: 2, 
    largeFloatie: 3, 
    extraLarge: 4, 
    control20: 5, 
    control16: 6, 
    control14: 7, 
    control24: 8
}
CommandUI.ControlSize.registerEnum('CommandUI.ControlSize', false);


CommandUI.ISelectableControl = function() {}
CommandUI.ISelectableControl.registerInterface('CommandUI.ISelectableControl');


CommandUI.IControlBehavior = function() {}
CommandUI.IControlBehavior.registerInterface('CommandUI.IControlBehavior');


CommandUI.DataQueryType = function() {}
CommandUI.DataQueryType.prototype = {
    none: 0, 
    all: 1, 
    ribbonVisibleTabDeep: 2, 
    ribbonTab: 3, 
    root: 4
}
CommandUI.DataQueryType.registerEnum('CommandUI.DataQueryType', false);


CommandUI.IDataSource = function() {}
CommandUI.IDataSource.registerInterface('CommandUI.IDataSource');


CommandUI.GalleryElementDimensions = function() {}
CommandUI.GalleryElementDimensions.prototype = {
    size16by16: 1, 
    size40by40: 2, 
    size48by48: 3, 
    size61by75: 4, 
    size64by48: 5, 
    size85by48: 6, 
    size110by75: 7, 
    size85by16: 8, 
    size32by32: 9, 
    size120by20: 10, 
    size20by20: 11, 
    size24by24: 12, 
    size84by21: 13, 
    size90by21: 14, 
    size200by200: 15, 
    size70by48: 16
}
CommandUI.GalleryElementDimensions.registerEnum('CommandUI.GalleryElementDimensions', false);


CommandUI.IFloatie = function() {}
CommandUI.IFloatie.registerInterface('CommandUI.IFloatie');


CommandUI.IKeytipManager = function() {}
CommandUI.IKeytipManager.registerInterface('CommandUI.IKeytipManager');


CommandUI.IMenuItem = function() {}
CommandUI.IMenuItem.registerInterface('CommandUI.IMenuItem');


CommandUI.IMenuContext = function() {}
CommandUI.IMenuContext.registerInterface('CommandUI.IMenuContext');


CommandUI.MenuHorizontalAlignment = function() {}
CommandUI.MenuHorizontalAlignment.prototype = {
    left: 1, 
    right: 2
}
CommandUI.MenuHorizontalAlignment.registerEnum('CommandUI.MenuHorizontalAlignment', false);


CommandUI.IMenuLauncherBehavior = function() {}
CommandUI.IMenuLauncherBehavior.registerInterface('CommandUI.IMenuLauncherBehavior');


CommandUI.IReactRibbonRootPoller = function() {}
CommandUI.IReactRibbonRootPoller.registerInterface('CommandUI.IReactRibbonRootPoller');


CommandUI.ContextualColor = function() {}
CommandUI.ContextualColor.prototype = {
    none: 0, 
    orange: 1, 
    green: 2, 
    magenta: 3, 
    yellow: 4, 
    purple: 5
}
CommandUI.ContextualColor.registerEnum('CommandUI.ContextualColor', false);


CommandUI.IRibbon = function() {}
CommandUI.IRibbon.registerInterface('CommandUI.IRibbon');


CommandUI.TextAlign = function() {}
CommandUI.TextAlign.prototype = {
    left: 1, 
    right: 2
}
CommandUI.TextAlign.registerEnum('CommandUI.TextAlign', false);


CommandUI.SectionType = function() {}
CommandUI.SectionType.prototype = {
    divider: 1, 
    oneRow: 2, 
    twoRow: 3, 
    threeRow: 4, 
    unlimitedRow: 5
}
CommandUI.SectionType.registerEnum('CommandUI.SectionType', false);


CommandUI.SectionVerticalAlignment = function() {}
CommandUI.SectionVerticalAlignment.prototype = {
    top: 1, 
    middle: 2
}
CommandUI.SectionVerticalAlignment.registerEnum('CommandUI.SectionVerticalAlignment', false);


CommandUI.SectionHorizontalAlignment = function() {}
CommandUI.SectionHorizontalAlignment.prototype = {
    left: 1, 
    right: 2
}
CommandUI.SectionHorizontalAlignment.registerEnum('CommandUI.SectionHorizontalAlignment', false);


CommandUI.SectionArrangement = function() {}
CommandUI.SectionArrangement.prototype = {
    horizontal: 1, 
    vertical: 2
}
CommandUI.SectionArrangement.registerEnum('CommandUI.SectionArrangement', false);


CommandUI.Direction = function() {}
CommandUI.Direction.prototype = {
    LTR: 0, 
    RTL: 1
}
CommandUI.Direction.registerEnum('CommandUI.Direction', false);


CommandUI.FlyoutDirectionType = function() {}
CommandUI.FlyoutDirectionType.prototype = {
    horizontal: 1, 
    vertical: 2, 
    verticalUp: 3, 
    verticalAnchorAdjustable: 4
}
CommandUI.FlyoutDirectionType.registerEnum('CommandUI.FlyoutDirectionType', false);


CommandUI.IControlBehaviorFactory = function() {}
CommandUI.IControlBehaviorFactory.registerInterface('CommandUI.IControlBehaviorFactory');


CommandUI.PollResultBit = function() {}
CommandUI.PollResultBit.prototype = {
    enabled: 1, 
    queryCommandSucceeded: 2
}
CommandUI.PollResultBit.registerEnum('CommandUI.PollResultBit', false);


CommandUI.ToolbarSize = function() {}
CommandUI.ToolbarSize.prototype = {
    oneRow: 0, 
    singleDock: 1
}
CommandUI.ToolbarSize.registerEnum('CommandUI.ToolbarSize', false);


CommandUI._imgContainerSize = function() {}
CommandUI._imgContainerSize.prototype = {
    none: 0, 
    size5by3: 1, 
    size8by8: 2, 
    size13by13: 3, 
    size16by16: 4, 
    size32by32: 5, 
    size40by40: 6, 
    size48by48: 7, 
    size64by48: 8, 
    size85by48: 9, 
    size1by16: 10, 
    size14by14: 11, 
    size24by24: 12, 
    size20by20: 13, 
    size30by30: 14, 
    size120by20: 15, 
    size84by21: 16, 
    size90by21: 17, 
    size200by200: 18, 
    size70by48: 19
}
CommandUI._imgContainerSize.registerEnum('CommandUI._imgContainerSize', false);


CommandUI.BuildOptions = function CommandUI_BuildOptions() {
}
CommandUI.BuildOptions.prototype = {
    trimmedIds: null,
    clientID: null
}


CommandUI.BuildContext = function CommandUI_BuildContext() {
}
CommandUI.BuildContext.prototype = {
    parentId: null
}


CommandUI.DataNodeWrapper = function CommandUI_DataNodeWrapper(node) {
    this.set_node(node);
}
CommandUI.DataNodeWrapper.getFirstChildNodeWithName = function CommandUI_DataNodeWrapper$getFirstChildNodeWithName$st(data, name) {
    var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
    var l = children.length;
    var child = null;
    for (var i = 0; i < l; i++) {
        child = children[i];
        var nm = child[CommandUI.DataNodeWrapper.NAME];
        if (nm === name) {
            return child;
        }
    }
    return null;
}
CommandUI.DataNodeWrapper.getNodeName = function CommandUI_DataNodeWrapper$getNodeName$st(data) {
    return data[CommandUI.DataNodeWrapper.NAME];
}
CommandUI.DataNodeWrapper.getNodeChildren = function CommandUI_DataNodeWrapper$getNodeChildren$st(data) {
    var arr = data[CommandUI.DataNodeWrapper.CHILDREN];
    if (CommandUI.ScriptUtility.isNullOrUndefined(arr)) {
        return CommandUI.DataNodeWrapper.get__emptyArray$p();
    }
    return arr;
}
CommandUI.DataNodeWrapper.get__emptyArray$p = function CommandUI_DataNodeWrapper$get__emptyArray$p$st() {
    if (CommandUI.ScriptUtility.isNullOrUndefined(CommandUI.DataNodeWrapper._s_emptyArray$p)) {
        CommandUI.DataNodeWrapper._s_emptyArray$p = [];
    }
    return CommandUI.DataNodeWrapper._s_emptyArray$p;
}
CommandUI.DataNodeWrapper.getNodeAttributes = function CommandUI_DataNodeWrapper$getNodeAttributes$st(data) {
    return data[CommandUI.DataNodeWrapper.ATTRIBUTES];
}
CommandUI.DataNodeWrapper.getNodeAttribute = function CommandUI_DataNodeWrapper$getNodeAttribute$st(data, attributeName) {
    var attributes = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
    return attributes[attributeName];
}
CommandUI.DataNodeWrapper.prototype = {
    _$$pf_Node$p$0: null,
    
    get_node: function CommandUI_DataNodeWrapper$get_node$in() {
        return this._$$pf_Node$p$0;
    },
    
    set_node: function CommandUI_DataNodeWrapper$set_node$in(value) {
        this._$$pf_Node$p$0 = value;
        return value;
    },
    
    get_name: function CommandUI_DataNodeWrapper$get_name$in() {
        return CommandUI.DataNodeWrapper.getNodeName(this.get_node());
    },
    
    get_children: function CommandUI_DataNodeWrapper$get_children$in() {
        return CommandUI.DataNodeWrapper.getNodeChildren(this.get_node());
    },
    
    get_attributes: function CommandUI_DataNodeWrapper$get_attributes$in() {
        return CommandUI.DataNodeWrapper.getNodeAttributes(this.get_node());
    },
    
    get_hasChildren: function CommandUI_DataNodeWrapper$get_hasChildren$in() {
        return CommandUI.DataNodeWrapper.getNodeChildren(this.get_node()).length > 0;
    }
}


CommandUI.Builder = function CommandUI_Builder(options, elmPlaceholder, rootBuildClientTask, resizableContainer) {
    this.$$d__onUnload$p$0 = Function.createDelegate(this, this._onUnload$p$0);
    this.set_options(options);
    if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_options().trimmedIds)) {
        this.get_options().trimmedIds = {};
    }
    this._elmPlaceholder = elmPlaceholder;
    this.set_buildClientTask(rootBuildClientTask);
    this.set__resizableContainer(resizableContainer || new Common.WindowResizeEventSource());
    $addHandler(window, 'unload', this.$$d__onUnload$p$0);
}
CommandUI.Builder.enableSlider = function CommandUI_Builder$enableSlider$st() {
    CommandUI.Builder._sliderBuilder = CommandUI.Builder._buildSlider$p;
}
CommandUI.Builder.enableSpinner = function CommandUI_Builder$enableSpinner$st() {
    CommandUI.Builder._spinnerBuilder = CommandUI.Builder._buildSpinner$p;
}
CommandUI.Builder.enableInsertTable = function CommandUI_Builder$enableInsertTable$st() {
    CommandUI.Builder._insertTableBuilder = CommandUI.Builder._buildInsertTable$p;
}
CommandUI.Builder._buildInsertTable$p = function CommandUI_Builder$_buildInsertTable$p$st(data, bc, root) {
    var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
    var fsit = new CommandUI.Controls.InsertTable(root, properties.Id, properties);
    return fsit;
}
CommandUI.Builder._buildSlider$p = function CommandUI_Builder$_buildSlider$p$st(data, bc, root) {
    var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
    var sldr = new CommandUI.Controls.Slider(root, properties.Id, properties);
    return sldr;
}
CommandUI.Builder._buildSpinner$p = function CommandUI_Builder$_buildSpinner$p$st(data, bc, root) {
    var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
    var spinnerChildren = CommandUI.Builder._buildSpinnerChildren$p(data);
    var fssp = new CommandUI.Controls.Spinner(root, properties.Id, properties, spinnerChildren.units, spinnerChildren.specialTextStrings);
    return fssp;
}
CommandUI.Builder._convertNodeValueToFloat$p = function CommandUI_Builder$_convertNodeValueToFloat$p$st(obj) {
    if (typeof(obj) === 'string') {
        return parseFloat(obj);
    }
    return obj;
}
CommandUI.Builder._buildSpinnerChildren$p = function CommandUI_Builder$_buildSpinnerChildren$p$st(data) {
    var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
    var units = [];
    var specialTextStrings = [];
    var l = children.length;
    for (var i = 0; i < l; i++) {
        var childData = children[i];
        var childName = CommandUI.DataNodeWrapper.getNodeName(childData);
        var childAttrs = CommandUI.DataNodeWrapper.getNodeAttributes(childData);
        if (childName === CommandUI.DataNodeWrapper.UNIT) {
            var unit = CommandUI.Controls.Spinner.createUnit(Common.UnitConversion.convertStringToUnitType(childAttrs[CommandUI.DataNodeWrapper.UNITTYPE]), CommandUI.Builder._convertNodeValueToFloat$p(childAttrs[CommandUI.DataNodeWrapper.MINIMUMVALUE]), CommandUI.Builder._convertNodeValueToFloat$p(childAttrs[CommandUI.DataNodeWrapper.MAXIMUMVALUE]), CommandUI.Builder._convertNodeValueToFloat$p(childAttrs[CommandUI.DataNodeWrapper.STEP]));
            Array.add(units, unit);
        }
        else if (childName === CommandUI.DataNodeWrapper.SPECIALTEXTSTRINGS) {
            Array.add(specialTextStrings, childAttrs[CommandUI.DataNodeWrapper.VALUE]);
        }
    }
    return new CommandUI.Builder._spinnerChildren(units, specialTextStrings);
}
CommandUI.Builder._buildTextBox$p = function CommandUI_Builder$_buildTextBox$p$st(data, bc, root) {
    var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
    var fstb = new CommandUI.Controls.TextBox(root, properties.Id, properties);
    return fstb;
}
CommandUI.Builder.convertXMLStringToJSON = function CommandUI_Builder$convertXMLStringToJSON$st(xmlString) {
    var xmlDoc = null;
    if (Common.BrowserUtils.get_isInternetExplorer8()) {
        var xml = null;
        xml = document.createElement('xml');
        xml.innerText = xmlString;
        document.body.appendChild(xml);
        xmlDoc = (xml).XMLDocument;
        document.body.removeChild(xml);
    }
    else {
        xmlDoc = Sys.Net.XMLDOM(xmlString);
    }
    if (CommandUI.ScriptUtility.isNullOrUndefined(xmlDoc) || CommandUI.ScriptUtility.isNullOrUndefined(xmlDoc.documentElement)) {
        Diag.ULS.sendTraceTag(4523028, 201, 50, 'Failure in ConvertXMLStringToJSON');
        return null;
    }
    return CommandUI.Builder._convertXMLToJSON$i(xmlDoc);
}
CommandUI.Builder._convertXMLToJSON$i = function CommandUI_Builder$_convertXMLToJSON$i$st(xmlDoc) {
    return eval('(' + CommandUI.Builder.convertNodeToJSON(xmlDoc.documentElement) + ')');
}
CommandUI.Builder.convertNodeToJSON = function CommandUI_Builder$convertNodeToJSON$st(node) {
    var json;
    json = '{';
    json += '\"name\" : ';
    json += Common.JsonSerializer.serialize(node.nodeName);
    json += ',';
    json += '\"attrs\": {';
    var attribs = node.attributes;
    if (!CommandUI.ScriptUtility.isNullOrUndefined(node.attributes)) {
        var l = attribs.length;
        if (l > 0) {
            var first = true;
            for (var i = 0; i < l; i++) {
                var attr = attribs.item(i);
                if (first) {
                    first = false;
                }
                else {
                    json += ',';
                }
                json += Common.JsonSerializer.serialize(attr.name);
                json += ':';
                if (CommandUI.Utility._isEncodedStringArray$i(attr.value)) {
                    json += Common.JsonSerializer.serialize(CommandUI.Utility._decodeStringArrayXmlAttribute$i(attr.value));
                }
                else {
                    json += Common.JsonSerializer.serialize(attr.value);
                }
            }
        }
    }
    json += '}';
    var _childNodes = node.childNodes;
    if (_childNodes) {
        var m = _childNodes.length;
        if (m > 0) {
            json += ',';
            json += 'children:[';
            var first = true;
            for (var i = 0; i < m; i++) {
                var child = _childNodes[i];
                if (child.nodeName === '#text') {
                    continue;
                }
                if (first) {
                    first = false;
                }
                else {
                    json += ',';
                }
                json += CommandUI.Builder.convertNodeToJSON(child);
            }
            json += ']';
        }
    }
    json += '}';
    return json;
}
CommandUI.Builder._shouldBuildMenu$i = function CommandUI_Builder$_shouldBuildMenu$i$st(launcherProperties, children) {
    return !!children[0] && (!CommandUI.Utility.isTrue(launcherProperties.PopulateDynamically) || CommandUI.Utility.isTrue(launcherProperties.AllowDefaultContent));
}
CommandUI.Builder.prototype = {
    _$$pf__resizableContainer$p$0: null,
    
    get__resizableContainer: function CommandUI_Builder$get__resizableContainer$in() {
        return this._$$pf__resizableContainer$p$0;
    },
    
    set__resizableContainer: function CommandUI_Builder$set__resizableContainer$in(value) {
        this._$$pf__resizableContainer$p$0 = value;
        return value;
    },
    
    _onUnload$p$0: function CommandUI_Builder$_onUnload$p$0$in(evt) {
        this.dispose();
    },
    
    _onRootBuilt$i$0: function CommandUI_Builder$_onRootBuilt$i$0$in(root) {
    },
    
    dispose: function CommandUI_Builder$dispose$in() {
        this.set_root(null);
        this.set_options(null);
        this._elmPlaceholder = null;
        this.set_buildClientTask(null);
        this.set_dataSource(null);
        $removeHandler(window, 'unload', this.$$d__onUnload$p$0);
    },
    
    _$$pf_BuildClientTask$p$0: null,
    
    get_buildClientTask: function CommandUI_Builder$get_buildClientTask$in() {
        return this._$$pf_BuildClientTask$p$0;
    },
    
    set_buildClientTask: function CommandUI_Builder$set_buildClientTask$in(value) {
        this._$$pf_BuildClientTask$p$0 = value;
        return value;
    },
    
    _$$pf_Root$p$0: null,
    
    get_root: function CommandUI_Builder$get_root$in() {
        return this._$$pf_Root$p$0;
    },
    
    set_root: function CommandUI_Builder$set_root$in(value) {
        this._$$pf_Root$p$0 = value;
        return value;
    },
    
    _$$pf_InQuery$p$0: false,
    
    get_inQuery: function CommandUI_Builder$get_inQuery$in() {
        return this._$$pf_InQuery$p$0;
    },
    
    set_inQuery: function CommandUI_Builder$set_inQuery$in(value) {
        this._$$pf_InQuery$p$0 = value;
        return value;
    },
    
    _$$pf_DataSource$p$0: null,
    
    get_dataSource: function CommandUI_Builder$get_dataSource$in() {
        return this._$$pf_DataSource$p$0;
    },
    
    set_dataSource: function CommandUI_Builder$set_dataSource$in(value) {
        this._$$pf_DataSource$p$0 = value;
        return value;
    },
    
    _elmPlaceholder: null,
    
    get_placeholder: function CommandUI_Builder$get_placeholder$in() {
        return this._elmPlaceholder;
    },
    
    _$$pf_Options$p$0: null,
    
    get_options: function CommandUI_Builder$get_options$in() {
        return this._$$pf_Options$p$0;
    },
    
    set_options: function CommandUI_Builder$set_options$in(value) {
        this._$$pf_Options$p$0 = value;
        return value;
    },
    
    _isIdTrimmed$i$0: function CommandUI_Builder$_isIdTrimmed$i$0$in(id) {
        if (!this.get_options()) {
            return false;
        }
        return this.get_options().trimmedIds[id];
    },
    
    isNodeTrimmed: function CommandUI_Builder$isNodeTrimmed$in(dataNode) {
        var id = CommandUI.DataNodeWrapper.getNodeAttribute(dataNode, CommandUI.DataNodeWrapper.id);
        return this.get_options().trimmedIds[id];
    },
    
    buildControl: function CommandUI_Builder$buildControl$in(data, bc) {
        var control = null;
        var name = data[CommandUI.DataNodeWrapper.NAME];
        switch (name) {
            case CommandUI.DataNodeWrapper.button:
                control = this._buildButton$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.colorPicker:
                control = this._buildColorPicker$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.comboBox:
                control = this._buildComboBox$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.dropDown:
                control = this._buildDropDown$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.flyoutAnchor:
                control = this._buildFlyoutAnchor$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.galleryButton:
                control = this._buildGalleryButton$p$0(data, bc, null);
                break;
            case CommandUI.DataNodeWrapper.insertTable:
                if (CommandUI.Builder._insertTableBuilder) {
                    control = CommandUI.Builder._insertTableBuilder(data, bc, this.get_root());
                }
                break;
            case CommandUI.DataNodeWrapper.label:
                control = this._buildLabel$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.placeholder:
                control = this._buildPlaceholder$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.searchBox:
                control = this._buildSearchBox$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.separator:
                control = this._buildSeparator$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.slider:
                control = CommandUI.Builder._buildSlider$p(data, bc, this.get_root());
                break;
            case CommandUI.DataNodeWrapper.spinner:
                if (Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactRibbonEnvironmentEnabled()) {
                    if (!CommandUI.Builder._spinnerBuilder) {
                        CommandUI.Builder.enableSpinner();
                    }
                }
                if (CommandUI.Builder._spinnerBuilder) {
                    control = CommandUI.Builder._spinnerBuilder(data, bc, this.get_root());
                }
                break;
            case CommandUI.DataNodeWrapper.splitButton:
                control = this._buildSplitButton$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.statefulColorFlyoutAnchor:
                control = this._buildStatefulColorFlyoutAnchor$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.statefulColorSplitButton:
                control = this._buildStatefulColorSplitButton$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.statefulImageSplitButton:
                control = this._buildStatefulImageSplitButton$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.textBox:
                control = CommandUI.Builder._buildTextBox$p(data, bc, this.get_root());
                break;
            case CommandUI.DataNodeWrapper.toggleButton:
                control = this._buildToggleButton$p$0(data, bc);
                break;
            case CommandUI.DataNodeWrapper.clonedControl:
                control = this._buildClonedControl$p$0(data, bc);
                break;
            default:
                var attributes = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
                var className = attributes[CommandUI.DataNodeWrapper.CLASSNAME];
                if (CommandUI.ScriptUtility.isNullOrUndefined(className)) {
                    throw Error.create('Unable to create Control with tagname: ' + name);
                }
                break;
        }
        Common.Debug.assertStringTag(!!control || name === CommandUI.DataNodeWrapper.clonedControl, String.format('Failed to create control type {0}. Need to call Build.EnableFoo() on this control?', name), 4579850);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(bc.parentId)) {
            control.get_stateProperties()['ParentMenuId'] = bc.parentId;
        }
        return control;
    },
    
    buildMenu: function CommandUI_Builder$buildMenu$in(data, bc, isComboboxListbox) {
        if (this.isNodeTrimmed(data)) {
            return null;
        }
        var attrs = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var menu = this.get_root()._createMenu$i$1(attrs[CommandUI.DataNodeWrapper.id], attrs[CommandUI.DataNodeWrapper.TITLE], attrs[CommandUI.DataNodeWrapper.DESCRIPTION], attrs[CommandUI.DataNodeWrapper.MAXWIDTH], isComboboxListbox, ((CommandUI.MenuHorizontalAlignment.right).toString() === attrs[CommandUI.DataNodeWrapper.HORIZONTALALIGNMENT]) ? CommandUI.MenuHorizontalAlignment.right : CommandUI.MenuHorizontalAlignment.left);
        this._fillMenu$p$0(menu, data, bc);
        return menu;
    },
    
    _buildMenuForFlyoutAnchor$p$0: function CommandUI_Builder$_buildMenuForFlyoutAnchor$p$0$in(data, bc) {
        var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
        var menu = null;
        var launcherProperties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        bc.parentId = launcherProperties.Id;
        if (CommandUI.Builder._shouldBuildMenu$i(launcherProperties, children)) {
            menu = this.buildMenu(children[0], bc, false);
        }
        bc.parentId = null;
        return menu;
    },
    
    _fillMenu$p$0: function CommandUI_Builder$_fillMenu$p$0$in(menu, data, bc) {
        var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
        var l = children.length;
        var child = null;
        for (var i = 0; i < l; i++) {
            child = children[i];
            var name = child[CommandUI.DataNodeWrapper.NAME];
            if (name !== CommandUI.DataNodeWrapper.MENUSECTION) {
                Diag.ULS.sendTraceTag(8402819, 201, 10, 'Tags with the name: {0} cannot be children of Menu tags.', name);
                continue;
            }
            if (this.isNodeTrimmed(child)) {
                continue;
            }
            var ms = this._buildMenuSection$p$0(child, bc, menu);
            menu.addChild(ms);
        }
    },
    
    _buildMenuSection$p$0: function CommandUI_Builder$_buildMenuSection$p$0$in(data, bc, menu) {
        var attrs = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var properties = ({});
        var id = attrs[CommandUI.DataNodeWrapper.id];
        var title = attrs[CommandUI.DataNodeWrapper.TITLE];
        var description = attrs[CommandUI.DataNodeWrapper.DESCRIPTION];
        properties.DisplayMode = attrs[CommandUI.DataNodeWrapper.DISPLAYMODE];
        properties.MaxHeight = attrs[CommandUI.DataNodeWrapper.MAXHEIGHT];
        properties.Image = attrs[CommandUI.DataNodeWrapper.IMAGE];
        properties.ImageClass = attrs[CommandUI.DataNodeWrapper.IMAGECLASS];
        properties.Theme = attrs[CommandUI.DataNodeWrapper.THEME];
        properties.TitleId = attrs[CommandUI.DataNodeWrapper.TITLEID];
        properties.Language = attrs[CommandUI.DataNodeWrapper.LANGUAGE];
        properties.ArialabelledbyId = attrs[CommandUI.DataNodeWrapper.ARIALABELLEDBYID];
        if (CommandUI.ScriptUtility.isNullOrUndefined(properties.DisplayMode)) {
            properties.DisplayMode = 'Menu';
        }
        properties.ShowSeperator = (!CommandUI.Utility.isFalse(attrs[CommandUI.DataNodeWrapper.SHOWMENUSECTIONSEPERATOR])).toString();
        properties.ShowTitleIcon = (!CommandUI.Utility.isFalse(attrs[CommandUI.DataNodeWrapper.SHOWMENUSECTIONTITLEICON])).toString();
        properties.ShowTitleBackground = (!CommandUI.Utility.isFalse(attrs[CommandUI.DataNodeWrapper.SHOWMENUSECTIONTITLEBACKGROUND])).toString();
        properties.TitleFocusable = (!CommandUI.Utility.isFalse(attrs[CommandUI.DataNodeWrapper.MENUSECTIONTITLEFOCUSABLE])).toString();
        properties.Scrollable = CommandUI.Utility.isTrue(attrs[CommandUI.DataNodeWrapper.SCROLLABLE]).toString();
        properties.Loading = CommandUI.Utility.isTrue(attrs[CommandUI.DataNodeWrapper.LOADING]).toString();
        var ms = this.get_root()._createMenuSection$i$1(id, title, description, properties, menu);
        var childNodeName = CommandUI.DataNodeWrapper.getNodeName((CommandUI.DataNodeWrapper.getNodeChildren(data))[0]);
        Common.Debug.assertStringTag((childNodeName === CommandUI.DataNodeWrapper.CONTROLS) || (childNodeName === CommandUI.DataNodeWrapper.GALLERY), 'Menu Sections must have a <Controls> or a <Gallery> child node', 1925841);
        if (childNodeName === CommandUI.DataNodeWrapper.CONTROLS) {
            var children = CommandUI.DataNodeWrapper.getNodeChildren((CommandUI.DataNodeWrapper.getNodeChildren(data))[0]);
            var l = children.length;
            var child = null;
            for (var i = 0; i < l; i++) {
                child = children[i];
                if (this.isNodeTrimmed(child)) {
                    continue;
                }
                var control = this.buildControl(child, bc);
                if (control) {
                    ms.addChild(control.createComponentForDisplayMode(properties.DisplayMode));
                }
            }
        }
        else if (childNodeName === CommandUI.DataNodeWrapper.GALLERY) {
            var gallery = this._buildGallery$p$0((CommandUI.DataNodeWrapper.getNodeChildren(data))[0], bc, true);
            ms.addChild(gallery);
        }
        return ms;
    },
    
    _buildGallery$p$0: function CommandUI_Builder$_buildGallery$p$0$in(data, bc, isInMenu) {
        var attrs = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var gallery = this.get_root()._createGallery$i$1(properties.Id, attrs[CommandUI.DataNodeWrapper.TITLE], attrs[CommandUI.DataNodeWrapper.DESCRIPTION], properties);
        var displayMode = (isInMenu) ? 'Menu' : 'Default';
        var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
        var l = children.length;
        var child = null;
        for (var i = 0; i < l; i++) {
            child = children[i];
            if (this.isNodeTrimmed(child)) {
                continue;
            }
            var control;
            switch (CommandUI.DataNodeWrapper.getNodeName(child)) {
                case CommandUI.DataNodeWrapper.galleryButton:
                    control = this._buildGalleryButton$p$0(child, bc, properties.ElementDimensions);
                    break;
                default:
                    control = this.buildControl(child, bc);
                    break;
            }
            if (control) {
                gallery.addChild(control.createComponentForDisplayMode(displayMode));
            }
        }
        return gallery;
    },
    
    _buildGalleryButton$p$0: function CommandUI_Builder$_buildGalleryButton$p$0$in(data, bc, strElmDims) {
        var elmDims;
        if (CommandUI.ScriptUtility.isNullOrEmptyString(strElmDims)) {
            var attrs = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
            strElmDims = attrs[CommandUI.DataNodeWrapper.ELEMENTDIMENSIONS];
        }
        if (CommandUI.ScriptUtility.isNullOrEmptyString(strElmDims)) {
            elmDims = 3;
        }
        else {
            elmDims = CommandUI._gallery._convertStringToGalleryElementDimensions$i(strElmDims);
        }
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var gb = new CommandUI.Controls.GalleryButton(this.get_root(), properties.Id, properties, elmDims);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(bc.parentId)) {
            gb.get_stateProperties()['ParentMenuId'] = bc.parentId;
        }
        return gb;
    },
    
    _buildToggleButton$p$0: function CommandUI_Builder$_buildToggleButton$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var fsbc = new CommandUI.Controls.ToggleButton(this.get_root(), properties.Id, properties);
        return fsbc;
    },
    
    _buildColorPicker$p$0: function CommandUI_Builder$_buildColorPicker$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var colorNodes = CommandUI.DataNodeWrapper.getNodeChildren(CommandUI.DataNodeWrapper.getFirstChildNodeWithName(data, CommandUI.DataNodeWrapper.colors));
        var colors = new Array(colorNodes.length);
        var l = colorNodes.length;
        for (var i = 0; i < l; i++) {
            var colorCellInfo = new CommandUI.Controls.ColorCellInfo();
            var dict = CommandUI.DataNodeWrapper.getNodeAttributes(colorNodes[i]);
            var title = dict[CommandUI.DataNodeWrapper.TITLE];
            colorCellInfo.Title = (CommandUI.ScriptUtility.isNullOrUndefined(title)) ? dict[CommandUI.DataNodeWrapper.ALT] : title;
            colorCellInfo.Color = dict[CommandUI.DataNodeWrapper.COLOR];
            colorCellInfo.DisplayColor = dict[CommandUI.DataNodeWrapper.DISPLAYCOLOR];
            colors[i] = colorCellInfo;
        }
        var cp = new CommandUI.Controls.ColorPicker(this.get_root(), properties.Id, properties, colors);
        return cp;
    },
    
    _buildSearchBox$p$0: function CommandUI_Builder$_buildSearchBox$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
        var menu = null;
        if (CommandUI.Builder._shouldBuildMenu$i(properties, children)) {
            menu = this.buildMenu(children[0], bc, false);
        }
        return new CommandUI.Controls.SearchBox(this.get_root(), properties.Id, properties, menu);
    },
    
    _buildComboBox$p$0: function CommandUI_Builder$_buildComboBox$p$0$in(data, bc, newComboBox) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
        var menu = null;
        var launcherProperties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var menuItems = null;
        if (CommandUI.Builder._shouldBuildMenu$i(launcherProperties, children)) {
            menu = this.buildMenu(children[0], bc, true);
            menuItems = {};
            var sections = CommandUI.DataNodeWrapper.getNodeChildren(children[0]);
            var l = sections.length;
            for (var i = 0; i < l; i++) {
                var sectionChildren = CommandUI.DataNodeWrapper.getNodeChildren(sections[i]);
                var items = CommandUI.DataNodeWrapper.getNodeChildren(sectionChildren[0]);
                var m = items.length;
                for (var j = 0; j < m; j++) {
                    var itemAttrs = items[j][CommandUI.DataNodeWrapper.ATTRIBUTES];
                    var labeltext = itemAttrs[CommandUI.DataNodeWrapper.LABELTEXT];
                    var menuitemid = itemAttrs[CommandUI.DataNodeWrapper.MENUITEMID];
                    menuItems[labeltext] = menuitemid;
                }
            }
        }
        var fscb = (!newComboBox) ? new CommandUI.Controls.ComboBox(this.get_root(), properties.Id, properties, menu) : newComboBox(this.get_root(), properties.Id, properties, menu);
        fscb.set_menuItems(menuItems);
        return fscb;
    },
    
    _buildDropDown$p$0: function CommandUI_Builder$_buildDropDown$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
        var menu = null;
        var launcherProperties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        if (CommandUI.Builder._shouldBuildMenu$i(launcherProperties, children)) {
            menu = this.buildMenu(children[0], bc, false);
        }
        var fsdd = new CommandUI.Controls.DropDown(this.get_root(), properties.Id, properties, menu);
        return fsdd;
    },
    
    _buildButton$p$0: function CommandUI_Builder$_buildButton$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var fsea = new CommandUI.Controls.Button(this.get_root(), properties.Id, properties);
        return fsea;
    },
    
    _buildSplitButton$p$0: function CommandUI_Builder$_buildSplitButton$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
        var menu = null;
        if (CommandUI.Builder._shouldBuildMenu$i(properties, children)) {
            menu = this.buildMenu(children[0], bc, false);
        }
        var fseo = new CommandUI.Controls.SplitButton(this.get_root(), properties.Id, properties, menu);
        return fseo;
    },
    
    _buildStatefulColorSplitButton$p$0: function CommandUI_Builder$_buildStatefulColorSplitButton$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
        var menu = null;
        if (CommandUI.Builder._shouldBuildMenu$i(properties, children)) {
            menu = this.buildMenu(children[0], bc, false);
        }
        var fseo = new CommandUI.Controls.StatefulColorSplitButton(this.get_root(), properties.Id, properties, menu);
        return fseo;
    },
    
    _buildStatefulImageSplitButton$p$0: function CommandUI_Builder$_buildStatefulImageSplitButton$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
        var menu = null;
        if (CommandUI.Builder._shouldBuildMenu$i(properties, children)) {
            menu = this.buildMenu(children[0], bc, false);
        }
        var fseo = new CommandUI.Controls.StatefulImageSplitButton(this.get_root(), properties.Id, properties, menu);
        return fseo;
    },
    
    _buildFlyoutAnchor$p$0: function CommandUI_Builder$_buildFlyoutAnchor$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var menu = this._buildMenuForFlyoutAnchor$p$0(data, bc);
        var fsfa = new CommandUI.Controls.FlyoutAnchor(this.get_root(), properties.Id, properties, menu);
        return fsfa;
    },
    
    _buildStatefulColorFlyoutAnchor$p$0: function CommandUI_Builder$_buildStatefulColorFlyoutAnchor$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var menu = this._buildMenuForFlyoutAnchor$p$0(data, bc);
        var scfa = new CommandUI.Controls.StatefulColorFlyoutAnchor(this.get_root(), properties.Id, properties, menu);
        return scfa;
    },
    
    _buildLabel$p$0: function CommandUI_Builder$_buildLabel$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var fslb = new CommandUI.Controls.Label(this.get_root(), properties.Id, properties);
        return fslb;
    },
    
    _buildPlaceholder$p$0: function CommandUI_Builder$_buildPlaceholder$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var placeholder = new CommandUI.Controls.Placeholder(this.get_root(), properties.Id, properties);
        return placeholder;
    },
    
    _buildSeparator$p$0: function CommandUI_Builder$_buildSeparator$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var sep = new CommandUI.Controls.Separator(this.get_root(), properties.Id, properties);
        return sep;
    },
    
    _convertNodeValueToInt$p$0: function CommandUI_Builder$_convertNodeValueToInt$p$0$in(obj) {
        if (typeof(obj) === 'string') {
            return parseInt(obj);
        }
        return obj;
    },
    
    _buildClonedControl$p$0: function CommandUI_Builder$_buildClonedControl$p$0$in(data, bc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var cloneControlsForMenu = CommandUI.MenuBuildContext.isInstanceOfType(bc) && (bc).cloneControlsForMenu;
        var control = CommandUI.RootManager.get_instance().getFirstValidControl(properties.Id);
        if (control) {
            if (cloneControlsForMenu) {
                control = control.cloneForMenu(this.get_root(), properties);
            }
            else {
                control = control.clone(this.get_root(), properties);
            }
        }
        return control;
    }
}








CommandUI.Builder._spinnerChildren = function CommandUI_Builder__spinnerChildren(units, specialTextStrings) {
    this.units = units;
    this.specialTextStrings = specialTextStrings;
}
CommandUI.Builder._spinnerChildren.prototype = {
    units: null,
    specialTextStrings: null
}


CommandUI.XmlDOMElement = function CommandUI_XmlDOMElement() {
    CommandUI.XmlDOMElement.initializeBase(this);
}
CommandUI.XmlDOMElement.prototype = {
    XMLDocument: null
}


CommandUI.Component = function CommandUI_Component(root, id, title, description, keytipString, visible, hasChildren) {
    this.set_id(id);
    this.set_root(root);
    this.set__titleInternal$i$0(title);
    this._description$0 = description;
    this._visible$0 = visible;
    if (hasChildren) {
        this.ensureChildren();
    }
    if (keytipString) {
        this._keytip$0 = new CommandUI.Keytip(keytipString, this.get_id());
    }
}
CommandUI.Component.prototype = {
    _elmDOM$0: null,
    _visible$0: true,
    _enabled$0: true,
    _disposed$0: false,
    _enabledHasBeenSet$0: false,
    _description$0: null,
    _keytip$0: null,
    _originalCssDisplay$0: '',
    _visibleInDOM$0: true,
    
    ensureChildren: function CommandUI_Component$ensureChildren$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_children())) {
            this.set_children(new CommandUI.List());
        }
    },
    
    _$$pf_Id$p$0: null,
    
    get_id: function CommandUI_Component$get_id$in() {
        return this._$$pf_Id$p$0;
    },
    
    set_id: function CommandUI_Component$set_id$in(value) {
        this._$$pf_Id$p$0 = value;
        return value;
    },
    
    get_elementInternal: function CommandUI_Component$get_elementInternal$in() {
        return this._elmDOM$0;
    },
    
    set_elementInternal: function CommandUI_Component$set_elementInternal$in(value) {
        this._elmDOM$0 = value;
        return value;
    },
    
    _$$pf_Root$p$0: null,
    
    get_root: function CommandUI_Component$get_root$in() {
        return this._$$pf_Root$p$0;
    },
    
    set_root: function CommandUI_Component$set_root$in(value) {
        this._$$pf_Root$p$0 = value;
        return value;
    },
    
    _$$pf_Parent$p$0: null,
    
    get_parent: function CommandUI_Component$get_parent$in() {
        return this._$$pf_Parent$p$0;
    },
    
    set_parent: function CommandUI_Component$set_parent$in(value) {
        this._$$pf_Parent$p$0 = value;
        return value;
    },
    
    _$$pf_Children$p$0: null,
    
    get_children: function CommandUI_Component$get_children$in() {
        return this._$$pf_Children$p$0;
    },
    
    set_children: function CommandUI_Component$set_children$in(value) {
        this._$$pf_Children$p$0 = value;
        return value;
    },
    
    updateFocusedIndex: function CommandUI_Component$updateFocusedIndex$in(focusedItem) {
        return this === focusedItem;
    },
    
    resetFocusedIndex: function CommandUI_Component$resetFocusedIndex$in() {
    },
    
    focusNext: function CommandUI_Component$focusNext$in(direction) {
        return false;
    },
    
    _getChildInternal$i$0: function CommandUI_Component$_getChildInternal$i$0$in(id) {
        var $$enum_2 = this.get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var c = $$enum_2.get_current();
            if (c.get_id() === id) {
                return c;
            }
        }
        return null;
    },
    
    _getChild$i$0: function CommandUI_Component$_getChild$i$0$in(id) {
        return this._getChildInternal$i$0(id);
    },
    
    _getChildByTitle$i$0: function CommandUI_Component$_getChildByTitle$i$0$in(title) {
        var $$enum_2 = this.get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var c = $$enum_2.get_current();
            if (c.get_title() === title) {
                return c;
            }
        }
        return null;
    },
    
    addChild: function CommandUI_Component$addChild$in(child) {
        this._addChildInternal$i$0(child, true);
    },
    
    _addChildInternal$i$0: function CommandUI_Component$_addChildInternal$i$0$in(child, validateChild) {
        this._addChildAtIndexInternal$i$0(child, -1, validateChild);
    },
    
    _addChildAtIndex$i$0: function CommandUI_Component$_addChildAtIndex$i$0$in(child, index) {
        this._addChildAtIndexInternal$i$0(child, index, true);
    },
    
    _addChildAtIndexInternal$i$0: function CommandUI_Component$_addChildAtIndexInternal$i$0$in(child, index, validateChild) {
        if (validateChild) {
            this.ensureCorrectChildType(child);
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(child.get_parent())) {
            var errorMessage = String.format(CommandUI.Component._addChildAlreadyAddedExcpetionMessage$i, child.get_id(), this.get_id(), child.get_parent().get_id());
            Diag.ULS.shipAssertTag(4334035, 201, false, errorMessage);
            throw Error.create(errorMessage);
        }
        if (index === -1) {
            this.get_children().add(child);
        }
        else {
            this.get_children()._insert$i$0(index, child);
        }
        child.set_parent(this);
        this._onDirtyingChange$i$0();
    },
    
    removeChild: function CommandUI_Component$removeChild$in(id) {
        var child = this._getChildInternal$i$0(id);
        if (CommandUI.ScriptUtility.isNullOrUndefined(child)) {
            throw Error.create('The child with id: ' + id + ' is not as child of this Component');
        }
        this.get_children()._remove$i$0(child);
        child.set_parent(null);
        this._onDirtyingChange$i$0();
    },
    
    _removeChildren$i$0: function CommandUI_Component$_removeChildren$i$0$in() {
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var child = $$enum_1.get_current();
            if (child) {
                child.set_parent(null);
            }
        }
        this.get_children()._clear$i$0();
        this._onDirtyingChange$i$0();
    },
    
    ensureCorrectChildType: function CommandUI_Component$ensureCorrectChildType$in(child) {
        return;
    },
    
    initRootMember: function CommandUI_Component$initRootMember$in(root) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_root())) {
            throw Error.create('Root member has already been set for this Component.');
        }
        this.set_root(root);
    },
    
    get_visible: function CommandUI_Component$get_visible$in() {
        return this._visible$0;
    },
    
    set_visible: function CommandUI_Component$set_visible$in(value) {
        this.set__visibleInternal$i$0(value);
        return value;
    },
    
    get__visibleInternal$i$0: function CommandUI_Component$get__visibleInternal$i$0$in() {
        return this.get_visible();
    },
    
    set__visibleInternal$i$0: function CommandUI_Component$set__visibleInternal$i$0$in(value) {
        var oldValue = this._visible$0;
        this._visible$0 = value;
        if (oldValue !== this._visible$0) {
            this._onDirtyingChange$i$0();
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_parent())) {
                this.get_parent().onChildrenVisibleChanged();
            }
        }
        return value;
    },
    
    onChildrenVisibleChanged: function CommandUI_Component$onChildrenVisibleChanged$in() {
        if (this.get_children() && this.get_children().get_count() > 0) {
            var isVisible = false;
            var $$enum_2 = this.get_children().getEnumerator();
            while ($$enum_2.moveNext()) {
                var child = $$enum_2.get_current();
                var component = child;
                if (component.get_visible()) {
                    isVisible = true;
                    break;
                }
            }
            this.set_visible(isVisible);
        }
    },
    
    get__enabled$i$0: function CommandUI_Component$get__enabled$i$0$in() {
        return this._enabled$0;
    },
    
    set__enabled$i$0: function CommandUI_Component$set__enabled$i$0$in(value) {
        if (this._enabled$0 === value && this._enabledHasBeenSet$0) {
            return value;
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_parent()) && !this.get_parent().get__enabled$i$0() && value) {
            throw Error.create('This Component with id: ' + this.get_id() + ' cannot be Enabled because its parent is Disabled');
        }
        this._enabled$0 = value;
        this._enabledHasBeenSet$0 = true;
        var $$enum_2 = this.get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var c = $$enum_2.get_current();
            c.set__enabled$i$0(value);
        }
        this.onEnabledChanged(value);
        return value;
    },
    
    onEnabledChanged: function CommandUI_Component$onEnabledChanged$in(enabled) {
    },
    
    get_title: function CommandUI_Component$get_title$in() {
        return this.get__titleInternal$i$0();
    },
    
    set_title: function CommandUI_Component$set_title$in(value) {
        this.set__titleInternal$i$0(value);
        this._onDirtyingChange$i$0();
        return value;
    },
    
    _$$pf_TitleInternal$p$0: null,
    
    get__titleInternal$i$0: function CommandUI_Component$get__titleInternal$i$0$in() {
        return this._$$pf_TitleInternal$p$0;
    },
    
    set__titleInternal$i$0: function CommandUI_Component$set__titleInternal$i$0$in(value) {
        this._$$pf_TitleInternal$p$0 = value;
        return value;
    },
    
    get__description$i$0: function CommandUI_Component$get__description$i$0$in() {
        return this._description$0;
    },
    
    set__description$i$0: function CommandUI_Component$set__description$i$0$in(value) {
        this._description$0 = value;
        this._onDirtyingChange$i$0();
        return value;
    },
    
    _$$pf_Dirty$p$0: true,
    
    get_dirty: function CommandUI_Component$get_dirty$in() {
        return this._$$pf_Dirty$p$0;
    },
    
    set_dirty: function CommandUI_Component$set_dirty$in(value) {
        this._$$pf_Dirty$p$0 = value;
        return value;
    },
    
    _setDirtyRecursively$i$0: function CommandUI_Component$_setDirtyRecursively$i$0$in(dirty) {
        this.set_dirty(dirty);
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_children())) {
            return;
        }
        var $$enum_2 = this.get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var c = $$enum_2.get_current();
            c._setDirtyRecursively$i$0(dirty);
        }
    },
    
    _onDirtyingChange$i$0: function CommandUI_Component$_onDirtyingChange$i$0$in() {
        if (this.get_dirty() || this.get_ignoreDirtyingEvents()) {
            return;
        }
        this.set_dirty(true);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_parent())) {
            this.get_parent()._onDirtyingChange$i$0();
        }
    },
    
    _$$pf_IgnoreDirtyingEvents$p$0: false,
    
    get_ignoreDirtyingEvents: function CommandUI_Component$get_ignoreDirtyingEvents$in() {
        return this._$$pf_IgnoreDirtyingEvents$p$0;
    },
    
    set_ignoreDirtyingEvents: function CommandUI_Component$set_ignoreDirtyingEvents$in(value) {
        this._$$pf_IgnoreDirtyingEvents$p$0 = value;
        return value;
    },
    
    refreshInternal: function CommandUI_Component$refreshInternal$in() {
        this.set_dirty(false);
    },
    
    ensureRefreshed: function CommandUI_Component$ensureRefreshed$in() {
        if (this.get_dirty()) {
            this.refreshInternal();
        }
    },
    
    ensureDOMElement: function CommandUI_Component$ensureDOMElement$in() {
        if (!this._elmDOM$0) {
            this._elmDOM$0 = CommandUI.Utility.createElement(this.get_domElementTagName());
            this._elmDOM$0.className = this.get_cssClass();
            if (this.get_id()) {
                this._elmDOM$0.id = this.get_id();
            }
        }
    },
    
    get_domElementTagName: function CommandUI_Component$get_domElementTagName$in() {
        return 'span';
    },
    
    get_cssClass: function CommandUI_Component$get_cssClass$in() {
        return '';
    },
    
    get_visibleInDOM: function CommandUI_Component$get_visibleInDOM$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_parent())) {
            return false;
        }
        return this._visibleInDOM$0 && this.get_parent().get_visibleInDOM();
    },
    
    set_visibleInDOM: function CommandUI_Component$set_visibleInDOM$in(value) {
        if (this.get_root().get_supportsDynamicDisplayMode()) {
            this._visibleInDOM$0 = value;
            if (this._visibleInDOM$0) {
                this._removeHideElementOverride$i$0();
            }
            else {
                this._applyHideElementOverride$i$0();
            }
        }
        else {
            Common.Debug.assertNotReachedStringTag('The Component\'s Root must support dynamic displaymode in order to set VisibleInDom', 6160847);
        }
        return value;
    },
    
    _setFocusOnFirstControl$i$0: function CommandUI_Component$_setFocusOnFirstControl$i$0$in() {
        if (!this.get_visible()) {
            return false;
        }
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var c = $$enum_1.get_current();
            if (c._setFocusOnFirstControl$i$0()) {
                return true;
            }
        }
        return false;
    },
    
    ensureDOMElementAndEmpty: function CommandUI_Component$ensureDOMElementAndEmpty$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_elementInternal())) {
            this.ensureDOMElement();
        }
        else {
            this.set_elementInternal(CommandUI.Utility.removeChildNodes(this.get_elementInternal()));
        }
    },
    
    appendChildrenToElement: function CommandUI_Component$appendChildrenToElement$in(elm) {
        var isInvisibleControlSupported = this.get_root().get_supportsInvisibleControls();
        var df = document.createDocumentFragment();
        var $$enum_4 = this.get_children().getEnumerator();
        while ($$enum_4.moveNext()) {
            var child = $$enum_4.get_current();
            child.ensureDOMElement();
            if (!isInvisibleControlSupported || child.get_visible()) {
                df.appendChild(child.get_elementInternal());
            }
            child.ensureRefreshed();
        }
        elm.appendChild(df);
    },
    
    getTextValue: function CommandUI_Component$getTextValue$in() {
        return null;
    },
    
    onMenuClosed: function CommandUI_Component$onMenuClosed$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_children())) {
            return;
        }
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var c = $$enum_1.get_current();
            c.onMenuClosed();
        }
    },
    
    _delayedInitHandler$0: null,
    _delayedInitData$0: null,
    _delayedInitOptions$0: null,
    
    _setDelayedInitData$i$0: function CommandUI_Component$_setDelayedInitData$i$0$in(handler, data, options) {
        this._delayedInitHandler$0 = handler;
        this._delayedInitData$0 = data;
        this._delayedInitOptions$0 = options;
    },
    
    _delayedInitInProgress$0: false,
    
    doDelayedInit: function CommandUI_Component$doDelayedInit$in() {
        if (this._delayedInitInProgress$0) {
            return;
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._delayedInitHandler$0)) {
            throw Error.create('No delayedinit handler present in this component: ' + this.get_id());
        }
        this._delayedInitInProgress$0 = true;
        this._delayedInitHandler$0(this, this._delayedInitData$0, this._delayedInitOptions$0);
    },
    
    _onDelayedInitFinished$i$0: function CommandUI_Component$_onDelayedInitFinished$i$0$in(success) {
        if (success) {
            this._delayedInitHandler$0 = null;
            this._delayedInitData$0 = null;
            this._delayedInitOptions$0 = null;
            this._onDirtyingChange$i$0();
        }
        this._delayedInitInProgress$0 = false;
    },
    
    get__needsDelayIniting$i$0: function CommandUI_Component$get__needsDelayIniting$i$0$in() {
        return !CommandUI.ScriptUtility.isNullOrUndefined(this._delayedInitHandler$0);
    },
    
    pollForStateAndUpdateInternal: function CommandUI_Component$pollForStateAndUpdateInternal$in() {
        if (!this.get_children()) {
            if (this._disposed$0) {
                Diag.ULS.sendTraceTag(35129304, 220, 15, 'PollForStateAndUpdateInternal is called after component is disposed');
            }
            else {
                Diag.ULS.sendTraceTag(35129305, 220, 50, 'PollForStateAndUpdateInternal is called and children is null');
            }
            return;
        }
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var c = $$enum_1.get_current();
            c.pollForStateAndUpdateInternal();
        }
    },
    
    ensureBehaviorAttached: function CommandUI_Component$ensureBehaviorAttached$in() {
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var c = $$enum_1.get_current();
            c.ensureBehaviorAttached();
        }
    },
    
    _lastPollTime$0: null,
    
    get__lastPollTime$i$0: function CommandUI_Component$get__lastPollTime$i$0$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._lastPollTime$0)) {
            this._lastPollTime$0 = new Date();
            this._lastPollTime$0.setTime(0);
        }
        return this._lastPollTime$0;
    },
    
    set__lastPollTime$i$0: function CommandUI_Component$set__lastPollTime$i$0$in(value) {
        this._lastPollTime$0 = value;
        return value;
    },
    
    get__rootPolledSinceLastPoll$i$0: function CommandUI_Component$get__rootPolledSinceLastPoll$i$0$in() {
        return this.get__lastPollTime$i$0().getTime() < this.get_root().get__lastPollTime$i$0().getTime() || !this.get__lastPollTime$i$0().getTime();
    },
    
    pollIfRootPolledSinceLastPoll: function CommandUI_Component$pollIfRootPolledSinceLastPoll$in() {
        if (this.get__rootPolledSinceLastPoll$i$0()) {
            this.pollForStateAndUpdateInternal();
        }
    },
    
    _applyHideElementOverride$i$0: function CommandUI_Component$_applyHideElementOverride$i$0$in() {
        if (this.get_elementInternal().style.display !== 'none') {
            this._originalCssDisplay$0 = this.get_elementInternal().style.display;
        }
        this.get_elementInternal().style.display = 'none';
    },
    
    _removeHideElementOverride$i$0: function CommandUI_Component$_removeHideElementOverride$i$0$in() {
        this.get_elementInternal().style.display = this._originalCssDisplay$0;
    },
    
    dispose: function CommandUI_Component$dispose$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_children())) {
            var $$enum_1 = this.get_children().getEnumerator();
            while ($$enum_1.moveNext()) {
                var c = $$enum_1.get_current();
                c.dispose();
            }
            this.set_children(null);
        }
        this.set_parent(null);
        this.set_root(null);
        this._delayedInitData$0 = null;
        this._delayedInitHandler$0 = null;
        this._delayedInitOptions$0 = null;
        this._elmDOM$0 = null;
        this._disposed$0 = true;
    },
    
    get_keytip: function CommandUI_Component$get_keytip$in() {
        return this._keytip$0;
    },
    
    get__hasKeytip$i$0: function CommandUI_Component$get__hasKeytip$i$0$in() {
        return !!this._keytip$0;
    },
    
    get__keytipDomContainer$i$0: function CommandUI_Component$get__keytipDomContainer$i$0$in() {
        return this._elmDOM$0;
    },
    
    _ensureKeytip$i$0: function CommandUI_Component$_ensureKeytip$i$0$in(keytipParentElement, elementToDescribe, parentKeytipsIds, parentKeytipsKeys) {
        if (this.get__hasKeytip$i$0() && CommandUI.ScriptUtility.isNullOrUndefined(this.get_keytip().get_element()) && !CommandUI.ScriptUtility.isNullOrUndefined(keytipParentElement) && !CommandUI.ScriptUtility.isNullOrUndefined(elementToDescribe)) {
            keytipParentElement.appendChild(this.get_keytip().createKeytipElement());
            var describedByIds = '';
            if ((CommandUI.Jewel.isInstanceOfType(this.get_root())) && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactRibbonEnvironmentEnabled()) {
                var key = this.get_keytip().get_key().toLocaleLowerCase();
                var fullKeySequence = (parentKeytipsKeys) ? String.format('ktp-{0}-{1}', parentKeytipsKeys, key) : String.format('ktp-{0}', key);
                describedByIds = String.format('ktp-layer-id {0}', fullKeySequence);
                elementToDescribe.setAttribute('data-ktp-target', fullKeySequence);
                elementToDescribe.setAttribute('data-ktp-execute-target', fullKeySequence);
            }
            else {
                describedByIds = (parentKeytipsIds) ? String.format('{0} {1}', parentKeytipsIds, this.get_keytip().get_elementId()) : String.format('{0} {1}', CommandUI.Keytip.ribbonShortcutId, this.get_keytip().get_elementId());
            }
            Common.AccessibilityUtils.setAriaAttribute(elementToDescribe, Common.AccessibilityUtils.ariaDescribedByAttribute, describedByIds);
        }
    },
    
    _showKeytip$i$0: function CommandUI_Component$_showKeytip$i$0$in(zIndex) {
        if (!this.get_visible() || !this.get__hasKeytip$i$0()) {
            return false;
        }
        if (!this.get_keytip().get_element() && this.get__keytipDomContainer$i$0()) {
            this.get__keytipDomContainer$i$0().appendChild(this.get_keytip().createKeytipElement());
        }
        this.get_keytip().show(zIndex);
        return true;
    },
    
    _hideKeytip$i$0: function CommandUI_Component$_hideKeytip$i$0$in() {
        if (this.get__hasKeytip$i$0()) {
            this.get_keytip().hide();
        }
    }
}


CommandUI.ContextMenuLauncher = function CommandUI_ContextMenuLauncher(root, id, properties, menu) {
    CommandUI.ContextMenuLauncher.initializeBase(this, [ root, id, properties, menu ]);
    this.set_launcherHeight(0);
    this.set_launcherWidth(0);
}
CommandUI.ContextMenuLauncher.prototype = {
    _$$pf_X$p$2: 0,
    
    get_x: function CommandUI_ContextMenuLauncher$get_x$in() {
        return this._$$pf_X$p$2;
    },
    
    set_x: function CommandUI_ContextMenuLauncher$set_x$in(value) {
        this._$$pf_X$p$2 = value;
        return value;
    },
    
    _$$pf_Y$p$2: 0,
    
    get_y: function CommandUI_ContextMenuLauncher$get_y$in() {
        return this._$$pf_Y$p$2;
    },
    
    set_y: function CommandUI_ContextMenuLauncher$set_y$in(value) {
        this._$$pf_Y$p$2 = value;
        return value;
    },
    
    _$$pf_LauncherHeight$p$2: 0,
    
    get_launcherHeight: function CommandUI_ContextMenuLauncher$get_launcherHeight$in() {
        return this._$$pf_LauncherHeight$p$2;
    },
    
    set_launcherHeight: function CommandUI_ContextMenuLauncher$set_launcherHeight$in(value) {
        this._$$pf_LauncherHeight$p$2 = value;
        return value;
    },
    
    _$$pf_LauncherWidth$p$2: 0,
    
    get_launcherWidth: function CommandUI_ContextMenuLauncher$get_launcherWidth$in() {
        return this._$$pf_LauncherWidth$p$2;
    },
    
    set_launcherWidth: function CommandUI_ContextMenuLauncher$set_launcherWidth$in(value) {
        this._$$pf_LauncherWidth$p$2 = value;
        return value;
    },
    
    get__needsAKeytip$i$0: function CommandUI_ContextMenuLauncher$get__needsAKeytip$i$0$in() {
        return false;
    },
    
    get_menuDirection: function CommandUI_ContextMenuLauncher$get_menuDirection$in() {
        return CommandUI.FlyoutDirectionType.verticalAnchorAdjustable;
    },
    
    setInitialAriaMenuLauncherAttributes: function CommandUI_ContextMenuLauncher$setInitialAriaMenuLauncherAttributes$in(focusableElement) {
    },
    
    updateAriaMenuLauncherAttributes: function CommandUI_ContextMenuLauncher$updateAriaMenuLauncherAttributes$in(focusableElement, on) {
    },
    
    _launchContextMenuAt$i$2: function CommandUI_ContextMenuLauncher$_launchContextMenuAt$i$2$in(x, y, inputMethod) {
        this._launchContextMenuAtLauncher$i$2(new Sys.UI.Bounds(x, y, 0, 0), inputMethod);
    },
    
    _launchContextMenuAtLauncher$i$2: function CommandUI_ContextMenuLauncher$_launchContextMenuAtLauncher$i$2$in(launcherBounds, inputMethod) {
        this.set_x(launcherBounds.x);
        this.set_y(launcherBounds.y);
        this.set_launcherHeight(launcherBounds.height);
        this.set_launcherWidth(launcherBounds.width);
        this.launchMenu(inputMethod);
    }
}


CommandUI.ContextMenuRootProperties = function CommandUI_ContextMenuRootProperties() {
    CommandUI.ContextMenuRootProperties.initializeBase(this);
}
CommandUI.ContextMenuRootProperties.prototype = {
    CommandMenuOpen: null,
    CommandMenuClose: null
}


CommandUI.ContextMenuRoot = function CommandUI_ContextMenuRoot(id, properties) {
    CommandUI.ContextMenuRoot.initializeBase(this, [ id, properties ]);
}
CommandUI.ContextMenuRoot.prototype = {
    _$$pf_ActiveFloatie$p$3: null,
    
    get_activeFloatie: function CommandUI_ContextMenuRoot$get_activeFloatie$in() {
        return this._$$pf_ActiveFloatie$p$3;
    },
    
    set_activeFloatie: function CommandUI_ContextMenuRoot$set_activeFloatie$in(value) {
        this._$$pf_ActiveFloatie$p$3 = value;
        return value;
    },
    
    get__hasActiveFloatie$i$3: function CommandUI_ContextMenuRoot$get__hasActiveFloatie$i$3$in() {
        return !isNullOrUndefined(this.get_activeFloatie());
    },
    
    _$$pf_ActiveMenu$p$3: null,
    
    get_activeMenu: function CommandUI_ContextMenuRoot$get_activeMenu$in() {
        return this._$$pf_ActiveMenu$p$3;
    },
    
    set_activeMenu: function CommandUI_ContextMenuRoot$set_activeMenu$in(value) {
        this._$$pf_ActiveMenu$p$3 = value;
        return value;
    },
    
    refreshInternal: function CommandUI_ContextMenuRoot$refreshInternal$in() {
        CommandUI.Root.prototype.refreshInternal.call(this);
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_elementInternal())) {
            this.ensureDOMElement();
        }
        this.set_elementInternal(CommandUI.Utility.removeChildNodes(this.get_elementInternal()));
        this.appendChildrenToElement(this.get_elementInternal());
        this.set_dirty(false);
    },
    
    get_rootType: function CommandUI_ContextMenuRoot$get_rootType$in() {
        return Common.UILocation.contextMenu;
    },
    
    get_contextMenuRootProperties: function CommandUI_ContextMenuRoot$get_contextMenuRootProperties$in() {
        return this.get_properties();
    },
    
    ensureCorrectChildType: function CommandUI_ContextMenuRoot$ensureCorrectChildType$in(child) {
        if (!CommandUI._standaloneDock.isInstanceOfType(child)) {
            throw Error.create('Only children of type StandaloneDock can be added to a ContextMenuRoot');
        }
    },
    
    createContextMenu: function CommandUI_ContextMenuRoot$createContextMenu$in(props, id, title, description, maxWidth) {
        Common.Debug.assertStringTag(CommandUI.ScriptUtility.isNullOrUndefined(this.get_createdControls()[id]), 'Specified context menu \"' + id + '\" has already been created', 1581539);
        var menu = new CommandUI.Menu(this, id, title, description, null, null, false, CommandUI.MenuHorizontalAlignment.left);
        if (!props) {
            props = {};
        }
        props.CommandMenuOpen = this.get_contextMenuRootProperties().CommandMenuOpen;
        props.CommandMenuClose = this.get_contextMenuRootProperties().CommandMenuClose;
        var control = new CommandUI.Controls.ContextMenuControl(this, id + 'Launcher', props, menu);
        this.get_createdControls()[id] = control;
        var dock = new CommandUI._standaloneDock(this, 'dock' + id);
        dock.addChild(control.createComponentForDisplayMode('Menu'));
        this.addChild(dock);
        this.refresh();
    },
    
    showContextMenuAt: function CommandUI_ContextMenuRoot$showContextMenuAt$in(id, x, y, inputMethod) {
        this.showContextMenuAtLauncher(id, new Sys.UI.Bounds(x, y, 0, 0), inputMethod);
        Diag.ULS.sendTraceTag(36497229, 207, 50, 'ContextMenu launched for Id: {0}', id);
    },
    
    showContextMenuAtLauncher: function CommandUI_ContextMenuRoot$showContextMenuAtLauncher$in(id, launcherbounds, inputMethod) {
        var control = this.get_createdControls()[id];
        if (CommandUI.ScriptUtility.isNullOrUndefined(control)) {
            throw Error.create('The context menu \"' + id + '\" does not exist');
        }
        control._launchContextMenuAtLauncher$i$2(launcherbounds, inputMethod);
        this.set_activeMenu((control).get_menu());
    },
    
    _onMenuStackCleared$i$1: function CommandUI_ContextMenuRoot$_onMenuStackCleared$i$1$in() {
        if (this.get__hasActiveFloatie$i$3()) {
            this.get_activeFloatie().dismissFloatie(null);
            this.set_activeFloatie(null);
        }
        this.set_activeMenu(null);
    },
    
    dispose: function CommandUI_ContextMenuRoot$dispose$in() {
        var $$dict_2 = this.get_createdControls();
        for (var $$key_3 in $$dict_2) {
            var createdControl = { key: $$key_3, value: $$dict_2[$$key_3] };
            var control = createdControl.value;
            control.dispose();
        }
        CommandUI.StandaloneRoot.prototype.dispose.call(this);
    }
}


CommandUI.ControlProperties = function CommandUI_ControlProperties() {
}
CommandUI.ControlProperties.prototype = {
    Alt: null,
    Command: null,
    CommandValueId: null,
    Description: null,
    Id: null,
    Image16by16: null,
    Image16by16Class: null,
    Image20by20: null,
    Image20by20Class: null,
    Image30by30: null,
    Image30by30Class: null,
    Image32by32: null,
    Image24by24: null,
    Image24by24Class: null,
    Image32by32Class: null,
    Image48by48: null,
    Image48by48Class: null,
    Image95by123: null,
    Image123by95: null,
    Image123by69: null,
    Image100by100: null,
    IsDefinitive: null,
    TemplateAlias: null,
    LabelCss: null,
    LabelText: null,
    LabelTextUserGeneratedPlaceholderReplacements: null,
    Keytip: null,
    IsEmphasized: null,
    MenuItemId: null,
    Visible: null,
    ShouldSetTitle: null,
    AriaLabel: null,
    AriaLabelledById: null,
    AriaLabelledByText: null,
    AriaDescribedById: null,
    AriaDescribedByText: null
}


CommandUI.SharedControlCommandProperties = function CommandUI_SharedControlCommandProperties() {
}


CommandUI.ControlComponentDomCache = function CommandUI_ControlComponentDomCache() {
    this._controlComponentDomCollection$0 = {};
}
CommandUI.ControlComponentDomCache.prototype = {
    _controlComponentDomCollection$0: null,
    
    addDomObject: function CommandUI_ControlComponentDomCache$addDomObject$in(controlComponentDom) {
        this._controlComponentDomCollection$0[controlComponentDom.get_displayMode()] = controlComponentDom;
    },
    
    forEach: function CommandUI_ControlComponentDomCache$forEach$in(func) {
        var $$dict_3 = this._controlComponentDomCollection$0;
        for (var $$key_4 in $$dict_3) {
            var entry = { key: $$key_4, value: $$dict_3[$$key_4] };
            var controlComponentDom = entry.value;
            func(controlComponentDom);
        }
    },
    
    get_small: function CommandUI_ControlComponentDomCache$get_small$in() {
        return (this._controlComponentDomCollection$0['Small'] || this._controlComponentDomCollection$0['Small14']);
    },
    
    get_medium: function CommandUI_ControlComponentDomCache$get_medium$in() {
        return (this._controlComponentDomCollection$0['Medium'] || this._controlComponentDomCollection$0['Medium14']);
    },
    
    get_large: function CommandUI_ControlComponentDomCache$get_large$in() {
        return (this._controlComponentDomCollection$0['Large'] || this._controlComponentDomCollection$0['FloatieLarge']);
    },
    
    get_smallMenu: function CommandUI_ControlComponentDomCache$get_smallMenu$in() {
        return (this._controlComponentDomCollection$0['Menu'] || this._controlComponentDomCollection$0['Menu16'] || this._controlComponentDomCollection$0['MenuTellMe']);
    },
    
    get_largeMenu: function CommandUI_ControlComponentDomCache$get_largeMenu$in() {
        return (this._controlComponentDomCollection$0['Menu32'] || this._controlComponentDomCollection$0['Menu48']);
    },
    
    get_item: function CommandUI_ControlComponentDomCache$get_item$in(displayMode) {
        return this._controlComponentDomCollection$0[displayMode];
    },
    
    clear: function CommandUI_ControlComponentDomCache$clear$in() {
        this._controlComponentDomCollection$0 = {};
    }
}


CommandUI.ControlComponentDom = function CommandUI_ControlComponentDom(displayMode, elmControl, domStrategy) {
    this.set_displayMode(displayMode);
    this.elmControl = elmControl;
    this._domStrategy$0 = domStrategy;
}
CommandUI.ControlComponentDom.prototype = {
    _$$pf_DisplayMode$p$0: null,
    
    get_displayMode: function CommandUI_ControlComponentDom$get_displayMode$in() {
        return this._$$pf_DisplayMode$p$0;
    },
    
    set_displayMode: function CommandUI_ControlComponentDom$set_displayMode$in(value) {
        this._$$pf_DisplayMode$p$0 = value;
        return value;
    },
    
    elmControl: null,
    elmLabel: null,
    elmDescription: null,
    elmImage: null,
    elmIconContainer: null,
    _domStrategy$0: null,
    
    setLabelText: function CommandUI_ControlComponentDom$setLabelText$in(text) {
        var labelTextSet = false;
        if (this._domStrategy$0) {
            labelTextSet = this._domStrategy$0.updateLabel(this.elmLabel, text);
        }
        if (!labelTextSet && this.elmLabel) {
            if (this.get_displayMode() === 'Large' || this.get_displayMode() === 'Large16' || this.get_displayMode() === 'FloatieLarge') {
                CommandUI.Utility._setLargeControlText$i(this.elmLabel, text, false);
            }
            else {
                this.elmLabel.innerText = text;
            }
        }
    },
    
    setTooltip: function CommandUI_ControlComponentDom$setTooltip$in(title) {
        if (this.elmControl && (!CommandUI.Control.hasTextSpace(this.get_displayMode()) || (this.elmLabel && this.elmLabel.innerText !== title))) {
            this.elmControl.title = title;
        }
    }
}


CommandUI.Control = function CommandUI_Control(root, id, properties) {
    this.$$d_onPointerDown = Function.createDelegate(this, this.onPointerDown);
    this.$$d_onKeyUp = Function.createDelegate(this, this.onKeyUp);
    this.$$d_onKeyDown = Function.createDelegate(this, this.onKeyDown);
    this.$$d__pollForStateAndUpdate$i$0 = Function.createDelegate(this, this._pollForStateAndUpdate$i$0);
    this._components$0 = [];
    this.set_root(root);
    this.set_id(id);
    this._properties$0 = properties;
    this._displayModes$0 = ',';
    this.set_controlComponentDomCache(new CommandUI.ControlComponentDomCache());
    this._visible$0 = !CommandUI.Utility.isFalse(properties.Visible);
    Common.Debug.assertImpliesStringTag(!this._visible$0, root.get_supportsInvisibleControls(), String.format('This root doesn\'t support invisible controls (control id {0})', id), 3731856);
    root._registerControl$i$1(this);
    this._connectControlBehaviorIfAvailable$i$0();
}
CommandUI.Control._generateCloneProperties$p = function CommandUI_Control$_generateCloneProperties$p$st(baseControlProperties, overriddenProperties) {
    var cloneProperties = {};
    var $$dict_4 = baseControlProperties;
    for (var $$key_5 in $$dict_4) {
        var entry = { key: $$key_5, value: $$dict_4[$$key_5] };
        cloneProperties[entry.key] = entry.value;
    }
    var $$dict_7 = overriddenProperties;
    for (var $$key_8 in $$dict_7) {
        var entry = { key: $$key_8, value: $$dict_7[$$key_8] };
        cloneProperties[entry.key] = entry.value;
    }
    return cloneProperties;
}
CommandUI.Control.focusNextIndexInGrid = function CommandUI_Control$focusNextIndexInGrid$st(currentIndex, numColumns, numCells, direction) {
    switch (direction) {
        case 0:
            return CommandUI.Control._focusForwardIndex$p(currentIndex, numCells);
        case CommandUI.Control.FocusDirection.backward:
            return CommandUI.Control._focusBackwardIndex$p(currentIndex, numCells);
        case CommandUI.Control.FocusDirection.left:
            return CommandUI.Control._focusLeftIndex$p(currentIndex, numColumns, numCells);
        case CommandUI.Control.FocusDirection.right:
            return CommandUI.Control._focusRightIndex$p(currentIndex, numColumns, numCells);
        case CommandUI.Control.FocusDirection.up:
            return CommandUI.Control._focusUpIndex$p(currentIndex, numColumns, numCells);
        case CommandUI.Control.FocusDirection.down:
            return CommandUI.Control._focusDownIndex$p(currentIndex, numColumns, numCells);
        default:
            Common.Debug.assertNotReachedStringTag('Unknown grid navigation direction!', 1581534);
            return -1;
    }
}
CommandUI.Control._focusForwardIndex$p = function CommandUI_Control$_focusForwardIndex$p$st(currentIndex, numCells) {
    var newIndex = (currentIndex === -1) ? 0 : (currentIndex + 1);
    return (newIndex < numCells) ? newIndex : currentIndex;
}
CommandUI.Control._focusBackwardIndex$p = function CommandUI_Control$_focusBackwardIndex$p$st(currentIndex, numCells) {
    var newIndex = (currentIndex === -1) ? (numCells - 1) : (currentIndex - 1);
    return (newIndex >= 0) ? newIndex : currentIndex;
}
CommandUI.Control._focusLeftIndex$p = function CommandUI_Control$_focusLeftIndex$p$st(currentIndex, numColumns, numCells) {
    var newIndex;
    if (currentIndex === -1) {
        newIndex = numCells - 1;
    }
    else {
        var columnIndex = currentIndex % numColumns;
        newIndex = (columnIndex > 0) ? (currentIndex - 1) : Math.min(currentIndex + (numColumns - 1), numCells - 1);
    }
    return newIndex;
}
CommandUI.Control._focusRightIndex$p = function CommandUI_Control$_focusRightIndex$p$st(currentIndex, numColumns, numCells) {
    var newIndex;
    if (currentIndex === -1) {
        newIndex = 0;
    }
    else {
        var columnIndex = currentIndex % numColumns;
        if ((columnIndex < (numColumns - 1)) && (currentIndex < (numCells - 1))) {
            newIndex = currentIndex + 1;
        }
        else {
            newIndex = currentIndex - columnIndex;
        }
    }
    return newIndex;
}
CommandUI.Control._focusUpIndex$p = function CommandUI_Control$_focusUpIndex$p$st(currentIndex, numColumns, numCells) {
    var newIndex;
    if (currentIndex === -1) {
        var extraCells = numCells % numColumns;
        newIndex = (!extraCells) ? (numCells - numColumns) : (numCells - extraCells);
    }
    else {
        newIndex = currentIndex - numColumns;
    }
    return (newIndex >= 0) ? newIndex : currentIndex;
}
CommandUI.Control._focusDownIndex$p = function CommandUI_Control$_focusDownIndex$p$st(currentIndex, numColumns, numCells) {
    var newIndex = (currentIndex === -1) ? 0 : (currentIndex + numColumns);
    return (newIndex < numCells) ? newIndex : currentIndex;
}
CommandUI.Control._getControlSize$i = function CommandUI_Control$_getControlSize$i$st(displayMode) {
    var controlSize = CommandUI.ControlSize.control16;
    switch (displayMode) {
        case 'Large':
            controlSize = 0;
            break;
        case 'LargeNoText':
            controlSize = 0;
            break;
        case 'Large30':
            controlSize = CommandUI.ControlSize.large30;
            break;
        case 'Large16':
            controlSize = CommandUI.ControlSize.large16;
            break;
        case 'FloatieLarge':
            controlSize = CommandUI.ControlSize.largeFloatie;
            break;
        case 'Medium20':
            controlSize = CommandUI.ControlSize.control20;
            break;
        case 'Medium14':
            controlSize = CommandUI.ControlSize.control14;
            break;
        case 'Small14':
            controlSize = CommandUI.ControlSize.control14;
            break;
        case 'Small20':
            controlSize = CommandUI.ControlSize.control20;
            break;
        case 'Small24':
            controlSize = CommandUI.ControlSize.control24;
            break;
        case 'Menu20':
            controlSize = CommandUI.ControlSize.control20;
            break;
        case 'Menu32':
            controlSize = 0;
            break;
        case 'Initials':
            controlSize = 0;
            break;
        case 'Menu48':
            controlSize = CommandUI.ControlSize.extraLarge;
            break;
    }
    return controlSize;
}
CommandUI.Control._updateStyle$p = function CommandUI_Control$_updateStyle$p$st(displayMode, outerStyle, hasText, createPlaceholderForEmptyImage, hasPeopleWellIcon) {
    switch (displayMode) {
        case 'Large':
            outerStyle.val = 'cui-ctl-large';
            break;
        case 'LargeNoText':
            hasText.val = false;
            outerStyle.val = 'cui-ctl-large';
            break;
        case 'Large30':
            hasText.val = false;
            outerStyle.val = 'cui-ctl-large';
            break;
        case 'Large16':
            outerStyle.val = 'cui-ctl-medium';
            break;
        case 'FloatieLarge':
            outerStyle.val = 'cui-ctl';
            break;
        case 'Medium20':
            outerStyle.val = 'cui-ctl-medium';
            break;
        case 'Medium':
            outerStyle.val = 'cui-ctl-medium';
            break;
        case 'Medium14':
            outerStyle.val = 'cui-ctl-medium';
            break;
        case 'MediumCompact':
            outerStyle.val = 'cui-ctl-medium cui-ctl-compact';
            break;
        case 'Small':
            hasText.val = false;
            outerStyle.val = 'cui-ctl';
            break;
        case 'Small14':
            hasText.val = false;
            outerStyle.val = 'cui-ctl';
            break;
        case 'Small20':
            hasText.val = false;
            outerStyle.val = 'cui-ctl';
            break;
        case 'Small24':
            hasText.val = false;
            outerStyle.val = 'cui-ctl';
            break;
        case 'Menu':
        case 'Menu16':
        case 'MenuTellMe':
            createPlaceholderForEmptyImage.val = (displayMode === 'Menu16' || displayMode === 'MenuTellMe');
            outerStyle.val = 'cui-ctl-menu cui-ctl-menu16';
            break;
        case 'Menu20':
            createPlaceholderForEmptyImage.val = true;
            outerStyle.val = 'cui-ctl-menu cui-ctl-menu20';
            break;
        case 'Menu32':
            createPlaceholderForEmptyImage.val = true;
            outerStyle.val = 'cui-ctl-menu cui-ctl-menu32';
            break;
        case 'Initials':
            createPlaceholderForEmptyImage.val = true;
            hasPeopleWellIcon.val = true;
            outerStyle.val = 'cui-ctl-menu cui-ctl-menu32';
            break;
        case 'Menu48':
            createPlaceholderForEmptyImage.val = true;
            outerStyle.val = 'cui-ctl-menu cui-ctl-menu48';
            break;
        case 'Thin':
            hasText.val = false;
            outerStyle.val = 'cui-ctl-thin';
            break;
        default:
            outerStyle.val = 'cui-ctl';
            break;
    }
}
CommandUI.Control._setImageProperties$p = function CommandUI_Control$_setImageProperties$p$st(controlSize, properties, inMenu, imageUrl, imageClass, imgSize, iconContainerClass) {
    switch (controlSize) {
        case 0:
            imageUrl.val = properties.Image32by32;
            imageClass.val = properties.Image32by32Class;
            imgSize.val = 5;
            iconContainerClass.val = ((inMenu) ? 'cui-ctl-iconContainer' : 'cui-ctl-largeIconContainer');
            break;
        case CommandUI.ControlSize.large30:
            imageUrl.val = properties.Image30by30;
            imageClass.val = properties.Image30by30Class;
            imgSize.val = 14;
            iconContainerClass.val = 'cui-ctl-large30IconContainer';
            break;
        case CommandUI.ControlSize.large16:
            imageUrl.val = properties.Image16by16;
            imageClass.val = properties.Image16by16Class;
            imgSize.val = 4;
            iconContainerClass.val = 'cui-ctl-large16IconContainer';
            break;
        case CommandUI.ControlSize.largeFloatie:
            imageUrl.val = properties.Image24by24;
            imageClass.val = properties.Image24by24Class;
            imgSize.val = 12;
            iconContainerClass.val = 'cui-ctl-largeFloatieIconContainer';
            break;
        case CommandUI.ControlSize.extraLarge:
            imageUrl.val = properties.Image48by48;
            imageClass.val = properties.Image48by48Class;
            imgSize.val = 7;
            break;
        case CommandUI.ControlSize.control24:
            imageUrl.val = properties.Image24by24;
            imageClass.val = properties.Image24by24Class;
            imgSize.val = 12;
            iconContainerClass.val = 'cui-ctl-iconContainer24';
            break;
        case CommandUI.ControlSize.control20:
            imageUrl.val = properties.Image20by20;
            imageClass.val = properties.Image20by20Class;
            imgSize.val = 13;
            iconContainerClass.val = 'cui-ctl-iconContainer20';
            break;
        case CommandUI.ControlSize.control14:
            imageUrl.val = properties.Image16by16;
            imageClass.val = properties.Image16by16Class;
            imgSize.val = 11;
            iconContainerClass.val = 'cui-ctl-iconContainer14';
            break;
        case CommandUI.ControlSize.control16:
        default:
            imageUrl.val = properties.Image16by16;
            imageClass.val = properties.Image16by16Class;
            imgSize.val = 4;
            break;
    }
}
CommandUI.Control._createLabel$p = function CommandUI_Control$_createLabel$p$st(properties, hasText, controlSize, inMenu, labelText, arrow, control) {
    var elmLabel = CommandUI.Control._createElementLabel$p(properties);
    if (hasText) {
        if ((!controlSize && !inMenu) || controlSize === CommandUI.ControlSize.largeFloatie) {
            CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'cui-ctl-largelabel');
            CommandUI.Utility._setLargeControlText$i(elmLabel, labelText.val, arrow);
        }
        else {
            if (arrow && controlSize && controlSize !== CommandUI.ControlSize.extraLarge) {
                labelText.val += ' ';
            }
            CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'cui-ctl-mediumlabel');
            if (controlSize === CommandUI.ControlSize.large16) {
                CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'UISmallFont');
            }
            CommandUI.Utility.setControlText(elmLabel, labelText.val, properties.LabelTextUserGeneratedPlaceholderReplacements);
            if (properties.AriaLabel) {
                elmLabel.setAttribute(Common.AccessibilityUtils.ariaLabelAttribute, properties.AriaLabel);
                elmLabel.setAttribute('id', CommandUI.Control.elmLabelText + control.get_id());
            }
        }
        var labelCss = properties.LabelCss;
        if (!CommandUI.ScriptUtility.isNullOrEmptyString(labelCss)) {
            elmLabel.style.cssText = labelCss;
        }
    }
    else {
        if (controlSize === CommandUI.ControlSize.control24) {
            CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'cui-ctl-small24label');
        }
        else {
            CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'cui-ctl-smalllabel');
        }
    }
    return elmLabel;
}
CommandUI.Control._createDescription$p = function CommandUI_Control$_createDescription$p$st(elmLabel, properties, control, root, elmDescription) {
    var elmTextContainer = CommandUI.Utility.createElement('span');
    elmTextContainer.className = 'cui-ctl-menulabel';
    elmTextContainer.appendChild(elmLabel);
    var description = properties.Description;
    elmDescription.val = CommandUI.Utility.createElement('span');
    CommandUI.Utility.ensureCSSClassOnElement(elmDescription.val, 'cui-btn-menu-description');
    elmTextContainer.appendChild(elmDescription.val);
    elmDescription.val.style.display = 'block';
    if (!CommandUI.ScriptUtility.isNullOrUndefined(description)) {
        elmDescription.val.innerText = description;
        if (properties.AriaDescribedById) {
            elmDescription.val.setAttribute('id', CommandUI.Control.elmDescriptionText + control.get_id());
            elmDescription.val.setAttribute('aria-hidden', 'True');
        }
        if (!(CommandUI.Jewel.isInstanceOfType(root))) {
            CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'UIFontBold');
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(control.get_id()) && !CommandUI.ScriptUtility.isNullOrUndefined(properties.AriaDescribedByText)) {
            elmTextContainer.appendChild(CommandUI.Control._createHiddenElement$i('elmDescriptionPreText' + control.get_id(), properties.AriaDescribedByText));
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(properties.AriaLabelledById) && !CommandUI.ScriptUtility.isNullOrUndefined(properties.AriaLabelledByText)) {
            elmTextContainer.appendChild(CommandUI.Control._createHiddenElement$i(properties.AriaLabelledById, properties.AriaLabelledByText));
        }
    }
    else {
        if (!(CommandUI.Jewel.isInstanceOfType(root))) {
            CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'cui-ctl-mediumlabel-nodescription');
        }
    }
    return elmTextContainer;
}
CommandUI.Control._createArrow$p = function CommandUI_Control$_createArrow$p$st(inMenu, root, control) {
    var elmArrowCont = null;
    var elmArrowImage = CommandUI.Utility.createElement('img');
    elmArrowImage.alt = '';
    if (inMenu) {
        elmArrowCont = CommandUI.Utility._createClusteredImageContainerNew$i(3, root.get_properties().ImageSideArrow, root.get_properties().ImageSideArrowClass, elmArrowImage, false, false);
        CommandUI.Utility.ensureCSSClassOnElement(elmArrowCont, 'cui-fa-menu-arrow');
    }
    else {
        if (control.get__isVisualRefreshEnabled$i$0()) {
            elmArrowCont = CommandUI.Utility._createClusteredImageContainerNew$i(2, root.get_properties().ImageDownArrow8by8, root.get_properties().ImageDownArrow8by8Class, elmArrowImage, true, false);
        }
        else {
            elmArrowCont = CommandUI.Utility._createClusteredImageContainerNew$i(1, root.get_properties().ImageDownArrow, root.get_properties().ImageDownArrowClass, elmArrowImage, true, false);
        }
    }
    return elmArrowCont;
}
CommandUI.Control._createStandardControlDOMElement$i = function CommandUI_Control$_createStandardControlDOMElement$i$st(control, root, displayMode, properties, arrow, elmControlLabel, elmControlImage, elmControlDescription, elmControlIconContainer) {
    var useMenuDescription = false;
    if (displayMode === 'MenuTellMeExtended') {
        displayMode = 'MenuTellMe';
        useMenuDescription = true;
    }
    if (displayMode === 'Menu16DescriptionEnabled') {
        displayMode = 'Menu16';
        useMenuDescription = true;
    }
    var labelText = properties.LabelText || '';
    if (labelText === '' && displayMode === 'MenuTellMe') {
        labelText = properties.LabelText = properties.Alt || '';
    }
    var inMenu = CommandUI.ControlComponent._isDisplayModeMenu$i(displayMode);
    control.set_inMenu(inMenu);
    var hasText = true;
    var controlSize = CommandUI.Control._getControlSize$i(displayMode);
    var createPlaceholderForEmptyImage = false;
    var hasPeopleWellIcon = false;
    var outerStyle = null;
    var $$t_V, $$t_W, $$t_X, $$t_Y;
    CommandUI.Control._updateStyle$p(displayMode, ($$t_V = {'val': outerStyle}), ($$t_W = {'val': hasText}), ($$t_X = {'val': createPlaceholderForEmptyImage}), ($$t_Y = {'val': hasPeopleWellIcon})), outerStyle = $$t_V.val, hasText = $$t_W.val, createPlaceholderForEmptyImage = $$t_X.val, hasPeopleWellIcon = $$t_Y.val;
    var elm = CommandUI.Control._createOuterElement$i(outerStyle, control, !CommandUI.ScriptUtility.isNullOrUndefined(properties.Description));
    if (root.get__supportsEmphasizedControls$i$1() && CommandUI.Utility.isTrue(properties.IsEmphasized)) {
        CommandUI.Utility.ensureCSSClassOnElement(elm, 'cui-emphasized');
    }
    var alt = properties.Alt;
    if (CommandUI.ScriptUtility.isNullOrEmptyString(alt)) {
        alt = labelText;
    }
    if (!hasText || (alt !== labelText)) {
        elm.title = alt;
    }
    var elmImage = null;
    var elmIconContainer = null;
    var elmDescription = null;
    var imageUrl = null;
    var imageClass = null;
    var imgSize = 0;
    var iconContainerClass = 'cui-ctl-iconContainer';
    var $$t_Z, $$t_a, $$t_b, $$t_c;
    CommandUI.Control._setImageProperties$p(controlSize, properties, inMenu, ($$t_Z = {'val': imageUrl}), ($$t_a = {'val': imageClass}), ($$t_b = {'val': imgSize}), ($$t_c = {'val': iconContainerClass})), imageUrl = $$t_Z.val, imageClass = $$t_a.val, imgSize = $$t_b.val, iconContainerClass = $$t_c.val;
    var hasImage = !CommandUI.ScriptUtility.isNullOrEmptyString(imageUrl);
    if (hasPeopleWellIcon) {
        elmIconContainer = CommandUI.Utility.createElement('div');
        CommandUI.Utility.ensureCSSClassOnElement(elmIconContainer, 'cui-ctl-initials');
        iconContainerClass = 'cui-ctl-initials';
        elmIconContainer.innerText = 'KB';
    }
    else if (hasImage || createPlaceholderForEmptyImage) {
        elmImage = CommandUI.Utility.createElement('img');
        elmImage.alt = '';
        var elmImageCont = CommandUI.Utility._createClusteredImageContainerNew$i(imgSize, imageUrl, imageClass, elmImage, true, false);
        elmIconContainer = CommandUI.Utility.createElement('span');
        elmIconContainer.className = iconContainerClass;
        elmIconContainer.appendChild(elmImageCont);
    }
    var elmLabel = null;
    if (hasText || arrow) {
        var $$t_d, $$t_e;
        elmLabel = (($$t_e = CommandUI.Control._createLabel$p(properties, hasText, controlSize, inMenu, ($$t_d = {'val': labelText}), arrow, control)), labelText = $$t_d.val, $$t_e);
    }
    var elmTextContainer = null;
    if (((!controlSize || controlSize === CommandUI.ControlSize.extraLarge) && inMenu) || (useMenuDescription && !CommandUI.ScriptUtility.isNullOrEmptyString(properties.Description))) {
        CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'cui-btn-title');
        var $$t_f, $$t_g;
        elmTextContainer = (($$t_g = CommandUI.Control._createDescription$p(elmLabel, properties, control, root, ($$t_f = {'val': elmDescription}))), elmDescription = $$t_f.val, $$t_g);
    }
    var elmArrowCont = null;
    if (arrow) {
        elmArrowCont = CommandUI.Control._createArrow$p(inMenu, root, control);
    }
    if (!CommandUI.ScriptUtility.isNullOrUndefined(elmIconContainer)) {
        elm.appendChild(elmIconContainer);
    }
    if (!CommandUI.ScriptUtility.isNullOrUndefined(elmTextContainer)) {
        elm.appendChild(elmTextContainer);
    }
    else if (!CommandUI.ScriptUtility.isNullOrUndefined(elmLabel)) {
        elm.appendChild(elmLabel);
    }
    if (!CommandUI.ScriptUtility.isNullOrUndefined(elmArrowCont)) {
        if (inMenu) {
            elm.appendChild(elmArrowCont);
        }
        else if (controlSize === CommandUI.ControlSize.largeFloatie && !CommandUI.ScriptUtility.isNullOrUndefined(elmIconContainer) && arrow) {
            elmIconContainer.appendChild(elmArrowCont);
        }
        else if (!CommandUI.ScriptUtility.isNullOrUndefined(elmTextContainer)) {
            elmTextContainer.appendChild(elmArrowCont);
        }
        else {
            elmLabel.appendChild(elmArrowCont);
        }
    }
    elmControlLabel.val = elmLabel;
    elmControlImage.val = elmImage;
    elmControlDescription.val = elmDescription;
    elmControlIconContainer.val = elmIconContainer;
    return elm;
}
CommandUI.Control._createElementLabel$p = function CommandUI_Control$_createElementLabel$p$st(properties) {
    if (properties.hasOwnProperty('For')) {
        return CommandUI.Utility.createElement('label');
    }
    return CommandUI.Utility.createElement('span');
}
CommandUI.Control._createOuterElement$i = function CommandUI_Control$_createOuterElement$i$st(outerStyle, control, descriptionExists) {
    var elm;
    elm = (control.get_controlType() === CommandUI.Control.labelControlType) ? CommandUI.Utility._createBlockSpan$i() : CommandUI.Utility._createNoOpLink$i(true);
    CommandUI.Utility.ensureCSSClassOnElement(elm, outerStyle);
    elm.setAttribute('mscui:controltype', control.get_controlType());
    if (control.get_controlProperties().Command === '1959943459' || control.get_controlProperties().Command === '2155708348') {
        elm.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaLinkRole);
    }
    else if (control.get_controlType() !== CommandUI.Control.labelControlType) {
        elm.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, control.get__ariaRole$i$0());
    }
    if (descriptionExists) {
        elm.setAttribute(Common.AccessibilityUtils.ariaDescribedByAttribute, CommandUI.Control.elmDescriptionPreText + control.get_id() + ' ' + CommandUI.Control.elmDescriptionText + control.get_id());
    }
    return elm;
}
CommandUI.Control._createHiddenElement$i = function CommandUI_Control$_createHiddenElement$i$st(domElementId, innerText) {
    var domElement = CommandUI.Utility.createElement('span');
    CommandUI.Utility.ensureCSSClassOnElement(domElement, 'cui-btn-menu-' + domElementId);
    domElement.innerText = innerText;
    if (innerText) {
        domElement.setAttribute('id', domElementId);
        domElement.setAttribute('aria-hidden', 'True');
        domElement.setAttribute('hidden', 'True');
    }
    return domElement;
}
CommandUI.Control.hasTextSpace = function CommandUI_Control$hasTextSpace$st(displayMode) {
    switch (displayMode) {
        case 'LargeNoText':
            return false;
        case 'Large30':
            return false;
        case 'Small':
            return false;
        case 'Small14':
            return false;
        case 'Small20':
            return false;
        case 'Small24':
            return false;
        case 'Thin':
            return false;
    }
    return true;
}
CommandUI.Control.prototype = {
    _properties$0: null,
    _displayModes$0: null,
    _enabledHasBeenSet$0: false,
    _isForceSetEnabledState$0: false,
    _visible$0: true,
    
    getMenuItemId: function CommandUI_Control$getMenuItemId$in() {
        return this.get_controlProperties().MenuItemId;
    },
    
    getCommandValueId: function CommandUI_Control$getCommandValueId$in() {
        return (CommandUI.ScriptUtility.isNullOrEmptyString(this.get_controlProperties().CommandValueId)) ? this.getMenuItemId() : this.get_controlProperties().CommandValueId;
    },
    
    getTextValue: function CommandUI_Control$getTextValue$in() {
        return '';
    },
    
    _$$pf_Id$p$0: null,
    
    get_id: function CommandUI_Control$get_id$in() {
        return this._$$pf_Id$p$0;
    },
    
    set_id: function CommandUI_Control$set_id$in(value) {
        this._$$pf_Id$p$0 = value;
        return value;
    },
    
    _$$pf_LabelText$p$0: null,
    
    get_labelText: function CommandUI_Control$get_labelText$in() {
        return this._$$pf_LabelText$p$0;
    },
    
    set_labelText: function CommandUI_Control$set_labelText$in(value) {
        this._$$pf_LabelText$p$0 = value;
        return value;
    },
    
    _$$pf_Tooltip$p$0: null,
    
    get_tooltip: function CommandUI_Control$get_tooltip$in() {
        return this._$$pf_Tooltip$p$0;
    },
    
    set_tooltip: function CommandUI_Control$set_tooltip$in(value) {
        this._$$pf_Tooltip$p$0 = value;
        return value;
    },
    
    _$$pf_ParentKeytipsIds$p$0: null,
    
    get_parentKeytipsIds: function CommandUI_Control$get_parentKeytipsIds$in() {
        return this._$$pf_ParentKeytipsIds$p$0;
    },
    
    set_parentKeytipsIds: function CommandUI_Control$set_parentKeytipsIds$in(value) {
        this._$$pf_ParentKeytipsIds$p$0 = value;
        return value;
    },
    
    _$$pf_ParentKeytipsKeys$p$0: null,
    
    get_parentKeytipsKeys: function CommandUI_Control$get_parentKeytipsKeys$in() {
        return this._$$pf_ParentKeytipsKeys$p$0;
    },
    
    set_parentKeytipsKeys: function CommandUI_Control$set_parentKeytipsKeys$in(value) {
        this._$$pf_ParentKeytipsKeys$p$0 = value;
        return value;
    },
    
    get__needsAKeytip$i$0: function CommandUI_Control$get__needsAKeytip$i$0$in() {
        return false;
    },
    
    _$$pf_ControlComponentDomCache$p$0: null,
    
    get_controlComponentDomCache: function CommandUI_Control$get_controlComponentDomCache$in() {
        return this._$$pf_ControlComponentDomCache$p$0;
    },
    
    set_controlComponentDomCache: function CommandUI_Control$set_controlComponentDomCache$in(value) {
        this._$$pf_ControlComponentDomCache$p$0 = value;
        return value;
    },
    
    _$$pf_Behavior$p$0: null,
    
    get_behavior: function CommandUI_Control$get_behavior$in() {
        return this._$$pf_Behavior$p$0;
    },
    
    set_behavior: function CommandUI_Control$set_behavior$in(value) {
        this._$$pf_Behavior$p$0 = value;
        return value;
    },
    
    _$$pf_InMenu$p$0: false,
    
    get_inMenu: function CommandUI_Control$get_inMenu$in() {
        return this._$$pf_InMenu$p$0;
    },
    
    set_inMenu: function CommandUI_Control$set_inMenu$in(value) {
        this._$$pf_InMenu$p$0 = value;
        return value;
    },
    
    get__isVisualRefreshEnabled$i$0: function CommandUI_Control$get__isVisualRefreshEnabled$i$0$in() {
        return !!Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonVisualRefreshEnabled();
    },
    
    _connectControlBehaviorIfAvailable$i$0: function CommandUI_Control$_connectControlBehaviorIfAvailable$i$0$in() {
        if (this.get_behavior()) {
            Common.Debug.assertNotReachedStringTag('Unexpected to call this if Control behavior was already attached', 4839172);
            return;
        }
        var behaviorFactory = CommandUI.ControlBehaviorFactoryProvider.get_controlBehaviorFactory();
        if (behaviorFactory) {
            this.set_behavior(behaviorFactory.getBehaviorForControl(this));
        }
    },
    
    get_controlProperties: function CommandUI_Control$get_controlProperties$in() {
        return this._properties$0;
    },
    
    _stateProperties$0: null,
    
    get_stateProperties: function CommandUI_Control$get_stateProperties$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._stateProperties$0)) {
            this._stateProperties$0 = {};
        }
        return this._stateProperties$0;
    },
    
    _commandProperties$0: null,
    
    get_commandProperties: function CommandUI_Control$get_commandProperties$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._commandProperties$0)) {
            this._commandProperties$0 = {};
        }
        return this._commandProperties$0;
    },
    
    get__isDefinitive$i$0: function CommandUI_Control$get__isDefinitive$i$0$in() {
        return CommandUI.Utility.isTrue(this.get_controlProperties().IsDefinitive);
    },
    
    get_shouldIgnoreTitle: function CommandUI_Control$get_shouldIgnoreTitle$in() {
        return CommandUI.Utility.isFalse(this.get_controlProperties().ShouldSetTitle);
    },
    
    get_templateAlias: function CommandUI_Control$get_templateAlias$in() {
        return this.get_controlProperties().TemplateAlias;
    },
    
    get__ariaRole$i$0: function CommandUI_Control$get__ariaRole$i$0$in() {
        return (this.get_inMenu()) ? Common.AccessibilityUtils.ariaMenuItemRole : Common.AccessibilityUtils.ariaButtonRole;
    },
    
    ensureValidDisplayMode: function CommandUI_Control$ensureValidDisplayMode$in(displayMode) {
        if (this._displayModes$0.indexOf(',' + displayMode + ',') !== -1) {
            return;
        }
        throw Error.create('The display mode with name: ' + displayMode + ' is not valid for this control with id: ' + this.get_id());
    },
    
    refreshDOMElements: function CommandUI_Control$refreshDOMElements$in() {
        this.onStateChanged();
        if (!this.get_enabled()) {
            this._onEnabledChanged$i$0(false);
        }
    },
    
    onStateChanged: function CommandUI_Control$onStateChanged$in() {
    },
    
    _createDOMElementForDisplayMode$p$0: function CommandUI_Control$_createDOMElementForDisplayMode$p$0$in(displayMode, controlComponent) {
        this.ensureValidDisplayMode(displayMode);
        var controlComponentDom = this.createComponentDomForDisplayMode(displayMode);
        this.get_controlComponentDomCache().addDomObject(controlComponentDom);
        if (this.get_behavior()) {
            this.get_behavior().attachEvents(controlComponentDom);
        }
        if (controlComponent && controlComponent.get__hasKeytip$i$0()) {
            this.ensureKeytipForControl(controlComponent, controlComponentDom.elmControl);
        }
        Common.Debug.assertStringTag(!!controlComponentDom.elmControl, 'The ElmControl field must be set', 5605061);
        return controlComponentDom.elmControl;
    },
    
    ensureKeytipForControl: function CommandUI_Control$ensureKeytipForControl$in(controlComponent, keytipParentElement) {
        controlComponent._ensureKeytip$i$0(keytipParentElement, keytipParentElement, this.get_parentKeytipsIds(), this.get_parentKeytipsKeys());
    },
    
    getDOMElementForDisplayMode: function CommandUI_Control$getDOMElementForDisplayMode$in(displayMode, controlComponent) {
        this.ensureValidDisplayMode(displayMode);
        var componentDom = this.get_controlComponentDomCache().get_item(displayMode);
        Common.Debug.assertImpliesStringTag(!!componentDom, !!componentDom && !!componentDom.elmControl, 'Every ComponentDom should have ElmControl set', 5605062);
        if (componentDom && componentDom.elmControl) {
            return componentDom.elmControl;
        }
        var elm = this._createDOMElementForDisplayMode$p$0(displayMode, controlComponent);
        if (CommandUI.ScriptUtility.isNullOrEmptyString(elm.id)) {
            elm.id = this.get_id() + '-' + displayMode;
        }
        this.refreshDOMElements();
        return elm;
    },
    
    createComponentForDisplayMode: function CommandUI_Control$createComponentForDisplayMode$in(displayMode) {
        var comp = this.createComponentForDisplayModeInternal(displayMode);
        Array.add(this._components$0, comp);
        return comp;
    },
    
    get_components: function CommandUI_Control$get_components$in() {
        return this._components$0;
    },
    
    createComponentForDisplayModeInternal: function CommandUI_Control$createComponentForDisplayModeInternal$in(displayMode) {
        var comp;
        if (CommandUI.ControlComponent._isDisplayModeMenu$i(displayMode)) {
            comp = this.get_root().createMenuItem(this._getComponentId$p$0(displayMode), displayMode, this);
        }
        else {
            comp = this.get_root()._createControlComponent$i$1(this._getComponentId$p$0(displayMode), displayMode, this);
        }
        return comp;
    },
    
    _getComponentId$p$0: function CommandUI_Control$_getComponentId$p$0$in(displayMode) {
        return this.get_id() + '-' + displayMode + this.get_root().getUniqueNumber();
    },
    
    dispose: function CommandUI_Control$dispose$in() {
        if (this.get_disposed()) {
            return;
        }
        this.releaseEventHandlers();
        this.set_root(null);
        this._components$0 = null;
        this._displayModes$0 = null;
        this.get_controlComponentDomCache().clear();
        this.set_disposed(true);
    },
    
    releaseEventHandlers: function CommandUI_Control$releaseEventHandlers$in() {
        var $$t_2 = this;
        this.get_controlComponentDomCache().forEach(function(controlComponentDom) {
            CommandUI.Utility.releaseEventHandlersRecursively(controlComponentDom.elmControl);
        });
    },
    
    _$$pf_Root$p$0: null,
    
    get_root: function CommandUI_Control$get_root$in() {
        return this._$$pf_Root$p$0;
    },
    
    set_root: function CommandUI_Control$set_root$in(value) {
        this._$$pf_Root$p$0 = value;
        return value;
    },
    
    addDisplayMode: function CommandUI_Control$addDisplayMode$in(displayMode) {
        if (this._displayModes$0.indexOf(',' + displayMode + ',') !== -1) {
            return;
        }
        this._displayModes$0 += displayMode + ',';
    },
    
    ensureCorrectChildType: function CommandUI_Control$ensureCorrectChildType$in(child) {
        throw Error.create('Child Components may not be added to this type of ControlComponent.');
    },
    
    get_displayedComponent: function CommandUI_Control$get_displayedComponent$in() {
        if (!this._components$0) {
            return null;
        }
        var l = this._components$0.length;
        for (var i = 0; i < l; i++) {
            var comp = this._components$0[i];
            if (comp.get_visibleInDOM()) {
                return comp;
            }
        }
        return null;
    },
    
    get_displayMode: function CommandUI_Control$get_displayMode$in() {
        var displayedComponent = this.get_displayedComponent();
        return (!displayedComponent) ? null : displayedComponent.get_displayMode();
    },
    
    _activeComponentWhenVisible$0: null,
    
    get_activeComponentWhenVisible: function CommandUI_Control$get_activeComponentWhenVisible$in() {
        return this._activeComponentWhenVisible$0 || ((this._components$0 && this._components$0.length > 0) ? this._components$0[0] : null);
    },
    
    set_activeComponentWhenVisible: function CommandUI_Control$set_activeComponentWhenVisible$in(value) {
        this._activeComponentWhenVisible$0 = value;
        return value;
    },
    
    constructClonedControlForMenu: function CommandUI_Control$constructClonedControlForMenu$in(root, properties) {
        return this.constructClonedControl(root, properties);
    },
    
    clone: function CommandUI_Control$clone$in(root, overriddenProperties) {
        var properties = CommandUI.Control._generateCloneProperties$p(this._properties$0, overriddenProperties);
        return this.constructClonedControl(root, properties);
    },
    
    cloneForMenu: function CommandUI_Control$cloneForMenu$in(root, overriddenProperties) {
        var properties = CommandUI.Control._generateCloneProperties$p(this._properties$0, overriddenProperties);
        return this.constructClonedControlForMenu(root, properties);
    },
    
    _onEnabledChanged$i$0: function CommandUI_Control$_onEnabledChanged$i$0$in(enabled) {
        var $$t_3 = this;
        this.get_controlComponentDomCache().forEach(function(controlComponentDom) {
            CommandUI.Utility.setEnabledOnElement(controlComponentDom.elmControl, enabled, $$t_3.get_controlType() === CommandUI.Control.labelControlType, $$t_3.get__isEditable$i$0());
        });
    },
    
    _onVisibleChanged$i$0: function CommandUI_Control$_onVisibleChanged$i$0$in(visible) {
        Common.Debug.assertTag(this.get_root().get_supportsInvisibleControls(), 2131106);
        if (this.get_root().get_rootType() === Common.UILocation.taskPane && this.get_displayedComponent()) {
            this.get_displayedComponent().get_elementInternal().style.display = (visible) ? 'inline-block' : 'none';
        }
        else {
            var length = this._components$0.length;
            for (var i = 0; i < length; ++i) {
                var component = this._components$0[i];
                component.set_visible(visible);
                component._onDirtyingChange$i$0();
            }
        }
    },
    
    _parentMenu$0: null,
    _parentMenuComputed$0: false,
    
    get_parentMenu: function CommandUI_Control$get_parentMenu$in() {
        if (!this._parentMenuComputed$0) {
            var comp = this.get_displayedComponent();
            if (CommandUI.MenuItem.isInstanceOfType(comp)) {
                comp = comp.get_parent();
                if (CommandUI._gallery.isInstanceOfType(comp)) {
                    comp = comp.get_parent();
                }
                if (CommandUI.MenuSection.isInstanceOfType(comp)) {
                    comp = comp.get_parent();
                    if (CommandUI.Menu.isInstanceOfType(comp)) {
                        this._parentMenu$0 = comp;
                    }
                }
            }
            this._parentMenuComputed$0 = true;
        }
        return this._parentMenu$0;
    },
    
    _parentGrid$0: null,
    _parentGridComputed$0: false,
    
    get_parentGrid: function CommandUI_Control$get_parentGrid$in() {
        if (!this._parentGridComputed$0) {
            var comp = this.get_displayedComponent();
            if (CommandUI.MenuItem.isInstanceOfType(comp)) {
                var compControl = comp;
                var compIsGrid = false;
                if (CommandUI.Controls.ColorPicker.isInstanceOfType(compControl.get_control())) {
                    compIsGrid = true;
                }
                if (!compIsGrid && CommandUI.Controls._iInsertTable.isInstanceOfType(compControl.get_control())) {
                    compIsGrid = true;
                }
                if (!compIsGrid) {
                    comp = comp.get_parent();
                    if (CommandUI._gallery.isInstanceOfType(comp)) {
                        compIsGrid = true;
                    }
                }
                if (compIsGrid) {
                    this._parentGrid$0 = comp;
                }
                this._parentGridComputed$0 = true;
            }
        }
        return this._parentGrid$0;
    },
    
    onMenuClosed: function CommandUI_Control$onMenuClosed$in() {
        if (this.get_behavior()) {
            this.get_behavior().onMenuClosed();
        }
    },
    
    doDefaultAction: function CommandUI_Control$doDefaultAction$in(elmTarget, inputMethod, e) {
        if (this.get_behavior()) {
            this.get_behavior().doDefaultAction(elmTarget, inputMethod, e);
        }
    },
    
    doDefaultActionPublic: function CommandUI_Control$doDefaultActionPublic$in(elmTarget, inputMethod, e) {
        this.doDefaultAction(elmTarget, inputMethod, e);
    },
    
    onKeyDown: function CommandUI_Control$onKeyDown$in(args) {
        return !!this.get_behavior() && this.get_behavior().onKeyDown(args);
    },
    
    onKeyUp: function CommandUI_Control$onKeyUp$in(args) {
        return !!this.get_behavior() && this.get_behavior().onKeyUp(args);
    },
    
    onPointerDown: function CommandUI_Control$onPointerDown$in(args) {
        return !!this.get_behavior() && this.get_behavior().onPointerDown(args);
    },
    
    onModalBodyPointerDown: function CommandUI_Control$onModalBodyPointerDown$in(args) {
        return !!this.get_behavior() && this.get_behavior().onModalBodyPointerDown(args);
    },
    
    onModalBodyPointerUp: function CommandUI_Control$onModalBodyPointerUp$in(args) {
        return !!this.get_behavior() && this.get_behavior().onModalBodyPointerUp(args);
    },
    
    onModalBodyPointerMove: function CommandUI_Control$onModalBodyPointerMove$in(args) {
        return !!this.get_behavior() && this.get_behavior().onModalBodyPointerMove(args);
    },
    
    onModalBodyPointerOut: function CommandUI_Control$onModalBodyPointerOut$in(args) {
        return !!this.get_behavior() && this.get_behavior().onModalBodyPointerOut(args);
    },
    
    onModalBodyClick: function CommandUI_Control$onModalBodyClick$in(args) {
        return !!this.get_behavior() && this.get_behavior().onModalBodyClick(args);
    },
    
    onModalBodyMouseWheel: function CommandUI_Control$onModalBodyMouseWheel$in(args) {
        return !!this.get_behavior() && this.get_behavior().onModalBodyMouseWheel(args);
    },
    
    get_activatesOnPress: function CommandUI_Control$get_activatesOnPress$in() {
        return false;
    },
    
    deactivateElement: function CommandUI_Control$deactivateElement$in(pointerReleaseArgs) {
        return !!this.get_behavior() && this.get_behavior().deactivateElement(pointerReleaseArgs);
    },
    
    get_enabled: function CommandUI_Control$get_enabled$in() {
        return this.get_enabledInternal();
    },
    
    set_enabled: function CommandUI_Control$set_enabled$in(value) {
        if (this._isForceSetEnabledState$0) {
            return value;
        }
        if (this.get_enabledInternal() === value && this._enabledHasBeenSet$0) {
            return value;
        }
        this.set_enabledInternal(value);
        this._enabledHasBeenSet$0 = true;
        this._onEnabledChanged$i$0(value);
        return value;
    },
    
    forceSetEnabledState: function CommandUI_Control$forceSetEnabledState$in(isEnabled) {
        this._isForceSetEnabledState$0 = true;
        var wasEnabled = this.get_enabled();
        this.set_enabledInternal(isEnabled);
        if (wasEnabled !== isEnabled) {
            this._onEnabledChanged$i$0(isEnabled);
        }
    },
    
    get_visible: function CommandUI_Control$get_visible$in() {
        return this._visible$0;
    },
    
    set_visible: function CommandUI_Control$set_visible$in(value) {
        var visible = value;
        if (!visible && !this.get_root().get_supportsInvisibleControls()) {
            throw Error.create('This root does not support dynamically showing or hiding controls.');
        }
        if (visible !== this._visible$0) {
            this._visible$0 = visible;
            this.get_stateProperties()[CommandUI.SharedControlCommandProperties.visible] = visible;
            this._onVisibleChanged$i$0(visible);
        }
        return value;
    },
    
    _$$pf_Disposed$p$0: false,
    
    get_disposed: function CommandUI_Control$get_disposed$in() {
        return this._$$pf_Disposed$p$0;
    },
    
    set_disposed: function CommandUI_Control$set_disposed$in(value) {
        this._$$pf_Disposed$p$0 = value;
        return value;
    },
    
    _$$pf_EnabledInternal$p$0: false,
    
    get_enabledInternal: function CommandUI_Control$get_enabledInternal$in() {
        return this._$$pf_EnabledInternal$p$0;
    },
    
    set_enabledInternal: function CommandUI_Control$set_enabledInternal$in(value) {
        this._$$pf_EnabledInternal$p$0 = value;
        return value;
    },
    
    _setEnabledAndForceUpdate$i$0: function CommandUI_Control$_setEnabledAndForceUpdate$i$0$in(enabled) {
        this.set_enabledInternal(enabled);
        this._onEnabledChanged$i$0(enabled);
    },
    
    _pollForStateAndUpdate$i$0: function CommandUI_Control$_pollForStateAndUpdate$i$0$in() {
        if (!this.get_behavior()) {
            this.set_enabled(false);
        }
        else {
            this.set_enabled(true);
            this.get_behavior().pollForStateAndUpdate();
        }
    },
    
    pollForStateAndUpdateInternal: function CommandUI_Control$pollForStateAndUpdateInternal$in(command, queryCommand, properties) {
        if (this.get_behavior()) {
            return this.get_behavior().pollForStateAndUpdateInternal(command, queryCommand, properties);
        }
        return 0;
    },
    
    ensureBehaviorAttachedIfAvailable: function CommandUI_Control$ensureBehaviorAttachedIfAvailable$in() {
        if (this.get_behavior()) {
            return;
        }
        this._connectControlBehaviorIfAvailable$i$0();
        var behavior = this.get_behavior();
        if (!behavior) {
            return;
        }
        var $$t_1 = behavior;
        this.get_controlComponentDomCache().forEach(($$t_1.$$d_attachEvents || ($$t_1.$$d_attachEvents = Function.createDelegate($$t_1, $$t_1.attachEvents))));
        behavior.initialize();
    },
    
    _focusNext$i$0: function CommandUI_Control$_focusNext$i$0$in(direction) {
        if (this.get_behavior()) {
            return this.get_behavior().focusNext(direction);
        }
        return false;
    },
    
    getDisplayedComponentElement: function CommandUI_Control$getDisplayedComponentElement$in() {
        var comp = this.get_displayedComponent();
        if (CommandUI.ScriptUtility.isNullOrUndefined(comp)) {
            return null;
        }
        return comp.get_elementInternal();
    },
    
    get_focusableElement: function CommandUI_Control$get_focusableElement$in() {
        return null;
    },
    
    setFocusOnControl: function CommandUI_Control$setFocusOnControl$in() {
        if (this.get_behavior()) {
            return this.get_behavior().setFocusOnControl();
        }
        return false;
    },
    
    _commitPendingChange$i$0: function CommandUI_Control$_commitPendingChange$i$0$in() {
    },
    
    isStandardMenuItem: function CommandUI_Control$isStandardMenuItem$in() {
        return CommandUI.MenuItem.isInstanceOfType(this.get_displayedComponent()) && !(CommandUI.Jewel.isInstanceOfType(this.get_root()));
    },
    
    isMemberOfContextMenuDropDown: function CommandUI_Control$isMemberOfContextMenuDropDown$in() {
        if (this.get_parentMenu()) {
            return this.get_parentMenu().isFloatieContextMenuDropDown;
        }
        return false;
    },
    
    get__isEditable$i$0: function CommandUI_Control$get__isEditable$i$0$in() {
        return false;
    }
}


CommandUI.Control.FocusDirection = function() {}
CommandUI.Control.FocusDirection.prototype = {
    forward: 0, 
    backward: 1, 
    left: 2, 
    right: 4, 
    up: 5, 
    down: 6
}
CommandUI.Control.FocusDirection.registerEnum('CommandUI.Control.FocusDirection', false);


CommandUI.ControlComponent = function CommandUI_ControlComponent(root, id, displayMode, control) {
    CommandUI.ControlComponent.initializeBase(this, [ root, id, displayMode, '', control.get_controlProperties().Keytip, true, false ]);
    this.set_control(control);
    this.set_visible(this.get_control().get_visible());
}
CommandUI.ControlComponent._isDisplayModeMenu$i = function CommandUI_ControlComponent$_isDisplayModeMenu$i$st(displayMode) {
    return displayMode.startsWith('Menu') || displayMode === 'Initials';
}
CommandUI.ControlComponent.prototype = {
    
    get_displayMode: function CommandUI_ControlComponent$get_displayMode$in() {
        return this.get_title();
    },
    
    isMenuItem: function CommandUI_ControlComponent$isMenuItem$in() {
        return CommandUI.ControlComponent._isDisplayModeMenu$i(this.get_displayMode());
    },
    
    refreshInternal: function CommandUI_ControlComponent$refreshInternal$in() {
        this.set_dirty(false);
    },
    
    get_elementInternal: function CommandUI_ControlComponent$get_elementInternal$in() {
        return this.get_control().getDOMElementForDisplayMode(this.get_title(), this);
    },
    
    set_elementInternal: function CommandUI_ControlComponent$set_elementInternal$in(value) {
        throw Error.create('Cannot set the DOM Element of ControlComponents.  They get their DOM Elements from the Control.');
        return value;
    },
    
    get_componentElement: function CommandUI_ControlComponent$get_componentElement$in() {
        return CommandUI.Component.prototype.get_elementInternal.call(this);
    },
    
    _$$pf_Control$p$1: null,
    
    get_control: function CommandUI_ControlComponent$get_control$in() {
        return this._$$pf_Control$p$1;
    },
    
    set_control: function CommandUI_ControlComponent$set_control$in(value) {
        this._$$pf_Control$p$1 = value;
        return value;
    },
    
    get__enabled$i$0: function CommandUI_ControlComponent$get__enabled$i$0$in() {
        return this.get_control().get_enabled();
    },
    
    set__enabled$i$0: function CommandUI_ControlComponent$set__enabled$i$0$in(value) {
        this.get_control().set_enabled(value);
        return value;
    },
    
    get_visible: function CommandUI_ControlComponent$get_visible$in() {
        if (this.get_root().get_supportsInvisibleControls() && !this.get_control().get_visible()) {
            return false;
        }
        return CommandUI.Component.prototype.get_visible.call(this);
    },
    
    set_visible: function CommandUI_ControlComponent$set_visible$in(value) {
        CommandUI.Component.prototype.set_visible.call(this, value);
        return value;
    },
    
    get__keytipDomContainer$i$0: function CommandUI_ControlComponent$get__keytipDomContainer$i$0$in() {
        return this.get_control().get_displayedComponent().get_elementInternal();
    },
    
    onEnabledChanged: function CommandUI_ControlComponent$onEnabledChanged$in(enabled) {
        this.get_control()._onEnabledChanged$i$0(enabled);
    },
    
    ensureCorrectChildType: function CommandUI_ControlComponent$ensureCorrectChildType$in(child) {
        this.get_control().ensureCorrectChildType(child);
    },
    
    get_textValue: function CommandUI_ControlComponent$get_textValue$in() {
        return (this.get_control()).getTextValue();
    },
    
    pollForStateAndUpdateInternal: function CommandUI_ControlComponent$pollForStateAndUpdateInternal$in() {
        this.get_control()._pollForStateAndUpdate$i$0();
    },
    
    ensureBehaviorAttached: function CommandUI_ControlComponent$ensureBehaviorAttached$in() {
        this.get_control().ensureBehaviorAttachedIfAvailable();
    },
    
    onMenuClosed: function CommandUI_ControlComponent$onMenuClosed$in() {
        (this.get_control()).onMenuClosed();
    },
    
    _setFocusOnFirstControl$i$0: function CommandUI_ControlComponent$_setFocusOnFirstControl$i$0$in() {
        return this.get_control().setFocusOnControl();
    },
    
    dispose: function CommandUI_ControlComponent$dispose$in() {
        this.get_control().dispose();
        this.set_control(null);
        CommandUI.Component.prototype.dispose.call(this);
    }
}


CommandUI.DataQueryResult = function CommandUI_DataQueryResult() {
}
CommandUI.DataQueryResult.prototype = {
    success: false,
    id: null,
    queryData: null,
    contextData: null
}


CommandUI.DataQuery = function CommandUI_DataQuery() {
}
CommandUI.DataQuery.prototype = {
    id: null,
    queryType: 0,
    handler: null,
    data: null
}


CommandUI.DialogMenuLauncherProperties = function CommandUI_DialogMenuLauncherProperties() {
    CommandUI.DialogMenuLauncherProperties.initializeBase(this);
}
CommandUI.DialogMenuLauncherProperties.prototype = {
    PopulationXML: null,
    MenuId: null,
    DialogMoveCommand: null,
    DialogCloseCommand: null
}


CommandUI.DialogMenuLauncher = function CommandUI_DialogMenuLauncher(root, id, properties, menuType) {
    CommandUI.DialogMenuLauncher.initializeBase(this, [ root, id, properties, menuType ]);
    this.set_launcherHeight(0);
    this.set_launcherWidth(0);
    this.addDisplayMode('Menu');
    this.set_enabled(true);
}
CommandUI.DialogMenuLauncher.prototype = {
    _launcherElement$2: null,
    _$$pf_X$p$2: 0,
    
    get_x: function CommandUI_DialogMenuLauncher$get_x$in() {
        return this._$$pf_X$p$2;
    },
    
    set_x: function CommandUI_DialogMenuLauncher$set_x$in(value) {
        this._$$pf_X$p$2 = value;
        return value;
    },
    
    _$$pf_Y$p$2: 0,
    
    get_y: function CommandUI_DialogMenuLauncher$get_y$in() {
        return this._$$pf_Y$p$2;
    },
    
    set_y: function CommandUI_DialogMenuLauncher$set_y$in(value) {
        this._$$pf_Y$p$2 = value;
        return value;
    },
    
    _$$pf_LauncherHeight$p$2: 0,
    
    get_launcherHeight: function CommandUI_DialogMenuLauncher$get_launcherHeight$in() {
        return this._$$pf_LauncherHeight$p$2;
    },
    
    set_launcherHeight: function CommandUI_DialogMenuLauncher$set_launcherHeight$in(value) {
        this._$$pf_LauncherHeight$p$2 = value;
        return value;
    },
    
    _$$pf_LauncherWidth$p$2: 0,
    
    get_launcherWidth: function CommandUI_DialogMenuLauncher$get_launcherWidth$in() {
        return this._$$pf_LauncherWidth$p$2;
    },
    
    set_launcherWidth: function CommandUI_DialogMenuLauncher$set_launcherWidth$in(value) {
        this._$$pf_LauncherWidth$p$2 = value;
        return value;
    },
    
    _$$pf_RootUser$p$2: null,
    
    get_rootUser: function CommandUI_DialogMenuLauncher$get_rootUser$in() {
        return this._$$pf_RootUser$p$2;
    },
    
    set_rootUser: function CommandUI_DialogMenuLauncher$set_rootUser$in(value) {
        this._$$pf_RootUser$p$2 = value;
        return value;
    },
    
    get_controlType: function CommandUI_DialogMenuLauncher$get_controlType$in() {
        return 'DialogMenuLauncher';
    },
    
    setInitialAriaMenuLauncherAttributes: function CommandUI_DialogMenuLauncher$setInitialAriaMenuLauncherAttributes$in(focusableElement) {
    },
    
    updateAriaMenuLauncherAttributes: function CommandUI_DialogMenuLauncher$updateAriaMenuLauncherAttributes$in(focusableElement, on) {
    },
    
    getCommandPopulateProperties: function CommandUI_DialogMenuLauncher$getCommandPopulateProperties$in() {
        var properties = ({});
        properties.MenuId = this.get_id();
        properties.DialogMoveCommand = this.get__properties$p$2().DialogMoveCommand;
        properties.DialogCloseCommand = this.get__properties$p$2().DialogCloseCommand;
        return properties;
    },
    
    _launchDialogMenuAtLauncher$i$2: function CommandUI_DialogMenuLauncher$_launchDialogMenuAtLauncher$i$2$in(launcherBounds, inputMethod) {
        this.set_x(launcherBounds.x);
        this.set_y(launcherBounds.y);
        this.set_launcherHeight(launcherBounds.height);
        this.set_launcherWidth(launcherBounds.width);
        this.launchMenu(inputMethod);
    },
    
    createComponentDomForDisplayMode: function CommandUI_DialogMenuLauncher$createComponentDomForDisplayMode$in(displayMode) {
        this._launcherElement$2 = CommandUI.Utility.createElement('span');
        return new CommandUI.ControlComponentDom(displayMode, this._launcherElement$2, null);
    },
    
    get__properties$p$2: function CommandUI_DialogMenuLauncher$get__properties$p$2$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    constructClonedMenuLauncher: function CommandUI_DialogMenuLauncher$constructClonedMenuLauncher$in(root, properties, clonedMenu) {
        return new CommandUI.DialogMenuLauncher(root, this.get_id(), properties, clonedMenu);
    }
}


CommandUI.DialogMenuRootProperties = function CommandUI_DialogMenuRootProperties() {
    CommandUI.DialogMenuRootProperties.initializeBase(this);
}
CommandUI.DialogMenuRootProperties.prototype = {
    CommandMenuOpen: null,
    CommandMenuClose: null
}


CommandUI.DialogMenuRoot = function CommandUI_DialogMenuRoot(id, properties) {
    CommandUI.DialogMenuRoot.initializeBase(this, [ id, properties ]);
}
CommandUI.DialogMenuRoot.prototype = {
    _$$pf_ActiveMenu$p$3: null,
    
    get_activeMenu: function CommandUI_DialogMenuRoot$get_activeMenu$in() {
        return this._$$pf_ActiveMenu$p$3;
    },
    
    set_activeMenu: function CommandUI_DialogMenuRoot$set_activeMenu$in(value) {
        this._$$pf_ActiveMenu$p$3 = value;
        return value;
    },
    
    get_dialogMenuRootProperties: function CommandUI_DialogMenuRoot$get_dialogMenuRootProperties$in() {
        return this.get_properties();
    },
    
    get_rootType: function CommandUI_DialogMenuRoot$get_rootType$in() {
        return Common.UILocation.dialogMenu;
    },
    
    refreshInternal: function CommandUI_DialogMenuRoot$refreshInternal$in() {
        CommandUI.Root.prototype.refreshInternal.call(this);
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_elementInternal())) {
            this.ensureDOMElement();
        }
        this.set_elementInternal(CommandUI.Utility.removeChildNodes(this.get_elementInternal()));
        this.appendChildrenToElement(this.get_elementInternal());
        this.set_dirty(false);
    },
    
    ensureCorrectChildType: function CommandUI_DialogMenuRoot$ensureCorrectChildType$in(child) {
        if (!CommandUI._standaloneDock.isInstanceOfType(child)) {
            throw Error.create('Only children of type StandaloneDock can be added to a DialogMenuRoot');
        }
    },
    
    createDialogMenu: function CommandUI_DialogMenuRoot$createDialogMenu$in(props, id, title, description) {
        Common.Debug.assertStringTag(CommandUI.ScriptUtility.isNullOrUndefined(this.get_createdControls()[id]), 'Specified dialog menu \"' + id + '\" has already been created', 20824578);
        var menu = new CommandUI.Menu(this, id, title, description, null, null, false, CommandUI.MenuHorizontalAlignment.left);
        if (!props) {
            props = {};
        }
        props.CommandMenuOpen = this.get_dialogMenuRootProperties().CommandMenuOpen;
        props.CommandMenuClose = this.get_dialogMenuRootProperties().CommandMenuClose;
        var launcher = new CommandUI.DialogMenuLauncher(this, id, props, menu);
        this.get_createdControls()[id] = launcher;
        var dock = new CommandUI._standaloneDock(this, 'dock' + id);
        dock.addChild(launcher.createComponentForDisplayMode('Menu'));
        this.addChild(dock);
        this.refresh();
    },
    
    showDialogMenuAt: function CommandUI_DialogMenuRoot$showDialogMenuAt$in(id, x, y, inputMethod) {
        var launcher = this.get_createdControls()[id];
        if (CommandUI.ScriptUtility.isNullOrUndefined(launcher)) {
            throw Error.create('The dialog menu \"' + id + '\" does not exist');
        }
        launcher._launchDialogMenuAtLauncher$i$2(new Sys.UI.Bounds(x, y, 0, 0), inputMethod);
        this.set_activeMenu(launcher.get_menu());
    },
    
    closeDialogMenu: function CommandUI_DialogMenuRoot$closeDialogMenu$in(id) {
        var launcher = this.get_createdControls()[id];
        if (!CommandUI.ScriptUtility.isNullOrUndefined(launcher)) {
            launcher._closeMenu$i$1(true);
            this.set_activeMenu(null);
        }
    },
    
    _onMenuStackCleared$i$1: function CommandUI_DialogMenuRoot$_onMenuStackCleared$i$1$in() {
        this.set_activeMenu(null);
    },
    
    dispose: function CommandUI_DialogMenuRoot$dispose$in() {
        var $$dict_2 = this.get_createdControls();
        for (var $$key_3 in $$dict_2) {
            var createdControl = { key: $$key_3, value: $$dict_2[$$key_3] };
            var launcher = createdControl.value;
            launcher.dispose();
        }
        CommandUI.StandaloneRoot.prototype.dispose.call(this);
    }
}


CommandUI.FloatieProperties = function CommandUI_FloatieProperties() {
    CommandUI.FloatieProperties.initializeBase(this);
}


CommandUI.Floatie = function CommandUI_Floatie(id, properties) {
    this.$$d__onPointerDown$i$2 = Function.createDelegate(this, this._onPointerDown$i$2);
    this._initialMouseDistance$2 = -1;
    this._groupsArray$2 = [];
    CommandUI.Floatie.initializeBase(this, [ id, properties ]);
    this._isFloatieLightDismissEnabled$2 = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('FloatieLightDismissIsEnabled');
    if (!CommandUI.Floatie._registeredShowFloatieAction) {
        Common.AFrameworkApplication.get_theActionManager().addAction(Common.CommonCommands.showFloatie, Common.CommonContextIds.frame, Common.ActionManager.doNothingButReportHandler);
        CommandUI.Floatie._registeredShowFloatieAction = true;
    }
}
CommandUI.Floatie.prototype = {
    _floatieExtraDistance$2: 0,
    _floatieBounds$2: null,
    _inRubberBandState$2: false,
    _isFloatieLightDismissEnabled$2: false,
    _isOnModalWithCapture$2: false,
    _needTologInitialAppearance$2: true,
    _hiddenFloatieGroupsGetter$2: null,
    _onFloatieDismissedFunction$2: null,
    _$$pf_PreventDismissOnMouseMove$p$2: false,
    
    get_preventDismissOnMouseMove: function CommandUI_Floatie$get_preventDismissOnMouseMove$in() {
        return this._$$pf_PreventDismissOnMouseMove$p$2;
    },
    
    set_preventDismissOnMouseMove: function CommandUI_Floatie$set_preventDismissOnMouseMove$in(value) {
        this._$$pf_PreventDismissOnMouseMove$p$2 = value;
        return value;
    },
    
    _$$pf_PreventDismissOnClick$p$2: false,
    
    get_preventDismissOnClick: function CommandUI_Floatie$get_preventDismissOnClick$in() {
        return this._$$pf_PreventDismissOnClick$p$2;
    },
    
    set_preventDismissOnClick: function CommandUI_Floatie$set_preventDismissOnClick$in(value) {
        this._$$pf_PreventDismissOnClick$p$2 = value;
        return value;
    },
    
    _$$pf_PreventDismissOnScroll$p$2: false,
    
    get_preventDismissOnScroll: function CommandUI_Floatie$get_preventDismissOnScroll$in() {
        return this._$$pf_PreventDismissOnScroll$p$2;
    },
    
    set_preventDismissOnScroll: function CommandUI_Floatie$set_preventDismissOnScroll$in(value) {
        this._$$pf_PreventDismissOnScroll$p$2 = value;
        return value;
    },
    
    get_floatieProperties: function CommandUI_Floatie$get_floatieProperties$in() {
        return this.get_properties();
    },
    
    _$$pf_ContextMenuRoot$p$2: null,
    
    get_contextMenuRoot: function CommandUI_Floatie$get_contextMenuRoot$in() {
        return this._$$pf_ContextMenuRoot$p$2;
    },
    
    set_contextMenuRoot: function CommandUI_Floatie$set_contextMenuRoot$in(value) {
        this._$$pf_ContextMenuRoot$p$2 = value;
        return value;
    },
    
    get__floatieBuilder$i$2: function CommandUI_Floatie$get__floatieBuilder$i$2$in() {
        return this.get_builder();
    },
    
    set__floatieBuilder$i$2: function CommandUI_Floatie$set__floatieBuilder$i$2$in(value) {
        this.set_builder(value);
        return value;
    },
    
    _$$pf_TouchMode$p$2: false,
    
    get_touchMode: function CommandUI_Floatie$get_touchMode$in() {
        return this._$$pf_TouchMode$p$2;
    },
    
    set_touchMode: function CommandUI_Floatie$set_touchMode$in(value) {
        this._$$pf_TouchMode$p$2 = value;
        return value;
    },
    
    _$$pf_HasShynessBehavior$p$2: true,
    
    get_hasShynessBehavior: function CommandUI_Floatie$get_hasShynessBehavior$in() {
        return this._$$pf_HasShynessBehavior$p$2;
    },
    
    set_hasShynessBehavior: function CommandUI_Floatie$set_hasShynessBehavior$in(value) {
        this._$$pf_HasShynessBehavior$p$2 = value;
        return value;
    },
    
    get_inRubberBandState: function CommandUI_Floatie$get_inRubberBandState$in() {
        return this._inRubberBandState$2;
    },
    
    set_inRubberBandState: function CommandUI_Floatie$set_inRubberBandState$in(value) {
        this._inRubberBandState$2 = value;
        this._floatieExtraDistance$2 = 0;
        return value;
    },
    
    get_visibleInDOM: function CommandUI_Floatie$get_visibleInDOM$in() {
        return true;
    },
    
    get_cssClass: function CommandUI_Floatie$get_cssClass$in() {
        if (Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonVisualRefreshEnabled()) {
            return 'cui-floatie MLRVisualRefresh';
        }
        return 'cui-floatie';
    },
    
    _$$pf_IsVisible$p$2: false,
    
    get_isVisible: function CommandUI_Floatie$get_isVisible$in() {
        return this._$$pf_IsVisible$p$2;
    },
    
    set_isVisible: function CommandUI_Floatie$set_isVisible$in(value) {
        this._$$pf_IsVisible$p$2 = value;
        return value;
    },
    
    _setFocusOnFirstControl$i$0: function CommandUI_Floatie$_setFocusOnFirstControl$i$0$in() {
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var com = $$enum_1.get_current();
            if (com._setFocusOnFirstControl$i$0()) {
                return true;
            }
        }
        return false;
    },
    
    get_rootType: function CommandUI_Floatie$get_rootType$in() {
        return Common.UILocation.floatie;
    },
    
    setFocusOnFloatie: function CommandUI_Floatie$setFocusOnFloatie$in() {
        return this._setFocusOnFirstControl$i$0();
    },
    
    addChild: function CommandUI_Floatie$addChild$in(child) {
        var group = child;
        this._groupsArray$2[this._groupsArray$2.length] = group;
        CommandUI.Component.prototype.addChild.call(this, child);
    },
    
    refreshInternal: function CommandUI_Floatie$refreshInternal$in() {
        CommandUI.Root.prototype.refreshInternal.call(this);
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_elementInternal())) {
            this.ensureDOMElement();
        }
        this.set_elementInternal(CommandUI.Utility.removeChildNodes(this.get_elementInternal()));
        this.appendChildrenToElement(this.get_elementInternal());
        this.set_dirty(false);
    },
    
    onModalBodyPointerDown: function CommandUI_Floatie$onModalBodyPointerDown$in(args) {
        if (args.get_inputSource() !== Common.InputManager.InputMethod.touch && !this.get_preventDismissOnClick()) {
            this.dismissFloatie(args);
        }
        return false;
    },
    
    onModalBodyPointerUp: function CommandUI_Floatie$onModalBodyPointerUp$in(args) {
        return false;
    },
    
    onModalBodyPointerMove: function CommandUI_Floatie$onModalBodyPointerMove$in(args) {
        if (args.get_inputSource() !== Common.InputManager.InputMethod.touch && this.get_hasShynessBehavior() && !this.get_preventDismissOnMouseMove()) {
            this.updateOpacity(args);
        }
        return false;
    },
    
    onModalBodyPointerOut: function CommandUI_Floatie$onModalBodyPointerOut$in(args) {
        return false;
    },
    
    onModalBodyClick: function CommandUI_Floatie$onModalBodyClick$in(args) {
        if (args.get_inputSource() === Common.InputManager.InputMethod.touch) {
            this.dismissFloatie(args);
        }
        return false;
    },
    
    onModalBodyMouseWheel: function CommandUI_Floatie$onModalBodyMouseWheel$in(args) {
        if (isNullOrUndefined(this.get_contextMenuRoot()) && !this.get_preventDismissOnScroll()) {
            this.dismissFloatie(args);
        }
        return false;
    },
    
    _onPointerDown$i$2: function CommandUI_Floatie$_onPointerDown$i$2$in(args) {
        this.ensureContextMenuDismissed();
        return false;
    },
    
    _onMenuStackCleared$i$1: function CommandUI_Floatie$_onMenuStackCleared$i$1$in() {
        this.set_inRubberBandState(true);
    },
    
    updateOpacity: function CommandUI_Floatie$updateOpacity$in(args) {
        var blendOpaque = 255;
        var blendTransparent = 0;
        var distanceToFloatie = Common.MathUtils.distancePointToBounds(args.get_clientPoint(), this._floatieBounds$2);
        if (!distanceToFloatie) {
            this.set_inRubberBandState(false);
            this._floatieExtraDistance$2 = 0;
            Common.BrowserUtils.setOpacity(this.get_elementInternal(), 1);
        }
        else {
            if (this.get_inRubberBandState()) {
                if ((!this._floatieExtraDistance$2) || (distanceToFloatie < this._floatieExtraDistance$2)) {
                    this._floatieExtraDistance$2 = distanceToFloatie;
                }
                distanceToFloatie -= this._floatieExtraDistance$2;
            }
            distanceToFloatie -= this._initialMouseDistance$2;
            if (distanceToFloatie < 0) {
                distanceToFloatie = 0;
            }
            var fadeFactor = 4;
            var alphaLevel = blendOpaque - (distanceToFloatie * fadeFactor);
            var dismissDistance = (blendOpaque / fadeFactor);
            if ((alphaLevel <= blendTransparent) && (distanceToFloatie >= dismissDistance)) {
                this.dismissFloatie(null);
            }
            else {
                Common.BrowserUtils.setOpacity(this.get_elementInternal(), Math.max(alphaLevel / 255, blendTransparent));
            }
        }
    },
    
    _updateGroupVisibilities$p$2: function CommandUI_Floatie$_updateGroupVisibilities$p$2$in(inputMethod) {
        var hiddenGroups = null;
        if (!isNullOrUndefined(this._hiddenFloatieGroupsGetter$2)) {
            hiddenGroups = this._hiddenFloatieGroupsGetter$2(inputMethod);
        }
        var lastVisibleGroup = null;
        for (var $$arr_3 = this._groupsArray$2, $$len_4 = $$arr_3.length, $$idx_5 = 0; $$idx_5 < $$len_4; ++$$idx_5) {
            var group = $$arr_3[$$idx_5];
            var hideGroup = !this.get_touchMode() && group.get__isTouchGroup$i$1();
            if (!hideGroup && !isNullOrUndefined(hiddenGroups)) {
                for (var i = 0; i < hiddenGroups.length; i++) {
                    if (group.get_id() === hiddenGroups[i]) {
                        hideGroup = true;
                        break;
                    }
                }
            }
            group.get_elementInternal().style.display = (hideGroup) ? 'none' : '';
            group.set_displaySeparator(!hideGroup);
            if (!hideGroup) {
                lastVisibleGroup = group;
            }
        }
        if (lastVisibleGroup) {
            lastVisibleGroup.set_displaySeparator(false);
        }
    },
    
    getFloatieBoundsAtOrigin: function CommandUI_Floatie$getFloatieBoundsAtOrigin$in() {
        var originalTopLocation = this.get_elementInternal().style.top;
        var originalLeftLocaion = this.get_elementInternal().style.left;
        this.get_elementInternal().style.top = '0px';
        this.get_elementInternal().style.left = '0px';
        var result = this.getFloatieBounds();
        this.get_elementInternal().style.top = originalTopLocation;
        this.get_elementInternal().style.left = originalLeftLocaion;
        return result;
    },
    
    getFloatieBounds: function CommandUI_Floatie$getFloatieBounds$in() {
        var originalVisibility = this.get_elementInternal().style.visibility;
        var originalDisplayMode = this.get_elementInternal().style.display;
        this.get_elementInternal().style.visibility = 'hidden';
        this.get_elementInternal().style.display = '';
        var floatieBounds = Common.WindowUtils.getElementBounds(this.get_elementInternal());
        this.get_elementInternal().style.display = originalDisplayMode;
        this.get_elementInternal().style.visibility = originalVisibility;
        return floatieBounds;
    },
    
    _refreshFloatieVisualState$p$2: function CommandUI_Floatie$_refreshFloatieVisualState$p$2$in(inputMethod) {
        if (inputMethod === Common.InputManager.InputMethod.touch || this.get_touchModeForcedOn()) {
            Sys.UI.DomElement.addCssClass(this.get_elementInternal(), Common.CuiHeaderDomReference.touchModeCssClass);
            this.set_touchMode(true);
        }
        else {
            Sys.UI.DomElement.removeCssClass(this.get_elementInternal(), Common.CuiHeaderDomReference.touchModeCssClass);
            this.set_touchMode(false);
        }
        this._updateGroupVisibilities$p$2(inputMethod);
    },
    
    showFloatieAt: function CommandUI_Floatie$showFloatieAt$in(point, reference, inputMethod, skipAjudst) {
        if (this.get_isVisible()) {
            return;
        }
        if (!this.get_contextMenuRoot() && (this._needTologInitialAppearance$2 || !this.get_preventDismissOnScroll())) {
            this._needTologInitialAppearance$2 = false;
            Common.WindowUtils.measureTimeToNextFrame('ShowLegacyFloatie', '');
            Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.showFloatie, 2, null);
        }
        this._refreshFloatieVisualState$p$2(inputMethod);
        this.set_hasShynessBehavior(true);
        this._floatieExtraDistance$2 = 0;
        this.set_inRubberBandState(false);
        if (this._isFloatieLightDismissEnabled$2 && isNullOrUndefined(this.get_contextMenuRoot())) {
            this._isOnModalWithCapture$2 = true;
            this.beginModalWithCapture(this, false);
        }
        else {
            this._isOnModalWithCapture$2 = false;
            this.beginModal(this, false, false);
        }
        var result = (skipAjudst) ? point : this.positionFloatie(point, reference);
        this.get_elementInternal().style.top = result.y.toString() + 'px';
        this.get_elementInternal().style.left = result.x.toString() + 'px';
        this.pollForStateAndUpdateInternal();
        this._floatieBounds$2 = this.getFloatieBounds();
        this._initialMouseDistance$2 = Common.MathUtils.distancePointToBounds(point, this._floatieBounds$2);
        Common.BrowserUtils.setOpacity(this.get_elementInternal(), 1);
        this.get_elementInternal().style.zIndex = Common.AFrameworkApplication.get_activeFrame().get_activeModalUIZIndex();
        this.get_elementInternal().style.display = '';
        this.set_isVisible(true);
    },
    
    positionFloatie: function CommandUI_Floatie$positionFloatie$in(point, reference) {
        var touchFloatieSpacing = 30;
        var mouseFloatieSpacing = 17;
        var floatieSpacing = (this.get_touchMode()) ? touchFloatieSpacing : mouseFloatieSpacing;
        var floatieBounds = this.getFloatieBoundsAtOrigin();
        var viewportWidth = Common.DomUtils.getViewPortWidth();
        var viewportHeight = Common.DomUtils.getViewPortHeight();
        var result = new Sys.UI.Point(point.x, point.y);
        if (reference === Common.FloatieReferencePoint.bottomLeft) {
            result.y -= floatieBounds.height;
        }
        else if (reference === Common.FloatieReferencePoint.bottomRight) {
            result.y -= floatieBounds.height;
            result.x -= floatieBounds.width;
        }
        else if (reference === Common.FloatieReferencePoint.topRight) {
            result.x -= floatieBounds.width;
        }
        if (result.x + floatieBounds.width > viewportWidth) {
            result.x = Math.floor(viewportWidth - floatieBounds.width);
        }
        if (result.x < 0) {
            result.x = 0;
        }
        if (reference === Common.FloatieReferencePoint.bottomRight || reference === Common.FloatieReferencePoint.bottomLeft) {
            result.y -= floatieSpacing;
        }
        else {
            result.y += floatieSpacing;
        }
        if (result.y < 0) {
            result.y = 0;
        }
        if (result.y + floatieBounds.height > viewportHeight) {
            result.y = viewportHeight - floatieBounds.height;
        }
        return result;
    },
    
    positionFloatieWithContextMenu: function CommandUI_Floatie$positionFloatieWithContextMenu$in(cmr, inputMethod) {
        var contextMenuPositioningInfo = cmr.menuPositioningInfo;
        if (!contextMenuPositioningInfo) {
            Common.Debug.assertNotReachedStringTag('Expected MenuPositioningInfo set', 4778206);
            return;
        }
        this._refreshFloatieVisualState$p$2(inputMethod);
        var floatieBounds = this.getFloatieBoundsAtOrigin();
        this.set_contextMenuRoot(cmr);
        var canLaunchRight = (contextMenuPositioningInfo.viewPortWidth - contextMenuPositioningInfo.flyoutLeft > floatieBounds.width);
        var canLaunchLeft = (contextMenuPositioningInfo.flyoutLeft + contextMenuPositioningInfo.flyoutWidth > floatieBounds.width);
        var canLaunchUp = (contextMenuPositioningInfo.flyoutTop > floatieBounds.height + 17);
        var canLaunchDown = (contextMenuPositioningInfo.viewPortHeight - (contextMenuPositioningInfo.flyoutTop + contextMenuPositioningInfo.flyoutHeight) > floatieBounds.height + 17);
        var point = new Sys.UI.Point(contextMenuPositioningInfo.flyoutLeft, contextMenuPositioningInfo.flyoutTop);
        var reference;
        if (!canLaunchLeft && !canLaunchRight) {
            canLaunchLeft = true;
            point.x = contextMenuPositioningInfo.viewPortWidth;
        }
        if (contextMenuPositioningInfo.launchedLeft) {
            if (contextMenuPositioningInfo.launchedUp) {
                if (canLaunchDown) {
                    reference = (canLaunchLeft) ? Common.FloatieReferencePoint.topRight : 0;
                }
                else {
                    reference = (canLaunchLeft) ? Common.FloatieReferencePoint.bottomRight : Common.FloatieReferencePoint.bottomLeft;
                }
            }
            else {
                if (canLaunchUp) {
                    reference = (canLaunchLeft) ? Common.FloatieReferencePoint.bottomRight : Common.FloatieReferencePoint.bottomLeft;
                }
                else {
                    reference = (canLaunchLeft) ? Common.FloatieReferencePoint.topRight : 0;
                }
            }
        }
        else {
            if (contextMenuPositioningInfo.launchedUp) {
                if (canLaunchDown) {
                    reference = (canLaunchRight) ? 0 : Common.FloatieReferencePoint.topRight;
                }
                else {
                    reference = (canLaunchRight) ? Common.FloatieReferencePoint.bottomLeft : Common.FloatieReferencePoint.bottomRight;
                }
            }
            else {
                if (canLaunchUp) {
                    reference = (canLaunchRight) ? Common.FloatieReferencePoint.bottomLeft : Common.FloatieReferencePoint.bottomRight;
                }
                else {
                    reference = (canLaunchRight) ? 0 : Common.FloatieReferencePoint.topRight;
                }
            }
        }
        if (reference === Common.FloatieReferencePoint.bottomRight || reference === Common.FloatieReferencePoint.topRight) {
            point.x = contextMenuPositioningInfo.flyoutLeft + contextMenuPositioningInfo.flyoutWidth;
        }
        if (reference === Common.FloatieReferencePoint.topRight || !reference) {
            point.y = contextMenuPositioningInfo.flyoutTop + contextMenuPositioningInfo.flyoutHeight;
        }
        this.showFloatieAt(point, reference, inputMethod, false);
        this.set_hasShynessBehavior(false);
        var elemMenu = this.get_contextMenuRoot().get_activeMenu().get_elementInternal();
        if (!isNullOrUndefined(elemMenu)) {
            elemMenu.style.zIndex = Common.AFrameworkApplication.get_activeFrame().get_activeModalUIZIndex();
        }
    },
    
    dismissAllTransientUI: function CommandUI_Floatie$dismissAllTransientUI$in() {
        var anyTransientUIDismissed = CommandUI.Root.prototype.dismissAllTransientUI.call(this);
        if (this.dismissFloatie(null)) {
            anyTransientUIDismissed = true;
        }
        return anyTransientUIDismissed;
    },
    
    dismissFloatie: function CommandUI_Floatie$dismissFloatie$in(eventArgs) {
        if (!this.get_isVisible()) {
            return false;
        }
        if (!isNullOrUndefined(this.get_activeControl())) {
            this.get_activeControl().deactivateElement(null);
        }
        if (!isNullOrUndefined(this.get_contextMenuRoot())) {
            this.get_contextMenuRoot().closeAllMenus();
        }
        this.closeAllMenus();
        if (this._isFloatieLightDismissEnabled$2 && this._isOnModalWithCapture$2) {
            this.endModalWithCapture(this, false);
        }
        else {
            this.endModal(this, false, false);
        }
        this._isOnModalWithCapture$2 = false;
        this._initialMouseDistance$2 = -1;
        this.set_contextMenuRoot(null);
        this.get_elementInternal().style.display = 'none';
        this.set_isVisible(false);
        if (this._onFloatieDismissedFunction$2) {
            this._onFloatieDismissedFunction$2(eventArgs);
        }
        return true;
    },
    
    ensureContextMenuDismissed: function CommandUI_Floatie$ensureContextMenuDismissed$in() {
        if (!isNullOrUndefined(this.get_contextMenuRoot())) {
            this.get_contextMenuRoot().set_activeFloatie(null);
            this.get_contextMenuRoot().closeAllMenus();
            this.set_contextMenuRoot(null);
            this.get_modalDiv().style.zIndex = Common.AFrameworkApplication.get_activeFrame().get_activeModalDivZIndex();
            this.get_elementInternal().style.zIndex = Common.AFrameworkApplication.get_activeFrame().get_activeModalUIZIndex();
        }
    },
    
    registerHiddenFloatieGroupsGetter: function CommandUI_Floatie$registerHiddenFloatieGroupsGetter$in(hiddenFloatieGroupsGetter) {
        this._hiddenFloatieGroupsGetter$2 = hiddenFloatieGroupsGetter;
    },
    
    registerOnFloatieDismissed: function CommandUI_Floatie$registerOnFloatieDismissed$in(onFloatieDismissedFunction) {
        this._onFloatieDismissedFunction$2 = onFloatieDismissedFunction;
    },
    
    disposeRoot: function CommandUI_Floatie$disposeRoot$in() {
        this.get_root().dispose();
    }
}






CommandUI.FloatieBuildOptions = function CommandUI_FloatieBuildOptions() {
    CommandUI.FloatieBuildOptions.initializeBase(this);
}


CommandUI.FloatieBuilder = function CommandUI_FloatieBuilder(options, elmPlaceholder, rootBuildClientTask) {
    this.$$d__onReturnFloatieData$p$1 = Function.createDelegate(this, this._onReturnFloatieData$p$1);
    CommandUI.FloatieBuilder.initializeBase(this, [ options, elmPlaceholder, rootBuildClientTask, null ]);
    if (CommandUI.ScriptUtility.isNullOrUndefined(elmPlaceholder)) {
        throw Error.create('Floatie placeholder DOM element is null or undefined.');
    }
}
CommandUI.FloatieBuilder.prototype = {
    
    get_floatie: function CommandUI_FloatieBuilder$get_floatie$in() {
        return this.get_root();
    },
    
    set_floatie: function CommandUI_FloatieBuilder$set_floatie$in(value) {
        this.set_root(value);
        return value;
    },
    
    get__floatieBuildOptions$i$1: function CommandUI_FloatieBuilder$get__floatieBuildOptions$i$1$in() {
        return this.get_options();
    },
    
    buildFloatie: function CommandUI_FloatieBuilder$buildFloatie$in() {
        var context = new CommandUI.FloatieBuilder._floatieBuildContext();
        var query = new CommandUI.DataQuery();
        query.queryType = 1;
        query.handler = this.$$d__onReturnFloatieData$p$1;
        query.data = context;
        this.get_dataSource().runQuery(query);
    },
    
    _onReturnFloatieData$p$1: function CommandUI_FloatieBuilder$_onReturnFloatieData$p$1$in(res) {
        var context = res.contextData;
        this._buildFloatieFromData$p$1(res.queryData, context);
        this.get_floatie().set__floatieBuilder$i$2(this);
        this.get_floatie().refreshInternal();
        this.get_floatie().get_elementInternal().style.display = 'none';
        this.get_placeholder().appendChild(this.get_floatie().get_elementInternal());
        var $$t_E = this;
        this.get_buildClientTask().CWo(function(t) {
            $$t_E.get_buildClientTask().get_result().onComponentBuilt($$t_E.get_floatie(), $$t_E.get_floatie().get_id());
        }, $$sc.TaskContinuationOptions.onlyOnRanToCompletion | $$sc.TaskContinuationOptions.executeSynchronously);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, this.get_floatie().get_elementInternal(), this.get_floatie().$$d__onPointerDown$i$2);
    },
    
    _buildFloatieFromData$p$1: function CommandUI_FloatieBuilder$_buildFloatieFromData$p$1$in(data, context) {
        var floatieElement = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(data, CommandUI.DataNodeWrapper.FLOATIE);
        if (CommandUI.ScriptUtility.isNullOrUndefined(floatieElement)) {
            throw Error.create('No floatie element was present in the data');
        }
        var dnw = new CommandUI.DataNodeWrapper(floatieElement);
        this.set_floatie(new CommandUI.Floatie(dnw.get_attributes()[CommandUI.DataNodeWrapper.id], dnw.get_attributes()));
        var groupsNode = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(dnw.get_node(), CommandUI.DataNodeWrapper.GROUPS);
        Common.Debug.assertStringTag(!isNullOrUndefined(groupsNode), 'Expected a <Groups> XML tag', 2885346);
        this._buildAllGroups$p$1(groupsNode, context);
    },
    
    _buildAllGroups$p$1: function CommandUI_FloatieBuilder$_buildAllGroups$p$1$in(groupsNode, context) {
        var groupChildren = CommandUI.DataNodeWrapper.getNodeChildren(groupsNode);
        for (var i = 0; i < groupChildren.length; i++) {
            if (this.isNodeTrimmed(groupChildren[i])) {
                continue;
            }
            var group = this._buildGroup$p$1(groupChildren[i], context);
            this.get_floatie().addChild(group);
        }
    },
    
    _buildGroup$p$1: function CommandUI_FloatieBuilder$_buildGroup$p$1$in(data, context) {
        var dnw = new CommandUI.DataNodeWrapper(data);
        Common.Debug.assertStringTag(dnw.get_name() === CommandUI.DataNodeWrapper.GROUP || dnw.get_name() === CommandUI.DataNodeWrapper.TOUCHGROUP, 'Expected a <Group> XML tag', 2885347);
        var result = new CommandUI.Group(this.get_floatie(), dnw.get_attributes()[CommandUI.DataNodeWrapper.id], dnw.get_attributes()[CommandUI.DataNodeWrapper.TITLE], dnw.get_attributes()[CommandUI.DataNodeWrapper.DESCRIPTION], dnw.get_attributes()[CommandUI.DataNodeWrapper.COMMAND], false, dnw.get_name() === CommandUI.DataNodeWrapper.TOUCHGROUP, false, dnw.get_attributes(), false, null);
        var sections = CommandUI.DataNodeWrapper.getNodeChildren(dnw.get_node());
        for (var i = 0; i < sections.length; i++) {
            result.addChild(this._buildSection$p$1(sections[i], context));
        }
        return result;
    },
    
    _buildSection$p$1: function CommandUI_FloatieBuilder$_buildSection$p$1$in(data, context) {
        var dnw = new CommandUI.DataNodeWrapper(data);
        Common.Debug.assertStringTag(dnw.get_name() === CommandUI.DataNodeWrapper.SECTION, 'Expected a <Section> XML tag', 2885376);
        var id = dnw.get_attributes()[CommandUI.DataNodeWrapper.id];
        var rows = CommandUI.DataNodeWrapper.getNodeChildren(dnw.get_node());
        Common.Debug.assertStringTag(rows.length === 1 || rows.length === 2, 'Only one row and two row sections are supported', 2885377);
        var sectionType = 2;
        if (rows.length === 2) {
            sectionType = 3;
        }
        var result = new CommandUI.Section(this.get_floatie(), id, sectionType, CommandUI.SectionVerticalAlignment.middle, CommandUI.SectionHorizontalAlignment.left, false, false, null, '', CommandUI.SectionArrangement.horizontal, true);
        for (var i = 0; i < rows.length; i++) {
            var rowWrapper = new CommandUI.DataNodeWrapper(rows[i]);
            Common.Debug.assertStringTag(rowWrapper.get_name() === CommandUI.DataNodeWrapper.ROW, 'Expected a <Row> XML tag', 2885378);
            var controlsNode = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(rowWrapper.get_node(), CommandUI.DataNodeWrapper.CONTROLS);
            Common.Debug.assertStringTag(!isNullOrUndefined(controlsNode), 'Expected a <controls> XML tag', 2885379);
            var controls = CommandUI.DataNodeWrapper.getNodeChildren(controlsNode);
            this._buildRow$p$1(result.getRow(i + 1), controls, rowWrapper.get_attributes()[CommandUI.DataNodeWrapper.id], context);
        }
        return result;
    },
    
    _buildRow$p$1: function CommandUI_FloatieBuilder$_buildRow$p$1$in(row, controls, id, context) {
        for (var i = 0; i < controls.length; i++) {
            if (this.isNodeTrimmed(controls[i])) {
                continue;
            }
            var dnw = new CommandUI.DataNodeWrapper(controls[i]);
            Common.Debug.assertStringTag(!isNullOrUndefined(dnw), 'Expected a control in the XML', 2885380);
            var control = this.buildControl(controls[i], context);
            if (control) {
                row.addChild(control.createComponentForDisplayMode(dnw.get_attributes()[CommandUI.DataNodeWrapper.DISPLAYMODE]));
            }
        }
    }
}


CommandUI.FloatieBuilder._floatieBuildContext = function CommandUI_FloatieBuilder__floatieBuildContext() {
    CommandUI.FloatieBuilder._floatieBuildContext.initializeBase(this);
}


CommandUI.ReactFloatie = function CommandUI_ReactFloatie(contextualUILauncher, externalUICommandDefinitionMapping) {
    this._contextualUILauncher$0 = contextualUILauncher;
    this._externalUICommandDefinitionMapping = externalUICommandDefinitionMapping;
}
CommandUI.ReactFloatie.prototype = {
    _contextualUILauncher$0: null,
    _externalUICommandDefinitionMapping: null,
    _$$pf_PreventDismissOnMouseMove$p$0: false,
    
    get_preventDismissOnMouseMove: function CommandUI_ReactFloatie$get_preventDismissOnMouseMove$in() {
        return this._$$pf_PreventDismissOnMouseMove$p$0;
    },
    
    set_preventDismissOnMouseMove: function CommandUI_ReactFloatie$set_preventDismissOnMouseMove$in(value) {
        this._$$pf_PreventDismissOnMouseMove$p$0 = value;
        return value;
    },
    
    _$$pf_PreventDismissOnClick$p$0: false,
    
    get_preventDismissOnClick: function CommandUI_ReactFloatie$get_preventDismissOnClick$in() {
        return this._$$pf_PreventDismissOnClick$p$0;
    },
    
    set_preventDismissOnClick: function CommandUI_ReactFloatie$set_preventDismissOnClick$in(value) {
        this._$$pf_PreventDismissOnClick$p$0 = value;
        return value;
    },
    
    get_isVisible: function CommandUI_ReactFloatie$get_isVisible$in() {
        return this._contextualUILauncher$0.get_isFloatieVisible();
    },
    
    get_controls: function CommandUI_ReactFloatie$get_controls$in() {
        Common.Debug.assertNotReachedStringTag('Not implemented for the React Floatie.  Controls aren\'t not implemented in CUI', 39195869);
        return null;
    },
    
    _$$pf_HasShynessBehavior$p$0: true,
    
    get_hasShynessBehavior: function CommandUI_ReactFloatie$get_hasShynessBehavior$in() {
        return this._$$pf_HasShynessBehavior$p$0;
    },
    
    set_hasShynessBehavior: function CommandUI_ReactFloatie$set_hasShynessBehavior$in(value) {
        this._$$pf_HasShynessBehavior$p$0 = value;
        return value;
    },
    
    positionFloatieWithContextMenu: function CommandUI_ReactFloatie$positionFloatieWithContextMenu$in(cmr, inputMethod) {
        Common.Debug.assertNotReachedStringTag('Not implemented for the React Floatie.  Positioning will be done in office-online-ui', 39195870);
    },
    
    dismissFloatie: function CommandUI_ReactFloatie$dismissFloatie$in(eventArgs) {
        this._contextualUILauncher$0.dismissFloatie();
        return true;
    },
    
    ensureContextMenuDismissed: function CommandUI_ReactFloatie$ensureContextMenuDismissed$in() {
        Common.Debug.assertNotReachedStringTag('Not implemented for the React Floatie.', 39195871);
    },
    
    showFloatieAt: function CommandUI_ReactFloatie$showFloatieAt$in(point, reference, inputMethod, skipAdjust) {
        var $$t_4;
        this._contextualUILauncher$0.showFloatie(($$t_4 = new Common.IPoint(), $$t_4.x = point.x, $$t_4.y = point.y, $$t_4), this.getActiveFloatieGroups(inputMethod), inputMethod);
    },
    
    getFloatieBounds: function CommandUI_ReactFloatie$getFloatieBounds$in() {
        Common.Debug.assertNotReachedStringTag('Not implemented for the React Floatie.  This is handled in the office-online-ui repo.', 39195872);
        return new Sys.UI.Bounds(0, 0, 0, 0);
    },
    
    disposeRoot: function CommandUI_ReactFloatie$disposeRoot$in() {
    },
    
    dismissAllTransientUI: function CommandUI_ReactFloatie$dismissAllTransientUI$in() {
        return this.dismissFloatie(null);
    },
    
    getActiveFloatieGroups: function CommandUI_ReactFloatie$getActiveFloatieGroups$in(inputMethod) {
        Common.Debug.assertNotReachedStringTag('Base version shouldn\'t be called as apps know what floatie groups to show.', 39195873);
        return new Array(0);
    }
}


CommandUI.GalleryProperties = function CommandUI_GalleryProperties() {
    CommandUI.GalleryProperties.initializeBase(this);
}
CommandUI.GalleryProperties.prototype = {
    Width: null,
    ElementDimensions: null
}


CommandUI._gallery = function CommandUI__gallery(root, id, title, description, properties) {
    this._focusedIndex$1 = -1;
    CommandUI._gallery.initializeBase(this, [ root, id, title, description, null, true, true ]);
    this.set__properties$p$1(properties);
    this.set_width(parseInt(this.get__properties$p$1().Width));
    this.set_elementDimensions(CommandUI._gallery._convertStringToGalleryElementDimensions$i(this.get__properties$p$1().ElementDimensions));
}
CommandUI._gallery._convertStringToGalleryElementDimensions$i = function CommandUI__gallery$_convertStringToGalleryElementDimensions$i$st(s) {
    switch (s) {
        case 'Size16by16':
            return 1;
        case 'Size40by40':
            return 2;
        case 'Size48by48':
            return 3;
        case 'Size61by75':
            return 4;
        case 'Size64by48':
            return 5;
        case 'Size85by48':
            return 6;
        case 'Size110by75':
            return 7;
        case 'Size85by16':
            return 8;
        case 'Size32by32':
            return 9;
        case 'Size120by20':
            return 10;
        case 'Size20by20':
            return 11;
        case 'Size24by24':
            return 12;
        case 'Size84by21':
            return 13;
        case 'Size90by21':
            return 14;
        case 'Size200by200':
            return 15;
        case 'Size70by48':
            return 16;
        default:
            throw Error.argument('s', 'The parameter s is not a valid GalleryElementDimension');
    }
}
CommandUI._gallery.prototype = {
    _width$1: 0,
    
    get_domElementTagName: function CommandUI__gallery$get_domElementTagName$in() {
        return 'table';
    },
    
    get_cssClass: function CommandUI__gallery$get_cssClass$in() {
        return 'cui-gallery';
    },
    
    refreshInternal: function CommandUI__gallery$refreshInternal$in() {
        this.ensureDOMElementAndEmpty();
        this.get_elementInternal().setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaGridRole);
        var tbody = CommandUI.Utility.createElement('tbody');
        this.get_elementInternal().appendChild(tbody);
        this.appendChildrenToElement(tbody);
    },
    
    appendChildrenToElement: function CommandUI__gallery$appendChildrenToElement$in(elm) {
        var rows = Math.ceil(this.get_children().get_count() / this.get_width());
        var tr;
        var td;
        var child;
        var c = 0;
        for (var i = 0; i < rows; i++) {
            tr = CommandUI.Utility.createElement('tr');
            tr.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaRowRole);
            tr.setAttribute(Common.AccessibilityUtils.ariaLabelAttribute, String.format(CommonUIStrings.l_GalleryRowAccessibleLabelFormat, i + 1));
            for (var j = 0; j < this.get_width(); j++) {
                td = CommandUI.Utility.createElement('td');
                td.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaPresentationRole);
                td.className = 'cui-gallery-td cui-gallery-element-' + CommandUI.Utility._galleryElementDimensionsToSizeString$i[this.get_elementDimensions()];
                if (c < this.get_children().get_count()) {
                    child = this.get_children().get_item(c++);
                    child.ensureDOMElement();
                    td.appendChild(child.get_elementInternal());
                    child.ensureRefreshed();
                }
                tr.appendChild(td);
            }
            elm.appendChild(tr);
        }
    },
    
    updateFocusedIndex: function CommandUI__gallery$updateFocusedIndex$in(focusedItem) {
        var i = 0;
        var $$enum_3 = this.get_children().getEnumerator();
        while ($$enum_3.moveNext()) {
            var c = $$enum_3.get_current();
            if (c.updateFocusedIndex(focusedItem)) {
                this._focusedIndex$1 = i;
                return true;
            }
            i++;
        }
        return false;
    },
    
    resetFocusedIndex: function CommandUI__gallery$resetFocusedIndex$in() {
        if (!this.get_children().get_count()) {
            return;
        }
        this._focusedIndex$1 = -1;
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var c = $$enum_1.get_current();
            c.resetFocusedIndex();
        }
    },
    
    focusNext: function CommandUI__gallery$focusNext$in(direction) {
        var numItems = this.get_children().get_count();
        var newIndex = CommandUI.Control.focusNextIndexInGrid(this._focusedIndex$1, this.get_width(), numItems, direction);
        Common.Debug.assertTag((newIndex >= 0) && (newIndex < numItems), 2131136);
        if ((this._focusedIndex$1 >= 0) && (this._focusedIndex$1 < numItems)) {
            (this.get_children().get_item(this._focusedIndex$1)).resetFocusedIndex();
        }
        if (newIndex !== this._focusedIndex$1) {
            var control = (this.get_children().get_item(newIndex)).get_control();
            if (control.setFocusOnControl()) {
                this._focusedIndex$1 = newIndex;
                return true;
            }
        }
        this._focusedIndex$1 = -1;
        return false;
    },
    
    ensureCorrectChildType: function CommandUI__gallery$ensureCorrectChildType$in(child) {
        if (!CommandUI.ControlComponent.isInstanceOfType(child)) {
            throw Error.create('Galleries can only have children controls of type GalleryButton');
        }
        var cc = child;
        if (!CommandUI.Controls.GalleryButton.isInstanceOfType(cc.get_control())) {
            throw Error.create('Galleries can only have children of type GalleryButton');
        }
    },
    
    get__tableElementInternal$i$1: function CommandUI__gallery$get__tableElementInternal$i$1$in() {
        return this.get_elementInternal();
    },
    
    set__tableElementInternal$i$1: function CommandUI__gallery$set__tableElementInternal$i$1$in(value) {
        this.set_elementInternal(value);
        return value;
    },
    
    _$$pf_ElementDimensions$p$1: 0,
    
    get_elementDimensions: function CommandUI__gallery$get_elementDimensions$in() {
        return this._$$pf_ElementDimensions$p$1;
    },
    
    set_elementDimensions: function CommandUI__gallery$set_elementDimensions$in(value) {
        this._$$pf_ElementDimensions$p$1 = value;
        return value;
    },
    
    get_width: function CommandUI__gallery$get_width$in() {
        return this._width$1;
    },
    
    set_width: function CommandUI__gallery$set_width$in(value) {
        this._width$1 = value;
        return value;
    },
    
    _$$pf_Properties$p$1: null,
    
    get__properties$p$1: function CommandUI__gallery$get__properties$p$1$in() {
        return this._$$pf_Properties$p$1;
    },
    
    set__properties$p$1: function CommandUI__gallery$set__properties$p$1$in(value) {
        this._$$pf_Properties$p$1 = value;
        return value;
    },
    
    _clone$i$1: function CommandUI__gallery$_clone$i$1$in(root) {
        var clone = root._createGallery$i$1(this.get_id(), this.get_title(), this.get__description$i$0(), this.get__properties$p$1());
        var $$enum_3 = this.get_children().getEnumerator();
        while ($$enum_3.moveNext()) {
            var child = $$enum_3.get_current();
            var clonedControl = (child).get_control().clone(root, null);
            clone.addChild(clonedControl.createComponentForDisplayMode(child.get_displayMode()));
        }
        return clone;
    }
}


CommandUI._heroDockProperties = function CommandUI__heroDockProperties() {
    CommandUI._heroDockProperties.initializeBase(this);
}
CommandUI._heroDockProperties.prototype = {
    OverflowMenuImage20by20: null,
    OverflowMenuImage20by20Class: null,
    OverflowMenuTooltip: null
}


CommandUI._heroDock = function CommandUI__heroDock(root, id, properties) {
    this.heroControlCount = CommandUI._heroDock.defaultHeroControlCount;
    CommandUI._heroDock.initializeBase(this, [ root, id, '', '', null, true, true ]);
    this.set__heroDockControls$i$1(new Array(0));
    this._heroDockProperties$1 = properties;
}
CommandUI._heroDock.prototype = {
    _overflowFlyoutAnchor$1: null,
    _$$pf_HeroDockControls$p$1: null,
    
    get__heroDockControls$i$1: function CommandUI__heroDock$get__heroDockControls$i$1$in() {
        return this._$$pf_HeroDockControls$p$1;
    },
    
    set__heroDockControls$i$1: function CommandUI__heroDock$set__heroDockControls$i$1$in(value) {
        this._$$pf_HeroDockControls$p$1 = value;
        return value;
    },
    
    _heroDockProperties$1: null,
    
    get_visibleInDOM: function CommandUI__heroDock$get_visibleInDOM$in() {
        return true;
    },
    
    get_cssClass: function CommandUI__heroDock$get_cssClass$in() {
        return 'cui-herodock';
    },
    
    refreshInternal: function CommandUI__heroDock$refreshInternal$in() {
        this.refreshHeroDockVisuals();
        CommandUI.Component.prototype.refreshInternal.call(this);
    },
    
    ensureBehaviorAttached: function CommandUI__heroDock$ensureBehaviorAttached$in() {
        for (var $$arr_0 = this.get__heroDockControls$i$1(), $$len_1 = $$arr_0.length, $$idx_2 = 0; $$idx_2 < $$len_1; ++$$idx_2) {
            var c = $$arr_0[$$idx_2];
            c.ensureBehaviorAttachedIfAvailable();
        }
        CommandUI.Component.prototype.ensureBehaviorAttached.call(this);
    },
    
    _splitHeroDockControls$i$1: function CommandUI__heroDock$_splitHeroDockControls$i$1$in(topLevelControls, overflowControls, invisibleControls) {
        topLevelControls.val = new Array(0);
        overflowControls.val = new Array(0);
        invisibleControls.val = new Array(0);
        for (var i = 0; i < this.get__heroDockControls$i$1().length; i++) {
            var control = this.get__heroDockControls$i$1()[i];
            if (!control.get_visible()) {
                invisibleControls.val.push(control);
                continue;
            }
            if (topLevelControls.val.length < this.heroControlCount) {
                topLevelControls.val.push(control);
            }
            else {
                if (CommandUI.Controls.FlyoutAnchor.isInstanceOfType(control)) {
                    Array.addRange(overflowControls.val, (control)._getControlsInFlyoutAnchorMenu$i$2());
                }
                else {
                    overflowControls.val.push(control);
                }
            }
        }
    },
    
    _createOverflowMenu$i$1: function CommandUI__heroDock$_createOverflowMenu$i$1$in(overflowControls) {
        if (!overflowControls || !overflowControls.length) {
            return null;
        }
        var properties = ({});
        properties.DisplayMode = 'Menu20';
        properties.ShowSeperator = 'false';
        properties.Scrollable = 'true';
        var overflowMenu = new CommandUI.Menu(this.get_root(), this.get_id() + 'OverflowMenu', null, null, null, null, false, CommandUI.MenuHorizontalAlignment.left);
        var overflowMenuSection = new CommandUI.MenuSection(this.get_root(), this.get_id() + 'OverflowMenuSection', null, null, properties, overflowMenu);
        for (var $$arr_4 = overflowControls, $$len_5 = $$arr_4.length, $$idx_6 = 0; $$idx_6 < $$len_5; ++$$idx_6) {
            var overflowControl = $$arr_4[$$idx_6];
            overflowMenuSection.addChild(overflowControl.createComponentForDisplayMode('Menu20'));
        }
        overflowMenu.addChild(overflowMenuSection);
        return overflowMenu;
    },
    
    refreshHeroDockVisuals: function CommandUI__heroDock$refreshHeroDockVisuals$in() {
        this._removeChildren$i$0();
        this.set_elementInternal(CommandUI.Utility.removeChildNodes(this.get_elementInternal()));
        this.ensureDOMElement();
        var topLevelControls;
        var overflowControls;
        var invisibleControls;
        var $$t_H, $$t_I, $$t_J;
        this._splitHeroDockControls$i$1(($$t_H = {'val': topLevelControls}), ($$t_I = {'val': overflowControls}), ($$t_J = {'val': invisibleControls})), topLevelControls = $$t_H.val, overflowControls = $$t_I.val, invisibleControls = $$t_J.val;
        for (var $$arr_3 = topLevelControls, $$len_4 = $$arr_3.length, $$idx_5 = 0; $$idx_5 < $$len_4; ++$$idx_5) {
            var topLevelControl = $$arr_3[$$idx_5];
            var component = topLevelControl.createComponentForDisplayMode('Medium20');
            component.set__enabled$i$0(true);
            this._addChildAtIndex$i$0(component, this.get_children().get_count());
            this.get_elementInternal().appendChild(component.get_elementInternal());
            component.ensureRefreshed();
        }
        var overflowMenu = this._createOverflowMenu$i$1(overflowControls);
        if (overflowMenu) {
            if (!this._overflowFlyoutAnchor$1) {
                Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrEmptyString(this._heroDockProperties$1.OverflowMenuTooltip), 7151708);
                var menuLauncherId = this.get_id() + 'OverflowMenuLauncher';
                var overflowFlyoutAnchorProperties = ({});
                overflowFlyoutAnchorProperties.Image20by20 = this._heroDockProperties$1.OverflowMenuImage20by20;
                overflowFlyoutAnchorProperties.Image20by20Class = this._heroDockProperties$1.OverflowMenuImage20by20Class;
                overflowFlyoutAnchorProperties.PopulateDynamically = 'false';
                overflowFlyoutAnchorProperties.HideDefaultArrow = 'true';
                overflowFlyoutAnchorProperties.Alt = this._heroDockProperties$1.OverflowMenuTooltip;
                overflowFlyoutAnchorProperties.Command = '798637440';
                overflowFlyoutAnchorProperties.Id = menuLauncherId;
                this._overflowFlyoutAnchor$1 = new CommandUI.Controls.FlyoutAnchor(this.get_root(), menuLauncherId, overflowFlyoutAnchorProperties, overflowMenu);
            }
            else {
                this._overflowFlyoutAnchor$1.set_menu(overflowMenu);
            }
            var overflowFlyoutAnchorComponent = this._overflowFlyoutAnchor$1.createComponentForDisplayMode('Small20');
            overflowFlyoutAnchorComponent.set__enabled$i$0(true);
            this._addChildAtIndex$i$0(overflowFlyoutAnchorComponent, this.get_children().get_count());
            this.get_elementInternal().appendChild(overflowFlyoutAnchorComponent.get_elementInternal());
            overflowFlyoutAnchorComponent.ensureRefreshed();
        }
        if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('FixHeroDockNotPollingInvisibleComponentsIsEnabled')) {
            for (var $$arr_C = invisibleControls, $$len_D = $$arr_C.length, $$idx_E = 0; $$idx_E < $$len_D; ++$$idx_E) {
                var invisibleControl = $$arr_C[$$idx_E];
                var component = invisibleControl.createComponentForDisplayMode('Medium20');
                this.addChild(component);
                component.ensureRefreshed();
            }
        }
    },
    
    dispose: function CommandUI__heroDock$dispose$in() {
        if (this._overflowFlyoutAnchor$1) {
            this._overflowFlyoutAnchor$1.dispose();
            this._overflowFlyoutAnchor$1 = null;
        }
        for (var $$arr_0 = this.get__heroDockControls$i$1(), $$len_1 = $$arr_0.length, $$idx_2 = 0; $$idx_2 < $$len_1; ++$$idx_2) {
            var c = $$arr_0[$$idx_2];
            c.dispose();
        }
        this._removeChildren$i$0();
        CommandUI.Component.prototype.dispose.call(this);
    }
}


CommandUI.Jewel = function CommandUI_Jewel(id, properties) {
    CommandUI.Jewel.initializeBase(this, [ id, properties ]);
}
CommandUI.Jewel.prototype = {
    _mainJewelMenuAlreadyCreated$2: false,
    _flyoutHeight$2: 0,
    _isNoIFrameApp$2: false,
    _appContainer$2: null,
    
    get_jewelProperties: function CommandUI_Jewel$get_jewelProperties$in() {
        return CommandUI.Root.prototype.get_properties.call(this);
    },
    
    refreshInternal: function CommandUI_Jewel$refreshInternal$in() {
        CommandUI.Root.prototype.refreshInternal.call(this);
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_elementInternal())) {
            this.ensureDOMElement();
        }
        this.set_elementInternal(CommandUI.Utility.removeChildNodes(this.get_elementInternal()));
        this.appendChildrenToElement(this.get_elementInternal());
        this.set_dirty(false);
    },
    
    ensureCorrectChildType: function CommandUI_Jewel$ensureCorrectChildType$in(child) {
        if (!CommandUI.ControlComponent.isInstanceOfType(child)) {
            throw Error.create('The child \"' + child.get_id() + '\" is not a ControlComponent');
        }
        if (!CommandUI.Controls.JewelMenuLauncher.isInstanceOfType((child).get_control())) {
            throw Error.create('Only children of type JewelMenuLauncher can be added to a Jewel');
        }
    },
    
    get_cssClass: function CommandUI_Jewel$get_cssClass$in() {
        return 'cui-jewel ' + CommandUI.Root.prototype.get_cssClass.call(this);
    },
    
    get_rootType: function CommandUI_Jewel$get_rootType$in() {
        return Common.UILocation.jewel;
    },
    
    get_visibleInDOM: function CommandUI_Jewel$get_visibleInDOM$in() {
        return true;
    },
    
    configurePropertiesForNoIFrameApp: function CommandUI_Jewel$configurePropertiesForNoIFrameApp$in(flyoutHeight, appContainer) {
        this._isNoIFrameApp$2 = true;
        this._flyoutHeight$2 = flyoutHeight;
        this._appContainer$2 = appContainer;
    },
    
    _createMenu$i$1: function CommandUI_Jewel$_createMenu$i$1$in(id, title, description, maxWidth, isComboboxlistbox, alignment) {
        if (!this._mainJewelMenuAlreadyCreated$2) {
            this._mainJewelMenuAlreadyCreated$2 = true;
            return new CommandUI.JewelMenu(this, id, title, description, maxWidth, this.get_rootManager());
        }
        return new CommandUI.JewelSubMenu(this, id, title, description, maxWidth, this.get_rootManager());
    },
    
    setFlyoutCoordinates: function CommandUI_Jewel$setFlyoutCoordinates$in(flyout, dimensions, flyoutDirection, launcherBounds) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(flyout) || CommandUI.ScriptUtility.isNullOrUndefined(dimensions)) {
            return null;
        }
        var flyoutLeft = 0;
        var flyoutRight = 0;
        var flyoutMargin = 0;
        var isLTR = !this.get_root().get_textDirection();
        var horizontal = (flyoutDirection === CommandUI.FlyoutDirectionType.horizontal);
        flyout.style.maxHeight = 'none';
        flyout.style.overflowY = 'auto';
        if (this._isNoIFrameApp$2) {
            var elemBound = Common.WindowUtils.getElementBounds(this._appContainer$2);
            flyout.style.bottom = '';
            flyout.style.overflowY = 'auto';
            flyout.style.top = (elemBound.y - 1) + 'px';
            flyoutMargin = ((!this.get_root().get_textDirection()) ? elemBound.x - 1 : window.document.body.offsetWidth - (elemBound.x + elemBound.width));
        }
        if (horizontal) {
            var topLevelMenuLauncher = this.get_menuLauncherStack()[0];
            var mainJewelWidth = topLevelMenuLauncher.get_menu().get_elementInternal().offsetWidth;
            if (isLTR) {
                flyoutLeft = mainJewelWidth + flyoutMargin;
            }
            else {
                flyoutRight = mainJewelWidth + flyoutMargin;
            }
        }
        else {
            if (isLTR) {
                flyoutLeft = 0 + flyoutMargin;
            }
            else {
                flyoutRight = 0 + flyoutMargin;
            }
        }
        if (this._isNoIFrameApp$2) {
            var flyoutHeight = window.document.body.offsetHeight - 2;
            if (flyoutHeight > this._flyoutHeight$2) {
                flyoutHeight = this._flyoutHeight$2;
            }
            flyout.style.height = flyoutHeight + 'px';
        }
        var flyoutPositionOffset = ((isLTR) ? flyoutLeft : flyoutRight) + 'px';
        if (isLTR) {
            flyout.style.left = flyoutPositionOffset;
            flyout.style.right = 'auto';
        }
        else {
            flyout.style.right = flyoutPositionOffset;
            flyout.style.left = 'auto';
        }
        if (this.get_menuStackDepth()) {
            flyout.style.maxWidth = '600px';
            flyout.style.width = 'calc(100% - ' + flyoutPositionOffset + ')';
        }
        return new CommandUI.MenuPositioningInfo();
    },
    
    _launchSubMenu$i$2: function CommandUI_Jewel$_launchSubMenu$i$2$in(inputMethod, submenuId) {
        var id = submenuId || this.get_jewelProperties().DefaultSelection;
        var submenuLauncher = null;
        if (id) {
            submenuLauncher = this.get_controls()[id];
        }
        if (!submenuLauncher) {
            id = null;
            var $$dict_7 = this.get_controls();
            for (var $$key_8 in $$dict_7) {
                var controlEntry = { key: $$key_8, value: $$dict_7[$$key_8] };
                if (CommandUI.MenuLauncher.isInstanceOfType(controlEntry.value) && !(CommandUI.Controls.JewelMenuLauncher.isInstanceOfType(controlEntry.value))) {
                    var menuLauncher = controlEntry.value;
                    var menuLauncherProps = menuLauncher.get_controlProperties();
                    if (menuLauncher.get_enabled() && (CommandUI.Utility.isTrue(menuLauncherProps.PopulateDynamically) || menuLauncher.get_menu().hasItems())) {
                        id = menuLauncher.get_id();
                        break;
                    }
                    Common.Debug.assertImpliesTag(menuLauncher.get_enabled(), menuLauncher.get_menu().hasItems(), 2131153);
                }
            }
            if (!id) {
                return;
            }
            submenuLauncher = this.get_controls()[id];
        }
        if (!submenuLauncher) {
            Diag.ULS.sendTraceTag(4329748, 202, 10, 'Tried to launch invalid submenu with non-null ID {0}', { ControlID: id });
            return;
        }
        submenuLauncher.launchMenu(inputMethod);
    },
    
    get__jewelBuilder$i$2: function CommandUI_Jewel$get__jewelBuilder$i$2$in() {
        return this.get_builder();
    },
    
    set__jewelBuilder$i$2: function CommandUI_Jewel$set__jewelBuilder$i$2$in(value) {
        this.set_builder(value);
        return value;
    },
    
    _$$pf_JewelMenuLauncher$p$2: null,
    
    get__jewelMenuLauncher$i$2: function CommandUI_Jewel$get__jewelMenuLauncher$i$2$in() {
        return this._$$pf_JewelMenuLauncher$p$2;
    },
    
    set__jewelMenuLauncher$i$2: function CommandUI_Jewel$set__jewelMenuLauncher$i$2$in(value) {
        this._$$pf_JewelMenuLauncher$p$2 = value;
        return value;
    },
    
    _focus$i$2: function CommandUI_Jewel$_focus$i$2$in() {
        this.get__jewelMenuLauncher$i$2().setFocusOnControl();
    }
}


CommandUI._jewelBuildContext = function CommandUI__jewelBuildContext() {
    CommandUI._jewelBuildContext.initializeBase(this);
}
CommandUI._jewelBuildContext.prototype = {
    jewel: null,
    jewelId: null,
    parentRoot: null
}


CommandUI.JewelBuildOptions = function CommandUI_JewelBuildOptions() {
    CommandUI.JewelBuildOptions.initializeBase(this);
}
CommandUI.JewelBuildOptions.prototype = {
    defaultSelectionOverride: null
}


CommandUI.JewelBuilder = function CommandUI_JewelBuilder(options, elmPlaceholder, rootBuildClientTask) {
    this.$$d__onReturnJewel$p$1 = Function.createDelegate(this, this._onReturnJewel$p$1);
    CommandUI.JewelBuilder.initializeBase(this, [ options, elmPlaceholder, rootBuildClientTask, null ]);
    if (CommandUI.ScriptUtility.isNullOrUndefined(elmPlaceholder)) {
        throw Error.create('Jewel placeholder DOM element is null or undefined.');
    }
}
CommandUI.JewelBuilder.prototype = {
    
    get_jewel: function CommandUI_JewelBuilder$get_jewel$in() {
        return this.get_root();
    },
    
    set_jewel: function CommandUI_JewelBuilder$set_jewel$in(value) {
        this.set_root(value);
        return value;
    },
    
    buildJewel: function CommandUI_JewelBuilder$buildJewel$in(jewelId, parentRoot) {
        if (this.get_inQuery()) {
            return false;
        }
        if (this._isIdTrimmed$i$0(jewelId)) {
            return true;
        }
        var jbc = new CommandUI._jewelBuildContext();
        jbc.jewelId = jewelId;
        jbc.parentRoot = parentRoot;
        this.set_inQuery(true);
        var query = new CommandUI.DataQuery();
        query.id = jbc.jewelId;
        query.queryType = 4;
        query.handler = this.$$d__onReturnJewel$p$1;
        query.data = jbc;
        this.get_dataSource().runQuery(query);
        return true;
    },
    
    _buildJewelFromData$i$1: function CommandUI_JewelBuilder$_buildJewelFromData$i$1$in(dataNode, jbc) {
        var dqr = new CommandUI.DataQueryResult();
        dqr.success = true;
        dqr.queryData = dataNode;
        dqr.contextData = jbc;
        this._onReturnJewel$p$1(dqr);
    },
    
    _onReturnJewel$p$1: function CommandUI_JewelBuilder$_onReturnJewel$p$1$in(dqr) {
        var jbc = dqr.contextData;
        var jewelNode = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(dqr.queryData, CommandUI.DataNodeWrapper.JEWEL);
        Common.Debug.assertStringTag(!CommandUI.ScriptUtility.isNullOrUndefined(jewelNode), 'Could not find <Jewel> node.', 1931100);
        this.set_jewel(this._buildJewelInternal$p$1(jewelNode, jbc));
        this.get_jewel().set__jewelBuilder$i$2(this);
        this.get_jewel().refreshInternal();
        this.get_placeholder().appendChild(this.get_jewel().get_elementInternal());
        CommandUI.Utility.ensureCSSClassOnElement(this.get_placeholder(), 'loaded');
        var $$t_F = this;
        this.get_buildClientTask().CWo(function(t) {
            $$t_F.get_buildClientTask().get_result().onComponentBuilt($$t_F.get_jewel(), $$t_F.get_jewel().get_id());
        }, $$sc.TaskContinuationOptions.onlyOnRanToCompletion | $$sc.TaskContinuationOptions.executeSynchronously);
    },
    
    _buildJewelInternal$p$1: function CommandUI_JewelBuilder$_buildJewelInternal$p$1$in(data, jbc) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(data)) {
            throw Error.create('No Jewel element was present in the data');
        }
        var dnw = new CommandUI.DataNodeWrapper(data);
        var jewelProperties = dnw.get_attributes();
        jewelProperties.DefaultSelection = this.get__jewelBuildOptions$p$1().defaultSelectionOverride || jewelProperties.DefaultSelection;
        this.set_jewel(new CommandUI.Jewel(dnw.get_attributes()['Id'], jewelProperties));
        var jml = this._buildJewelMenuLauncher$p$1(data, jbc);
        this.get_jewel().addChild(jml.createComponentForDisplayMode('Default'));
        this.get_jewel().set__jewelMenuLauncher$i$2(jml);
        return this.get_jewel();
    },
    
    _buildJewelMenuLauncher$p$1: function CommandUI_JewelBuilder$_buildJewelMenuLauncher$p$1$in(data, jbc) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var children = CommandUI.DataNodeWrapper.getNodeChildren(data);
        var menu = null;
        var launcherProperties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        if (!CommandUI.Utility.isTrue(launcherProperties.PopulateDynamically)) {
            menu = this.buildMenu(children[0], jbc, false);
        }
        var jml = new CommandUI.Controls.JewelMenuLauncher(this.get_jewel(), properties.Id, properties, menu, jbc.parentRoot);
        jml.set_parentKeytipsIds(CommandUI.Keytip.ribbonShortcutId);
        jml.set_parentKeytipsKeys('');
        return jml;
    },
    
    get__jewelBuildOptions$p$1: function CommandUI_JewelBuilder$get__jewelBuildOptions$p$1$in() {
        return CommandUI.Builder.prototype.get_options.call(this);
    }
}


CommandUI.JewelMenu = function CommandUI_JewelMenu(root, id, title, description, maxWidth, rootManager) {
    CommandUI.JewelMenu.initializeBase(this, [ root, id, title, description, maxWidth, rootManager, false, CommandUI.MenuHorizontalAlignment.left ]);
}
CommandUI.JewelMenu.prototype = {
    
    get_cssClass: function CommandUI_JewelMenu$get_cssClass$in() {
        var cssClass = CommandUI.Menu.prototype.get_cssClass.call(this) + ' ' + CommandUI.JewelMenu.jewelMenuClass;
        if (Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonVisualRefreshEnabled()) {
            cssClass += ' ' + CommandUI.JewelMenu.jewelMenuBackArrowRefreshClass;
        }
        return cssClass;
    },
    
    _onPointerOut$i$1: function CommandUI_JewelMenu$_onPointerOut$i$1$in(args) {
        return false;
    },
    
    onMenuClosed: function CommandUI_JewelMenu$onMenuClosed$in() {
        Common.CommonAnimator.hideJewelMenu(this.get_elementInternal(), Common.AFrameworkApplication.get_activeFrame().get_activeModalUIZIndex());
        CommandUI.Component.prototype.onMenuClosed.call(this);
    }
}


CommandUI.JewelSubMenu = function CommandUI_JewelSubMenu(root, id, title, description, maxWidth, rootManager) {
    CommandUI.JewelSubMenu.initializeBase(this, [ root, id, title, description, maxWidth, rootManager, false, CommandUI.MenuHorizontalAlignment.left ]);
}
CommandUI.JewelSubMenu.prototype = {
    
    get_cssClass: function CommandUI_JewelSubMenu$get_cssClass$in() {
        return CommandUI.Menu.prototype.get_cssClass.call(this) + ' ' + CommandUI.JewelSubMenu.jewelSubmenuClass;
    },
    
    _onPointerOut$i$1: function CommandUI_JewelSubMenu$_onPointerOut$i$1$in(args) {
        return false;
    },
    
    onMenuClosed: function CommandUI_JewelSubMenu$onMenuClosed$in() {
        Common.CommonAnimator.hideJewelMenu(this.get_elementInternal(), (Common.AFrameworkApplication.get_activeFrame().get_activeModalUIZIndex() + 1));
        CommandUI.Component.prototype.onMenuClosed.call(this);
    },
    
    setFocus: function CommandUI_JewelSubMenu$setFocus$in(inputMethod) {
        if (Common.Utils.Container.get_instance().tryResolve(Common.IFileMenuSQMInformation, '')) {
            var props = {};
            props[Common.FileMenuSQMProperties.pageId] = this.get_id();
            Common.AFrameworkApplication.get_theActionManager().processActionWithData(Common.CommonCommands.reportFileMenuPageSwitch, 2, props, null);
        }
        CommandUI.Menu.prototype.setFocus.call(this, Common.InputManager.InputMethod.keyboard);
    },
    
    onKeyPress: function CommandUI_JewelSubMenu$onKeyPress$in(args) {
        var e = args.innerEvent.rawEvent;
        if (e && e.keyCode === Common.KeyCode.vK_Enter && e.target && e.target.tagName.toLowerCase() === 'a' && (e.target).href && (e.target).href !== '#') {
            return false;
        }
        return CommandUI.Menu.prototype.onKeyPress.call(this, args);
    }
}


CommandUI.JsonDataSource = function CommandUI_JsonDataSource(rootDataVarName, cuiHelper) {
    this._tabData$0 = {};
    this._rootDataVarName$0 = rootDataVarName;
    this._cuiHelper$0 = cuiHelper;
    Common.Debug.assertTag(!isNullOrUndefined(cuiHelper), 5247202);
}
CommandUI.JsonDataSource.prototype = {
    _rootDataVarName$0: null,
    _cuiHelper$0: null,
    _ribbonData$0: null,
    
    _getData$p$0: function CommandUI_JsonDataSource$_getData$p$0$in(dataVarName) {
        var data = this.lookupData(dataVarName);
        Common.Debug.assertStringTag(!isNullOrUndefined(data), 'Couldn\'t find data with the variable name ' + dataVarName, 5247203);
        if (!isNullOrUndefined(this._cuiHelper$0)) {
            this._cuiHelper$0.updateData(data);
        }
        return data;
    },
    
    lookupData: function CommandUI_JsonDataSource$lookupData$in(dataVarName) {
        return window[dataVarName];
    },
    
    runQuery: function CommandUI_JsonDataSource$runQuery$in(query) {
        Common.Debug.assertTag(!isNullOrUndefined(query), 5247232);
        if (!isNullOrUndefined(query)) {
            var queryData = null;
            var success = false;
            switch (query.queryType) {
                case 1:
                case 4:
                case 2:
                    queryData = this._getRootData$p$0();
                    success = true;
                    break;
                case 3:
                    queryData = this._tabData$0[query.id];
                    success = (!!queryData);
                    if (!success) {
                        Diag.ULS.sendTraceTag(5247233, 207, 50, '{0}', { Msg: 'Tab not available', Id: query.id });
                    }
                    break;
                default:
                    Common.Debug.assertStringTag(false, 'JsonDataSource has not implemented support for the \"' + query.queryType + '\" query type.', 5247234);
                    break;
            }
            var dqr = new CommandUI.DataQueryResult();
            dqr.success = success;
            dqr.id = query.id;
            dqr.contextData = query.data;
            dqr.queryData = queryData;
            query.handler(dqr);
        }
    },
    
    _getRootData$p$0: function CommandUI_JsonDataSource$_getRootData$p$0$in() {
        return this._ribbonData$0 || (this._ribbonData$0 = this._getData$p$0(this._rootDataVarName$0));
    },
    
    addTabData: function CommandUI_JsonDataSource$addTabData$in(tabId, dataVarName) {
        this._tabData$0[tabId] = this._getData$p$0(dataVarName);
    }
}


CommandUI.Keytip = function CommandUI_Keytip(key, componentId) {
    this._key$0 = key;
    this._elementId$0 = componentId + CommandUI.Keytip.keytipId;
}
CommandUI.Keytip.prototype = {
    _key$0: null,
    _elementId$0: null,
    
    get_key: function CommandUI_Keytip$get_key$in() {
        return this._key$0;
    },
    
    _$$pf_Element$p$0: null,
    
    get_element: function CommandUI_Keytip$get_element$in() {
        return this._$$pf_Element$p$0;
    },
    
    set_element: function CommandUI_Keytip$set_element$in(value) {
        this._$$pf_Element$p$0 = value;
        return value;
    },
    
    get_elementId: function CommandUI_Keytip$get_elementId$in() {
        return this._elementId$0;
    },
    
    createKeytipElement: function CommandUI_Keytip$createKeytipElement$in() {
        Common.Debug.assertStringTag(CommandUI.ScriptUtility.isNullOrUndefined(this.get_element()), 'Keytip _element should be null. Do not create a second DOMElement for the same Keytip', 19957453);
        this.set_element(CommandUI.Utility.createElement('div'));
        this.get_element().className = 'cui-keytip';
        this.get_element().id = this._elementId$0;
        var keytipSpan = CommandUI.Utility.createElement('span');
        keytipSpan.className = 'cui-keytip-span';
        keytipSpan.innerText = this._key$0;
        this.get_element().appendChild(keytipSpan);
        Common.AccessibilityUtils.setAriaAttribute(this.get_element(), Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaPresentationRole);
        Common.AccessibilityUtils.setAriaAttribute(this.get_element(), Common.AccessibilityUtils.ariaHiddenAttribute, Common.AccessibilityUtils.ariaTrueValue);
        Common.AccessibilityUtils.setAriaAttribute(keytipSpan, Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaPresentationRole);
        this.hide();
        return this.get_element();
    },
    
    show: function CommandUI_Keytip$show$in(zIndex) {
        Sys.UI.DomElement.removeCssClass(this.get_element(), 'WACAltTextDescribedBy');
        this.get_element().style.zIndex = zIndex;
        this._setDisplay$p$0('block');
    },
    
    hide: function CommandUI_Keytip$hide$in() {
        Sys.UI.DomElement.addCssClass(this.get_element(), 'WACAltTextDescribedBy');
        this._setDisplay$p$0('none');
    },
    
    _setDisplay$p$0: function CommandUI_Keytip$_setDisplay$p$0$in(displayValue) {
        if (!this.get_element()) {
            return;
        }
        this.get_element().style.display = displayValue;
    }
}


CommandUI.KeytipManager = function CommandUI_KeytipManager(ribbon, keyInputManager, pointerInputManager) {
    this.$$d__onMenuClose$p$0 = Function.createDelegate(this, this._onMenuClose$p$0);
    this.$$d__onMenuLaunch$p$0 = Function.createDelegate(this, this._onMenuLaunch$p$0);
    this.$$d__keyPressHandler$p$0 = Function.createDelegate(this, this._keyPressHandler$p$0);
    this.$$d__pointerDownHandler$p$0 = Function.createDelegate(this, this._pointerDownHandler$p$0);
    this.$$d__keyDownHandler$p$0 = Function.createDelegate(this, this._keyDownHandler$p$0);
    this._ribbon$0 = ribbon;
    this._keyInputManager$0 = keyInputManager;
    this._pointerInputManager$0 = pointerInputManager;
    this._displayedKeytips$0 = new ($$sc.List$1.$$(CommandUI.Component))();
    this._layerStack$0 = new CommandUI.ComponentStack();
    this.set_inKeytipMode(false);
    this.set__inputStringCache$i$0('');
    this.set_onExitCallback(null);
}
CommandUI.KeytipManager.prototype = {
    _ribbon$0: null,
    _keyInputManager$0: null,
    _pointerInputManager$0: null,
    _displayedKeytips$0: null,
    _layerStack$0: null,
    _launcherWithFocus$0: null,
    _isMenuOpen$0: false,
    
    get__displayedKeytips$i$0: function CommandUI_KeytipManager$get__displayedKeytips$i$0$in() {
        return this._displayedKeytips$0;
    },
    
    get__layerStack$i$0: function CommandUI_KeytipManager$get__layerStack$i$0$in() {
        return this._layerStack$0;
    },
    
    _$$pf_InputStringCache$p$0: null,
    
    get__inputStringCache$i$0: function CommandUI_KeytipManager$get__inputStringCache$i$0$in() {
        return this._$$pf_InputStringCache$p$0;
    },
    
    set__inputStringCache$i$0: function CommandUI_KeytipManager$set__inputStringCache$i$0$in(value) {
        this._$$pf_InputStringCache$p$0 = value;
        return value;
    },
    
    _$$pf_InKeytipMode$p$0: false,
    
    get_inKeytipMode: function CommandUI_KeytipManager$get_inKeytipMode$in() {
        return this._$$pf_InKeytipMode$p$0;
    },
    
    set_inKeytipMode: function CommandUI_KeytipManager$set_inKeytipMode$in(value) {
        this._$$pf_InKeytipMode$p$0 = value;
        return value;
    },
    
    get__keytipZIndex$p$0: function CommandUI_KeytipManager$get__keytipZIndex$p$0$in() {
        if (this._ribbon$0) {
            return (this._ribbon$0.get_tabPoppedUp()) ? this._ribbon$0.get_activeModalUIZIndex() + 2 : this._ribbon$0.get_activeModalUIZIndex() - 2;
        }
        return 0;
    },
    
    _$$pf_OnExitCallback$p$0: null,
    
    get_onExitCallback: function CommandUI_KeytipManager$get_onExitCallback$in() {
        return this._$$pf_OnExitCallback$p$0;
    },
    
    set_onExitCallback: function CommandUI_KeytipManager$set_onExitCallback$in(value) {
        this._$$pf_OnExitCallback$p$0 = value;
        return value;
    },
    
    enterKeytipMode: function CommandUI_KeytipManager$enterKeytipMode$in() {
        if (this.get_inKeytipMode()) {
            return;
        }
        Diag.ULS.sendTraceTag(19961422, 340, 50, 'Entering keytip mode');
        this.set_inKeytipMode(true);
        this._isMenuOpen$0 = false;
        this._ribbon$0.prepareToEnterKeytipMode();
        this._showChildKeytipsForParent$p$0(this._ribbon$0);
        this._registerHandlers$p$0();
    },
    
    exitKeytipMode: function CommandUI_KeytipManager$exitKeytipMode$in(preserveRibbonFocus, dismissTabPopup) {
        if (!this.get_inKeytipMode()) {
            return;
        }
        Diag.ULS.sendTraceTag(19961423, 340, 50, 'Exiting keytip mode');
        this.set_inKeytipMode(false);
        this._hideKeytips$p$0();
        this.get__layerStack$i$0().clear();
        this._ribbon$0.prepareToExitKeytipMode(dismissTabPopup);
        this._unregisterHandlers$p$0();
        if (!preserveRibbonFocus && this.get_onExitCallback()) {
            this.get_onExitCallback()();
        }
    },
    
    _registerHandlers$p$0: function CommandUI_KeytipManager$_registerHandlers$p$0$in() {
        this._keyInputManager$0.registerHandlerWithCaptureOption(Common.EventNames.keyDown, this._ribbon$0.get_elementInternal(), this.$$d__keyDownHandler$p$0, true);
        this._pointerInputManager$0.registerHandlerWithCaptureOption(Common.EventNames.pointerDown, this._ribbon$0.get_elementInternal(), this.$$d__pointerDownHandler$p$0, true);
        this._keyInputManager$0.registerHandler(Common.EventNames.keyPress, this._ribbon$0.get_elementInternal(), this.$$d__keyPressHandler$p$0);
    },
    
    _unregisterHandlers$p$0: function CommandUI_KeytipManager$_unregisterHandlers$p$0$in() {
        this._keyInputManager$0.unregisterHandlerWithCaptureOption(Common.EventNames.keyDown, this._ribbon$0.get_elementInternal(), this.$$d__keyDownHandler$p$0, true);
        this._pointerInputManager$0.unregisterHandlerWithCaptureOption(Common.EventNames.pointerDown, this._ribbon$0.get_elementInternal(), this.$$d__pointerDownHandler$p$0, true);
        this._keyInputManager$0.unregisterHandler(Common.EventNames.keyPress, this._ribbon$0.get_elementInternal(), this.$$d__keyPressHandler$p$0);
    },
    
    _showChildKeytipsForParent$p$0: function CommandUI_KeytipManager$_showChildKeytipsForParent$p$0$in(parent) {
        if (!parent) {
            return;
        }
        this._hideKeytips$p$0();
        this.set__inputStringCache$i$0('');
        this.get__layerStack$i$0().push(parent);
        if (this._isMenuComponent$p$0(parent)) {
            this.showKeytipsForMenu(this._getMenuLauncherFromComponent$p$0(parent));
        }
        else {
            if (parent.get_children()) {
                var $$enum_2 = parent.get_children().getEnumerator();
                while ($$enum_2.moveNext()) {
                    var child = $$enum_2.get_current();
                    if (CommandUI.Group.isInstanceOfType(child)) {
                        var group = child;
                        this._showKeytipsForGroup$p$0(group);
                    }
                    else if (child.get__hasKeytip$i$0()) {
                        this._showComponentKeytip$p$0(child);
                    }
                }
            }
            if (parent === this._ribbon$0) {
                this._ribbon$0.setFocusOnCurrentTabTitle();
                this._ribbon$0.dismissTabPopup(false, true);
                if (this._ribbon$0.get_jewelDisplayedComponent()) {
                    this._showComponentKeytip$p$0(this._ribbon$0.get_jewelDisplayedComponent());
                }
                this._showKeytipsForStandaloneRoot$p$0();
            }
        }
        if (!this._displayedKeytips$0.get_count() && !this._isABacktrackingComponent$p$0(parent)) {
            this.exitKeytipMode(true, true);
        }
    },
    
    _showKeytipsForStandaloneRoot$p$0: function CommandUI_KeytipManager$_showKeytipsForStandaloneRoot$p$0$in() {
        var standaloneRoot = this._ribbon$0.get_theStandaloneRoot();
        if (standaloneRoot && standaloneRoot.get_controls()) {
            var $$dict_3 = standaloneRoot.get_controls();
            for (var $$key_4 in $$dict_3) {
                var controlEntry = { key: $$key_4, value: $$dict_3[$$key_4] };
                var control = controlEntry.value;
                if (control.get_displayedComponent()) {
                    this._showComponentKeytip$p$0(control.get_displayedComponent());
                }
            }
        }
    },
    
    _showKeytipsForGroup$p$0: function CommandUI_KeytipManager$_showKeytipsForGroup$p$0$in(group) {
        if (!group || !group.get__selectedLayout$i$1()) {
            return;
        }
        var $$enum_2 = group.get__selectedLayout$i$1().get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var section = $$enum_2.get_current();
            var $$enum_4 = section.get_children().getEnumerator();
            while ($$enum_4.moveNext()) {
                var row = $$enum_4.get_current();
                var $$enum_6 = row.get_children().getEnumerator();
                while ($$enum_6.moveNext()) {
                    var component = $$enum_6.get_current();
                    if (CommandUI.ControlComponent.isInstanceOfType(component)) {
                        var groupComponent = component;
                        this._showComponentKeytip$p$0(groupComponent);
                    }
                }
            }
        }
        if (group.get_hasElementDialogLauncherComponent()) {
            this._showComponentKeytip$p$0(group.get_elementDialogLauncherComponent());
        }
    },
    
    showKeytipsForMenu: function CommandUI_KeytipManager$showKeytipsForMenu$in(menuLauncher) {
        if (!menuLauncher || !menuLauncher.get_menuLaunched()) {
            return;
        }
        var $$enum_2 = menuLauncher.get_menu().get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var menuSection = $$enum_2.get_current();
            var $$enum_4 = menuSection.get_children().getEnumerator();
            while ($$enum_4.moveNext()) {
                var component = $$enum_4.get_current();
                this._showComponentKeytip$p$0(component);
            }
        }
        this._isMenuOpen$0 = true;
    },
    
    _showKeytipsFromList$i$0: function CommandUI_KeytipManager$_showKeytipsFromList$i$0$in(components) {
        var $$enum_2 = components.$$lge();
        while ($$enum_2.$$mn()) {
            var component = $$enum_2.$$cu();
            this._showComponentKeytip$p$0(component);
        }
    },
    
    _showComponentKeytip$p$0: function CommandUI_KeytipManager$_showComponentKeytip$p$0$in(component) {
        if (component._showKeytip$i$0(this.get__keytipZIndex$p$0())) {
            var $$enum_2 = this._displayedKeytips$0.$$lge();
            while ($$enum_2.$$mn()) {
                var displayedComp = $$enum_2.$$cu();
                var existingKeytip = displayedComp.get_keytip().get_key();
                var newKeytip = component.get_keytip().get_key();
                if (existingKeytip.startsWith(newKeytip) || newKeytip.startsWith(existingKeytip)) {
                    var message = String.format('Conflicting Keytips: {0}, {1}. One of them cannot be executed', existingKeytip, newKeytip);
                    Common.Debug.assertNotReachedStringTag(message, 19985944);
                }
            }
            this._displayedKeytips$0.add(component);
        }
    },
    
    _hideKeytips$p$0: function CommandUI_KeytipManager$_hideKeytips$p$0$in() {
        var $$enum_1 = this._displayedKeytips$0.$$lge();
        while ($$enum_1.$$mn()) {
            var component = $$enum_1.$$cu();
            if (!(CommandUI._tab.isInstanceOfType(component) || CommandUI.ControlComponent.isInstanceOfType(component))) {
                Common.Debug.assertNotReachedStringTag('Found component with keytip that is not a Tab or ControlComponent', 18990229);
            }
            component._hideKeytip$i$0();
        }
        this._displayedKeytips$0.clear();
    },
    
    _exitCurrentLayer$p$0: function CommandUI_KeytipManager$_exitCurrentLayer$p$0$in() {
        Common.Debug.assertStringTag(!this._layerStack$0.get_isEmpty(), 'Keytip layer stack should not be empty', 19166726);
        this._layerStack$0.pop();
        if (this._layerStack$0.get_isEmpty()) {
            this.exitKeytipMode(false, true);
            return;
        }
        this._hideKeytips$p$0();
        var previousLayer = this._layerStack$0.pop();
        if (this._isMenuComponent$p$0(previousLayer)) {
            this._launcherWithFocus$0 = this._getMenuLauncherFromComponent$p$0(previousLayer);
        }
        else {
            this._isMenuOpen$0 = false;
        }
        this._showChildKeytipsForParent$p$0(previousLayer);
    },
    
    _isMenuComponent$p$0: function CommandUI_KeytipManager$_isMenuComponent$p$0$in(component) {
        return CommandUI.ControlComponent.isInstanceOfType(component) && !!(component).get_control() && CommandUI.MenuLauncher.isInstanceOfType((component).get_control());
    },
    
    _getMenuLauncherFromComponent$p$0: function CommandUI_KeytipManager$_getMenuLauncherFromComponent$p$0$in(component) {
        return (component).get_control();
    },
    
    _keyDownHandler$p$0: function CommandUI_KeytipManager$_keyDownHandler$p$0$in(args) {
        if (!this.get_inKeytipMode()) {
            return false;
        }
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent)) {
            var keyCode = args.innerEvent.keyCode;
            switch (keyCode) {
                case Common.KeyCode.vK_Esc:
                    this._exitCurrentLayer$p$0();
                    handled = true;
                    break;
                case Common.KeyCode.vK_Tab:
                    this.exitKeytipMode(true, false);
                    handled = false;
                    break;
                case Common.KeyCode.vK_Enter:
                case Common.KeyCode.vK_Space:
                    this.exitKeytipMode(true, false);
                    handled = true;
                    break;
            }
        }
        return handled;
    },
    
    _keyPressHandler$p$0: function CommandUI_KeytipManager$_keyPressHandler$p$0$in(args) {
        if (!this.get_inKeytipMode()) {
            return false;
        }
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent)) {
            var charCode = (Common.KeyInputManager.getFieldFromDomEvent(args.innerEvent, 'charCode') || Common.KeyInputManager.getKeyCodeFromDomEvent(args.innerEvent));
            var keyCodeString = String.fromCharCode(charCode).toUpperCase();
            var componentActivated = this._findComponentToActivate$i$0(keyCodeString);
            if (CommandUI._tab.isInstanceOfType(componentActivated)) {
                handled = this._switchTab$p$0(componentActivated);
            }
            else if (CommandUI.ControlComponent.isInstanceOfType(componentActivated)) {
                handled = this._executeControlDefaultAction$p$0(componentActivated, args, true);
            }
            else {
                handled = this._filterKeytips$i$0(keyCodeString);
            }
            handled = handled || this._isMenuOpen$0;
        }
        return handled;
    },
    
    _pointerDownHandler$p$0: function CommandUI_KeytipManager$_pointerDownHandler$p$0$in(args) {
        if (this.get_inKeytipMode()) {
            this.exitKeytipMode(true, false);
            return true;
        }
        return false;
    },
    
    _findComponentToActivate$i$0: function CommandUI_KeytipManager$_findComponentToActivate$i$0$in(keyCodeString) {
        var joinedKeyString = this.get__inputStringCache$i$0() + keyCodeString;
        var $$enum_3 = this._displayedKeytips$0.$$lge();
        while ($$enum_3.$$mn()) {
            var component = $$enum_3.$$cu();
            if (component.get_keytip() && component.get_keytip().get_key() === joinedKeyString) {
                return component;
            }
        }
        return null;
    },
    
    _filterKeytips$i$0: function CommandUI_KeytipManager$_filterKeytips$i$0$in(keyCodeString) {
        var filteredKeytips = new ($$sc.List$1.$$(CommandUI.Component))();
        var $$enum_3 = this._displayedKeytips$0.$$lge();
        while ($$enum_3.$$mn()) {
            var component = $$enum_3.$$cu();
            var keytipKey = component.get_keytip().get_key();
            if (component.get__enabled$i$0() && keyCodeString === keytipKey.substr(this.get__inputStringCache$i$0().length, 1)) {
                filteredKeytips.add(component);
            }
        }
        if (filteredKeytips.get_count() > 0) {
            this._hideKeytips$p$0();
            this._showKeytipsFromList$i$0(filteredKeytips);
            this.set__inputStringCache$i$0(this.get__inputStringCache$i$0() + (keyCodeString));
            return true;
        }
        return false;
    },
    
    _switchTab$p$0: function CommandUI_KeytipManager$_switchTab$p$0$in(tab) {
        tab._setFocusOnTitle$i$2();
        this._logKeytipExecution$p$0(tab.get_id(), 'tab');
        tab._doTitleDefaultAction$i$2(Common.InputManager.InputMethod.keyboard);
        this._ribbon$0.setFocusOnCurrentTabTitle();
        this._showChildKeytipsForParent$p$0(tab);
        return true;
    },
    
    _executeControlDefaultAction$p$0: function CommandUI_KeytipManager$_executeControlDefaultAction$p$0$in(controlComponent, args, logAction) {
        if (!controlComponent.get__enabled$i$0()) {
            return false;
        }
        controlComponent.get_control().setFocusOnControl();
        if (logAction) {
            this._logKeytipExecution$p$0(controlComponent.get_control().get_id(), controlComponent.get_control().get_controlType());
        }
        if (this._isAnEditableComponent$p$0(controlComponent)) {
            this.exitKeytipMode(true, false);
        }
        else {
            var behavior = controlComponent.get_control().get_behavior();
            behavior.doDefaultAction(args.get_sourceElement(), args.get_inputSource(), args.innerEvent);
            if (this._isMenuComponent$p$0(controlComponent)) {
                this._launcherWithFocus$0 = this._getMenuLauncherFromComponent$p$0(controlComponent);
                if (this._launcherWithFocus$0.get_menu() && this._launcherWithFocus$0.get_menu().get_elementInternal()) {
                    var $$enum_5 = this._launcherWithFocus$0.get_menu().get_menuLauncherChildren().getEnumerator();
                    while ($$enum_5.moveNext()) {
                        var launcher = $$enum_5.get_current();
                        launcher.set_onMenuLaunchCallback(this.$$d__onMenuLaunch$p$0);
                    }
                    this._launcherWithFocus$0.set_onMenuCloseCallback(this.$$d__onMenuClose$p$0);
                    this._keyInputManager$0.registerHandler(Common.EventNames.keyDown, this._launcherWithFocus$0.get_menu().get_elementInternal(), this.$$d__keyDownHandler$p$0);
                    this._keyInputManager$0.registerHandler(Common.EventNames.keyPress, this._launcherWithFocus$0.get_menu().get_elementInternal(), this.$$d__keyPressHandler$p$0);
                    this._showChildKeytipsForParent$p$0(controlComponent);
                }
                else {
                    var menuId = (this._launcherWithFocus$0.get_menu()) ? this._launcherWithFocus$0.get_menu().get_id() : '';
                    Diag.ULS.sendTraceTag(19797896, 340, 10, 'Unexpected null menu (id: ' + menuId + ') element; cannot invoke keytip');
                }
            }
            else {
                this.exitKeytipMode(Common.AFrameworkApplication.get_theTaskManager().get_isYielding(), true);
            }
        }
        return true;
    },
    
    _onMenuLaunch$p$0: function CommandUI_KeytipManager$_onMenuLaunch$p$0$in(launcherComponent, args) {
        this._executeControlDefaultAction$p$0(launcherComponent, args, false);
    },
    
    _onMenuClose$p$0: function CommandUI_KeytipManager$_onMenuClose$p$0$in(exitKeytips) {
        if (!this._launcherWithFocus$0 || !this._launcherWithFocus$0.get_menu() || !this._launcherWithFocus$0.get_menu().get_elementInternal()) {
            return;
        }
        this._keyInputManager$0.unregisterHandler(Common.EventNames.keyDown, this._launcherWithFocus$0.get_menu().get_elementInternal(), this.$$d__keyDownHandler$p$0);
        this._keyInputManager$0.unregisterHandler(Common.EventNames.keyPress, this._launcherWithFocus$0.get_menu().get_elementInternal(), this.$$d__keyPressHandler$p$0);
        if (exitKeytips) {
            this._isMenuOpen$0 = false;
            this._launcherWithFocus$0 = null;
            this.exitKeytipMode(true, true);
        }
        else {
            this._exitCurrentLayer$p$0();
        }
    },
    
    _isABacktrackingComponent$p$0: function CommandUI_KeytipManager$_isABacktrackingComponent$p$0$in(component) {
        return this._isMenuOpen$0 && !this._isAnEditableComponent$p$0(component);
    },
    
    _isAnEditableComponent$p$0: function CommandUI_KeytipManager$_isAnEditableComponent$p$0$in(component) {
        if (CommandUI.ControlComponent.isInstanceOfType(component)) {
            var control = (component).get_control();
            return CommandUI.Controls.SearchBox.isInstanceOfType(control) || CommandUI.Controls.ComboBox.isInstanceOfType(control) || CommandUI.Controls.Spinner.isInstanceOfType(control);
        }
        return false;
    },
    
    _logKeytipExecution$p$0: function CommandUI_KeytipManager$_logKeytipExecution$p$0$in(id, componentType) {
        Diag.ULS.sendTraceTag(19961424, 340, 50, 'Executing keytip for {0} component (id: {1})', componentType, id);
    },
    
    _generatedKeytipCounter$0: 1,
    
    getNewGeneratedKeytipString: function CommandUI_KeytipManager$getNewGeneratedKeytipString$in() {
        return this._getNewGeneratedKeytipStringInternal$i$0(this._generatedKeytipCounter$0++);
    },
    
    _getNewGeneratedKeytipStringInternal$i$0: function CommandUI_KeytipManager$_getNewGeneratedKeytipStringInternal$i$0$in(counter) {
        if (counter < 1) {
            return null;
        }
        var newKeytip = new Sys.StringBuilder();
        for (var i = 0; i < Math.ceil(counter / 9); i++) {
            newKeytip.append(CommonUIStrings.l_AddInKeytip);
        }
        newKeytip.append((!(counter % 9)) ? 9 : counter % 9);
        return newKeytip.toString();
    }
}


CommandUI.ComponentStack = function CommandUI_ComponentStack() {
}
CommandUI.ComponentStack.prototype = {
    _top$0: null,
    
    push: function CommandUI_ComponentStack$push$in(node) {
        var newTop = new CommandUI.ComponentStackNode(node, this._top$0);
        this._top$0 = newTop;
    },
    
    pop: function CommandUI_ComponentStack$pop$in() {
        if (this.get_isEmpty()) {
            return null;
        }
        var c = this._top$0.component;
        this._top$0 = this._top$0.next;
        return c;
    },
    
    peek: function CommandUI_ComponentStack$peek$in() {
        if (this.get_isEmpty()) {
            return null;
        }
        return this._top$0.component;
    },
    
    clear: function CommandUI_ComponentStack$clear$in() {
        this._top$0 = null;
    },
    
    get_isEmpty: function CommandUI_ComponentStack$get_isEmpty$in() {
        return !this._top$0;
    }
}


CommandUI.ComponentStackNode = function CommandUI_ComponentStackNode(component, next) {
    this.component = component;
    this.next = next;
}
CommandUI.ComponentStackNode.prototype = {
    component: null,
    next: null
}


CommandUI.Menu = function CommandUI_Menu(root, id, title, description, maxWidth, rootManager, isComboboxListbox, horizontalAlignment) {
    this.$$d__onPointerOut$i$1 = Function.createDelegate(this, this._onPointerOut$i$1);
    this.$$d__onPointerOver$i$1 = Function.createDelegate(this, this._onPointerOver$i$1);
    this.$$d__onContextMenu$p$1 = Function.createDelegate(this, this._onContextMenu$p$1);
    this.$$d__onKeyUp$p$1 = Function.createDelegate(this, this._onKeyUp$p$1);
    this.$$d_onKeyPress = Function.createDelegate(this, this.onKeyPress);
    this.$$d__onKeyDown$p$1 = Function.createDelegate(this, this._onKeyDown$p$1);
    this._focusedIndex$1 = -1;
    this._$$pf_StackIndex$p$1 = -1;
    CommandUI.Menu.initializeBase(this, [ root, id, title, description, null, true, true ]);
    this._maxWidth$1 = maxWidth;
    this._rootManager$1 = rootManager;
    this._isComboboxListbox$1 = isComboboxListbox;
    this.set_horizontalAlignment(horizontalAlignment);
}
CommandUI.Menu.prototype = {
    _maxWidth$1: null,
    isFloatieContextMenuDropDown: false,
    _rootManager$1: null,
    _isComboboxListbox$1: false,
    _$$pf_HorizontalAlignment$p$1: 0,
    
    get_horizontalAlignment: function CommandUI_Menu$get_horizontalAlignment$in() {
        return this._$$pf_HorizontalAlignment$p$1;
    },
    
    set_horizontalAlignment: function CommandUI_Menu$set_horizontalAlignment$in(value) {
        this._$$pf_HorizontalAlignment$p$1 = value;
        return value;
    },
    
    refreshInternal: function CommandUI_Menu$refreshInternal$in() {
        if (this.get__needsDelayIniting$i$0()) {
            this.doDelayedInit();
        }
        this.ensureDOMElementAndEmpty();
        var dir = this.get_root().get_textDirection();
        var _elementInternal = this.get_elementInternal();
        if (!dir) {
            _elementInternal.style.direction = 'ltr';
        }
        else if (dir === 1) {
            CommandUI.Utility.ensureCSSClassOnElement(_elementInternal, 'cui-rtl');
            _elementInternal.style.direction = 'rtl';
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_innerDiv())) {
            this.set_innerDiv(CommandUI.Utility.createElement('div'));
            this.get_innerDiv().className = 'cui-smenu-inner';
        }
        _elementInternal.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, (this._isComboboxListbox$1) ? Common.AccessibilityUtils.ariaListboxRole : Common.AccessibilityUtils.ariaMenuRole);
        _elementInternal.appendChild(this.get_innerDiv());
        if (!CommandUI.ScriptUtility.isNullOrEmptyString(this._maxWidth$1)) {
            _elementInternal.style.maxWidth = this._maxWidth$1;
        }
        this.appendChildrenToElement(this.get_innerDiv());
        CommandUI.Component.prototype.refreshInternal.call(this);
    },
    
    setParentKeytipsIdsForMenuItems: function CommandUI_Menu$setParentKeytipsIdsForMenuItems$in(parentKeytipsIds, parentKeytipsKeys) {
        var $$enum_3 = this.get_children().getEnumerator();
        while ($$enum_3.moveNext()) {
            var menuSection = $$enum_3.get_current();
            var $$enum_5 = menuSection.get_children().getEnumerator();
            while ($$enum_5.moveNext()) {
                var component = $$enum_5.get_current();
                if (CommandUI.ControlComponent.isInstanceOfType(component) && component.get__hasKeytip$i$0()) {
                    (component).get_control().set_parentKeytipsIds(parentKeytipsIds);
                    (component).get_control().set_parentKeytipsKeys(parentKeytipsKeys);
                }
            }
        }
    },
    
    attachEvents: function CommandUI_Menu$attachEvents$in() {
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, this.get_elementInternal(), this.$$d__onKeyDown$p$1);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyPress, this.get_elementInternal(), this.$$d_onKeyPress);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, this.get_elementInternal(), this.$$d__onKeyUp$p$1);
        Common.ContextMenuInputManager.get_instance().registerHandler(this.get_elementInternal(), this.$$d__onContextMenu$p$1);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOver, this.get_elementInternal(), this.$$d__onPointerOver$i$1);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOut, this.get_elementInternal(), this.$$d__onPointerOut$i$1);
    },
    
    get_cssClass: function CommandUI_Menu$get_cssClass$in() {
        if (Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonVisualRefreshEnabled()) {
            return 'cui-menu MLRVisualRefresh';
        }
        return 'cui-menu';
    },
    
    get_domElementTagName: function CommandUI_Menu$get_domElementTagName$in() {
        return 'div';
    },
    
    ensureCorrectChildType: function CommandUI_Menu$ensureCorrectChildType$in(child) {
        if (!CommandUI.MenuSection.isInstanceOfType(child)) {
            throw Error.create('Only MenuSection Components can be added to Menu Components.');
        }
    },
    
    get_inKeytipMode: function CommandUI_Menu$get_inKeytipMode$in() {
        var rootManager = $$as(CommandUI.RootManager, this._rootManager$1);
        if (!rootManager) {
            Common.Debug.log('Menu _rootManager is not type RootManager', Common.DebugLogCategory.ribbon, Common.LogLevel.error);
            return false;
        }
        return rootManager.get_inKeytipMode();
    },
    
    get__inMasterKeytipMode$p$1: function CommandUI_Menu$get__inMasterKeytipMode$p$1$in() {
        var inMasterKeytipMode = this.get_inKeytipMode();
        if (Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactRibbonEnvironmentEnabled() && Common.AppChromeUtils.apiExists('inKeytipMode')) {
            inMasterKeytipMode = appChrome.api.inKeytipMode();
        }
        return inMasterKeytipMode;
    },
    
    _$$pf_InnerDiv$p$1: null,
    
    get_innerDiv: function CommandUI_Menu$get_innerDiv$in() {
        return this._$$pf_InnerDiv$p$1;
    },
    
    set_innerDiv: function CommandUI_Menu$set_innerDiv$in(value) {
        this._$$pf_InnerDiv$p$1 = value;
        return value;
    },
    
    get_stackIndex: function CommandUI_Menu$get_stackIndex$in() {
        return this._$$pf_StackIndex$p$1;
    },
    
    set_stackIndex: function CommandUI_Menu$set_stackIndex$in(value) {
        this._$$pf_StackIndex$p$1 = value;
        return value;
    },
    
    get_selectableItemsCount: function CommandUI_Menu$get_selectableItemsCount$in() {
        var count = 0;
        var $$enum_2 = this.get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var ms = $$enum_2.get_current();
            count += ms.get_selectableItemsCount();
        }
        return count;
    },
    
    get_isComboboxListbox: function CommandUI_Menu$get_isComboboxListbox$in() {
        return this._isComboboxListbox$1;
    },
    
    getSectionSelectableStartIndex: function CommandUI_Menu$getSectionSelectableStartIndex$in(requestedMenuSection) {
        var startIndex = 0;
        var $$enum_3 = this.get_children().getEnumerator();
        while ($$enum_3.moveNext()) {
            var ms = $$enum_3.get_current();
            if (ms === requestedMenuSection) {
                break;
            }
            startIndex += ms.get_selectableItemsCount();
        }
        return startIndex;
    },
    
    pollMenuState: function CommandUI_Menu$pollMenuState$in() {
        this.pollForStateAndUpdateInternal();
    },
    
    pollForStateAndUpdateInternal: function CommandUI_Menu$pollForStateAndUpdateInternal$in() {
        this.set__lastPollTime$i$0(new Date());
        CommandUI.Component.prototype.pollForStateAndUpdateInternal.call(this);
    },
    
    _onContextMenu$p$1: function CommandUI_Menu$_onContextMenu$p$1$in(args) {
        return true;
    },
    
    _onKeyDown$p$1: function CommandUI_Menu$_onKeyDown$p$1$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            var keyEvt = args.innerEvent.rawEvent;
            var keyCode = args.innerEvent.keyCode;
            var shiftKey = keyEvt.shiftKey;
            var altKey = keyEvt.altKey;
            var ltr = (!this.get_root().get_textDirection());
            var focusMovedOut = false;
            var enteringMenu = ((keyCode === Sys.UI.Key.right) && ltr) || ((keyCode === Sys.UI.Key.left) && !ltr);
            var exitingMenu = ((keyCode === Sys.UI.Key.left) && ltr) || ((keyCode === Sys.UI.Key.right) && !ltr);
            if (((keyCode === Sys.UI.Key.tab) && !shiftKey) || enteringMenu) {
                this.focusNext(0);
                focusMovedOut = true;
                handled = true;
            }
            else if ((keyCode === Sys.UI.Key.tab) && shiftKey) {
                this.focusNext(CommandUI.Control.FocusDirection.backward);
                focusMovedOut = true;
                handled = true;
            }
            else if (keyCode === Sys.UI.Key.down) {
                this.focusNext(CommandUI.Control.FocusDirection.down);
                focusMovedOut = true;
                handled = true;
            }
            else if (keyCode === Sys.UI.Key.up) {
                this.focusNext(CommandUI.Control.FocusDirection.up);
                focusMovedOut = true;
                handled = true;
            }
            else if (exitingMenu) {
                if (this.get_stackIndex() > 0) {
                    this.get_root().closeMenuStackAtIndex(this.get_stackIndex(), true, false);
                }
                handled = true;
            }
            else if ((keyCode === Sys.UI.Key.esc) || (altKey && !this.get__inMasterKeytipMode$p$1())) {
                var menuStackIndex = (CommandUI.Jewel.isInstanceOfType(this.get_root()) && !this.get__inMasterKeytipMode$p$1()) ? 0 : this.get_stackIndex();
                this.get_root().closeMenuStackAtIndex(menuStackIndex, true, !this.get_inKeytipMode());
                handled = true;
            }
            else if (args.innerEvent.ctrlKey || ((keyCode >= 112) && (keyCode <= 123)) || keyCode === Sys.UI.Key.space) {
                handled = true;
            }
            if (focusMovedOut) {
                this.get_elementInternal().tabIndex = -1;
            }
        }
        return handled;
    },
    
    onKeyPress: function CommandUI_Menu$onKeyPress$in(args) {
        return !this.get_inKeytipMode();
    },
    
    _onKeyUp$p$1: function CommandUI_Menu$_onKeyUp$p$1$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            var keyEvt = args.innerEvent.rawEvent;
            if (this.get__inMasterKeytipMode$p$1() && args.innerEvent.keyCode === Common.KeyCode.vK_Alt && !keyEvt.altKey) {
                this.get_root().closeMenuStackAtIndex(0, true, true);
                if (Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactRibbonEnvironmentEnabled() && Common.AppChromeUtils.apiExists('exitKeytipMode')) {
                    appChrome.api.exitKeytipMode();
                }
                handled = true;
            }
        }
        return handled;
    },
    
    _onPointerOver$i$1: function CommandUI_Menu$_onPointerOver$i$1$in(args) {
        var menuIndex = this.get_stackIndex();
        while (menuIndex > 0) {
            var menuLauncher = this.get_root().get_menuLauncherStack()[menuIndex];
            if (menuLauncher.isStandardMenuItem()) {
                CommandUI.Utility.ensureCSSClassOnElement(menuLauncher.get_launcher(), CommandUI.MenuLauncher.menuDroppedClassName);
                menuLauncher.set_elmHadFocus(menuLauncher.get_focusableElement());
            }
            menuIndex--;
        }
        return false;
    },
    
    _onPointerOut$i$1: function CommandUI_Menu$_onPointerOut$i$1$in(args) {
        if (!Common.WindowUtils.isPointInElement(this.get_elementInternal(), args.get_clientPoint())) {
            if (this.get_stackIndex() === (this.get_root().get_menuStackDepth() - 1)) {
                this.setFocus(args.get_inputSource());
            }
            else {
                var activeMenuLauncher = this.get_root().get_menuLauncherStack()[this.get_stackIndex() + 1];
                if (activeMenuLauncher.get_elmHadFocus() !== activeMenuLauncher.get_launcher()) {
                    activeMenuLauncher.set_elmHadFocus(this.get_elementInternal());
                    this.resetFocusedIndex();
                }
            }
        }
        return false;
    },
    
    updateFocusedIndex: function CommandUI_Menu$updateFocusedIndex$in(focusedItem) {
        var i = 0;
        var $$enum_3 = this.get_children().getEnumerator();
        while ($$enum_3.moveNext()) {
            var c = $$enum_3.get_current();
            if (c.updateFocusedIndex(focusedItem)) {
                this._focusedIndex$1 = i;
                return true;
            }
            i++;
        }
        Common.Debug.assertNotReachedStringTag('Focused menu item not found within this menu!', 1581536);
        return false;
    },
    
    setFocus: function CommandUI_Menu$setFocus$in(inputMethod) {
        if (inputMethod === Common.InputManager.InputMethod.keyboard) {
            this.focusNext(0);
        }
        else {
            this.get_elementInternal().tabIndex = 0;
            if (Common.BrowserUtils.browserSupportsSetActive(this.get_elementInternal())) {
                try {
                    this.get_elementInternal().setActive();
                }
                catch (ex) {
                    this.get_elementInternal().focus();
                    Common.Debug.log('ElementInternal.SetActive() has thrown an exception ' + ex.toString(), 'Ribbon', Common.LogLevel.warning);
                }
            }
            else {
                this.get_elementInternal().focus();
            }
            this.resetFocusedIndex();
        }
    },
    
    resetFocusedIndex: function CommandUI_Menu$resetFocusedIndex$in() {
        if (!this.get_children().get_count()) {
            return;
        }
        this._focusedIndex$1 = -1;
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var c = $$enum_1.get_current();
            c.resetFocusedIndex();
        }
    },
    
    _moveFocusToParentOnNavigationEnd$p$1: function CommandUI_Menu$_moveFocusToParentOnNavigationEnd$p$1$in() {
        if (CommandUI.ControlComponent.isInstanceOfType(this.get_parent())) {
            var control = (this.get_parent()).get_control();
            if (control) {
                var shouldTakeFocusOnMenuNavigationEnd = control.get_stateProperties()['TakeFocusOnMenuNavigationEnd'];
                if (!!shouldTakeFocusOnMenuNavigationEnd) {
                    control.setFocusOnControl();
                    return true;
                }
            }
        }
        return false;
    },
    
    focusNext: function CommandUI_Menu$focusNext$in(direction) {
        var numSections = this.get_children().get_count();
        if (numSections <= 0) {
            Common.Debug.assertNotReachedStringTag('Empty menu!', 1581537);
            return false;
        }
        var forward = (!direction) || (direction === CommandUI.Control.FocusDirection.right) || (direction === CommandUI.Control.FocusDirection.down);
        return this._moveFocusFromIndex$p$1(this._focusedIndex$1, direction) || this._moveFocusToParentOnNavigationEnd$p$1() || this._moveFocusFromIndex$p$1((forward) ? 0 : numSections - 1, direction);
    },
    
    _moveFocusFromIndex$p$1: function CommandUI_Menu$_moveFocusFromIndex$p$1$in(startIndex, direction) {
        var forward = (!direction) || (direction === CommandUI.Control.FocusDirection.right) || (direction === CommandUI.Control.FocusDirection.down);
        if (startIndex === -1) {
            startIndex = ((forward) ? 0 : this.get_children().get_count() - 1);
        }
        var i = startIndex;
        var le = this.get_children()._getEnumeratorAtPos$i$0(i);
        while ((forward) ? le.moveNext() : le.movePrevious()) {
            if ((le.get_current()).focusNext(direction)) {
                this._focusedIndex$1 = i;
                return true;
            }
            i += ((forward) ? 1 : -1);
        }
        return false;
    },
    
    hasItems: function CommandUI_Menu$hasItems$in() {
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var section = $$enum_1.get_current();
            var $$enum_3 = section.get_children().getEnumerator();
            while ($$enum_3.moveNext()) {
                var item = $$enum_3.get_current();
                if (item.get_visible()) {
                    return true;
                }
            }
        }
        return false;
    },
    
    get_menuLauncherChildren: function CommandUI_Menu$get_menuLauncherChildren$in() {
        var children = new CommandUI.List();
        var $$enum_2 = this.get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var section = $$enum_2.get_current();
            var $$enum_4 = section.get_children().getEnumerator();
            while ($$enum_4.moveNext()) {
                var child = $$enum_4.get_current();
                if (!(CommandUI.ControlComponent.isInstanceOfType(child))) {
                    continue;
                }
                var menuItem = child;
                if (menuItem.get_visible() && CommandUI.MenuLauncher.isInstanceOfType(menuItem.get_control())) {
                    children.add(menuItem.get_control());
                }
            }
        }
        return children;
    },
    
    get_visibleInDOM: function CommandUI_Menu$get_visibleInDOM$in() {
        return this.get_launched();
    },
    
    _$$pf_Launched$p$1: false,
    
    get_launched: function CommandUI_Menu$get_launched$in() {
        return this._$$pf_Launched$p$1;
    },
    
    set_launched: function CommandUI_Menu$set_launched$in(value) {
        this._$$pf_Launched$p$1 = value;
        return value;
    },
    
    dispose: function CommandUI_Menu$dispose$in() {
        var elementInternal = this.get_elementInternal();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(elementInternal)) {
            CommandUI.Utility.unregisterAllHandlers(elementInternal);
        }
        CommandUI.Component.prototype.dispose.call(this);
        this.set_innerDiv(null);
    },
    
    _clone$i$1: function CommandUI_Menu$_clone$i$1$in(root) {
        var clone = root._createMenu$i$1(this.get_id(), this.get_title(), this.get__description$i$0(), this._maxWidth$1, this._isComboboxListbox$1, CommandUI.MenuHorizontalAlignment.left);
        var $$enum_3 = this.get_children().getEnumerator();
        while ($$enum_3.moveNext()) {
            var section = $$enum_3.get_current();
            clone.addChild(section._clone$i$1(root));
        }
        return clone;
    }
}


CommandUI.MenuItemControlProperties = function CommandUI_MenuItemControlProperties() {
    CommandUI.MenuItemControlProperties.initializeBase(this);
}


CommandUI.MenuItem = function CommandUI_MenuItem(root, id, displayMode, control) {
    CommandUI.MenuItem.initializeBase(this, [ root, id, displayMode, control ]);
}
CommandUI.MenuItem.prototype = {
    
    focusNext: function CommandUI_MenuItem$focusNext$in(direction) {
        return this.get_control()._focusNext$i$0(direction);
    }
}


CommandUI.MenuBuildContext = function CommandUI_MenuBuildContext() {
    CommandUI.MenuBuildContext.initializeBase(this);
}
CommandUI.MenuBuildContext.prototype = {
    cloneControlsForMenu: false
}


CommandUI.MenuLauncherControlProperties = function CommandUI_MenuLauncherControlProperties() {
    CommandUI.MenuLauncherControlProperties.initializeBase(this);
}
CommandUI.MenuLauncherControlProperties.prototype = {
    CommandMenuOpen: null,
    CommandMenuClose: null,
    PopulateDynamically: null,
    PopulateOnlyOnce: null,
    PopulateQueryCommand: null,
    PopulateAsyncTriggerCommand: null,
    AllowDefaultContent: null,
    MenuControlExecutedCommand: null
}


CommandUI.MenuLauncher = function CommandUI_MenuLauncher(root, id, properties, menu) {
    CommandUI.MenuLauncher.initializeBase(this, [ root, id, properties ]);
    this.set_menu(menu);
    this.set_menuLaunched(false);
    this.set_sendFocusToMenuDrop(true);
}
CommandUI.MenuLauncher.prototype = {
    _isContextMenuDropDown$1: false,
    _$$pf_SendFocusToMenuDrop$p$1: false,
    
    get_sendFocusToMenuDrop: function CommandUI_MenuLauncher$get_sendFocusToMenuDrop$in() {
        return this._$$pf_SendFocusToMenuDrop$p$1;
    },
    
    set_sendFocusToMenuDrop: function CommandUI_MenuLauncher$set_sendFocusToMenuDrop$in(value) {
        this._$$pf_SendFocusToMenuDrop$p$1 = value;
        return value;
    },
    
    _$$pf_OnMenuLaunchCallback$p$1: null,
    
    get_onMenuLaunchCallback: function CommandUI_MenuLauncher$get_onMenuLaunchCallback$in() {
        return this._$$pf_OnMenuLaunchCallback$p$1;
    },
    
    set_onMenuLaunchCallback: function CommandUI_MenuLauncher$set_onMenuLaunchCallback$in(value) {
        this._$$pf_OnMenuLaunchCallback$p$1 = value;
        return value;
    },
    
    _$$pf_OnMenuCloseCallback$p$1: null,
    
    get_onMenuCloseCallback: function CommandUI_MenuLauncher$get_onMenuCloseCallback$in() {
        return this._$$pf_OnMenuCloseCallback$p$1;
    },
    
    set_onMenuCloseCallback: function CommandUI_MenuLauncher$set_onMenuCloseCallback$in(value) {
        this._$$pf_OnMenuCloseCallback$p$1 = value;
        return value;
    },
    
    get__needsAKeytip$i$0: function CommandUI_MenuLauncher$get__needsAKeytip$i$0$in() {
        return true;
    },
    
    get__menuLauncherBehavior$p$1: function CommandUI_MenuLauncher$get__menuLauncherBehavior$p$1$in() {
        return this.get_behavior();
    },
    
    get_isFloatieContextMenuDropDown: function CommandUI_MenuLauncher$get_isFloatieContextMenuDropDown$in() {
        return this._isContextMenuDropDown$1;
    },
    
    set_isFloatieContextMenuDropDown: function CommandUI_MenuLauncher$set_isFloatieContextMenuDropDown$in(value) {
        this._isContextMenuDropDown$1 = value;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_menu())) {
            this.get_menu().isFloatieContextMenuDropDown = value;
        }
        return value;
    },
    
    _$$pf_MenuLaunched$p$1: false,
    
    get_menuLaunched: function CommandUI_MenuLauncher$get_menuLaunched$in() {
        return this._$$pf_MenuLaunched$p$1;
    },
    
    set_menuLaunched: function CommandUI_MenuLauncher$set_menuLaunched$in(value) {
        this._$$pf_MenuLaunched$p$1 = value;
        return value;
    },
    
    _menu$1: null,
    
    get_menu: function CommandUI_MenuLauncher$get_menu$in() {
        return this._menu$1;
    },
    
    set_menu: function CommandUI_MenuLauncher$set_menu$in(value) {
        this._menu$1 = value;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._menu$1)) {
            this._menu$1.isFloatieContextMenuDropDown = this.get_isFloatieContextMenuDropDown();
        }
        return value;
    },
    
    get_launcherComponent: function CommandUI_MenuLauncher$get_launcherComponent$in() {
        return this.get_displayedComponent();
    },
    
    get_launcher: function CommandUI_MenuLauncher$get_launcher$in() {
        if (CommandUI.Section.isInstanceOfType(this.get_launcherComponent())) {
            return this.get_launcherComponent().get_elementInternal();
        }
        return this.getDisplayedComponentElement();
    },
    
    get_menuDirection: function CommandUI_MenuLauncher$get_menuDirection$in() {
        return CommandUI.FlyoutDirectionType.vertical;
    },
    
    get_additionalMenuCssClass: function CommandUI_MenuLauncher$get_additionalMenuCssClass$in() {
        return '';
    },
    
    _$$pf_ElmHadFocus$p$1: null,
    
    get_elmHadFocus: function CommandUI_MenuLauncher$get_elmHadFocus$in() {
        return this._$$pf_ElmHadFocus$p$1;
    },
    
    set_elmHadFocus: function CommandUI_MenuLauncher$set_elmHadFocus$in(value) {
        this._$$pf_ElmHadFocus$p$1 = value;
        return value;
    },
    
    launchMenu: function CommandUI_MenuLauncher$launchMenu$in(inputMethod) {
        if (this.get__menuLauncherBehavior$p$1()) {
            this.get__menuLauncherBehavior$p$1().launchMenu(inputMethod);
        }
    },
    
    setInitialAriaMenuLauncherAttributes: function CommandUI_MenuLauncher$setInitialAriaMenuLauncherAttributes$in(focusableElement) {
        Common.AccessibilityUtils.setAriaAttribute(focusableElement, Common.AccessibilityUtils.ariaHasPopupAttribute, Common.AccessibilityUtils.ariaTrueValue);
        this.updateAriaMenuLauncherAttributes(focusableElement, false);
    },
    
    updateAriaMenuLauncherAttributes: function CommandUI_MenuLauncher$updateAriaMenuLauncherAttributes$in(focusableElement, on) {
        Common.AccessibilityUtils.setAriaAttribute(focusableElement, Common.AccessibilityUtils.ariaExpandedAttribute, (on) ? Common.AccessibilityUtils.ariaTrueValue : Common.AccessibilityUtils.ariaFalseValue);
    },
    
    selectDropdownItem: function CommandUI_MenuLauncher$selectDropdownItem$in(isc) {
    },
    
    sendNotifyAsyncMenuTrigger: function CommandUI_MenuLauncher$sendNotifyAsyncMenuTrigger$in() {
        if (this.get__menuLauncherBehavior$p$1()) {
            this.get__menuLauncherBehavior$p$1().sendNotifyAsyncMenuTrigger();
        }
    },
    
    onKeyDown: function CommandUI_MenuLauncher$onKeyDown$in(args) {
        return !!this.get__menuLauncherBehavior$p$1() && this.get__menuLauncherBehavior$p$1().onKeyDown(args);
    },
    
    onPointerDown: function CommandUI_MenuLauncher$onPointerDown$in(args) {
        return !!this.get__menuLauncherBehavior$p$1() && this.get__menuLauncherBehavior$p$1().onPointerDown(args);
    },
    
    getLauncherBounds: function CommandUI_MenuLauncher$getLauncherBounds$in() {
        return (!this.get__menuLauncherBehavior$p$1()) ? new Sys.UI.Bounds(0, 0, 0, 0) : this.get__menuLauncherBehavior$p$1().getLauncherBounds();
    },
    
    _closeMenu$i$1: function CommandUI_MenuLauncher$_closeMenu$i$1$in(exitKeytips) {
        if (CommandUI.RootManager.get_instance().get_ribbon() && CommandUI.RootManager.get_instance().get_ribbon().get_inKeytipMode() && this.get_onMenuCloseCallback()) {
            this.get_onMenuCloseCallback()(exitKeytips);
        }
        if (this.get__menuLauncherBehavior$p$1()) {
            this.get__menuLauncherBehavior$p$1().closeMenu();
        }
    },
    
    ensureBehaviorAttachedIfAvailable: function CommandUI_MenuLauncher$ensureBehaviorAttachedIfAvailable$in() {
        CommandUI.Control.prototype.ensureBehaviorAttachedIfAvailable.call(this);
        if (this.get_menu()) {
            this.get_menu().ensureBehaviorAttached();
        }
    },
    
    notifyCommandExecuted: function CommandUI_MenuLauncher$notifyCommandExecuted$in(source, closeAllMenus) {
    },
    
    refreshMenuCallback: function CommandUI_MenuLauncher$refreshMenuCallback$in() {
        this.refreshMenu();
    },
    
    refreshMenu: function CommandUI_MenuLauncher$refreshMenu$in() {
        if (this.get__menuLauncherBehavior$p$1()) {
            this.get__menuLauncherBehavior$p$1().refreshMenu();
        }
    },
    
    ensureCorrectChildType: function CommandUI_MenuLauncher$ensureCorrectChildType$in(child) {
        if (!CommandUI.Menu.isInstanceOfType(child)) {
            throw Error.create('This Component can only have Menu Components as children.');
        }
    },
    
    getCommandPopulateProperties: function CommandUI_MenuLauncher$getCommandPopulateProperties$in() {
        var properties = ({});
        properties.MenuId = this.get_id();
        return properties;
    },
    
    pollForDynamicMenu: function CommandUI_MenuLauncher$pollForDynamicMenu$in(inputMethod) {
        if (this.get__menuLauncherBehavior$p$1()) {
            return this.get__menuLauncherBehavior$p$1().pollForDynamicMenu(inputMethod);
        }
        return null;
    },
    
    populateMenuFromXml: function CommandUI_MenuLauncher$populateMenuFromXml$in(populationXml, isRefresh) {
        if (this.get__menuLauncherBehavior$p$1()) {
            return this.get__menuLauncherBehavior$p$1().populateMenuFromXml(populationXml, isRefresh);
        }
        return false;
    },
    
    get__properties$p$1: function CommandUI_MenuLauncher$get__properties$p$1$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    _cachedMenuVersions$1: null,
    
    get_cachedMenuVersions: function CommandUI_MenuLauncher$get_cachedMenuVersions$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._cachedMenuVersions$1)) {
            this._cachedMenuVersions$1 = {};
        }
        return this._cachedMenuVersions$1;
    },
    
    get_focusableElement: function CommandUI_MenuLauncher$get_focusableElement$in() {
        return this.getDisplayedComponentElement();
    },
    
    cloneMenu: function CommandUI_MenuLauncher$cloneMenu$in(root) {
        var clonedMenu = null;
        if (this.get_menu() && CommandUI.Builder._shouldBuildMenu$i(this.get__properties$p$1(), this.get_menu().get_children()._toArray$i$0())) {
            clonedMenu = this.get_menu()._clone$i$1(root);
        }
        return clonedMenu;
    },
    
    constructClonedMenuLauncherForMenu: function CommandUI_MenuLauncher$constructClonedMenuLauncherForMenu$in(root, properties, clonedMenu) {
        return this.constructClonedMenuLauncher(root, properties, clonedMenu);
    },
    
    constructClonedControl: function CommandUI_MenuLauncher$constructClonedControl$in(root, properties) {
        var clonedMenu = this.cloneMenu(root);
        return this.constructClonedMenuLauncher(root, properties, clonedMenu);
    },
    
    constructClonedControlForMenu: function CommandUI_MenuLauncher$constructClonedControlForMenu$in(root, properties) {
        var clonedMenu = this.cloneMenu(root);
        return this.constructClonedMenuLauncherForMenu(root, properties, clonedMenu);
    },
    
    dispose: function CommandUI_MenuLauncher$dispose$in() {
        CommandUI.Control.prototype.dispose.call(this);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_menu())) {
            this.get_menu().dispose();
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._cachedMenuVersions$1)) {
            var $$dict_2 = this._cachedMenuVersions$1;
            for (var $$key_3 in $$dict_2) {
                var entry = { key: $$key_3, value: $$dict_2[$$key_3] };
                var menu = entry.value;
                menu.dispose();
            }
        }
        this.set_menu(null);
    }
}






CommandUI.MenuSection = function CommandUI_MenuSection(root, id, title, description, properties, menu) {
    this._focusedIndex$1 = -1;
    CommandUI.MenuSection.initializeBase(this, [ root, id, title, description, null, true, true ]);
    this._properties$1 = properties || ({});
    this._menuContext$1 = menu;
}
CommandUI.MenuSection._createOuterElement$i = function CommandUI_MenuSection$_createOuterElement$i$st(outerStyle, isFocusable) {
    var anchor = CommandUI.Utility._createNoOpLink$i(isFocusable);
    anchor.className = outerStyle;
    return anchor;
}
CommandUI.MenuSection.prototype = {
    _properties$1: null,
    _elmWrapper$1: null,
    _elmTitle$1: null,
    _elmItems$1: null,
    _menuContext$1: null,
    _isInComboboxListbox$1: false,
    
    refreshInternal: function CommandUI_MenuSection$refreshInternal$in() {
        this.ensureDOMElementAndEmpty();
        var isLoading = CommandUI.Utility.isTrue(this._properties$1.Loading);
        var hasTitle = !CommandUI.ScriptUtility.isNullOrUndefined(this.get_title());
        var showSeperator = !CommandUI.Utility.isFalse(this._properties$1.ShowSeperator);
        if (!hasTitle && showSeperator) {
            this.set_separator(CommandUI.Utility.createElement('span'));
            this.get_separator().className = 'cui-menusection-separator';
            this.get_separator().setAttribute('role', 'separator');
            this.get_elementInternal().appendChild(this.get_separator());
        }
        this._elmWrapper$1 = CommandUI.Utility.createElement('div');
        this._elmWrapper$1.className = 'cui-menusection';
        if (this._properties$1.Language) {
            this._elmWrapper$1.setAttribute('lang', this._properties$1.Language);
        }
        this.get_elementInternal().appendChild(this._elmWrapper$1);
        if (hasTitle) {
            var $$t_6;
            this._buildTitleForSection$i$1(this._elmWrapper$1, this.get_title(), ($$t_6 = {'val': this._elmTitle$1})), this._elmTitle$1 = $$t_6.val;
        }
        if (Common.AFrameworkApplication.isMobileMode) {
            this._elmWrapper$1.style.fontSize = '10pt';
        }
        if (isLoading) {
            var spinnerImageElement = CommandUI.Utility.createElement('img');
            spinnerImageElement.alt = '';
            spinnerImageElement.src = this.get_root().get_properties().ImageSpinner;
            spinnerImageElement.className = 'cui-ctl-spinner ';
            this._elmWrapper$1.appendChild(spinnerImageElement);
        }
        else {
            this._elmItems$1 = CommandUI.Utility.createElement('ul');
            this._elmItems$1.className = 'cui-menusection-items';
            if (this._properties$1.DisplayMode === 'Menu16DescriptionEnabled') {
                this._elmItems$1.setAttribute(Common.AccessibilityUtils.ariaLabelledByAttribute, this._properties$1.ArialabelledbyId);
                this._elmItems$1.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaGroupRole);
            }
            var parent = this.get_parent();
            var parentMenu = $$as(CommandUI.Menu, parent);
            if ((this._properties$1.DisplayMode === 'Menu32') || (this._properties$1.DisplayMode === 'Menu48')) {
                if (parentMenu) {
                    CommandUI.Utility.ensureCSSClassOnElement(parent.get_elementInternal(), 'cui-menu-large');
                }
            }
            if (parentMenu) {
                this._isInComboboxListbox$1 = parentMenu.get_isComboboxListbox();
            }
            if (CommandUI.Utility.isTrue(this._properties$1.Scrollable)) {
                this._elmItems$1.style.overflowY = 'auto';
                this._elmItems$1.style.position = 'relative';
            }
            if (!CommandUI.ScriptUtility.isNullOrEmptyString(this._properties$1.MaxHeight)) {
                this._elmItems$1.style.maxHeight = this._properties$1.MaxHeight;
            }
            this._elmWrapper$1.appendChild(this._elmItems$1);
            this.appendChildrenToElement(this._elmItems$1);
        }
    },
    
    _buildTitleForSection$i$1: function CommandUI_MenuSection$_buildTitleForSection$i$1$in(theContainer, title, textualTitleBlock) {
        var titleBlock;
        if (!this.get__inContextMenu$p$1()) {
            titleBlock = textualTitleBlock.val = this._createTextualTitleForSection$p$1('div', title);
        }
        else {
            titleBlock = this._createTitleForContextMenuSection$p$1(title, textualTitleBlock);
        }
        theContainer.appendChild(titleBlock);
    },
    
    get__inContextMenu$p$1: function CommandUI_MenuSection$get__inContextMenu$p$1$in() {
        return CommandUI.ContextMenuRoot.isInstanceOfType(this.get_root()) && (this._properties$1.DisplayMode === 'Menu16' || this._properties$1.DisplayMode === 'Menu16DescriptionEnabled');
    },
    
    _createTitleForContextMenuSection$p$1: function CommandUI_MenuSection$_createTitleForContextMenuSection$p$1$in(title, titleElement) {
        var iconicTitleBlock = CommandUI.Utility.createElement('li');
        iconicTitleBlock.className = 'cui-menusection-items cui-menusection-contextmenu-title';
        var showTitleBackground = !CommandUI.Utility.isFalse(this._properties$1.ShowTitleBackground);
        if (!showTitleBackground) {
            iconicTitleBlock.style.background = 'transparent';
        }
        var isTitleFocusable = !CommandUI.Utility.isFalse(this._properties$1.TitleFocusable);
        var outerElement = CommandUI.MenuSection._createOuterElement$i('cui-ctl-menu cui-ctl-menu16', isTitleFocusable);
        var showTitleIcon = !CommandUI.Utility.isFalse(this._properties$1.ShowTitleIcon);
        if (showTitleIcon) {
            var iconBlock = this._createIconBlock$p$1(this._properties$1.Image, this._properties$1.ImageClass);
            outerElement.appendChild(iconBlock);
        }
        var textualTitleBlock = titleElement.val = this._createTextualTitleForSection$p$1('span', title);
        outerElement.appendChild(textualTitleBlock);
        iconicTitleBlock.appendChild(outerElement);
        var theContainer = CommandUI.Utility.createElement('ul');
        theContainer.className = 'cui-menusection-items';
        theContainer.appendChild(iconicTitleBlock);
        return theContainer;
    },
    
    _createIconBlock$p$1: function CommandUI_MenuSection$_createIconBlock$p$1$in(imageUrl, imageClass) {
        var iconContainer = CommandUI.Utility.createElement('span');
        iconContainer.className = 'cui-ctl-iconContainer';
        if (imageUrl && imageClass) {
            var imgSize = 4;
            var imageElement = CommandUI.Utility.createElement('img');
            imageElement.alt = '';
            var imageBlock = CommandUI.Utility._createClusteredImageContainerNew$i(imgSize, imageUrl, imageClass, imageElement, true, false);
            iconContainer.appendChild(imageBlock);
        }
        return iconContainer;
    },
    
    _createTextualTitleForSection$p$1: function CommandUI_MenuSection$_createTextualTitleForSection$p$1$in(elemTag, title) {
        var titleElement = CommandUI.Utility.createElement(elemTag);
        titleElement.innerText = title;
        var className = 'cui-menusection-title-empty';
        var ariaRole = Common.AccessibilityUtils.ariaPresentationRole;
        if (this._properties$1.TitleId) {
            titleElement.setAttribute('id', this._properties$1.TitleId);
        }
        if (!CommandUI.ScriptUtility.isNullOrEmptyString(title)) {
            className = ((this.get__inContextMenu$p$1()) ? 'cui-ctl-mediumlabel' : 'cui-menusection-title') + ((this._properties$1.Theme === 'Light') ? ' cui-menusection-title-lightBackground' : ((CommandUI.Jewel.isInstanceOfType(this.get_root())) ? '' : ' UIFontBold'));
            ariaRole = Common.AccessibilityUtils.ariaHeadingRole;
        }
        titleElement.className = className;
        titleElement.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, ariaRole);
        return titleElement;
    },
    
    get_domElementTagName: function CommandUI_MenuSection$get_domElementTagName$in() {
        return 'div';
    },
    
    get_selectableItemsCount: function CommandUI_MenuSection$get_selectableItemsCount$in() {
        var totalItemsCount = 0;
        var $$enum_2 = this.get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var item = $$enum_2.get_current();
            if (CommandUI.MenuItem.isInstanceOfType(item)) {
                var mi = $$as(CommandUI.MenuItem, item);
                if (mi.get_control() && CommandUI.ISelectableControl.isInstanceOfType(mi.get_control())) {
                    totalItemsCount++;
                }
            }
            else {
                totalItemsCount++;
            }
        }
        return totalItemsCount;
    },
    
    appendChildrenToElement: function CommandUI_MenuSection$appendChildrenToElement$in(elm) {
        var listItem;
        var firstChild = true;
        var totalMenuItemsCount = this.get_selectableItemsCount();
        var firstItemPos = 0;
        var relativePosInSection = 0;
        var childAriaRole = '';
        var menuSectionContainsTabs = false;
        Common.Debug.assertStringTag(!!this._menuContext$1, 'MenuSection has no MenuContext', 18661651);
        if (this._menuContext$1) {
            totalMenuItemsCount = this._menuContext$1.get_selectableItemsCount();
            firstItemPos = this._menuContext$1.getSectionSelectableStartIndex(this);
        }
        var $$enum_9 = this.get_children().getEnumerator();
        while ($$enum_9.moveNext()) {
            var child = $$enum_9.get_current();
            listItem = CommandUI.Utility.createElement('li');
            listItem.className = 'cui-menusection-items';
            listItem.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaPresentationRole);
            if (firstChild) {
                CommandUI.Utility.ensureCSSClassOnElement(listItem, 'cui-menusection-firstitem');
                firstChild = false;
            }
            child.ensureDOMElement();
            var mi = $$as(CommandUI.MenuItem, child);
            if (!mi || (mi.get_control() && CommandUI.ISelectableControl.isInstanceOfType(mi.get_control()))) {
                child.get_elementInternal().setAttribute(Common.AccessibilityUtils.ariaPosInSetAttribute, firstItemPos + (++relativePosInSection));
                child.get_elementInternal().setAttribute(Common.AccessibilityUtils.ariaSetSizeAttribute, totalMenuItemsCount);
                if (this._properties$1.TitleId) {
                    child.get_elementInternal().setAttribute(Common.AccessibilityUtils.ariaDescribedByAttribute, this._properties$1.TitleId);
                }
            }
            if (this._isInComboboxListbox$1) {
                child.get_elementInternal().setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaOptionRole);
            }
            else {
                if (!mi || (mi.get_control() && CommandUI.Controls.FlyoutAnchor.isInstanceOfType(mi.get_control()) && (mi.get_control()).get_useCheckMark())) {
                    listItem.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaGroupRole);
                }
            }
            listItem.appendChild(child.get_elementInternal());
            if (!menuSectionContainsTabs) {
                childAriaRole = child.get_elementInternal().getAttribute(Common.AccessibilityUtils.ariaRoleAttribute);
                menuSectionContainsTabs = !!childAriaRole && childAriaRole === Common.AccessibilityUtils.ariaTabRole;
            }
            elm.appendChild(listItem);
            child.ensureRefreshed();
        }
        if (menuSectionContainsTabs) {
            elm.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaTabListRole);
        }
    },
    
    updateFocusedIndex: function CommandUI_MenuSection$updateFocusedIndex$in(focusedItem) {
        var i = 0;
        var $$enum_3 = this.get_children().getEnumerator();
        while ($$enum_3.moveNext()) {
            var c = $$enum_3.get_current();
            if (c.updateFocusedIndex(focusedItem)) {
                this._focusedIndex$1 = i;
                return true;
            }
            i++;
        }
        return false;
    },
    
    resetFocusedIndex: function CommandUI_MenuSection$resetFocusedIndex$in() {
        if (!this.get_children().get_count()) {
            return;
        }
        this._focusedIndex$1 = -1;
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var c = $$enum_1.get_current();
            c.resetFocusedIndex();
        }
    },
    
    focusNext: function CommandUI_MenuSection$focusNext$in(direction) {
        var numItems = this.get_children().get_count();
        if (numItems <= 0) {
            return false;
        }
        if (this._moveFocusFromIndex$p$1(this._focusedIndex$1, direction)) {
            return true;
        }
        if ((this._focusedIndex$1 >= 0) && (this._focusedIndex$1 < numItems)) {
            (this.get_children().get_item(this._focusedIndex$1)).resetFocusedIndex();
        }
        this._focusedIndex$1 = -1;
        return false;
    },
    
    _moveFocusFromIndex$p$1: function CommandUI_MenuSection$_moveFocusFromIndex$p$1$in(startIndex, direction) {
        var numItems = this.get_children().get_count();
        var forward = (!direction) || (direction === CommandUI.Control.FocusDirection.right) || (direction === CommandUI.Control.FocusDirection.down);
        if (startIndex === -1) {
            startIndex = ((forward) ? 0 : numItems - 1);
        }
        var i = startIndex;
        var le = this.get_children()._getEnumeratorAtPos$i$0(i);
        while ((forward) ? le.moveNext() : le.movePrevious()) {
            if ((le.get_current()).focusNext(direction)) {
                if ((this._focusedIndex$1 >= 0) && (this._focusedIndex$1 < numItems) && (this._focusedIndex$1 !== i)) {
                    (this.get_children().get_item(this._focusedIndex$1)).resetFocusedIndex();
                }
                this._focusedIndex$1 = i;
                return true;
            }
            i += ((forward) ? 1 : -1);
        }
        return false;
    },
    
    ensureCorrectChildType: function CommandUI_MenuSection$ensureCorrectChildType$in(child) {
        if (!CommandUI.MenuItem.isInstanceOfType(child) && !CommandUI._gallery.isInstanceOfType(child)) {
            throw Error.create('MenuSections can only have children of type MenuItem or Gallery.');
        }
    },
    
    _$$pf_Separator$p$1: null,
    
    get_separator: function CommandUI_MenuSection$get_separator$in() {
        return this._$$pf_Separator$p$1;
    },
    
    set_separator: function CommandUI_MenuSection$set_separator$in(value) {
        this._$$pf_Separator$p$1 = value;
        return value;
    },
    
    get_titleElement: function CommandUI_MenuSection$get_titleElement$in() {
        return this._elmTitle$1;
    },
    
    setTitleImmediate: function CommandUI_MenuSection$setTitleImmediate$in(title) {
        this.set__titleInternal$i$0(title);
        this._elmTitle$1.innerText = title;
    },
    
    dispose: function CommandUI_MenuSection$dispose$in() {
        CommandUI.Component.prototype.dispose.call(this);
        this.set_separator(null);
        this._elmItems$1 = null;
        this._elmTitle$1 = null;
        this._elmWrapper$1 = null;
    },
    
    _clone$i$1: function CommandUI_MenuSection$_clone$i$1$in(root) {
        var section = root._createMenuSection$i$1(this.get_id(), this.get_title(), this.get__description$i$0(), this._properties$1, this._menuContext$1);
        var $$enum_3 = this.get_children().getEnumerator();
        while ($$enum_3.moveNext()) {
            var child = $$enum_3.get_current();
            if (CommandUI.MenuItem.isInstanceOfType(child)) {
                var menuItemControl = (child).get_control().clone(root, null);
                section.addChild(menuItemControl.createComponentForDisplayMode(this._properties$1.DisplayMode));
            }
            else if (CommandUI._gallery.isInstanceOfType(child)) {
                section.addChild((child)._clone$i$1(root));
            }
            else {
                Common.Debug.assertStringTag(false, 'Child is of an unexpected type.  Expected a child of type MenuItem or Gallery.', 4483209);
            }
        }
        return section;
    }
}


CommandUI._standaloneDock = function CommandUI__standaloneDock(root, id) {
    CommandUI._standaloneDock.initializeBase(this, [ root, id, '', '', null, true, true ]);
}
CommandUI._standaloneDock.prototype = {
    
    refreshInternal: function CommandUI__standaloneDock$refreshInternal$in() {
        this.ensureDOMElementAndEmpty();
        this.appendChildrenToElement(this.get_elementInternal());
        CommandUI.Component.prototype.refreshInternal.call(this);
    },
    
    ensureCorrectChildType: function CommandUI__standaloneDock$ensureCorrectChildType$in(child) {
        if (!CommandUI.ControlComponent.isInstanceOfType(child)) {
            throw Error.create('Only children of type Control can be added to StandaloneDocks.');
        }
    },
    
    get_visibleInDOM: function CommandUI__standaloneDock$get_visibleInDOM$in() {
        return true;
    }
}


CommandUI.StandaloneRootProperties = function CommandUI_StandaloneRootProperties() {
    CommandUI.StandaloneRootProperties.initializeBase(this);
}


CommandUI.StandaloneRoot = function CommandUI_StandaloneRoot(id, properties) {
    this._createdControls$2 = {};
    CommandUI.StandaloneRoot.initializeBase(this, [ id, properties ]);
    this.set_shouldHandleElementResize(true);
}
CommandUI.StandaloneRoot.createStandaloneRoot = function CommandUI_StandaloneRoot$createStandaloneRoot$st(id, properties) {
    return new CommandUI.StandaloneRoot(id, properties);
}
CommandUI.StandaloneRoot._updateControlVisibility$p = function CommandUI_StandaloneRoot$_updateControlVisibility$p$st(control) {
    for (var $$arr_1 = control.get_components(), $$len_2 = $$arr_1.length, $$idx_3 = 0; $$idx_3 < $$len_2; ++$$idx_3) {
        var component = $$arr_1[$$idx_3];
        var showThisComponent = control.get_visible() && (component === control.get_activeComponentWhenVisible());
        var displayedDomElement = component.get_elementInternal();
        displayedDomElement.style.display = (showThisComponent) ? '' : 'none';
        component.set_visibleInDOM(showThisComponent);
    }
}
CommandUI.StandaloneRoot.prototype = {
    
    get_createdControls: function CommandUI_StandaloneRoot$get_createdControls$in() {
        return this._createdControls$2;
    },
    
    get_rootType: function CommandUI_StandaloneRoot$get_rootType$in() {
        return Common.UILocation.standaloneCuiRoot;
    },
    
    get_supportsInvisibleControls: function CommandUI_StandaloneRoot$get_supportsInvisibleControls$in() {
        return true;
    },
    
    get_supportsDynamicDisplayMode: function CommandUI_StandaloneRoot$get_supportsDynamicDisplayMode$in() {
        return true;
    },
    
    dispose: function CommandUI_StandaloneRoot$dispose$in() {
        var $$dict_2 = this._createdControls$2;
        for (var $$key_3 in $$dict_2) {
            var entry = { key: $$key_3, value: $$dict_2[$$key_3] };
            var control = entry.value;
            control.dispose();
        }
        this.set_shouldHandleElementResize(false);
        CommandUI.Root.prototype.dispose.call(this);
    },
    
    get_builder: function CommandUI_StandaloneRoot$get_builder$in() {
        if (!CommandUI.Root.prototype.get_builder.call(this)) {
            var options = new CommandUI.BuildOptions();
            CommandUI.Root.prototype.set_builder.call(this, new CommandUI.Builder(options, null, null, null));
            CommandUI.Root.prototype.get_builder.call(this).set_root(this);
        }
        return CommandUI.Root.prototype.get_builder.call(this);
    },
    
    set_builder: function CommandUI_StandaloneRoot$set_builder$in(value) {
        CommandUI.Root.prototype.set_builder.call(this, value);
        return value;
    },
    
    setBuilder: function CommandUI_StandaloneRoot$setBuilder$in(builder) {
        this.set_builder(builder);
        builder.set_root(this);
    },
    
    get_standaloneRootProperties: function CommandUI_StandaloneRoot$get_standaloneRootProperties$in() {
        return this.get_properties();
    },
    
    addControl: function CommandUI_StandaloneRoot$addControl$in(id, controlXml) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(controlXml)) {
            Common.Debug.assertNotReachedTag(7197709);
            return false;
        }
        var controlData = CommandUI.Builder.convertXMLStringToJSON(controlXml);
        return this.addControlFromDeserializedData(id, controlData);
    },
    
    addControlFromDeserializedData: function CommandUI_StandaloneRoot$addControlFromDeserializedData$in(id, controlData) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(controlData)) {
            Common.Debug.assertNotReachedTag(7197710);
            return false;
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._createdControls$2[id])) {
            throw Error.create(String.format('Control id {0} already exists in this root.', id));
        }
        var control = this.get_builder().buildControl(controlData, new CommandUI.BuildContext());
        if (control) {
            control._setEnabledAndForceUpdate$i$0(true);
            this._createdControls$2[id] = control;
        }
        return true;
    },
    
    removeControl: function CommandUI_StandaloneRoot$removeControl$in(id) {
        var ctrl = this._createdControls$2[id];
        if (CommandUI.ScriptUtility.isNullOrUndefined(ctrl)) {
            throw Error.create(String.format('Control with id \'{0}\' not found in root.', id));
        }
        var dockIds = this._getDockIdsForControlId$p$2(id);
        for (var i = 0; i < dockIds.length; i++) {
            this.removeChild(dockIds[i]);
        }
        delete this._createdControls$2[id];
        ctrl.dispose();
    },
    
    getDOMElementForControlDisplayMode: function CommandUI_StandaloneRoot$getDOMElementForControlDisplayMode$in(id, displayMode) {
        var ctrl = this._createdControls$2[id];
        if (CommandUI.ScriptUtility.isNullOrUndefined(ctrl)) {
            throw Error.create(String.format('Control with id \'{0}\' not found in root.', id));
        }
        var dockId = this._getDockId$p$2(id, displayMode);
        var dock = this._getChild$i$0(dockId);
        if (CommandUI.ScriptUtility.isNullOrUndefined(dock)) {
            dock = new CommandUI._standaloneDock(this, dockId);
            this.addChild(dock);
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(dock._getChild$i$0(id))) {
            dock.addChild(ctrl.createComponentForDisplayMode(displayMode));
        }
        var element = ctrl.getDOMElementForDisplayMode(displayMode, ctrl.get_displayedComponent());
        CommandUI.StandaloneRoot._updateControlVisibility$p(ctrl);
        return element;
    },
    
    hostControl: function CommandUI_StandaloneRoot$hostControl$in(id, xml, displayMode) {
        return (this.addControl(id, xml)) ? this.getDOMElementForControlDisplayMode(id, displayMode) : null;
    },
    
    pollForControlState: function CommandUI_StandaloneRoot$pollForControlState$in(id) {
        var control = this._createdControls$2[id];
        if (!CommandUI.ScriptUtility.isNullOrUndefined(control)) {
            control._pollForStateAndUpdate$i$0();
            CommandUI.StandaloneRoot._updateControlVisibility$p(control);
        }
    },
    
    _getDockId$p$2: function CommandUI_StandaloneRoot$_getDockId$p$2$in(controlId, displayMode) {
        return String.format('dock_{0}-{1}', controlId, displayMode);
    },
    
    _getDockIdsForControlId$p$2: function CommandUI_StandaloneRoot$_getDockIdsForControlId$p$2$in(controlId) {
        var dockIds = [];
        var $$enum_3 = this.get_children().getEnumerator();
        while ($$enum_3.moveNext()) {
            var c = $$enum_3.get_current();
            if (c.get_id().startsWith('dock_' + controlId)) {
                Array.add(dockIds, c.get_id());
            }
        }
        return dockIds;
    },
    
    get_trimmedIds: function CommandUI_StandaloneRoot$get_trimmedIds$in() {
        return this.get_builder().get_options().trimmedIds;
    },
    
    get_cuiControlManager: function CommandUI_StandaloneRoot$get_cuiControlManager$in() {
        return this;
    }
}


CommandUI.StandaloneRootController = function CommandUI_StandaloneRootController(imageClusterPath) {
    var props = new CommandUI.StandaloneRootProperties();
    props.ImageUpArrow = props.ImageDownArrow = props.ImageSideArrow = props.ImageCheckMark = props.ImageUncheckMark = props.ImageDownArrow8by8 = props.ImageUpArrow8by8 = imageClusterPath;
    props.ImageUpArrowClass = Common.ImageClusteringHelper.getImageClass('RibbonUpArrow_5x3x32');
    props.ImageDownArrowClass = Common.ImageClusteringHelper.getImageClass('SplitButtonArrow_5x3x32');
    props.ImageUpArrow8by8Class = Common.ImageClusteringHelper.getImageClass('RibbonUpArrow_8x8x32');
    props.ImageDownArrow8by8Class = Common.ImageClusteringHelper.getImageClass('SplitButtonArrow_8x8x32');
    props.ImageSideArrowClass = Common.ImageClusteringHelper.getImageClass('SubmenuFlyoutArrow_13x13x32');
    props.ImageCheckMarkClass = Common.ImageClusteringHelper.getImageClass('CheckboxChecked_16x16x32');
    props.ImageUncheckMarkClass = Common.ImageClusteringHelper.getImageClass('CheckboxUnchecked_16x16x32');
    props.TextDirection = (Common.AFrameworkApplication.get_isRtl()) ? 'rtl' : 'ltr';
    this._standaloneRoot$0 = CommandUI.StandaloneRoot.createStandaloneRoot(CommandUI.StandaloneRootController._standaloneRootName$p, props);
    this._standaloneRoot$0.refresh();
}
CommandUI.StandaloneRootController.prototype = {
    _standaloneRoot$0: null,
    
    get_sharedStandaloneRoot: function CommandUI_StandaloneRootController$get_sharedStandaloneRoot$in() {
        return this._standaloneRoot$0;
    },
    
    dispose: function CommandUI_StandaloneRootController$dispose$in() {
        this._standaloneRoot$0.dispose();
    }
}


CommandUI.DictationFloatieController = function CommandUI_DictationFloatieController() {
    this.$$d__returnFocusToCanvas$p$0 = Function.createDelegate(this, this._returnFocusToCanvas$p$0);
    this.$$d__onFloatieDismiss$p$0 = Function.createDelegate(this, this._onFloatieDismiss$p$0);
    this.$$d__onToggleDictation$p$0 = Function.createDelegate(this, this._onToggleDictation$p$0);
}
CommandUI.DictationFloatieController.prototype = {
    _toggleDictationActionID$0: 0,
    _dismissFloatieActionID$0: 0,
    _dictationContainer$0: null,
    _dictationUIInitialized$0: false,
    
    get__isChromeReady$p$0: function CommandUI_DictationFloatieController$get__isChromeReady$p$0$in() {
        return Common.App.AppLifecycleManager.get_instance().isCompleted(Common.App.AppInitializationStatus.chromeReady);
    },
    
    initializeDictationFloatie: function CommandUI_DictationFloatieController$initializeDictationFloatie$in() {
        var $$t_19 = this;
        return new Promise(function(resolve, reject) {
            if (!$$t_19.get__isChromeReady$p$0()) {
                reject('Chrome not ready!');
                return;
            }
            if ($$t_19._dictationUIInitialized$0) {
                resolve(null);
                return;
            }
            Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
                dictationFloatieUIAPI.loadDictationResources().then(function() {
                    var $$t_18;
                    dictationFloatieUIAPI.initializeDictationUI($$t_19._getDictationUIContainer$p$0(), ($$t_18 = new Common.DictationFloatieUIProps(), $$t_18.onDictationToggleButtonClicked = $$t_19.$$d__onToggleDictation$p$0, $$t_18.notifyDictationFloatieDismissed = $$t_19.$$d__onFloatieDismiss$p$0, $$t_18.returnFocusToCanvas = $$t_19.$$d__returnFocusToCanvas$p$0, $$t_18));
                    $$t_19._dictationUIInitialized$0 = true;
                    resolve(null);
                }).catch(function(_) {
                    reject('failed to load dictation resources');
                });
                return null;
            }).catch(function(_) {
                reject('failed to load dictation-floatie script');
            });
        });
    },
    
    showDictationFloatie: function CommandUI_DictationFloatieController$showDictationFloatie$in(position, isExpanded, dictationLanguage, useAutoPunctuation, useVoiceCommands) {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_A = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            appChrome.api.dispatch(dictationFloatieUIAPI.showDictationFloatie(position, isExpanded, dictationLanguage, useAutoPunctuation, useVoiceCommands));
            return null;
        });
    },
    
    dismissDictationFloatie: function CommandUI_DictationFloatieController$dismissDictationFloatie$in() {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_5 = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            appChrome.api.dispatch(dictationFloatieUIAPI.dismissDictationFloatie());
            return null;
        });
    },
    
    switchDictationFloatieView: function CommandUI_DictationFloatieController$switchDictationFloatieView$in(isReadAloud) {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_6 = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            appChrome.api.dispatch(dictationFloatieUIAPI.switchDictationFloatieView(isReadAloud));
            return null;
        });
    },
    
    notifyDictationStarting: function CommandUI_DictationFloatieController$notifyDictationStarting$in() {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_5 = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            appChrome.api.dispatch(dictationFloatieUIAPI.onDictationStarting());
            return null;
        });
    },
    
    notifyDictationStopped: function CommandUI_DictationFloatieController$notifyDictationStopped$in() {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_5 = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            appChrome.api.dispatch(dictationFloatieUIAPI.onDictationStopped());
            return null;
        });
    },
    
    notifyDictationStarted: function CommandUI_DictationFloatieController$notifyDictationStarted$in() {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_5 = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            appChrome.api.dispatch(dictationFloatieUIAPI.onDictationStarted());
            return null;
        });
    },
    
    notifyUserVoiceDetected: function CommandUI_DictationFloatieController$notifyUserVoiceDetected$in() {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_5 = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            appChrome.api.dispatch(dictationFloatieUIAPI.onUserSpeaking());
            return null;
        });
    },
    
    notifySilenceDetected: function CommandUI_DictationFloatieController$notifySilenceDetected$in() {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_5 = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            appChrome.api.dispatch(dictationFloatieUIAPI.onSilence());
            return null;
        });
    },
    
    showDictationWarning: function CommandUI_DictationFloatieController$showDictationWarning$in(warningMessage) {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_6 = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            appChrome.api.dispatch(dictationFloatieUIAPI.showDictationWarning(warningMessage));
            return null;
        });
    },
    
    notifyDictationCommandHeard: function CommandUI_DictationFloatieController$notifyDictationCommandHeard$in(command) {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_6 = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            appChrome.api.dispatch(dictationFloatieUIAPI.onDictationCommandHeard(command));
            return null;
        });
    },
    
    focus: function CommandUI_DictationFloatieController$focus$in() {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_5 = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            dictationFloatieUIAPI.focus();
            return null;
        });
    },
    
    blur: function CommandUI_DictationFloatieController$blur$in() {
        if (!this._dictationUIInitialized$0) {
            return;
        }
        var $$t_5 = this;
        Common.UISurfaces.getDictationFloatieUIAsync().then(function(dictationFloatieUIAPI) {
            dictationFloatieUIAPI.blur();
            return null;
        });
    },
    
    setToggleDictationAction: function CommandUI_DictationFloatieController$setToggleDictationAction$in(actionID) {
        this._toggleDictationActionID$0 = actionID;
    },
    
    setFloatieDismissedAction: function CommandUI_DictationFloatieController$setFloatieDismissedAction$in(actionID) {
        this._dismissFloatieActionID$0 = actionID;
    },
    
    _getDictationUIContainer$p$0: function CommandUI_DictationFloatieController$_getDictationUIContainer$p$0$in() {
        if (this._dictationContainer$0) {
            return this._dictationContainer$0;
        }
        this._dictationContainer$0 = CommandUI.Utility.createElement('div');
        this._dictationContainer$0.id = 'ReactDictationFloatieDiv';
        this._dictationContainer$0.style.position = 'absolute';
        document.body.insertBefore(this._dictationContainer$0, document.body.firstChild);
        return this._dictationContainer$0;
    },
    
    _onToggleDictation$p$0: function CommandUI_DictationFloatieController$_onToggleDictation$p$0$in() {
        if (!this._toggleDictationActionID$0) {
            return;
        }
        Common.AFrameworkApplication.get_theActionManager().processAction(this._toggleDictationActionID$0, 2, null);
    },
    
    _onFloatieDismiss$p$0: function CommandUI_DictationFloatieController$_onFloatieDismiss$p$0$in() {
        if (!this._dismissFloatieActionID$0) {
            return;
        }
        Common.AFrameworkApplication.get_theActionManager().processAction(this._dismissFloatieActionID$0, 2, null);
    },
    
    _returnFocusToCanvas$p$0: function CommandUI_DictationFloatieController$_returnFocusToCanvas$p$0$in() {
        Common.FocusManager.instance().setScope(Common.AFrame.documentFocusID);
    }
}


CommandUI.HeaderSkeleton = function CommandUI_HeaderSkeleton(clientId, resizableContainer) {
    this.$$d_onResize = Function.createDelegate(this, this.onResize);
    this._clientId$0 = clientId;
    this._resizableContainer$0 = resizableContainer;
}
CommandUI.HeaderSkeleton.prototype = {
    _clientId$0: null,
    _resizableContainer$0: null,
    _headerContainer$0: null,
    _elmTopBar1$0: null,
    
    ensureTopBarDomElement: function CommandUI_HeaderSkeleton$ensureTopBarDomElement$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._elmTopBar1$0)) {
            return this._elmTopBar1$0;
        }
        this._ensureHeaderDom$p$0();
        this._elmTopBar1$0.style.display = 'block';
        if (this._resizableContainer$0) {
            this._resizableContainer$0.add_onResize(this.$$d_onResize);
        }
        return this._elmTopBar1$0;
    },
    
    appendTopBarPeripheralElements: function CommandUI_HeaderSkeleton$appendTopBarPeripheralElements$in() {
        this.ensureTopBarDomElement();
        var elmTopRowCenter = document.getElementById(this._clientId$0 + '-' + Common.RibbonPeripheralSection.topRowCenter);
        var elmTopRowRight = document.getElementById(this._clientId$0 + '-' + Common.RibbonPeripheralSection.topRowRight);
        var elmTopRowLeft = document.getElementById(this._clientId$0 + '-' + Common.RibbonPeripheralSection.topRowLeft);
        this._appendTopBarChildControl$p$0(elmTopRowLeft);
        this._appendTopBarChildControl$p$0(elmTopRowCenter);
        this._appendTopBarChildControl$p$0(elmTopRowRight);
        this._scaleHeader$p$0();
    },
    
    onResize: function CommandUI_HeaderSkeleton$onResize$in() {
        this._scaleHeader$p$0();
    },
    
    _scaleHeader$p$0: function CommandUI_HeaderSkeleton$_scaleHeader$p$0$in() {
        if (this._enhancedMobileViewIsEnabled$p$0()) {
            var app = document.getElementById('application');
            app.style.minWidth = '0px';
            var scalingManager = new Common.TopBarScalingManager(this._elmTopBar1$0, null, Common.AFrameworkApplication.get_isRtl());
            scalingManager.scaleNonCuiHeader(this._elmTopBar1$0);
        }
        else if (!Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactSharedHeaderUxEnabled()) {
            Common.RibbonTabScalingActor.scaleNonCuiHeaders(this._elmTopBar1$0, Common.AFrameworkApplication.get_isRtl());
        }
    },
    
    _enhancedMobileViewIsEnabled$p$0: function CommandUI_HeaderSkeleton$_enhancedMobileViewIsEnabled$p$0$in() {
        if (!Common.AFrameworkApplication.appSettingsManager) {
            return false;
        }
        return Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('EnhancedMobileViewIsEnabled');
    },
    
    _ensureHeaderDom$p$0: function CommandUI_HeaderSkeleton$_ensureHeaderDom$p$0$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._headerContainer$0)) {
            return;
        }
        var appHeaderPanel;
        var $$t_1, $$t_2;
        if (($$t_2 = Common.CuiHeaderDomReference.tryEnsuredHeaderPanelInitialized(($$t_1 = {'val': appHeaderPanel}), !Common.AFrameworkApplication.hideHeaderEmbedded, false)), appHeaderPanel = $$t_1.val, $$t_2) {
            this._headerContainer$0 = CommandUI.Utility.createElement('div');
            this._headerContainer$0.className = Common.CuiHeaderDomReference.externalHeaderContainerClass;
            this._headerContainer$0.id = Common.CuiHelper.externalHeaderFullTopBarsId;
            appHeaderPanel.appendChild(this._headerContainer$0);
            this._ensureExternalHeaderCss$p$0();
            if (Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonFlexBoxLayoutEnabled() && !Common.AFrameworkApplication.hideHeaderEmbedded) {
                this._ensureFlexBoxPositioningCss$p$0();
            }
            this._ensureTopBar1$p$0();
        }
    },
    
    _appendTopBarChildControl$p$0: function CommandUI_HeaderSkeleton$_appendTopBarChildControl$p$0$in(elmPeripheral) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(elmPeripheral)) {
            return;
        }
        if (elmPeripheral.parentNode !== this._elmTopBar1$0) {
            this._elmTopBar1$0.appendChild(elmPeripheral);
        }
        elmPeripheral.style.display = 'inline-block';
        CommandUI.Utility._setUnselectable$i(elmPeripheral, true, false);
    },
    
    _ensureTopBar1$p$0: function CommandUI_HeaderSkeleton$_ensureTopBar1$p$0$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmTopBar1$0)) {
            this._elmTopBar1$0 = CommandUI.Utility.createElement('div');
            this._elmTopBar1$0.className = Common.CuiHeaderDomReference.get_topBarOneCssClass();
            this._elmTopBar1$0.style.display = 'none';
            this._headerContainer$0.appendChild(this._elmTopBar1$0);
        }
    },
    
    _ensureExternalHeaderCss$p$0: function CommandUI_HeaderSkeleton$_ensureExternalHeaderCss$p$0$in() {
        Sys.UI.DomElement.addCssClass(this._headerContainer$0, Common.CuiHeaderDomReference.externalHeaderContainerClassToMimicRibbon);
        if (Common.AFrameworkApplication.get_isRtl()) {
            CommandUI.Utility.ensureCSSClassOnElement(this._headerContainer$0, 'cui-rtl');
        }
    },
    
    _ensureFlexBoxPositioningCss$p$0: function CommandUI_HeaderSkeleton$_ensureFlexBoxPositioningCss$p$0$in() {
        Sys.UI.DomElement.addCssClass(this._headerContainer$0, 'FlexBoxLayout');
    }
}


CommandUI.ReactAsyncDispatcher = function CommandUI_ReactAsyncDispatcher() {
}
CommandUI.ReactAsyncDispatcher.prototype = {
    _currentDispatchId$0: 0,
    _firstChunkExecutionTime$0: 0,
    
    dispatchGroupedActions: function CommandUI_ReactAsyncDispatcher$dispatchGroupedActions$in(actions, callback) {
        this._currentDispatchId$0 = (this._currentDispatchId$0 + 1) % 100;
        if (Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('DispatchActionsInRafIsEnabled')) {
            var $$t_5 = this;
            window.requestAnimationFrame(function(_) {
                $$t_5._dispatchActionsInASeparateTask$p$0($$t_5._currentDispatchId$0, actions, callback);
            });
        }
        else if (Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('DispatchActionsInASeparateTaskFromPollForStateUpdateIsEnabled')) {
            this._dispatchActionsInASeparateTask$p$0(this._currentDispatchId$0, actions, callback);
        }
        else if (Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ChunkedReactUpdateIsEnabled')) {
            var dispatchActionsExecutionTimeStart = Common.WindowUtils.getTickCount();
            this._dispatchActionsInChunks$p$0(this._currentDispatchId$0, actions, dispatchActionsExecutionTimeStart, callback, 0);
        }
        else {
            var $$t_6 = this;
            Common.CpuMeterProxy.get_instance().profileFunction(function() {
                appChrome.api.dispatch($$t_6._flatten$p$0(actions));
            }, 'ReactRibbon::PollForStateUpdate::DispatchActions');
        }
    },
    
    _dispatchActionsInASeparateTask$p$0: function CommandUI_ReactAsyncDispatcher$_dispatchActionsInASeparateTask$p$0$in(disptachId, actions, callback) {
        var $$t_5 = this;
        window.setTimeout(function() {
            Common.CpuMeterProxy.get_instance().profileFunction(function() {
                var dispatchActionsExecutionTimeStart = Common.WindowUtils.getTickCount();
                if (Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ChunkedReactUpdateIsEnabled')) {
                    $$t_5._dispatchActionsInChunks$p$0(disptachId, actions, dispatchActionsExecutionTimeStart, callback, 0);
                }
                else {
                    appChrome.api.dispatch($$t_5._flatten$p$0(actions));
                    var dispatchActionsExecutionTime = Common.WindowUtils.getTickCount() - dispatchActionsExecutionTimeStart;
                    callback(dispatchActionsExecutionTime);
                }
            }, 'ReactRibbon::PollForStateUpdate::DispatchActionsInASeparateTask');
        }, 0);
    },
    
    _dispatchActionsInChunks$p$0: function CommandUI_ReactAsyncDispatcher$_dispatchActionsInChunks$p$0$in(dispatchId, actions, originalStartTime, onAfterCompletionCallback, previousLimit) {
        if (this._currentDispatchId$0 !== dispatchId) {
            return;
        }
        var nextIndex = previousLimit + Math.min(CommandUI.ReactAsyncDispatcher._minGroupsToProcess, Math.ceil(actions.length / CommandUI.ReactAsyncDispatcher._numberOfReactUpdateChunks));
        appChrome.api.dispatch(this._flatten$p$0(actions.slice(previousLimit, nextIndex)));
        if (!previousLimit) {
            this._firstChunkExecutionTime$0 = Common.WindowUtils.getTickCount();
        }
        if (nextIndex >= actions.length) {
            Diag.ULS.sendTraceTag(590960473, 340, 50, 'Time between first and last chunks is {0}', Common.WindowUtils.getTickCount() - this._firstChunkExecutionTime$0);
            onAfterCompletionCallback(Common.WindowUtils.getTickCount() - originalStartTime);
        }
        else if (Common.WindowUtils.getTickCount() - originalStartTime > CommandUI.ReactAsyncDispatcher._asyncDispatchTimeout) {
            appChrome.api.dispatch(this._flatten$p$0(actions.slice(previousLimit, nextIndex)));
        }
        else {
            var $$t_8 = this;
            window.requestAnimationFrame(function(_) {
                window.setTimeout(function() {
                    $$t_8._dispatchActionsInChunks$p$0(dispatchId, actions, originalStartTime, onAfterCompletionCallback, nextIndex);
                }, 0);
            });
        }
    },
    
    _flatten$p$0: function CommandUI_ReactAsyncDispatcher$_flatten$p$0$in(groupedActions) {
        var flattened = new Array(0);
        for (var $$arr_2 = groupedActions, $$len_3 = $$arr_2.length, $$idx_4 = 0; $$idx_4 < $$len_3; ++$$idx_4) {
            var group = $$arr_2[$$idx_4];
            flattened.push.apply(flattened, group);
        }
        return flattened;
    }
}


CommandUI.ReactContextualUILauncher = function CommandUI_ReactContextualUILauncher(reactRoot, externalCommandDefinitionMapping) {
    this.$$d__onContextualUIMouseDown$p$0 = Function.createDelegate(this, this._onContextualUIMouseDown$p$0);
    this._reactRoot$0 = reactRoot;
    this._externalCommandDefinitionMapping$0 = externalCommandDefinitionMapping;
    Common.MouseInputManager.get_instance().registerHandler(Common.EventNames.mouseDown, this._getContextualUIContainer$p$0(), this.$$d__onContextualUIMouseDown$p$0);
    if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('InitializeContextualUIAftereHeaderInteractiveIsEnabled') && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactSharedHeaderUxEnabled()) {
        var $$t_2 = this;
        Common.App.AppLifecycleManager.get_instance().executeWhen(Common.App.AppInitializationStatus.suiteHeaderInteractive, function() {
            $$t_2._initializeContextualUI$p$0($$t_2._getContextualUIContainer$p$0());
        }, 3);
    }
    else {
        var $$t_3 = this;
        Common.App.AppLifecycleManager.get_instance().executeWhen(Common.App.AppInitializationStatus.chromeReady, function() {
            $$t_3._initializeContextualUI$p$0($$t_3._getContextualUIContainer$p$0());
        }, 3);
    }
}
CommandUI.ReactContextualUILauncher.prototype = {
    _reactRoot$0: null,
    _externalCommandDefinitionMapping$0: null,
    _hasInitialized$0: false,
    _waitingForRenderToFinish$0: false,
    _contextualUIContainer$0: null,
    _$$pf_IsFloatieVisible$p$0: false,
    
    get_isFloatieVisible: function CommandUI_ReactContextualUILauncher$get_isFloatieVisible$in() {
        return this._$$pf_IsFloatieVisible$p$0;
    },
    
    set_isFloatieVisible: function CommandUI_ReactContextualUILauncher$set_isFloatieVisible$in(value) {
        this._$$pf_IsFloatieVisible$p$0 = value;
        return value;
    },
    
    get__isReady$p$0: function CommandUI_ReactContextualUILauncher$get__isReady$p$0$in() {
        return (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('InitializeContextualUIAftereHeaderInteractiveIsEnabled') && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactSharedHeaderUxEnabled()) ? Common.App.AppLifecycleManager.get_instance().isCompleted(Common.App.AppInitializationStatus.suiteHeaderInteractive) : Common.App.AppLifecycleManager.get_instance().isCompleted(Common.App.AppInitializationStatus.chromeReady);
    },
    
    _unableToShowUI$p$0: function CommandUI_ReactContextualUILauncher$_unableToShowUI$p$0$in(launchingUI) {
        if (!this.get__isReady$p$0() || this._waitingForRenderToFinish$0) {
            this._logUnableToLaunchContextualUI$p$0();
            return true;
        }
        this._waitingForRenderToFinish$0 = true;
        var actionId = Common.CommonCommands.doNothing;
        switch (launchingUI) {
            case CommandUI.ReactContextualUILauncher._contextualUIType.contextMenu:
                actionId = Common.CommonCommands.showContextMenu;
                break;
            case 0:
                actionId = Common.CommonCommands.showFloatie;
                break;
            case CommandUI.ReactContextualUILauncher._contextualUIType.contextMenuAndFloatie:
                actionId = Common.CommonCommands.showContextMenuWithFloatie;
                break;
        }
        var $$t_4 = this;
        window.requestAnimationFrame(function(_) {
            window.setTimeout(function() {
                $$t_4._waitingForRenderToFinish$0 = false;
                Common.LoggerUtils.logUserAction(actionId, true, '', 0, 0, 0, null);
            }, 0);
        });
        return false;
    },
    
    showFloatie: function CommandUI_ReactContextualUILauncher$showFloatie$in(point, activeFloatieGroups, inputMethod) {
        if (this._unableToShowUI$p$0(0)) {
            return;
        }
        var $$t_9 = this;
        this._setupContextualUI$p$0(activeFloatieGroups).then(function() {
            var floatieLayout = {};
            floatieLayout['target'] = point;
            Common.UISurfaces.getContextualAPIAsync().then(function(contextualUIAPI) {
                appChrome.api.dispatch(contextualUIAPI.showFloatie(floatieLayout, inputMethod));
                $$t_9.set_isFloatieVisible(true);
                return null;
            });
        });
    },
    
    showContextMenu: function CommandUI_ReactContextualUILauncher$showContextMenu$in(point, inputMethod, id, direction) {
        if (this._unableToShowUI$p$0(CommandUI.ReactContextualUILauncher._contextualUIType.contextMenu)) {
            return;
        }
        var $$t_A = this;
        this._setupContextualUI$p$0(null).then(function() {
            var contextMenuLayout = {};
            contextMenuLayout['target'] = point;
            if (direction) {
                contextMenuLayout['directionalHint'] = direction;
            }
            Common.UISurfaces.getContextualAPIAsync().then(function(contextualUIAPI) {
                appChrome.api.dispatch(contextualUIAPI.showContextMenu(contextMenuLayout, inputMethod, id));
                return null;
            });
        });
    },
    
    showContextMenuAndFloatie: function CommandUI_ReactContextualUILauncher$showContextMenuAndFloatie$in(point, activeFloatieGroups, inputMethod, id) {
        if (this._unableToShowUI$p$0(CommandUI.ReactContextualUILauncher._contextualUIType.contextMenuAndFloatie)) {
            return;
        }
        var $$t_B = this;
        this._setupContextualUI$p$0(activeFloatieGroups).then(function() {
            var floatieLayout = {};
            floatieLayout['target'] = point;
            var contextMenuLayout = {};
            contextMenuLayout['target'] = point;
            Common.UISurfaces.getContextualAPIAsync().then(function(contextualUIAPI) {
                appChrome.api.dispatch(contextualUIAPI.showContextualUI(floatieLayout, contextMenuLayout, inputMethod, false, id));
                $$t_B.set_isFloatieVisible(true);
                return null;
            });
        });
    },
    
    _logUnableToLaunchContextualUI$p$0: function CommandUI_ReactContextualUILauncher$_logUnableToLaunchContextualUI$p$0$in() {
        Diag.ULS.sendTraceTag(51431558, 340, 15, 'Unable to launch contextual ui because ribbon hasn\'t loaded yet');
    },
    
    dismissContextMenu: function CommandUI_ReactContextualUILauncher$dismissContextMenu$in() {
        if (!this.get__isReady$p$0() || !Common.UISurfaces.isLoaded()) {
            return;
        }
        var $$t_5 = this;
        Common.UISurfaces.getContextualAPIAsync().then(function(contextualUIAPI) {
            appChrome.api.dispatch(contextualUIAPI.hideContextMenu());
            return null;
        });
    },
    
    dismissFloatie: function CommandUI_ReactContextualUILauncher$dismissFloatie$in() {
        if (!this.get__isReady$p$0() || !Common.UISurfaces.isLoaded()) {
            return;
        }
        var $$t_5 = this;
        Common.UISurfaces.getContextualAPIAsync().then(function(contextualUIAPI) {
            $$t_5.set_isFloatieVisible(false);
            appChrome.api.dispatch(contextualUIAPI.hideFloatie());
            return null;
        });
    },
    
    dismissContextualUI: function CommandUI_ReactContextualUILauncher$dismissContextualUI$in() {
        if (!this.get__isReady$p$0() || !Common.UISurfaces.isLoaded()) {
            return;
        }
        var $$t_5 = this;
        Common.UISurfaces.getContextualAPIAsync().then(function(contextualUIAPI) {
            appChrome.api.dispatch(contextualUIAPI.hideContextualUI());
            $$t_5.set_isFloatieVisible(false);
            return null;
        });
    },
    
    _initializeContextualUI$p$0: function CommandUI_ReactContextualUILauncher$_initializeContextualUI$p$0$in(container) {
        var $$t_6 = this;
        return Common.UISurfaces.getContextualAPIAsync().then(function(contextualUIAPI) {
            if (!$$t_6._hasInitialized$0) {
                contextualUIAPI.initializeContextualUI(container);
                $$t_6._hasInitialized$0 = true;
            }
            return null;
        });
    },
    
    _setupContextualUI$p$0: function CommandUI_ReactContextualUILauncher$_setupContextualUI$p$0$in(activeFloatieGroups) {
        if (!this._hasInitialized$0) {
            var $$t_6 = this;
            return this._initializeContextualUI$p$0(this._getContextualUIContainer$p$0()).then(function(_) {
                $$t_6._setActiveFloatieGroups$p$0(activeFloatieGroups);
                return null;
            });
        }
        this._setActiveFloatieGroups$p$0(activeFloatieGroups);
        return Promise.resolve(null);
    },
    
    _setActiveFloatieGroups$p$0: function CommandUI_ReactContextualUILauncher$_setActiveFloatieGroups$p$0$in(activeFloatieGroups) {
        if (!activeFloatieGroups || !activeFloatieGroups.length) {
            return;
        }
        var actions = new Array(0);
        actions.push(appChrome.actions.setActiveFloatieGroups(activeFloatieGroups));
        appChrome.api.dispatch(actions);
        var floatieActions = new Array(0);
        var $$t_8 = this;
        Common.UISurfaces.getContextualAPIAsync().then(function(contextualUIAPI) {
            floatieActions.push.apply(floatieActions, $$t_8._reactRoot$0.get_reactRibbonRootPoller().getUpdateActionsForCommands(contextualUIAPI.selectors.getFloatieOnlyControlsMap(), Common.UILocation.floatie));
            if (floatieActions.length > 0) {
                appChrome.api.dispatch(floatieActions);
            }
            return null;
        });
    },
    
    _getContextualUIContainer$p$0: function CommandUI_ReactContextualUILauncher$_getContextualUIContainer$p$0$in() {
        if (this._contextualUIContainer$0) {
            return this._contextualUIContainer$0;
        }
        this._contextualUIContainer$0 = CommandUI.Utility.createElement('div');
        this._contextualUIContainer$0.id = 'ReactContextualUIDiv';
        this._contextualUIContainer$0.style.position = 'absolute';
        this._contextualUIContainer$0.style.zIndex = 1001;
        document.body.insertBefore(this._contextualUIContainer$0, document.body.firstChild);
        return this._contextualUIContainer$0;
    },
    
    _onContextualUIMouseDown$p$0: function CommandUI_ReactContextualUILauncher$_onContextualUIMouseDown$p$0$in(args) {
        if (args.innerEvent && args.innerEvent.target && args.innerEvent.target.tagName.toLowerCase() === 'input') {
            Common.FocusManager.instance().scopeChanged('ribbon');
        }
        return false;
    }
}


CommandUI.ReactContextualUILauncher._contextualUIType = function() {}
CommandUI.ReactContextualUILauncher._contextualUIType.prototype = {
    floatie: 0, 
    contextMenu: 1, 
    contextMenuAndFloatie: 2
}
CommandUI.ReactContextualUILauncher._contextualUIType.registerEnum('CommandUI.ReactContextualUILauncher._contextualUIType', false);


CommandUI.ReactExecuteCommandHandler = function CommandUI_ReactExecuteCommandHandler(ribbonRoot, reactRibbonRootPoller, externalUICommandDefinitionMapping, focusManager, modalContainer, ribbonSQMInformation, fileMenuSQMInformation, actionManager, appSettingsManager, systemInitiatedFeedback, PRICommandHandler) {
    this.$$d__updatePreviewGalleryMenuState$p$0 = Function.createDelegate(this, this._updatePreviewGalleryMenuState$p$0);
    this.$$d__updateInkFlyoutAnchorMenuState$p$0 = Function.createDelegate(this, this._updateInkFlyoutAnchorMenuState$p$0);
    this.$$d__updateFlyoutAnchorMenuState$p$0 = Function.createDelegate(this, this._updateFlyoutAnchorMenuState$p$0);
    this.$$d__updateStatefulSplitButtonMenuState$p$0 = Function.createDelegate(this, this._updateStatefulSplitButtonMenuState$p$0);
    this.$$d__updateSplitButtonMenuState$p$0 = Function.createDelegate(this, this._updateSplitButtonMenuState$p$0);
    this._ribbonRoot$0 = ribbonRoot;
    this._reactRibbonRootPoller$0 = reactRibbonRootPoller;
    this._rootCommandHandler$0 = $$as(Common.IRootCommandHandler, ribbonRoot);
    Common.Debug.assertStringTag(!!this._rootCommandHandler$0, 'Are you passing the wrong react ribbon root to the command handler?', 24156187);
    this._externalUICommandDefinitionMapping$0 = externalUICommandDefinitionMapping;
    this._focusManager$0 = focusManager;
    if (modalContainer) {
        this._modalDiv$0 = new Common.ReactModalDiv(modalContainer, focusManager);
    }
    this._ribbonSQMInformation$0 = ribbonSQMInformation;
    this._fileMenuSQMInformation$0 = fileMenuSQMInformation;
    this._systemInitiatedFeedback$0 = systemInitiatedFeedback;
    this._actionManager$0 = actionManager;
    this._lastPollTimes$0 = {};
    this._appSettingsManager$0 = appSettingsManager;
    this._PRICommandHandler$0 = PRICommandHandler;
}
CommandUI.ReactExecuteCommandHandler.prototype = {
    _ribbonRoot$0: null,
    _rootCommandHandler$0: null,
    _externalUICommandDefinitionMapping$0: null,
    _focusManager$0: null,
    _modalDiv$0: null,
    _ribbonSQMInformation$0: null,
    _fileMenuSQMInformation$0: null,
    _actionManager$0: null,
    _reactRibbonRootPoller$0: null,
    _lastPollTimes$0: null,
    _appSettingsManager$0: null,
    _systemInitiatedFeedback$0: null,
    _PRICommandHandler$0: null,
    _handlePersonaCardOpenCloseIsEnabled$0: null,
    
    get__isHandlePersonaCardOpenCloseEnabled$p$0: function CommandUI_ReactExecuteCommandHandler$get__isHandlePersonaCardOpenCloseEnabled$p$0$in() {
        if (!(this._handlePersonaCardOpenCloseIsEnabled$0 != null)) {
            Common.AFrameworkApplication.logUniqueFlightedSettingUsage('Microsoft.Office.Web.SessionSettings.IWacWordHandlePersonaCardOpenCloseSettings');
            if (Common.AFrameworkApplication.appSettingsManager) {
                this._handlePersonaCardOpenCloseIsEnabled$0 = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('HandlePersonaCardOpenCloseIsEnabled');
            }
            else {
                this._handlePersonaCardOpenCloseIsEnabled$0 = false;
            }
        }
        return this._handlePersonaCardOpenCloseIsEnabled$0;
    },
    
    get__selectorsAreReady$p$0: function CommandUI_ReactExecuteCommandHandler$get__selectorsAreReady$p$0$in() {
        return !!window.appChrome && !!appChrome.selectors;
    },
    
    executeCommand: function CommandUI_ReactExecuteCommandHandler$executeCommand$in(simplifiedUxCommand, commandHandlerData) {
        if (Common.TaskManager.get_instance().get_isYielding()) {
            Common.Debug.log('React.ExecuteCommandHandler.ExecuteCommand: TaskManager.Instance.IsYielding, simplifiedUxCommand: {0}, commandHandlerData.ModelType: {1}, commandHandlerData.ModelType.Payload: {2}', Common.DebugLogCategory.ribbon, Common.LogLevel.warning, simplifiedUxCommand, commandHandlerData.modelType, Common.DictionaryUtils.toJSON(commandHandlerData.payload));
            Diag.ULS.sendTraceTag(38293640, 207, 15, 'React.ExecuteCommandHandler.ExecuteCommand: TaskManager.Instance.IsYielding, simplifiedUxCommand: {0}, commandHandlerData.ModelType: {1}, commandHandlerData.ModelType.Payload: {2}', simplifiedUxCommand, commandHandlerData.modelType, Common.DictionaryUtils.toJSON(commandHandlerData.payload));
            if (this._appSettingsManager$0.getBooleanAppSetting('WordEditorReactExecuteYieldReturnIsEnabled')) {
                return;
            }
        }
        Common.Debug.assertStringTag(!!commandHandlerData, 'Are you calling this from the correct bound callback and react javascript is loaded?', 24142613);
        if (commandHandlerData) {
            var command = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId(simplifiedUxCommand);
            var model = commandHandlerData.modelType;
            if (this._PRICommandHandler$0) {
                this._PRICommandHandler$0.logCommandExecuted(simplifiedUxCommand, commandHandlerData);
            }
            if (!command) {
                this._executeCommandWithNoCommandMetadata$p$0(simplifiedUxCommand, model, commandHandlerData);
            }
            else {
                this._executeCommandWithCommandMetadata$p$0(simplifiedUxCommand, command, model, commandHandlerData);
            }
            this._manageAppFocus$p$0(simplifiedUxCommand, commandHandlerData);
        }
    },
    
    _executeCommandWithNoCommandMetadata$p$0: function CommandUI_ReactExecuteCommandHandler$_executeCommandWithNoCommandMetadata$p$0$in(simplifiedUxCommand, model, commandHandlerData) {
        switch (model) {
            case 'GalleryModel':
            case 'PreviewGalleryModel':
                this._executeGalleryButtonCommand$p$0(commandHandlerData, simplifiedUxCommand);
                break;
            default:
                Common.Debug.assertNotReachedStringTag(String.format('The SimplifiedUxCommand {0} and ModelType {1} could not handled by execute command. Was the command mapped correctly?', simplifiedUxCommand, model), 24932678);
                return;
        }
    },
    
    _updateParametersForButton$p$0: function CommandUI_ReactExecuteCommandHandler$_updateParametersForButton$p$0$in(parameters, command, commandHandlerData, simplifiedUxCommand, commandIdToExecute) {
        var newCommandIdToExecute = commandIdToExecute;
        if (commandHandlerData.payload) {
            var buttonPayload = commandHandlerData.payload['type'];
            switch (buttonPayload) {
                case 'CoauthorMenuPayload':
                    parameters['MenuItemId'] = commandHandlerData.payload['coauthorId'];
                    break;
                case 'ButtonPayload':
                    parameters['MenuItemId'] = command.get_menuItemId();
                    parameters['CommandValueId'] = commandHandlerData.payload['commandValueId'];
                    this._closeAllMenus$p$0();
                    break;
                case 'ButtonPreviewPayload':
                    parameters['MenuItemId'] = command.get_menuItemId();
                    parameters['CommandValueId'] = commandHandlerData.payload['commandValueId'];
                    newCommandIdToExecute = command.get_commandPreviewId();
                    break;
                case 'ButtonRevertPreviewPayload':
                    parameters['MenuItemId'] = command.get_menuItemId();
                    parameters['CommandValueId'] = commandHandlerData.payload['commandValueId'];
                    newCommandIdToExecute = command.get_commandRevertId();
                    break;
                default:
                    parameters['MenuItemId'] = command.get_menuItemId();
                    break;
            }
        }
        else {
            parameters['MenuItemId'] = command.get_menuItemId();
        }
        parameters['SourceControlId'] = simplifiedUxCommand;
        return newCommandIdToExecute;
    },
    
    _updateParametersForTellMe$p$0: function CommandUI_ReactExecuteCommandHandler$_updateParametersForTellMe$p$0$in(commandIdToExecute, commandHandlerData, parameters) {
        if (commandHandlerData.payload) {
            var commandPayload = commandHandlerData.payload['type'];
            switch (commandPayload) {
                case 'MenuOpenPayload':
                    var tellMeMenuCommand = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId('TellMeLogMenuOpen');
                    commandIdToExecute = tellMeMenuCommand.get_commandId();
                    break;
                case 'MenuClosePayload':
                    var tellMeMenuCommand = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId('TellMeLogMenuClose');
                    commandIdToExecute = tellMeMenuCommand.get_commandId();
                    break;
                case 'TellMeMenuItemExecuted':
                    parameters['CommandId'] = commandHandlerData.payload['executedControl'];
                    parameters['ControlId'] = commandHandlerData.payload['executedControl'];
                    parameters['CloseAllMenus'] = true;
                    this._closeAllMenus$p$0();
                    break;
                case 'TellMeSearchResultChangePayload':
                    parameters['Value'] = commandHandlerData.payload['searchText'];
                    break;
                case 'SmartLookupPayload':
                    parameters['CommandValueId'] = commandHandlerData.payload['selectionContextJson'];
                    break;
            }
        }
        return commandIdToExecute;
    },
    
    _executeCommandWithCommandMetadata$p$0: function CommandUI_ReactExecuteCommandHandler$_executeCommandWithCommandMetadata$p$0$in(simplifiedUxCommand, command, model, commandHandlerData) {
        var polledMenuAfterPopulate = this._populateControlMenuOnExecute$p$0(commandHandlerData, model);
        var commandIdToExecute = command.get_commandId();
        var parameters = {};
        switch (model) {
            case 'SplitButtonModel':
                if (this._handleMenuOpenClosePayload$p$0(commandHandlerData.payload, this.$$d__updateSplitButtonMenuState$p$0, polledMenuAfterPopulate)) {
                    return;
                }
                parameters['MenuItemId'] = command.get_menuItemId();
                this._setToggledParameter$p$0(commandHandlerData, parameters);
                break;
            case 'StatefulSplitButtonModel':
                if (this._handleMenuOpenClosePayload$p$0(commandHandlerData.payload, this.$$d__updateStatefulSplitButtonMenuState$p$0, polledMenuAfterPopulate)) {
                    return;
                }
                var statefulData = commandHandlerData.payload['statefulData'];
                var statefulMode = commandHandlerData.payload['statefulMode'];
                if (statefulMode === 'color') {
                    parameters['Color'] = statefulData;
                }
                else if (statefulMode === 'icon') {
                    var statefulCommand = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId(statefulData);
                    if (statefulCommand) {
                        parameters['MenuItemId'] = statefulCommand.get_menuItemId();
                    }
                    else {
                        Common.Debug.assertNotReachedStringTag(String.format('Could not find mapping for {0} when executing stateful command {1}', statefulData, simplifiedUxCommand), 36808537);
                    }
                }
                else {
                    Common.Debug.assertNotReachedStringTag(String.format('Stateful split button mode {0} is unsupported', statefulMode), 36808538);
                }
                break;
            case 'FileMenu':
                parameters['MenuItemId'] = command.get_menuItemId();
                parameters['SourceControlId'] = simplifiedUxCommand;
                if (commandHandlerData.payload && commandHandlerData.payload['type'] === 'FileMenuPageSwitchPayload') {
                    this._handleFileMenuPageSwitch$p$0(commandIdToExecute, commandHandlerData.payload, simplifiedUxCommand);
                }
                break;
            case 'TellMe':
                commandIdToExecute = this._updateParametersForTellMe$p$0(commandIdToExecute, commandHandlerData, parameters);
                parameters['SourceControlId'] = simplifiedUxCommand;
                break;
            case 'ButtonModel':
                if (commandHandlerData.payload && commandHandlerData.payload['type'] === 'TabSwitchPayload') {
                    this._handleTabSwitch$p$0(parameters, commandHandlerData);
                }
                else {
                    commandIdToExecute = this._updateParametersForButton$p$0(parameters, command, commandHandlerData, simplifiedUxCommand, commandIdToExecute);
                }
                break;
            case 'CompoundButtonModel':
                parameters['MenuItemId'] = command.get_menuItemId();
                parameters['CommandValueId'] = commandHandlerData.payload['commandValueId'];
                parameters['SourceControlId'] = simplifiedUxCommand;
                this._setToggledParameter$p$0(commandHandlerData, parameters);
                this._closeAllMenus$p$0();
                break;
            case 'ToggleButtonModel':
            case 'InkButtonModel':
                parameters['MenuItemId'] = command.get_menuItemId();
                parameters['SourceControlId'] = simplifiedUxCommand;
                this._setToggledParameter$p$0(commandHandlerData, parameters);
                this._closeAllMenus$p$0();
                break;
            case 'ComboBoxModel':
                var comboBoxPayload = commandHandlerData.payload['type'];
                switch (comboBoxPayload) {
                    case 'MenuOpenPayload':
                    case 'MenuPopulatePayload':
                        if (this._shouldPoll$p$0(commandHandlerData.payload['launcherId'], polledMenuAfterPopulate)) {
                            var control = {};
                            control[commandHandlerData.payload['launcherId']] = model;
                            this._reactRibbonRootPoller$0.pollForStateAndUpdateCommands(control, Common.AppChromeUtils.getUILocationFromPayload(commandHandlerData.payload));
                            this._lastPollTimes$0[simplifiedUxCommand] = new Date();
                        }
                        return;
                    case 'MenuClosePayload':
                        return;
                    case 'ComboBoxPayload':
                    case 'ComboBoxPreviewPayload':
                        var newValue = commandHandlerData.payload['newValue'];
                        if (!newValue) {
                            return;
                        }
                        if (newValue.value) {
                            parameters[CommandUI.Controls.ComboBoxCommandProperties.Value] = newValue.value;
                            parameters[CommandUI.Controls.ComboBoxCommandProperties.IsFreeForm] = true;
                        }
                        else {
                            parameters[CommandUI.Controls.ComboBoxCommandProperties.Value] = newValue.text;
                            parameters['MenuItemId'] = newValue.key;
                            parameters['CommandValueId'] = newValue.commandValueId;
                        }
                        if (comboBoxPayload === 'ComboBoxPreviewPayload') {
                            commandIdToExecute = command.get_commandPreviewId();
                        }
                        break;
                    case 'ComboBoxRevertPreviewPayload':
                        commandIdToExecute = command.get_commandRevertId();
                        break;
                    default:
                        Common.Debug.assertNotReachedStringTag(String.format('Payload {0} is not valid for ComboBox.', comboBoxPayload), 36497375);
                        return;
                }
                break;
            case 'FlyoutAnchorModel':
                this._handleMenuOpenClosePayload$p$0(commandHandlerData.payload, this.$$d__updateFlyoutAnchorMenuState$p$0, polledMenuAfterPopulate);
                parameters['launcherId'] = commandHandlerData.payload['launcherId'];
                break;
            case 'InkFlyoutAnchorModel':
                this._handleMenuOpenClosePayload$p$0(commandHandlerData.payload, this.$$d__updateInkFlyoutAnchorMenuState$p$0, polledMenuAfterPopulate);
                parameters['launcherId'] = commandHandlerData.payload['launcherId'];
                break;
            case 'ColorPickerModel':
                var colorPickerpayload = commandHandlerData.payload['type'];
                switch (colorPickerpayload) {
                    case 'ColorPickerPayload':
                        parameters[CommandUI.Controls.ColorPickerCommandProperties.Color] = commandHandlerData.payload['selectedColorId'];
                        break;
                    case 'ColorPickerPreviewPayload':
                        commandIdToExecute = command.get_commandPreviewId();
                        parameters[CommandUI.Controls.ColorPickerCommandProperties.Color] = commandHandlerData.payload['selectedColorId'];
                        break;
                    case 'ColorPickerRevertPreviewPayload':
                        commandIdToExecute = command.get_commandRevertId();
                        break;
                    default:
                        Common.Debug.assertNotReachedStringTag(String.format('Payload {0} is not valid for Color Picker.', colorPickerpayload), 36311900);
                        return;
                }
                break;
            case 'SpinButtonModel':
                parameters[CommandUI.Controls.SpinnerCommandProperties.Number] = commandHandlerData.payload['value'];
                parameters[CommandUI.Controls.SpinnerCommandProperties.UnitType] = Common.UnitConversion.convertStringToUnitType((commandHandlerData.payload['unitType']).toLowerCase());
                parameters[CommandUI.Controls.SpinnerCommandProperties.Text] = commandHandlerData.payload['reservedValue'];
                break;
            case 'SliderModel':
                parameters[CommandUI.Controls.SliderCommandProperties.Value] = commandHandlerData.payload['value'];
                break;
            case 'InsertTableModel':
                parameters[CommandUI.Controls.InsertTableCommandProperties.Rows] = commandHandlerData.payload['rows'];
                parameters[CommandUI.Controls.InsertTableCommandProperties.Columns] = commandHandlerData.payload['columns'];
                break;
            case 'CheckboxModel':
                parameters[CommandUI.Controls.ToggleButtonCommandProperties.On] = commandHandlerData.payload['checked'];
                parameters['MenuItemId'] = command.get_menuItemId();
                break;
            case 'PreviewGalleryModel':
                if (this._handleMenuOpenClosePayload$p$0(commandHandlerData.payload, this.$$d__updatePreviewGalleryMenuState$p$0, polledMenuAfterPopulate)) {
                    parameters['launcherId'] = commandHandlerData.payload['launcherId'];
                    break;
                }
                this._executeGalleryButtonCommand$p$0(commandHandlerData, simplifiedUxCommand);
                return;
            case 'DocumentTitleModel':
                var dttPayload = commandHandlerData.payload['type'];
                switch (dttPayload) {
                    case 'DocumentTitleRenamePayload':
                        parameters['getNewDocumentTitle'] = commandHandlerData.payload['getNewDocumentTitle'];
                        break;
                    case 'MenuOpenPayload':
                        var control = {};
                        control[commandHandlerData.payload['launcherId']] = model;
                        this._reactRibbonRootPoller$0.pollForStateAndUpdateCommands(control, Common.AppChromeUtils.getUILocationFromPayload(commandHandlerData.payload));
                        this._lastPollTimes$0[simplifiedUxCommand] = new Date();
                        return;
                    case 'MenuClosePayload':
                        return;
                    default:
                        Common.Debug.assertNotReachedStringTag(String.format('Payload {0} is not valid for DTT.', dttPayload), 39707531);
                        return;
                }
                break;
            case 'MRUCompoundButtonModel':
                parameters['MenuItemId'] = commandHandlerData.payload['url'];
                this._logFileMenuMRUExecution$p$0(commandHandlerData.payload['pageId']);
                break;
            case 'NewBlankDocumentModel':
            case 'CustomTemplateModel':
                parameters['MenuItemId'] = commandHandlerData.payload['assetId'];
                parameters['SourceControlId'] = simplifiedUxCommand;
                this._logFileMenuTemplateExecution$p$0(commandHandlerData.payload['pageId']);
                break;
            case 'CoauthorGallery':
                parameters['RenderTime'] = commandHandlerData.triggerTime;
                break;
            case 'PeopleWell':
                parameters['RenderTime'] = commandHandlerData.triggerTime;
                break;
            case 'SyncStatus':
                parameters['SourceControlId'] = simplifiedUxCommand;
                break;
            case 'InputBoxModel':
                parameters['Text'] = commandHandlerData.payload['newValue'];
                break;
            case 'PersonaButtonModel':
                if (this.get__isHandlePersonaCardOpenCloseEnabled$p$0()) {
                    this._handlePersonaCardOpenClose$p$0(commandHandlerData.payload);
                }
                break;
            default:
                Common.Debug.assertNotReachedStringTag(String.format('The ModelType {0} is not handled by execute command.', model), 24402131);
                return;
        }
        if (!commandIdToExecute || this._isShadowMenuOpen$p$0(commandHandlerData.payload)) {
            return;
        }
        if (!parameters['CommandValueId']) {
            parameters['CommandValueId'] = parameters['MenuItemId'];
        }
        if (command.get_legacyControlId()) {
            parameters['LegacyId'] = command.get_legacyControlId();
        }
        if (!parameters['SourceControlId']) {
            parameters['SqmControlId'] = simplifiedUxCommand;
        }
        if (commandHandlerData.payload && !CommandUI.ScriptUtility.isNullOrUndefined(commandHandlerData.payload['shouldTakeFocus'])) {
            parameters[Common.ReactRibbonConstants.shouldCanvasTakeFocus] = commandHandlerData.payload['shouldTakeFocus'];
        }
        var inputMethod = this._addInputMethodToParameters$p$0(commandHandlerData, parameters);
        var $$t_I = this;
        this._rootCommandHandler$0.executeCommand(commandIdToExecute, parameters, this._getSelectedTabId$p$0(), inputMethod, true, function(response) {
            $$t_I._moveFocusAfterCommandExecution$p$0(parameters, simplifiedUxCommand);
        }, this._getTelemetryData$p$0(commandHandlerData), Common.AppChromeUtils.getUILocationFromPayload(commandHandlerData.payload));
    },
    
    _addInputMethodToParameters$p$0: function CommandUI_ReactExecuteCommandHandler$_addInputMethodToParameters$p$0$in(commandHandlerData, parameters) {
        var inputMethod = Common.InputManager.InputMethod.mouse;
        if (commandHandlerData.payload && (('inputMethod') in commandHandlerData.payload) && commandHandlerData.payload['inputMethod']) {
            inputMethod = commandHandlerData.payload['inputMethod'];
            parameters[Common.ReactRibbonConstants.inputMethod] = inputMethod;
        }
        return inputMethod;
    },
    
    _moveFocusAfterCommandExecution$p$0: function CommandUI_ReactExecuteCommandHandler$_moveFocusAfterCommandExecution$p$0$in(parameters, simplifiedUxCommand) {
        if (this._focusManager$0 && this._shouldMoveFocus$p$0(parameters)) {
            var aFrame = $$as(Common.AFrame, Common.AFrameworkApplication.get_activeFrame());
            if (!this._focusManager$0.get_currentScope() && aFrame) {
                var payloadString = 'null';
                if (parameters) {
                    var value = parameters['Value'];
                    delete parameters.Value;
                    payloadString = Common.DictionaryUtils.toJSON(parameters);
                    if (!CommandUI.ScriptUtility.isNullOrUndefined(value)) {
                        parameters['Value'] = value;
                    }
                }
                Diag.ULS.sendTraceTag(39359317, 207, 50, 'Excel React unexpectly calling the callback with, simplifiedUxCommand: {0}, commandHandlerData.ModelType.Payload: {1}, focus scope name: {2}', simplifiedUxCommand, payloadString, aFrame.get_ribbonFocusScopeName());
            }
            this._focusManager$0.focusLastEditableSurface();
            if (((Common.ReactRibbonConstants.inputMethod) in parameters) && parameters[Common.ReactRibbonConstants.inputMethod] === Common.InputManager.InputMethod.keyboard) {
                Common.ShyRibbon.changeShyRibbonState(Common.PopOverState.expanded, 0);
            }
        }
    },
    
    _shouldMoveFocus$p$0: function CommandUI_ReactExecuteCommandHandler$_shouldMoveFocus$p$0$in(parameters) {
        return !!parameters && !CommandUI.ScriptUtility.isNullOrUndefined(parameters[Common.ReactRibbonConstants.shouldCanvasTakeFocus]) && parameters[Common.ReactRibbonConstants.shouldCanvasTakeFocus];
    },
    
    _handleTabSwitch$p$0: function CommandUI_ReactExecuteCommandHandler$_handleTabSwitch$p$0$in(parameters, commandHandlerData) {
        this._ribbonRoot$0.pollForStateAndUpdate();
        if (this._ribbonSQMInformation$0 && this._actionManager$0) {
            var props = {};
            props[Common.RibbonSQMProperties.tabId] = commandHandlerData.payload['tabId'];
            this._actionManager$0.processActionWithData(Common.CommonCommands.reportTabSwitch, 2, props, this._getTelemetryData$p$0(commandHandlerData));
        }
        var tabId = commandHandlerData.payload['tabId'];
        parameters['NewContextId'] = tabId;
        parameters['NewContextCommand'] = this._externalUICommandDefinitionMapping$0.getTabCommandByExternalUxId(tabId);
        Diag.ULS.sendTraceTag(39879004, 340, 50, 'HandleTabSwitch tabId: ' + tabId);
        if (this._systemInitiatedFeedback$0 && tabId) {
            var tabIdActivity = tabId + 'TabSwitchActivity';
            this._systemInitiatedFeedback$0.logActivityDeferred(tabIdActivity, null);
        }
    },
    
    _handleMenuOpenClosePayload$p$0: function CommandUI_ReactExecuteCommandHandler$_handleMenuOpenClosePayload$p$0$in(payloadData, menuItemsRefreshAction, polledMenuAfterPopulate) {
        var payload = payloadData['type'];
        if (payload === 'MenuClosePayload') {
            return true;
        }
        if (payload === 'MenuOpenPayload') {
            menuItemsRefreshAction(payloadData, polledMenuAfterPopulate);
            return true;
        }
        return false;
    },
    
    _handlePersonaCardOpenClose$p$0: function CommandUI_ReactExecuteCommandHandler$_handlePersonaCardOpenClose$p$0$in(payloadData) {
        var payload = payloadData['type'];
        if (payload === 'MenuOpenPayload') {
            Common.AFrameworkApplication.suppressAppCloseOnNavigate = true;
        }
        else if (payload === 'MenuClosePayload') {
            Common.AFrameworkApplication.suppressAppCloseOnNavigate = false;
        }
    },
    
    _populateControlMenuOnExecute$p$0: function CommandUI_ReactExecuteCommandHandler$_populateControlMenuOnExecute$p$0$in(commandHandler, modelType) {
        if (!commandHandler.payload || !commandHandler.payload['launcherId'] || commandHandler.payload['type'] !== 'MenuOpenPayload' && commandHandler.payload['type'] !== 'MenuPopulatePayload') {
            return false;
        }
        var simplifiedUxCommand = commandHandler.payload['launcherId'];
        var command = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId(simplifiedUxCommand);
        if (command && command.get_populationProps()) {
            var populatedMenu = this._reactRibbonRootPoller$0.populateControlMenu(command, modelType, commandHandler.payload);
            if (populatedMenu && ((simplifiedUxCommand) in this._lastPollTimes$0)) {
                delete this._lastPollTimes$0[simplifiedUxCommand];
            }
            return populatedMenu && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ReactPopulateAndPollMenusAtSameTimeIsEnabled');
        }
        return false;
    },
    
    _updateFlyoutAnchorMenuState$p$0: function CommandUI_ReactExecuteCommandHandler$_updateFlyoutAnchorMenuState$p$0$in(payload, polledMenuAfterPopulate) {
        var simplifiedUxCommand = payload['launcherId'];
        if (this._shouldPoll$p$0(simplifiedUxCommand, polledMenuAfterPopulate)) {
            var menuItems = appChrome.selectors.getFlyoutAnchorMenuItems(simplifiedUxCommand);
            this._updateMenuItems$p$0(menuItems, simplifiedUxCommand, Common.AppChromeUtils.getUILocationFromPayload(payload));
        }
    },
    
    _updateInkFlyoutAnchorMenuState$p$0: function CommandUI_ReactExecuteCommandHandler$_updateInkFlyoutAnchorMenuState$p$0$in(payload, polledMenuAfterPopulate) {
        var simplifiedUxCommand = payload['launcherId'];
        if (this._shouldPoll$p$0(simplifiedUxCommand, polledMenuAfterPopulate)) {
            var menuItems = (Common.AppChromeUtils.selectorExists('getInkFlyoutAnchorMenuItems')) ? appChrome.selectors.getInkFlyoutAnchorMenuItems(simplifiedUxCommand) : appChrome.selectors.getFlyoutAnchorMenuItems(simplifiedUxCommand);
            this._updateMenuItems$p$0(menuItems, simplifiedUxCommand, Common.AppChromeUtils.getUILocationFromPayload(payload));
        }
    },
    
    _updatePreviewGalleryMenuState$p$0: function CommandUI_ReactExecuteCommandHandler$_updatePreviewGalleryMenuState$p$0$in(payload, polledMenuAfterPopulate) {
        var simplifiedUxCommand = payload['launcherId'];
        if (this._shouldPoll$p$0(simplifiedUxCommand, polledMenuAfterPopulate)) {
            var menuItems = appChrome.selectors.getPreviewGalleryMenuItems(simplifiedUxCommand);
            this._updateMenuItems$p$0(menuItems, simplifiedUxCommand, Common.AppChromeUtils.getUILocationFromPayload(payload));
        }
    },
    
    _updateSplitButtonMenuState$p$0: function CommandUI_ReactExecuteCommandHandler$_updateSplitButtonMenuState$p$0$in(payload, polledMenuAfterPopulate) {
        var simplifiedUxCommand = payload['launcherId'];
        if (this._shouldPoll$p$0(simplifiedUxCommand, polledMenuAfterPopulate)) {
            var menuItems = appChrome.selectors.getSplitButtonMenuItems(simplifiedUxCommand);
            this._updateMenuItems$p$0(menuItems, simplifiedUxCommand, Common.AppChromeUtils.getUILocationFromPayload(payload));
        }
    },
    
    _updateStatefulSplitButtonMenuState$p$0: function CommandUI_ReactExecuteCommandHandler$_updateStatefulSplitButtonMenuState$p$0$in(payload, polledMenuAfterPopulate) {
        var simplifiedUxCommand = payload['launcherId'];
        if (this._shouldPoll$p$0(simplifiedUxCommand, polledMenuAfterPopulate)) {
            var menuItems = appChrome.selectors.getStatefulSplitButtonMenuItems(simplifiedUxCommand);
            this._updateMenuItems$p$0(menuItems, simplifiedUxCommand, Common.AppChromeUtils.getUILocationFromPayload(payload));
        }
    },
    
    _getSelectedTabId$p$0: function CommandUI_ReactExecuteCommandHandler$_getSelectedTabId$p$0$in() {
        if (this.get__selectorsAreReady$p$0()) {
            return appChrome.selectors.getSelectedTabId();
        }
        return null;
    },
    
    _updateMenuItems$p$0: function CommandUI_ReactExecuteCommandHandler$_updateMenuItems$p$0$in(menuItems, simplifiedUxCommand, location) {
        this._reactRibbonRootPoller$0.pollForStateAndUpdateCommands(menuItems, location);
        this._lastPollTimes$0[simplifiedUxCommand] = new Date();
    },
    
    _shouldPoll$p$0: function CommandUI_ReactExecuteCommandHandler$_shouldPoll$p$0$in(simplifiedUxCommand, polledMenuAfterPopulate) {
        var shouldPoll = true;
        if ((simplifiedUxCommand) in this._lastPollTimes$0) {
            var lastPollTime = this._lastPollTimes$0[simplifiedUxCommand];
            shouldPoll = lastPollTime.getTime() < (this._ribbonRoot$0).get__lastPollTime$i$0().getTime();
        }
        if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ReactPopulateAndPollMenusAtSameTimeIsEnabled')) {
            shouldPoll = shouldPoll && !polledMenuAfterPopulate;
        }
        return shouldPoll && this.get__selectorsAreReady$p$0();
    },
    
    _executeGalleryButtonCommand$p$0: function CommandUI_ReactExecuteCommandHandler$_executeGalleryButtonCommand$p$0$in(commandHandlerData, simplifiedUxCommand) {
        var parameters = {};
        var selectedId = commandHandlerData.payload['selectedGalleryId'];
        var galleryButtonCommand = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId(selectedId);
        Common.Debug.assertStringTag(!!galleryButtonCommand, String.format('The galleryButton ({0}) was not mapped so execute command will not run successfully.', selectedId), 24932677);
        if (galleryButtonCommand) {
            parameters['SourceControlId'] = selectedId;
            parameters['MenuItemId'] = galleryButtonCommand.get_menuItemId();
            parameters['SqmControlId'] = simplifiedUxCommand;
            if (galleryButtonCommand.get_legacyControlId()) {
                parameters['LegacyId'] = galleryButtonCommand.get_legacyControlId();
            }
            if (commandHandlerData.payload && !CommandUI.ScriptUtility.isNullOrUndefined(commandHandlerData.payload['shouldTakeFocus'])) {
                parameters[Common.ReactRibbonConstants.shouldCanvasTakeFocus] = commandHandlerData.payload['shouldTakeFocus'];
            }
            this._getParametersByGalleryPayloadType$p$0(commandHandlerData.payload, parameters);
            var inputMethod = this._addInputMethodToParameters$p$0(commandHandlerData, parameters);
            var $$t_7 = this;
            this._rootCommandHandler$0.executeCommand(galleryButtonCommand.get_commandId(), parameters, this._getSelectedTabId$p$0(), inputMethod, true, function(response) {
                $$t_7._moveFocusAfterCommandExecution$p$0(parameters, simplifiedUxCommand);
            }, this._getTelemetryData$p$0(commandHandlerData), Common.AppChromeUtils.getUILocationFromPayload(commandHandlerData.payload));
        }
    },
    
    _getParametersByGalleryPayloadType$p$0: function CommandUI_ReactExecuteCommandHandler$_getParametersByGalleryPayloadType$p$0$in(payload, parameters) {
        if (payload['type'] === 'CharacterGalleryPayload') {
            parameters['MenuItemId'] = payload['character'];
        }
    },
    
    _setToggledParameter$p$0: function CommandUI_ReactExecuteCommandHandler$_setToggledParameter$p$0$in(commandHandlerData, parameters) {
        if (commandHandlerData.payload && (('toggled') in commandHandlerData.payload)) {
            parameters[CommandUI.Controls.ToggleButtonCommandProperties.On] = commandHandlerData.payload['toggled'];
        }
    },
    
    _manageAppFocus$p$0: function CommandUI_ReactExecuteCommandHandler$_manageAppFocus$p$0$in(simplifiedUxCommand, commandHandlerData) {
        if (simplifiedUxCommand === 'MenuOpen') {
            if (this._modalDiv$0 && !((('isShadowRendering') in commandHandlerData.payload) && commandHandlerData.payload['isShadowRendering'])) {
                this._modalDiv$0.onMenuOpen();
            }
        }
        else if (simplifiedUxCommand === 'MenuClose') {
            if (this._modalDiv$0) {
                this._modalDiv$0.onMenuClose();
            }
        }
    },
    
    _closeAllMenus$p$0: function CommandUI_ReactExecuteCommandHandler$_closeAllMenus$p$0$in() {
        if (this._modalDiv$0) {
            this._modalDiv$0.onCloseAllMenus();
        }
    },
    
    _getTelemetryData$p$0: function CommandUI_ReactExecuteCommandHandler$_getTelemetryData$p$0$in(commandHandlerData) {
        var telemetryDictionary = null;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(commandHandlerData.triggerTime)) {
            telemetryDictionary = {};
            telemetryDictionary['TriggerTime'] = commandHandlerData.triggerTime;
        }
        return telemetryDictionary;
    },
    
    _handleFileMenuPageSwitch$p$0: function CommandUI_ReactExecuteCommandHandler$_handleFileMenuPageSwitch$p$0$in(commandIdToExecute, payloadData, simplifiedUxCommand) {
        if (this._fileMenuSQMInformation$0 && this._actionManager$0) {
            var props = {};
            props[Common.FileMenuSQMProperties.pageId] = simplifiedUxCommand;
            this._actionManager$0.processActionWithData(Common.CommonCommands.reportFileMenuPageSwitch, 2, props, null);
        }
        this._updateMenuItems$p$0(payloadData['pageControlIdMap'], commandIdToExecute, Common.AppChromeUtils.getUILocationFromPayload(payloadData));
    },
    
    _logFileMenuTemplateExecution$p$0: function CommandUI_ReactExecuteCommandHandler$_logFileMenuTemplateExecution$p$0$in(pageId) {
        if (this._actionManager$0) {
            switch (pageId) {
                case 'FileHomePage':
                    this._actionManager$0.processAction(Common.CommonCommands.reportTemplateFromHomePage, 2, null);
                    break;
                case 'FileNewPage':
                    this._actionManager$0.processAction(Common.CommonCommands.reportTemplateFromNewPage, 2, null);
                    break;
            }
        }
    },
    
    _logFileMenuMRUExecution$p$0: function CommandUI_ReactExecuteCommandHandler$_logFileMenuMRUExecution$p$0$in(pageId) {
        if (this._actionManager$0) {
            switch (pageId) {
                case 'FileHomePage':
                    this._actionManager$0.processAction(Common.CommonCommands.reportMRUFromHomePage, 2, null);
                    break;
                case 'FileOpenPage':
                    this._actionManager$0.processAction(Common.CommonCommands.reportMRUFromOpenPage, 2, null);
                    break;
            }
        }
    },
    
    _isShadowMenuOpen$p$0: function CommandUI_ReactExecuteCommandHandler$_isShadowMenuOpen$p$0$in(payloadData) {
        return !!payloadData && payloadData['type'] === 'MenuOpenPayload' && payloadData['isShadowRendering'];
    }
}


CommandUI.ReactGalleryPoller = function CommandUI_ReactGalleryPoller(rootPoller, rootUser, rootType, externalUICommandDefinitionMapping) {
    this._externalUICommandDefinitionMapping$0 = externalUICommandDefinitionMapping;
    this._rootPoller$0 = rootPoller;
    this._rootUser$0 = rootUser;
    this._rootType$0 = rootType;
    this._justPopulatedFullGalleriesMap$0 = {};
}
CommandUI.ReactGalleryPoller.prototype = {
    _externalUICommandDefinitionMapping$0: null,
    _rootPoller$0: null,
    _rootUser$0: null,
    _rootType$0: 0,
    _justPopulatedFullGalleriesMap$0: null,
    
    populateGallery: function CommandUI_ReactGalleryPoller$populateGallery$in(galleryProps, actions, controls, sectionControlIds) {
        var galleryId = galleryProps.ExternalGalleryId || galleryProps.ExternalId;
        var sectionId = galleryProps.ExternalId;
        sectionControlIds.push(galleryId);
        if (!appChrome.selectors.isControlDefined(galleryId)) {
            if (galleryProps.Type !== Common.GalleryType.IconGallery) {
                Common.Debug.assertStringTag(false, 'Only icon gallery dynamic population is currently supported. ', 51491468);
                return;
            }
            if (Common.AppChromeUtils.apiExists('createGalleryModel')) {
                var $$t_6;
                controls.push(appChrome.api.createGalleryModel(galleryId, ($$t_6 = new AdditionalGalleryProperties(), $$t_6.columns = galleryProps.Width, $$t_6.sections = [ appChrome.api.gallerySection(new Array(0), sectionId, '') ], $$t_6.styles = galleryProps.GalleryStyle, $$t_6.galleryType = 'IconGallery', $$t_6)));
            }
            else {
                controls.push(appChrome.api.iconGalleryControl(galleryId, galleryProps.Width, [ appChrome.api.gallerySection(new Array(0), sectionId, '') ], galleryProps.GalleryStyle));
            }
        }
        actions.push.apply(actions, this._getPopulateActionsFromGalleryButtonPropsArray$p$0(galleryProps.GalleryItems, galleryId, sectionId, false));
    },
    
    getPreviewGalleryQueryCommandActions: function CommandUI_ReactGalleryPoller$getPreviewGalleryQueryCommandActions$in(command, stateProps) {
        var actions = new Array(0);
        var selectedButtonId = null;
        var highlightSelectedFontStyle = false;
        if (!command) {
            return null;
        }
        var previewGalleryEnabled = this._rootPoller$0.pollForEnabledDisabledControlState(this._rootUser$0, command.get_commandId(), stateProps);
        actions.push(CommandUI.ReactPollHelper.getEnabledDisabledAction(command.get_externalUxCommand(), !previewGalleryEnabled));
        if (command.get_previewControlIds()) {
            var previewGalleryProps = new Array(0);
            for (var i = 0; i < command.get_previewControlIds().length; i++) {
                var props = {};
                var previewControlId = command.get_previewControlIds()[i];
                props['SourceControlId'] = previewControlId;
                var previewControlData = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId(previewControlId);
                this._getPollResult$p$0(previewControlData || command, props);
                if (props[CommandUI.Controls.GalleryButtonCommandProperties.On]) {
                    selectedButtonId = props['SourceControlId'];
                    if (props[CommandUI.Controls.GalleryButtonCommandProperties.HighlightOn]) {
                        highlightSelectedFontStyle = true;
                    }
                }
                CommandUI.ReactPollHelper.handleSetControlIconRequest(previewControlId, props, actions);
                var galleryButtonProps = $$as(Common.GalleryButtonProps, props[CommandUI.Controls.GalleryButtonCommandProperties.GalleryButtonProps]);
                if (galleryButtonProps) {
                    previewGalleryProps.push(galleryButtonProps);
                    if (previewGalleryEnabled) {
                        var enabled = this._rootPoller$0.pollForEnabledDisabledControlState(this._rootUser$0, galleryButtonProps.Command, stateProps);
                        galleryButtonProps.IsDisabled = !enabled;
                    }
                    continue;
                }
            }
            if (previewGalleryProps.length > 0) {
                actions.push.apply(actions, this._getPopulateActionsFromGalleryButtonPropsArray$p$0(previewGalleryProps, command.get_externalUxCommand(), command.get_externalUxCommand(), true));
            }
            actions.push(appChrome.actions.updateGallerySelectedId(command.get_externalUxCommand(), selectedButtonId));
            if (highlightSelectedFontStyle) {
                Diag.ULS.sendTraceTag(51517593, 340, 50, 'HighlightSelectedFontStyle fired for {0} button', selectedButtonId);
                actions.push(appChrome.actions.highlightSelectedFontStyle(selectedButtonId));
            }
        }
        return actions;
    },
    
    _getPopulateActionsFromGalleryButtonPropsArray$p$0: function CommandUI_ReactGalleryPoller$_getPopulateActionsFromGalleryButtonPropsArray$p$0$in(galleryItems, externalGalleryId, externalSectionId, isPreviewGallery) {
        var actions = new Array(0);
        var galleryItemIds = new Array(0);
        var galleryButtonControls = new Array(0);
        for (var k = 0; k < galleryItems.length; k++) {
            var galleryButton = galleryItems[k];
            var externalGalleryButtonId = (CommandUI.ScriptUtility.isNullOrEmptyString(galleryButton.ExternalId)) ? galleryButton.Id : galleryButton.ExternalId;
            galleryItemIds.push(externalGalleryButtonId);
            switch (galleryButton.get_Type()) {
                case Common.GalleryType.CharacterCodeGallery:
                    var charGalButton = galleryButton;
                    if (Common.AppChromeUtils.apiExists('createCharacterCodeGalleryButtonModel')) {
                        var $$t_K;
                        galleryButtonControls.push(appChrome.api.createCharacterCodeGalleryButtonModel(externalGalleryButtonId, ($$t_K = new AdditionalCharacterCodeGalleryButtonProps(), $$t_K.disabled = charGalButton.IsDisabled, $$t_K.character = charGalButton.Character, $$t_K.style = charGalButton.Style, $$t_K.title = charGalButton.Alt, $$t_K)));
                    }
                    else {
                        galleryButtonControls.push(appChrome.api.characterCodeGalleryButton(externalGalleryButtonId, charGalButton.Character, (charGalButton.Style) ? charGalButton.Style : null, charGalButton.Alt, charGalButton.IsDisabled));
                    }
                    break;
                case Common.GalleryType.FontStyleGallery:
                    var fontGalButton = galleryButton;
                    if (Common.AppChromeUtils.apiExists('createFontStylesGalleryButtonModel')) {
                        var $$t_L;
                        galleryButtonControls.push(appChrome.api.createFontStylesGalleryButtonModel(externalGalleryButtonId, ($$t_L = new AdditionalFontStyleGalleryButtonProps(), $$t_L.disabled = fontGalButton.IsDisabled, $$t_L.styleDisplayName = fontGalButton.LabelText, $$t_L.style = fontGalButton.Style, $$t_L.title = fontGalButton.Alt, $$t_L.previewStyleLabel = fontGalButton.PreviewStyleLabel, $$t_L)));
                    }
                    else {
                        galleryButtonControls.push(appChrome.api.fontStyleGalleryButton(externalGalleryButtonId, fontGalButton.LabelText, fontGalButton.Style, fontGalButton.Alt, fontGalButton.IsDisabled, fontGalButton.PreviewStyleLabel));
                    }
                    break;
                case Common.GalleryType.IconGallery:
                    var iconGalButton = galleryButton;
                    if (Common.AppChromeUtils.apiExists('createIconGalleryButtonModel')) {
                        var $$t_M;
                        galleryButtonControls.push(appChrome.api.createIconGalleryButtonModel(externalGalleryButtonId, ($$t_M = new AdditionalIconButtonProperties(), $$t_M.disabled = iconGalButton.IsDisabled, $$t_M.icon = [ iconGalButton.Icon ], $$t_M.fullIconStyle = iconGalButton.FullIconStyle, $$t_M.previewIconStyle = iconGalButton.PreviewIconStyle, $$t_M.label = iconGalButton.LabelText, $$t_M.title = iconGalButton.Alt, $$t_M)));
                    }
                    else {
                        if (iconGalButton.IsDisabled != null) {
                            galleryButtonControls.push(appChrome.api.iconGalleryButton(externalGalleryButtonId, iconGalButton.Icon, iconGalButton.LabelText, iconGalButton.Alt, iconGalButton.FullIconStyle, iconGalButton.PreviewIconStyle, iconGalButton.IsDisabled));
                        }
                        else {
                            galleryButtonControls.push(appChrome.api.iconGalleryButton(externalGalleryButtonId, iconGalButton.Icon, iconGalButton.LabelText, iconGalButton.Alt, iconGalButton.FullIconStyle, iconGalButton.PreviewIconStyle, null));
                        }
                    }
                    break;
                case Common.GalleryType.ListGallery:
                    var listGalButton = galleryButton;
                    if (Common.AppChromeUtils.apiExists('createListGalleryButtonModel')) {
                        var $$t_N;
                        galleryButtonControls.push(appChrome.api.createListGalleryButtonModel(externalGalleryButtonId, ($$t_N = new AdditionalListGallerButtonProps(), $$t_N.disabled = listGalButton.IsDisabled, $$t_N.infoAtLevel = listGalButton.LevelInfo, $$t_N.ariaLabel = listGalButton.Alt, $$t_N)));
                    }
                    else {
                        galleryButtonControls.push(appChrome.api.listGalleryButton(externalGalleryButtonId, listGalButton.LevelInfo, listGalButton.Alt, listGalButton.IsDisabled));
                    }
                    break;
                case Common.GalleryType.TableStyleGallery:
                    var tableGalButton = galleryButton;
                    if (Common.AppChromeUtils.apiExists('createTableStyleGalleryButtonModel')) {
                        var $$t_O;
                        galleryButtonControls.push(appChrome.api.createTableStyleGalleryButtonModel(externalGalleryButtonId, ($$t_O = new AdditionalTableStyleGalleryButtonProps(), $$t_O.disabled = tableGalButton.IsDisabled, $$t_O.tableCellStyles = tableGalButton.TableCellStyles, $$t_O.tableStyles = tableGalButton.TableStyles, $$t_O.title = tableGalButton.Alt, $$t_O)));
                    }
                    else {
                        galleryButtonControls.push(appChrome.api.tableStyleGalleryButton(externalGalleryButtonId, tableGalButton.TableCellStyles, tableGalButton.TableStyles, tableGalButton.Alt, tableGalButton.IsDisabled));
                    }
                    break;
                case Common.GalleryType.ChangeColorsGallery:
                    var changeColorsGalButton = galleryButton;
                    if (Common.AppChromeUtils.apiExists('createChangeColorsGalleryButtonModel')) {
                        var $$t_P;
                        galleryButtonControls.push(appChrome.api.createChangeColorsGalleryButtonModel(externalGalleryButtonId, ($$t_P = new AdditionalChangeColorsGalleryButtonProps(), $$t_P.disabled = changeColorsGalButton.IsDisabled, $$t_P.tableCellStyles = changeColorsGalButton.TableCellStyles, $$t_P.tableStyles = changeColorsGalButton.TableStyles, $$t_P.title = changeColorsGalButton.Alt, $$t_P)));
                    }
                    else {
                        galleryButtonControls.push(appChrome.api.changeColorsGalleryButton(externalGalleryButtonId, changeColorsGalButton.TableCellStyles, changeColorsGalButton.TableStyles, changeColorsGalButton.Alt, changeColorsGalButton.IsDisabled));
                    }
                    break;
                case Common.GalleryType.PageNumberGallery:
                    var pageNumberGalButton = galleryButton;
                    if (Common.AppChromeUtils.apiExists('createPageNumberGalleryButtonModel')) {
                        var $$t_Q;
                        galleryButtonControls.push(appChrome.api.createPageNumberGalleryButtonModel(externalGalleryButtonId, ($$t_Q = new AdditionalPageNumberGalleryButtonProps(), $$t_Q.disabled = pageNumberGalButton.IsDisabled, $$t_Q.text = pageNumberGalButton.Text, $$t_Q.title = pageNumberGalButton.Alt, $$t_Q)));
                    }
                    else {
                        galleryButtonControls.push(appChrome.api.pageNumberGalleryButton(externalGalleryButtonId, pageNumberGalButton.Text, pageNumberGalButton.Alt, pageNumberGalButton.IsDisabled));
                    }
                    break;
            }
            var $$t_R;
            this._externalUICommandDefinitionMapping$0.addCommandToMaps(($$t_R = new Common.CommandMetadata(externalGalleryButtonId, galleryButton.Command), $$t_R.set_queryCommandId(galleryButton.QueryCommand), $$t_R.set_menuItemId(galleryButton.MenuItemId), $$t_R));
        }
        actions.push(appChrome.actions.addControls(galleryButtonControls));
        if (isPreviewGallery) {
            actions.push(appChrome.actions.populateGalleryItems(externalGalleryId, galleryItemIds));
        }
        else {
            if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('OptimizeGalleryPopulationIsEnabled')) {
                var galleryType = (galleryItems.length > 0) ? galleryItems[0].get_Type() : 0;
                this._justPopulatedFullGalleriesMap$0[externalGalleryId] = false;
                var disableIndividualButtons = true;
                if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ReactGalleriesAlwaysEnabledButtonsIsEnabled')) {
                    var stateProps = appChrome.selectors.getGalleryState(externalGalleryId);
                    disableIndividualButtons = stateProps['disableIndividualButtons'];
                }
                actions.push.apply(actions, this._getGalleryQueryCommandActionsInternal$p$0(externalGalleryId, Common.GalleryType.toString(galleryType), galleryItemIds, null, galleryType === Common.GalleryType.ListGallery, disableIndividualButtons));
            }
            actions.push(appChrome.actions.updateGallerySectionItems(externalGalleryId, externalSectionId, galleryItemIds));
        }
        return actions;
    },
    
    getGalleryQueryCommandActions: function CommandUI_ReactGalleryPoller$getGalleryQueryCommandActions$in(stateProps) {
        var galleryButtons = stateProps['items'];
        var gallerySections = stateProps['sections'];
        var disableIndividualButtons = true;
        if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ReactGalleriesAlwaysEnabledButtonsIsEnabled')) {
            disableIndividualButtons = stateProps['disableIndividualButtons'];
        }
        return this._getGalleryQueryCommandActionsInternal$p$0(stateProps['ExternalUxId'], stateProps['galleryType'], galleryButtons, gallerySections, stateProps['isListGallery'], disableIndividualButtons);
    },
    
    _getGalleryQueryCommandActionsInternal$p$0: function CommandUI_ReactGalleryPoller$_getGalleryQueryCommandActionsInternal$p$0$in(galleryExternalUxId, galleryType, galleryButtons, gallerySections, isListGallery, addEnableDisabledActions) {
        var actions = new Array(0);
        if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('OptimizeGalleryPopulationIsEnabled') && ((galleryExternalUxId) in this._justPopulatedFullGalleriesMap$0)) {
            if (this._justPopulatedFullGalleriesMap$0[galleryExternalUxId]) {
                delete this._justPopulatedFullGalleriesMap$0[galleryExternalUxId];
                return actions;
            }
            else {
                this._justPopulatedFullGalleriesMap$0[galleryExternalUxId] = true;
            }
        }
        var selectedButtonId = null;
        var galleryTextDirection = -1;
        if (galleryButtons) {
            var $$t_E, $$t_F;
            selectedButtonId = (($$t_F = this._addGalleryButtonQueryActions$p$0(galleryType, galleryButtons, actions, addEnableDisabledActions, ($$t_E = {'val': galleryTextDirection}))), galleryTextDirection = $$t_E.val, $$t_F);
        }
        else if (gallerySections) {
            for (var $$arr_9 = gallerySections, $$len_A = $$arr_9.length, $$idx_B = 0; $$idx_B < $$len_A; ++$$idx_B) {
                var section = $$arr_9[$$idx_B];
                var $$t_G, $$t_H;
                var newSelectedButtonId = (($$t_H = this._addGalleryButtonQueryActions$p$0(galleryType, section.galleryButtons, actions, addEnableDisabledActions, ($$t_G = {'val': galleryTextDirection}))), galleryTextDirection = $$t_G.val, $$t_H);
                if (newSelectedButtonId) {
                    selectedButtonId = newSelectedButtonId;
                }
            }
        }
        actions.push(appChrome.actions.updateGallerySelectedId(galleryExternalUxId, selectedButtonId));
        if (addEnableDisabledActions) {
            actions.push(CommandUI.ReactPollHelper.getEnabledDisabledAction(galleryExternalUxId, false));
        }
        if (isListGallery && (galleryTextDirection > 0)) {
            actions.push(appChrome.actions.updateListGalleryTextDirection(galleryExternalUxId, galleryTextDirection === 2));
        }
        return actions;
    },
    
    _addGalleryButtonQueryActions$p$0: function CommandUI_ReactGalleryPoller$_addGalleryButtonQueryActions$p$0$in(galleryType, galleryButtons, actions, addEnableDisabledActions, galleryTextDirection) {
        var selectedButtonId = null;
        galleryTextDirection.val = -1;
        var highlightSelectedFontStyle = false;
        for (var $$arr_7 = galleryButtons, $$len_8 = $$arr_7.length, $$idx_9 = 0; $$idx_9 < $$len_8; ++$$idx_9) {
            var galleryButton = $$arr_7[$$idx_9];
            var galleryButtonModelType = (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('OptimizeGalleryPopulationIsEnabled')) ? this._getGalleryButtonModelTypeFromFullGalleryType$p$0(galleryType) : appChrome.selectors.getModelType(galleryButton);
            var props = {};
            props['SourceControlId'] = galleryButton;
            var buttonCommandData = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId(galleryButton);
            if (!buttonCommandData) {
                Common.Debug.assertNotReachedStringTag('All GalleryButtons should be mapped, otherwise the button will do nothing when the user executes it.', 51491469);
                continue;
            }
            var pollResult = this._getPollResult$p$0(buttonCommandData, props);
            if (addEnableDisabledActions) {
                actions.push(CommandUI.ReactPollHelper.getEnabledDisabledAction(galleryButton, CommandUI.ReactPollHelper.isCommandDisabled(pollResult)));
            }
            var controlStateActions = CommandUI.ReactPollHelper.getControlStateActions(galleryButton, galleryButtonModelType, props, pollResult);
            if (controlStateActions) {
                actions.push.apply(actions, controlStateActions);
            }
            if (props[CommandUI.Controls.GalleryButtonCommandProperties.On]) {
                selectedButtonId = galleryButton;
                if (props[CommandUI.Controls.GalleryButtonCommandProperties.HighlightOn] && props[CommandUI.Controls.GalleryButtonCommandProperties.HighlightOn]) {
                    highlightSelectedFontStyle = true;
                }
            }
            if (!isNullOrUndefined(props[CommandUI.SharedControlCommandProperties.labelText])) {
                actions.push(CommandUI.ReactPollHelper.getSetControlLabelAction(buttonCommandData.get_externalUxCommand(), props[CommandUI.SharedControlCommandProperties.labelText]));
            }
            if (props[CommandUI.Controls.GalleryButtonCommandProperties.IsRtl]) {
                if (galleryTextDirection.val < 0) {
                    galleryTextDirection.val = props[CommandUI.Controls.GalleryButtonCommandProperties.IsRtl];
                }
                else {
                    Common.Debug.assertStringTag(props[CommandUI.Controls.GalleryButtonCommandProperties.IsRtl] === galleryTextDirection.val, 'The gallery contains two buttons with different text direction, this should not be allow to happen and is a bug.', 51491470);
                }
            }
        }
        if (highlightSelectedFontStyle) {
            Diag.ULS.sendTraceTag(51517594, 340, 50, 'HighlightSelectedFontStyle fired for {0} button', selectedButtonId);
            actions.push(appChrome.actions.highlightSelectedFontStyle(selectedButtonId));
        }
        return selectedButtonId;
    },
    
    _getGalleryButtonModelTypeFromFullGalleryType$p$0: function CommandUI_ReactGalleryPoller$_getGalleryButtonModelTypeFromFullGalleryType$p$0$in(type) {
        switch (type) {
            case 'CharacterCodeGallery':
                return 'CharacterCodeGalleryButtonModel';
            case 'FontStyleGallery':
                return 'FontStyleGalleryButtonModel';
            case 'IconGallery':
                return 'IconGalleryButtonModel';
            case 'ListGallery':
                return 'ListGalleryButtonModel';
            case 'TableStyleGallery':
                return 'TableStyleGalleryButtonModel';
            case 'ChangeColorsGallery':
                return 'ChangeColorsGalleryButtonModel';
            case 'PageNumberGallery':
                return 'PageNumberGalleryButtonModel';
        }
        return 'None';
    },
    
    _getPollResult$p$0: function CommandUI_ReactGalleryPoller$_getPollResult$p$0$in(command, stateProps) {
        stateProps['MenuItemId'] = command.get_menuItemId();
        return this._rootPoller$0.pollForCommandState(this._rootUser$0, this._rootType$0, command.get_commandId(), command.get_queryCommandId(), stateProps);
    }
}


CommandUI.ReactPollHelper = function CommandUI_ReactPollHelper() {
}
CommandUI.ReactPollHelper.getControlStateActions = function CommandUI_ReactPollHelper$getControlStateActions$st(command, modelType, properties, pollResult) {
    if (CommandUI.ReactPollHelper.isQueryCommandSuccessful(pollResult)) {
        var actions = new Array(0);
        switch (modelType) {
            case 'ToggleButtonModel':
            case 'InkButtonModel':
                actions.push(CommandUI.ReactPollHelper.getToggleButtonAction(command, properties[CommandUI.Controls.ToggleButtonCommandProperties.On]));
                break;
            case 'CheckboxModel':
                actions.push(CommandUI.ReactPollHelper.getCheckboxAction(command, properties[CommandUI.Controls.ToggleButtonCommandProperties.On]));
                break;
            case 'ComboBoxModel':
                var key = properties[CommandUI.Controls.ComboBoxCommandProperties.Key];
                if (!key) {
                    actions.push(appChrome.actions.updateComboBoxValue(command, properties[CommandUI.Controls.ComboBoxCommandProperties.Value]));
                }
                else {
                    actions.push(appChrome.actions.updateComboBoxKey(command, key, properties[CommandUI.Controls.ComboBoxCommandProperties.Value]));
                }
                break;
            case 'SplitButtonModel':
                actions.push(CommandUI.ReactPollHelper.getToggleButtonAction(command, properties[CommandUI.Controls.SplitButtonCommandProperties.On]));
                break;
            case 'SpinButtonModel':
                actions.push(appChrome.actions.updateSpinButton(command, properties[CommandUI.Controls.SpinnerCommandProperties.Number], Common.UnitConversion.convertUnitTypeToString(properties[CommandUI.Controls.SpinnerCommandProperties.UnitType]), properties[CommandUI.Controls.SpinnerCommandProperties.Text], properties[CommandUI.Controls.SpinnerCommandProperties.MaxValue], properties[CommandUI.Controls.SpinnerCommandProperties.Alt]));
                break;
            case 'ColorPickerModel':
                actions.push(appChrome.actions.updateColorPickerSelectedColor(command, properties[CommandUI.Controls.ColorPickerCommandProperties.IndexColorSelected]));
                break;
            case 'PageNumberGalleryButtonModel':
                actions.push(appChrome.actions.updatePageNumberGalleryButtonText(command, properties[CommandUI.Controls.GalleryButtonCommandProperties.Text]));
                break;
            case 'CompoundButtonModel':
                var description = properties[CommandUI.Controls.ToggleButtonCommandProperties.Description];
                if (description) {
                    actions.push(appChrome.actions.updateCompoundButtonDescription(command, properties[CommandUI.Controls.ToggleButtonCommandProperties.Description]));
                }
                if ((CommandUI.Controls.ToggleButtonCommandProperties.On) in properties) {
                    actions.push(CommandUI.ReactPollHelper.getToggleButtonAction(command, properties[CommandUI.Controls.ToggleButtonCommandProperties.On]));
                }
                break;
            case 'SliderModel':
                if (properties['snapToStep']) {
                    actions.push(appChrome.actions.updateSliderSelectedValue(command, properties[CommandUI.Controls.SliderCommandProperties.Value]));
                }
                else {
                    actions.push(appChrome.actions.updateSliderValue(command, properties[CommandUI.Controls.SliderCommandProperties.Value], 0, properties[CommandUI.Controls.SliderCommandProperties.MaxValue], properties[CommandUI.Controls.SliderCommandProperties.Text]));
                }
                break;
            case 'FlyoutAnchorModel':
                if ((CommandUI.Controls.FlyoutAnchorCommandProperties.ImageIsVisible) in properties) {
                    actions.push((appChrome.actions.hideFlyoutAnchorIcon(command, !properties[CommandUI.Controls.FlyoutAnchorCommandProperties.ImageIsVisible])));
                }
                if ((CommandUI.Controls.ToggleButtonCommandProperties.On) in properties) {
                    actions.push(CommandUI.ReactPollHelper.getToggleButtonAction(command, properties[CommandUI.Controls.ToggleButtonCommandProperties.On]));
                }
                break;
            case 'InputBoxModel':
                actions.push(appChrome.actions.updateInputBoxValue(command, properties[CommandUI.Controls.TextBoxCommandProperties.Text]));
                break;
        }
        CommandUI.ReactPollHelper.handleSetIconColorRequest(command, properties, actions);
        CommandUI.ReactPollHelper.handleSetControlIconRequest(command, properties, actions);
        CommandUI.ReactPollHelper.handleSetControlIconSetRequest(command, properties, actions);
        CommandUI.ReactPollHelper.handleSetControlCustomTooltipRequest(command, properties, actions);
        CommandUI.ReactPollHelper.handleAdditionalReduxAction(properties, actions);
        return actions;
    }
    return null;
}
CommandUI.ReactPollHelper.getEnabledDisabledAction = function CommandUI_ReactPollHelper$getEnabledDisabledAction$st(command, disabled) {
    return appChrome.actions.updateControlEnabledDisabledState(command, disabled);
}
CommandUI.ReactPollHelper.getHiddenStateAction = function CommandUI_ReactPollHelper$getHiddenStateAction$st(command, hidden) {
    return appChrome.actions.updateControlHiddenState(command, hidden);
}
CommandUI.ReactPollHelper.getToggleButtonAction = function CommandUI_ReactPollHelper$getToggleButtonAction$st(command, toggle) {
    return appChrome.actions.toggleButton(command, toggle);
}
CommandUI.ReactPollHelper.getCheckboxAction = function CommandUI_ReactPollHelper$getCheckboxAction$st(command, isChecked) {
    return appChrome.actions.toggleCheckbox(command, isChecked);
}
CommandUI.ReactPollHelper.getSetControlCustomTooltipAction = function CommandUI_ReactPollHelper$getSetControlCustomTooltipAction$st(command, customTooltip) {
    return appChrome.actions.setControlCustomTooltip(command, customTooltip);
}
CommandUI.ReactPollHelper.getSetControlIconAction = function CommandUI_ReactPollHelper$getSetControlIconAction$st(command, iconName) {
    return appChrome.actions.setControlIcon(command, iconName);
}
CommandUI.ReactPollHelper.getSetControlIconSetAction = function CommandUI_ReactPollHelper$getSetControlIconSetAction$st(command, iconSet) {
    return appChrome.actions.setControlIconSet(command, iconSet);
}
CommandUI.ReactPollHelper.getSetControlLabelAction = function CommandUI_ReactPollHelper$getSetControlLabelAction$st(command, label) {
    return appChrome.actions.setControlLabel(command, label);
}
CommandUI.ReactPollHelper.handleSetControlCustomTooltipRequest = function CommandUI_ReactPollHelper$handleSetControlCustomTooltipRequest$st(command, props, actions) {
    var customTooltip = $$as(String, props[CommandUI.SharedControlCommandProperties.customTooltip]);
    if (customTooltip && Common.AppChromeUtils.appChromeContainsAction('setControlCustomTooltip')) {
        actions.push(CommandUI.ReactPollHelper.getSetControlCustomTooltipAction(command, customTooltip));
    }
}
CommandUI.ReactPollHelper.handleSetControlIconRequest = function CommandUI_ReactPollHelper$handleSetControlIconRequest$st(command, props, actions) {
    var iconName = $$as(String, props[CommandUI.SharedControlCommandProperties.Icon]);
    if (iconName) {
        actions.push(CommandUI.ReactPollHelper.getSetControlIconAction(command, iconName));
    }
}
CommandUI.ReactPollHelper.handleSetControlIconSetRequest = function CommandUI_ReactPollHelper$handleSetControlIconSetRequest$st(command, props, actions) {
    var iconSet = $$as(Object, props[CommandUI.SharedControlCommandProperties.IconSet]);
    if (iconSet) {
        actions.push(CommandUI.ReactPollHelper.getSetControlIconSetAction(command, iconSet));
    }
}
CommandUI.ReactPollHelper.handleSetIconColorRequest = function CommandUI_ReactPollHelper$handleSetIconColorRequest$st(command, props, actions) {
    var iconColor = $$as(String, props[CommandUI.SharedControlCommandProperties.iconColor]);
    if (iconColor) {
        actions.push(appChrome.actions.updateIconColor(command, iconColor));
    }
}
CommandUI.ReactPollHelper.handleAdditionalReduxAction = function CommandUI_ReactPollHelper$handleAdditionalReduxAction$st(props, actions) {
    var additionalActions = $$as(Array, props[CommandUI.SharedControlCommandProperties.reduxActions]);
    if (additionalActions) {
        actions.push.apply(actions, additionalActions);
    }
}
CommandUI.ReactPollHelper.isCommandDisabled = function CommandUI_ReactPollHelper$isCommandDisabled$st(pollResult) {
    return (pollResult & 1) < 1;
}
CommandUI.ReactPollHelper.isQueryCommandSuccessful = function CommandUI_ReactPollHelper$isQueryCommandSuccessful$st(pollResult) {
    return (pollResult & 2) > 0;
}


CommandUI.PopulateActions = function CommandUI_PopulateActions() {
}
CommandUI.PopulateActions.prototype = {
    actions: null,
    commandsToPoll: null,
    wasShadowMenuOpen: false
}


CommandUI.ReactPopulateQueryCommandPoller = function CommandUI_ReactPopulateQueryCommandPoller(rootPoller, rootUser, rootType, externalUICommandDefinitionMapping, reactGalleryPoller) {
    this._rootPoller$0 = rootPoller;
    this._rootUser$0 = rootUser;
    this._rootType$0 = rootType;
    this._externalUICommandDefinitionMapping$0 = externalUICommandDefinitionMapping;
    this._successfullyPolledPopulateCommands$0 = {};
    this._reactStatePropsSelector$0 = new CommandUI.ReactStatePropsSelector();
    this._reactGalleryPoller$0 = reactGalleryPoller;
}
CommandUI.ReactPopulateQueryCommandPoller._getPopulateComboBoxAction$p = function CommandUI_ReactPopulateQueryCommandPoller$_getPopulateComboBoxAction$p$st(command, menuProps) {
    var comboBoxOptions = new Array(0);
    for (var i = 0; i < menuProps.MenuItems.MenuSectionList.length; i++) {
        var section = (menuProps.MenuItems.MenuSectionList[i]);
        if (section.Title) {
            comboBoxOptions.push(appChrome.api.comboBoxHeader('Header-' + i.toString(), section.Title));
        }
        for (var j = 0; j < section.ControlList.length; j++) {
            var button = $$as(Common.ComboBoxItemButtonProps, section.ControlList[j]);
            if (button) {
                comboBoxOptions.push(appChrome.api.comboBoxItem(button.MenuItemId, button.LabelText, button.Styles, button.CommandValueId, button.AriaLabel, button.Data));
            }
        }
        if (i < (menuProps.MenuItems.MenuSectionList.length - 1)) {
            comboBoxOptions.push(appChrome.api.comboBoxDivider('Divider-' + i.toString()));
        }
    }
    return appChrome.actions.populateComboBoxOptions(command.get_externalUxCommand(), comboBoxOptions);
}
CommandUI.ReactPopulateQueryCommandPoller.prototype = {
    _rootPoller$0: null,
    _rootUser$0: null,
    _rootType$0: 0,
    _reactGalleryPoller$0: null,
    _externalUICommandDefinitionMapping$0: null,
    _reactStatePropsSelector$0: null,
    _successfullyPolledPopulateCommands$0: null,
    
    skipPopulation: function CommandUI_ReactPopulateQueryCommandPoller$skipPopulation$in(command) {
        Common.Debug.assertTag(!!command && !!command.get_populationProps(), 26093077);
        var populateQueryCommandId = command.get_populationProps().get_populateQueryCommandId();
        return command.get_populationProps().get_populateOnlyOnce() && ((populateQueryCommandId) in this._successfullyPolledPopulateCommands$0);
    },
    
    getReduxActionsAndCommandsToPoll: function CommandUI_ReactPopulateQueryCommandPoller$getReduxActionsAndCommandsToPoll$in(command, modelType, payload) {
        Common.Debug.assertTag(!!command && !!command.get_populationProps(), 26093078);
        var actions = new Array(0);
        var commandsToPoll = {};
        if (!this.skipPopulation(command)) {
            var populateQueryCommandId = command.get_populationProps().get_populateQueryCommandId();
            var stateProps = {};
            stateProps['MenuId'] = command.get_externalUxCommand();
            stateProps['IsShadowMenuOpen'] = this._isShadowMenuOpen$p$0(payload);
            var result = this._rootPoller$0.pollForCommandState(this._rootUser$0, this._rootType$0, populateQueryCommandId, populateQueryCommandId, stateProps, this._getInputMethod$p$0(payload));
            var menuProps = stateProps;
            if ((result & 1) > 0 && menuProps.MenuItems) {
                this._successfullyPolledPopulateCommands$0[populateQueryCommandId] = true;
                switch (modelType) {
                    case 'ComboBoxModel':
                        actions.push(CommandUI.ReactPopulateQueryCommandPoller._getPopulateComboBoxAction$p(command, menuProps));
                        commandsToPoll[command.get_externalUxCommand()] = 'ComboBoxModel';
                        break;
                    case 'FlyoutAnchorModel':
                    case 'InkFlyoutAnchorModel':
                    case 'PreviewGalleryModel':
                    case 'SplitButtonModel':
                    case 'StatefulSplitButtonModel':
                        actions.push.apply(actions, this._getUpdateActionsForMenuControls$p$0(command.get_externalUxCommand(), modelType, menuProps.MenuItems, commandsToPoll));
                        break;
                }
            }
        }
        var $$t_9;
        return $$t_9 = new CommandUI.PopulateActions(), $$t_9.actions = actions, $$t_9.commandsToPoll = commandsToPoll, $$t_9.wasShadowMenuOpen = this._isShadowMenuOpen$p$0(payload), $$t_9;
    },
    
    _getUpdateActionsForMenuControls$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_getUpdateActionsForMenuControls$p$0$in(externalUxCommand, menuLauncherModelType, menuProps, commandsToPoll) {
        var actions = new Array(0);
        var controls = new Array(0);
        var menuSections = new Array(0);
        var mruBypassControls = new Array(0);
        for (var i = 0; i < menuProps.MenuSectionList.length; i++) {
            var section = $$as(Common.MenuSectionProps, menuProps.MenuSectionList[i]);
            if (!section) {
                continue;
            }
            var sectionTitle = null;
            var sectionControlIds = new Array(0);
            if (!CommandUI.ScriptUtility.isNullOrUndefined(section.Title)) {
                sectionTitle = section.Title;
            }
            for (var j = 0; j < section.ControlList.length; j++) {
                var commonProps = $$as(Common.CommonControlProps, section.ControlList[j]);
                if (commonProps && !commonProps.ExternalId) {
                    continue;
                }
                if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ReactPopulateAndPollMenusAtSameTimeIsEnabled') && commandsToPoll) {
                    this._getCommandsToPoll$p$0(commonProps, commandsToPoll);
                }
                actions.push.apply(actions, this._getPopulateControlReduxActions$p$0(commonProps, controls, sectionControlIds, mruBypassControls, externalUxCommand, menuLauncherModelType));
            }
            if (menuProps.UpdateDynamically) {
                menuSections.push(appChrome.api.menuSection(sectionControlIds, sectionTitle, section.Lang, ''));
            }
        }
        if (menuProps.UpdateDynamically) {
            actions.push(appChrome.actions.updateMenu(externalUxCommand, menuSections, menuProps.Title, menuProps.AriaLabel, menuProps.ShouldAutoOpen, menuProps.AriaRoleDescription));
        }
        if (controls.length > 0) {
            actions.splice(0, 0, appChrome.actions.addControls(controls));
        }
        if (mruBypassControls.length > 0 && Common.AppChromeUtils.appChromeContainsAction('setStatefulSplitButtonMruBypassControls')) {
            actions.push(appChrome.actions.setStatefulSplitButtonMruBypassControls(externalUxCommand, mruBypassControls));
        }
        return actions;
    },
    
    _getCommandsToPoll$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_getCommandsToPoll$p$0$in(commonProps, commandsToPoll) {
        switch (commonProps.get_ControlType()) {
            case Common.ControlType.Button:
            case Common.ControlType.CompoundButton:
                commandsToPoll[commonProps.ExternalId] = (commonProps.get_ControlType() === Common.ControlType.Button) ? 'ButtonModel' : 'CompoundButtonModel';
                return;
            case Common.ControlType.ToggleButton:
                commandsToPoll[commonProps.ExternalId] = 'ToggleButtonModel';
                return;
            case Common.ControlType.CheckMarkToggleButton:
                commandsToPoll[commonProps.ExternalId] = 'CheckboxModel';
                return;
            case Common.ControlType.ColorPicker:
                commandsToPoll[commonProps.ExternalId] = 'ColorPickerModel';
                return;
            case Common.ControlType.FlyoutAnchor:
                commandsToPoll[commonProps.ExternalId] = 'FlyoutAnchorModel';
                return;
        }
    },
    
    _getPopulateControlReduxActions$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_getPopulateControlReduxActions$p$0$in(commonProps, controls, sectionControlIds, mruBypassControls, externalUxCommand, menuLauncherModelType) {
        var actions = new Array(0);
        switch (commonProps.get_ControlType()) {
            case Common.ControlType.Button:
            case Common.ControlType.CompoundButton:
                var button = $$as(Common.CuiButtonProps, commonProps);
                this._populateButton$p$0(button, actions, controls, sectionControlIds);
                if (button.MenuItemsStatefulData && Common.AppChromeUtils.appChromeContainsAction('setStatefulSplitButtonMenuItemsStatefulData')) {
                    actions.push(appChrome.actions.setStatefulSplitButtonMenuItemsStatefulData(externalUxCommand, button.MenuItemsStatefulData));
                }
                return actions;
            case Common.ControlType.ToggleButton:
                this._populateToggleButton$p$0($$as(Common.ToggleButtonProps, commonProps), actions, controls, sectionControlIds);
                return actions;
            case Common.ControlType.CheckMarkToggleButton:
                this._populateCheckMarkToggleButton$p$0($$as(Common.CheckMarkToggleButtonProps, commonProps), actions, controls, sectionControlIds);
                return actions;
            case Common.ControlType.PersonaButton:
                this._populatePersonaButton$p$0($$as(Common.PersonaButtonProps, commonProps), actions, controls, sectionControlIds);
                return actions;
            case Common.ControlType.ColorPicker:
                this._populateColorPicker$p$0($$as(Common.ColorPickerControlProps, commonProps), actions, controls, sectionControlIds);
                return actions;
            case Common.ControlType.FlyoutAnchor:
                var flyoutAnchorProps = $$as(Common.FlyoutAnchorProps, commonProps);
                this._populateFlyoutAnchor$p$0(flyoutAnchorProps, actions, controls, sectionControlIds);
                if (menuLauncherModelType === 'StatefulSplitButtonModel') {
                    mruBypassControls.push(flyoutAnchorProps.ExternalId);
                }
                return actions;
            case Common.ControlType.Gallery:
                this._reactGalleryPoller$0.populateGallery($$as(Common.GalleryProps, commonProps), actions, controls, sectionControlIds);
                return actions;
        }
        return actions;
    },
    
    _populateButton$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_populateButton$p$0$in(button, actions, controls, sectionControlIds) {
        sectionControlIds.push(button.ExternalId);
        if (appChrome.selectors.isControlDefined(button.ExternalId)) {
            if (button.LabelText) {
                actions.push(appChrome.actions.setControlLabel(button.ExternalId, button.LabelText));
            }
            if (button.Description) {
                actions.push(appChrome.actions.updateCompoundButtonDescription(button.ExternalId, button.Description));
            }
            if (button.CommandValueId) {
                actions.push(appChrome.actions.setButtonCommandValueId(button.ExternalId, button.CommandValueId));
            }
        }
        else {
            if (!button.Description && !(Common.CompoundButtonProps.isInstanceOfType(button))) {
                var $$t_4;
                controls.push(appChrome.api.createButtonModel(button.ExternalId, button.LabelText, ($$t_4 = new OptionalButtonProperties(), $$t_4.iconSet = new IconSetContainer(this._getIconName$p$0(button), '', '', '').iconSet, $$t_4.keytip = button.KeyTip, $$t_4.supportsPreview = !!button.CommandPreviewId && !!button.CommandRevertId, $$t_4.customTooltip = (button.LabelText !== button.Alt) ? button.Alt : null, $$t_4)));
            }
            else {
                var $$t_5;
                controls.push(appChrome.api.createCompoundButtonModel(button.ExternalId, button.LabelText, button.Description, ($$t_5 = new OptionalCompoundButtonProperties(), $$t_5.iconSet = new IconSetContainer(this._getIconName$p$0(button), '', '', '').iconSet, $$t_5.keytip = button.KeyTip, $$t_5.roleInMenu = button.RoleInMenu, $$t_5.ariaDescription = button.AriaDescription, $$t_5), ''));
            }
            var $$t_6;
            this._externalUICommandDefinitionMapping$0.addCommandToMaps(($$t_6 = new Common.CommandMetadata(button.ExternalId, button.Command), $$t_6.set_menuItemId(button.MenuItemId), $$t_6.set_queryCommandId(button.QueryCommand), $$t_6.set_commandPreviewId(button.CommandPreviewId), $$t_6.set_commandRevertId(button.CommandRevertId), $$t_6));
        }
        if (button.Lang && Common.AppChromeUtils.appChromeContainsAction('setControlLanguage')) {
            actions.push(appChrome.actions.setControlLanguage(button.ExternalId, button.Lang));
        }
    },
    
    _populateCheckMarkToggleButton$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_populateCheckMarkToggleButton$p$0$in(checkMarkToggleButtonProps, actions, controls, sectionControlIds) {
        sectionControlIds.push(checkMarkToggleButtonProps.ExternalId);
        if (appChrome.selectors.isControlDefined(checkMarkToggleButtonProps.ExternalId)) {
            if (checkMarkToggleButtonProps.LabelText) {
                actions.push(appChrome.actions.setControlLabel(checkMarkToggleButtonProps.ExternalId, checkMarkToggleButtonProps.LabelText));
            }
        }
        else {
            var $$t_4;
            controls.push(appChrome.api.createToggleButtonModel(checkMarkToggleButtonProps.ExternalId, checkMarkToggleButtonProps.LabelText, ($$t_4 = new OptionalToggleButtonProperties(), $$t_4.iconSet = new IconSetContainer(this._getIconName$p$0(checkMarkToggleButtonProps), '', '', '').iconSet, $$t_4.keytip = checkMarkToggleButtonProps.KeyTip, $$t_4.toggled = checkMarkToggleButtonProps.IsChecked, $$t_4.fullDescriptionLabel = checkMarkToggleButtonProps.Description, $$t_4.roleInMenu = checkMarkToggleButtonProps.AriaLabel, $$t_4.customTooltip = (checkMarkToggleButtonProps.LabelText !== checkMarkToggleButtonProps.Alt) ? checkMarkToggleButtonProps.Alt : null, $$t_4.toggleUsingIcon = !!checkMarkToggleButtonProps.CheckedImageClass, $$t_4)));
            var $$t_5;
            this._externalUICommandDefinitionMapping$0.addCommandToMaps(($$t_5 = new Common.CommandMetadata(checkMarkToggleButtonProps.ExternalId, checkMarkToggleButtonProps.Command), $$t_5.set_menuItemId(checkMarkToggleButtonProps.MenuItemId), $$t_5.set_queryCommandId(checkMarkToggleButtonProps.QueryCommand), $$t_5));
        }
    },
    
    _populateToggleButton$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_populateToggleButton$p$0$in(toggleButtonProps, actions, controls, sectionControlIds) {
        sectionControlIds.push(toggleButtonProps.ExternalId);
        if (appChrome.selectors.isControlDefined(toggleButtonProps.ExternalId)) {
            if (toggleButtonProps.LabelText) {
                actions.push(appChrome.actions.setControlLabel(toggleButtonProps.ExternalId, toggleButtonProps.LabelText));
            }
        }
        else {
            var $$t_4;
            controls.push(appChrome.api.createToggleButtonModel(toggleButtonProps.ExternalId, toggleButtonProps.LabelText, ($$t_4 = new OptionalToggleButtonProperties(), $$t_4.iconSet = new IconSetContainer(this._getIconName$p$0(toggleButtonProps), '', '', '').iconSet, $$t_4.keytip = toggleButtonProps.KeyTip, $$t_4.fullDescriptionLabel = toggleButtonProps.Description, $$t_4.roleInMenu = toggleButtonProps.AriaLabel, $$t_4)));
            var $$t_5;
            this._externalUICommandDefinitionMapping$0.addCommandToMaps(($$t_5 = new Common.CommandMetadata(toggleButtonProps.ExternalId, toggleButtonProps.Command), $$t_5.set_menuItemId(toggleButtonProps.MenuItemId), $$t_5.set_queryCommandId(toggleButtonProps.QueryCommand), $$t_5));
        }
    },
    
    _populatePersonaButton$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_populatePersonaButton$p$0$in(personaButtonProps, actions, controls, sectionControlIds) {
        sectionControlIds.push(personaButtonProps.ExternalId);
        var personaInfo = this._getPersonaInfoFromProps$p$0(personaButtonProps);
        if (appChrome.selectors.isControlDefined(personaButtonProps.ExternalId)) {
            if (personaButtonProps.LabelText) {
                actions.push(appChrome.actions.setPersonaButtonCoauthor(personaButtonProps.ExternalId, personaInfo, personaButtonProps.LabelText, ''));
            }
        }
        else if (Common.AppChromeUtils.apiExists('createPersonaButtonModel')) {
            var $$t_5;
            controls.push(appChrome.api.createPersonaButtonModel(personaButtonProps.ExternalId, personaInfo, personaButtonProps.LabelText, ($$t_5 = new OptionalPersonaButtonProperties(), $$t_5.role = personaButtonProps.RoleInMenu, $$t_5.fullDescriptionLabel = personaButtonProps.AriaDescription, $$t_5.iconSet = { 'default': 'doughboywhiteglyph_20' }, $$t_5)));
        }
    },
    
    _populateFlyoutAnchor$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_populateFlyoutAnchor$p$0$in(flyoutAnchorProps, actions, controls, sectionControlIds) {
        sectionControlIds.push(flyoutAnchorProps.ExternalId);
        if (appChrome.selectors.isControlDefined(flyoutAnchorProps.ExternalId)) {
            if (flyoutAnchorProps.LabelText) {
                actions.push(appChrome.actions.setControlLabel(flyoutAnchorProps.ExternalId, flyoutAnchorProps.LabelText));
            }
        }
        else {
            var hideIcon = !isNullOrUndefined(flyoutAnchorProps.ImageIsVisible) && !flyoutAnchorProps.ImageIsVisible;
            var toggled = !isNullOrUndefined(flyoutAnchorProps.Toggled) && flyoutAnchorProps.Toggled;
            var $$t_6;
            controls.push(appChrome.api.createFlyoutAnchorModel(flyoutAnchorProps.ExternalId, flyoutAnchorProps.LabelText, ($$t_6 = new OptionalFlyoutAnchorProperties(), $$t_6.iconSet = new IconSetContainer(this._getIconName$p$0(flyoutAnchorProps), '', '', '').iconSet, $$t_6.keytip = flyoutAnchorProps.KeyTip, $$t_6.hideIcon = hideIcon, $$t_6.toggled = toggled, $$t_6.roleInMenu = flyoutAnchorProps.AriaLabel, $$t_6)));
            var $$t_7;
            this._externalUICommandDefinitionMapping$0.addCommandToMaps(($$t_7 = new Common.CommandMetadata(flyoutAnchorProps.ExternalId, flyoutAnchorProps.Command), $$t_7.set_queryCommandId(flyoutAnchorProps.QueryCommand), $$t_7.set_populationProps(new Common.MenuPopulationProperties(flyoutAnchorProps.PopulateQueryCommand, flyoutAnchorProps.PopulateOnlyOnce)), $$t_7));
        }
        if (flyoutAnchorProps.Menu) {
            actions.push.apply(actions, this._getUpdateActionsForMenuControls$p$0(flyoutAnchorProps.ExternalId, 'FlyoutAnchorModel', flyoutAnchorProps.Menu, null));
        }
        if (flyoutAnchorProps.Lang) {
            actions.push(appChrome.actions.setControlLanguage(flyoutAnchorProps.ExternalId, flyoutAnchorProps.Lang));
        }
    },
    
    _populateColorPicker$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_populateColorPicker$p$0$in(colorPicker, actions, controls, sectionControlIds) {
        if (colorPicker.McuLayout) {
            sectionControlIds.push(colorPicker.McuExternalId);
        }
        sectionControlIds.push(colorPicker.ExternalId);
        var mcuColorsToAdd = 0;
        if (appChrome.selectors.isControlDefined(colorPicker.ExternalId)) {
            if (colorPicker.McuLayout) {
                var colorPickerState = this._reactStatePropsSelector$0.getStateProps(colorPicker.ExternalId, 'ColorPickerModel');
                mcuColorsToAdd = colorPickerState['columnCount'];
            }
        }
        else {
            if (colorPicker.McuLayout) {
                controls.push(appChrome.api.createColorPickerModel(colorPicker.McuExternalId, colorPicker.Width, '', null));
                var $$t_A;
                this._externalUICommandDefinitionMapping$0.addCommandToMaps(($$t_A = new Common.CommandMetadata(colorPicker.McuExternalId, colorPicker.Command), $$t_A.set_commandPreviewId(colorPicker.CommandPreviewId), $$t_A.set_commandRevertId(colorPicker.CommandRevertId), $$t_A));
                mcuColorsToAdd = colorPicker.Width;
            }
            controls.push(appChrome.api.createColorPickerModel(colorPicker.ExternalId, colorPicker.Width, '', null));
            var $$t_B;
            this._externalUICommandDefinitionMapping$0.addCommandToMaps(($$t_B = new Common.CommandMetadata(colorPicker.ExternalId, colorPicker.Command), $$t_B.set_commandPreviewId(colorPicker.CommandPreviewId), $$t_B.set_commandRevertId(colorPicker.CommandRevertId), $$t_B));
        }
        var colorCellPropsMCU = new Array(0);
        var colorCellProps = new Array(0);
        for (var k = 0; k < colorPicker.Colors.length; k++) {
            var color = colorPicker.Colors[k];
            if (k < mcuColorsToAdd) {
                colorCellPropsMCU.push(appChrome.api.colorPickerCell(color.Color, color.DisplayColor, color.Alt));
            }
            else {
                colorCellProps.push(appChrome.api.colorPickerCell(color.Color, color.DisplayColor, color.Alt));
            }
        }
        if (colorCellPropsMCU.length > 0) {
            actions.push(appChrome.actions.populateColorPickerCells(colorPicker.McuExternalId, colorCellPropsMCU));
        }
        actions.push(appChrome.actions.populateColorPickerCells(colorPicker.ExternalId, colorCellProps));
    },
    
    _getIconName$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_getIconName$p$0$in(props) {
        if (props.Image32by32Class) {
            return this._externalUICommandDefinitionMapping$0.getExternalIconIdByLegacyIconId(props.Image32by32Class);
        }
        if (props.Image16by16Class) {
            return this._externalUICommandDefinitionMapping$0.getExternalIconIdByLegacyIconId(props.Image16by16Class);
        }
        return props.ExternalImageId;
    },
    
    _getPersonaInfoFromProps$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_getPersonaInfoFromProps$p$0$in(props) {
        if (!props) {
            return null;
        }
        var $$t_1, $$t_2;
        return $$t_2 = new PersonaInfo(), $$t_2.displayName = props.DisplayName, $$t_2.personaCoinColor = props.ImageBackColor, $$t_2.isUnauthenticatedSender = props.IsAnonymous, $$t_2.identifiers = ($$t_1 = new PersonaIdentifiers(), $$t_1.PersonaType = 'User', $$t_1.Smtp = props.PersonaId, $$t_1), $$t_2;
    },
    
    _getInputMethod$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_getInputMethod$p$0$in(payload) {
        var inputMethod = Common.InputManager.InputMethod.mouse;
        if (payload && (('inputMethod') in payload) && payload['inputMethod']) {
            inputMethod = payload['inputMethod'];
        }
        return inputMethod;
    },
    
    _isShadowMenuOpen$p$0: function CommandUI_ReactPopulateQueryCommandPoller$_isShadowMenuOpen$p$0$in(payload) {
        return !!payload && payload['isShadowRendering'];
    }
}


CommandUI.ReactQueryCommandPoller = function CommandUI_ReactQueryCommandPoller(rootPoller, rootUser, externalUICommandDefinitionMapping, rootType, reactGalleryPoller) {
    this._externalUICommandDefinitionMapping$0 = externalUICommandDefinitionMapping;
    this._rootPoller$0 = rootPoller;
    this._rootUser$0 = rootUser;
    this._rootType$0 = rootType;
    this._reactGalleryPoller$0 = reactGalleryPoller;
}
CommandUI.ReactQueryCommandPoller.prototype = {
    _externalUICommandDefinitionMapping$0: null,
    _rootPoller$0: null,
    _rootUser$0: null,
    _rootType$0: 0,
    _reactGalleryPoller$0: null,
    
    getReduxActions: function CommandUI_ReactQueryCommandPoller$getReduxActions$in(command, modelType, stateProps) {
        var actions = new Array(0);
        if (this._isContainerModelType$p$0(modelType)) {
            var reduxActions = this._getStateActionsForContainerModelType$p$0(command, modelType, stateProps);
            if (!isNullOrUndefined(reduxActions)) {
                actions.push.apply(actions, reduxActions);
            }
        }
        else if (command) {
            var pollResult = this._getPollResult$p$0(command, stateProps);
            if ((CommandUI.SharedControlCommandProperties.visible) in stateProps) {
                actions.push(CommandUI.ReactPollHelper.getHiddenStateAction(command.get_externalUxCommand(), !stateProps[CommandUI.SharedControlCommandProperties.visible]));
            }
            actions.push(CommandUI.ReactPollHelper.getEnabledDisabledAction(command.get_externalUxCommand(), CommandUI.ReactPollHelper.isCommandDisabled(pollResult)));
            if (!isNullOrUndefined(stateProps[CommandUI.SharedControlCommandProperties.labelText])) {
                actions.push(CommandUI.ReactPollHelper.getSetControlLabelAction(command.get_externalUxCommand(), stateProps[CommandUI.SharedControlCommandProperties.labelText]));
            }
            if (!isNullOrUndefined(modelType)) {
                var stateActions = CommandUI.ReactPollHelper.getControlStateActions(command.get_externalUxCommand(), modelType, stateProps, pollResult);
                if (!isNullOrUndefined(stateActions)) {
                    actions.push.apply(actions, stateActions);
                }
                if (modelType === 'PeopleWell') {
                    this._addPeopleWellStateActions$p$0(command.get_externalUxCommand(), stateProps, actions);
                }
            }
        }
        return actions;
    },
    
    getEnabledDisabledActionBasedOnChildrenCommands: function CommandUI_ReactQueryCommandPoller$getEnabledDisabledActionBasedOnChildrenCommands$in(parentCommand, modelType, stateProps) {
        var actions = new Array(0);
        var childCommands = {};
        switch (modelType) {
            case 'FlyoutAnchorModel':
                childCommands = appChrome.selectors.getFlyoutAnchorMenuItems(parentCommand);
                break;
            case 'SplitButtonModel':
                var splitButtonState = appChrome.selectors.getSplitButtonState(parentCommand);
                var metadata = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId(splitButtonState['command']);
                if (metadata) {
                    var enabled = this._rootPoller$0.pollForEnabledDisabledControlState(this._rootUser$0, metadata.get_commandId(), stateProps);
                    actions.push(appChrome.actions.updateSplitButtonPrimaryDisabledState(parentCommand, !enabled));
                    actions.push(CommandUI.ReactPollHelper.getEnabledDisabledAction(parentCommand, false));
                }
                return actions;
            default:
                return null;
        }
        var unknownCommands = false;
        var $$dict_C = childCommands;
        for (var $$key_D in $$dict_C) {
            var childCommand = { key: $$key_D, value: $$dict_C[$$key_D] };
            var command = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId(childCommand.key);
            if (CommandUI.ScriptUtility.isNullOrUndefined(command)) {
                unknownCommands = true;
                continue;
            }
            stateProps['SourceControlId'] = command.get_externalUxCommand();
            var enabled = this._rootPoller$0.pollForEnabledDisabledControlState(this._rootUser$0, command.get_commandId(), stateProps);
            if (enabled) {
                actions.push(CommandUI.ReactPollHelper.getEnabledDisabledAction(parentCommand, false));
                return actions;
            }
        }
        actions.push(CommandUI.ReactPollHelper.getEnabledDisabledAction(parentCommand, !unknownCommands));
        return actions;
    },
    
    _getStateActionsForContainerModelType$p$0: function CommandUI_ReactQueryCommandPoller$_getStateActionsForContainerModelType$p$0$in(command, modelType, stateProps) {
        switch (modelType) {
            case 'PreviewGalleryModel':
                return this._reactGalleryPoller$0.getPreviewGalleryQueryCommandActions(command, stateProps);
            case 'GalleryModel':
                return this._reactGalleryPoller$0.getGalleryQueryCommandActions(stateProps);
        }
        return null;
    },
    
    _isContainerModelType$p$0: function CommandUI_ReactQueryCommandPoller$_isContainerModelType$p$0$in(modelType) {
        return modelType === 'GalleryModel' || modelType === 'PreviewGalleryModel';
    },
    
    _getPollResult$p$0: function CommandUI_ReactQueryCommandPoller$_getPollResult$p$0$in(command, stateProps) {
        stateProps['MenuItemId'] = command.get_menuItemId();
        return this._rootPoller$0.pollForCommandState(this._rootUser$0, this._rootType$0, command.get_commandId(), command.get_queryCommandId(), stateProps);
    },
    
    _addPeopleWellStateActions$p$0: function CommandUI_ReactQueryCommandPoller$_addPeopleWellStateActions$p$0$in(command, properties, actions) {
        var labelText = properties[CommandUI.Controls.FlyoutAnchorCommandProperties.LabelText];
        var placeholderReplacements = properties[CommandUI.Controls.FlyoutAnchorCommandProperties.LabelTextUserGeneratedPlaceholderReplacements];
        var coauthorStatusLabel = labelText;
        if (placeholderReplacements && placeholderReplacements.length > 0) {
            coauthorStatusLabel = String.format.apply(null, [ coauthorStatusLabel ].concat(placeholderReplacements));
        }
        actions.push(this._getUpdatePeopleWellAction$p$0(command, coauthorStatusLabel));
        return actions;
    },
    
    _getUpdatePeopleWellAction$p$0: function CommandUI_ReactQueryCommandPoller$_getUpdatePeopleWellAction$p$0$in(command, coauthorStatusLabel) {
        return appChrome.actions.updatePeopleWell(this._getCoauthorsInfo$p$0(command), coauthorStatusLabel);
    },
    
    _getCoauthorsInfo$p$0: function CommandUI_ReactQueryCommandPoller$_getCoauthorsInfo$p$0$in(command) {
        var coauthors = new Array(0);
        var stateProps = {};
        var populateCommand = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId(command).get_populationProps().get_populateQueryCommandId();
        this._rootPoller$0.pollForCommandState(this._rootUser$0, this._rootType$0, '1285265560', populateCommand, stateProps);
        var menuProps = (stateProps).MenuItems;
        if (!menuProps) {
            return coauthors;
        }
        var menuSection = menuProps.MenuSectionList[0];
        for (var i = 0; i < menuSection.ControlList.length; i++) {
            var peopleButton = menuSection.ControlList[i];
            var coauthor = {};
            coauthor['name'] = peopleButton.Alt;
            coauthor['id'] = peopleButton.MenuItemId;
            coauthor['description'] = peopleButton.Description;
            coauthor['color'] = peopleButton.ImageBackColor;
            coauthor['joinTime'] = peopleButton.JoinTimeInMS;
            coauthor['imageUrl'] = peopleButton.ImageUrl;
            coauthor['activeStatus'] = peopleButton.ActiveStatus;
            coauthor['isAnonymous'] = peopleButton.IsAnonymous;
            coauthor['canJump'] = peopleButton.CanJump;
            coauthor['chatCapable'] = peopleButton.ChatCapable;
            coauthor['upn'] = peopleButton.Upn;
            coauthors.push(coauthor);
        }
        return coauthors;
    }
}


CommandUI.ReactRibbonExternal = function CommandUI_ReactRibbonExternal() {
}
CommandUI.ReactRibbonExternal.prototype = {
    _$$pf_Jewel$p$0: null,
    
    get_jewel: function CommandUI_ReactRibbonExternal$get_jewel$in() {
        return this._$$pf_Jewel$p$0;
    },
    
    set_jewel: function CommandUI_ReactRibbonExternal$set_jewel$in(value) {
        this._$$pf_Jewel$p$0 = value;
        return value;
    },
    
    get_upperRibbonHeight: function CommandUI_ReactRibbonExternal$get_upperRibbonHeight$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909661);
        return 0;
    },
    
    get_lowerRibbonHeight: function CommandUI_ReactRibbonExternal$get_lowerRibbonHeight$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909662);
        return 0;
    },
    
    get_minimized: function CommandUI_ReactRibbonExternal$get_minimized$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909663);
        return false;
    },
    
    scaleHeader: function CommandUI_ReactRibbonExternal$scaleHeader$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909664);
    },
    
    toggleMinimizedState: function CommandUI_ReactRibbonExternal$toggleMinimizedState$in(inputMethod) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909665);
    },
    
    dismissTabPopup: function CommandUI_ReactRibbonExternal$dismissTabPopup$in(endBlocking, loseFocus) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909666);
        return false;
    },
    
    setFocusOnCurrentTabTitle: function CommandUI_ReactRibbonExternal$setFocusOnCurrentTabTitle$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909667);
    },
    
    selectTabById: function CommandUI_ReactRibbonExternal$selectTabById$in(tabId, force) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909696);
        return false;
    },
    
    dismissAllTransientUI: function CommandUI_ReactRibbonExternal$dismissAllTransientUI$in() {
        return false;
    },
    
    updateOpenMenu: function CommandUI_ReactRibbonExternal$updateOpenMenu$in(menuId) {
        if (this.get_jewel() && this.get_jewel().refreshOpenMenu(menuId)) {
            return true;
        }
        return false;
    },
    
    get_tabPoppedUp: function CommandUI_ReactRibbonExternal$get_tabPoppedUp$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909699);
        return false;
    },
    
    get_selectedTabId: function CommandUI_ReactRibbonExternal$get_selectedTabId$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909700);
        return null;
    },
    
    setControlVisibility: function CommandUI_ReactRibbonExternal$setControlVisibility$in(controlId, isVisible) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909701);
    },
    
    getControlVisibility: function CommandUI_ReactRibbonExternal$getControlVisibility$in(controlId) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909702);
        return false;
    },
    
    forceEnableControl: function CommandUI_ReactRibbonExternal$forceEnableControl$in(controlId, isEnabled) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909703);
    },
    
    isControlEnabled: function CommandUI_ReactRibbonExternal$isControlEnabled$in(controlId) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909704);
        return false;
    },
    
    get_controlIdPrefix: function CommandUI_ReactRibbonExternal$get_controlIdPrefix$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909705);
        return null;
    },
    
    set_controlIdPrefix: function CommandUI_ReactRibbonExternal$set_controlIdPrefix$in(value) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909706);
        return value;
    },
    
    beginModal: function CommandUI_ReactRibbonExternal$beginModal$in(controller, takeFocus, isBlocking) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909707);
    },
    
    endModal: function CommandUI_ReactRibbonExternal$endModal$in(controller, loseFocus, endBlocking) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909708);
    },
    
    endBlockingModeKeepModal: function CommandUI_ReactRibbonExternal$endBlockingModeKeepModal$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909709);
    },
    
    getValidControl: function CommandUI_ReactRibbonExternal$getValidControl$in(controlId) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909710);
        return null;
    },
    
    ensureBehaviorAttached: function CommandUI_ReactRibbonExternal$ensureBehaviorAttached$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909711);
    },
    
    refresh: function CommandUI_ReactRibbonExternal$refresh$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909712);
    },
    
    get_controls: function CommandUI_ReactRibbonExternal$get_controls$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909713);
        return null;
    },
    
    refreshOpenMenu: function CommandUI_ReactRibbonExternal$refreshOpenMenu$in(menuId) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909714);
        return false;
    },
    
    commitAnyPendingChange: function CommandUI_ReactRibbonExternal$commitAnyPendingChange$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909715);
    },
    
    pollForStateAndUpdate: function CommandUI_ReactRibbonExternal$pollForStateAndUpdate$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909716);
    },
    
    get_rootUser: function CommandUI_ReactRibbonExternal$get_rootUser$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909717);
        return null;
    },
    
    set_rootUser: function CommandUI_ReactRibbonExternal$set_rootUser$in(value) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909718);
        return value;
    },
    
    updateControl: function CommandUI_ReactRibbonExternal$updateControl$in(controlId) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 23909719);
    },
    
    get_inKeytipMode: function CommandUI_ReactRibbonExternal$get_inKeytipMode$in() {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 24475040);
        return false;
    },
    
    enterKeytipMode: function CommandUI_ReactRibbonExternal$enterKeytipMode$in(onExitCallback) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 24475041);
    },
    
    exitKeytipMode: function CommandUI_ReactRibbonExternal$exitKeytipMode$in(preserveRibbonFocus, dismissTabPopup) {
        Common.Debug.assertNotReachedStringTag('RibbonExternal shouldn\'t be used for React Ribbon', 24475042);
    }
}


CommandUI.ReactRibbonFocusManager = function CommandUI_ReactRibbonFocusManager(focusManager, actionManager, wacRibbonPanel, ribbonFocusId) {
    this.$$d__onRibbonMouseDown$p$0 = Function.createDelegate(this, this._onRibbonMouseDown$p$0);
    this.$$d__ribbonEscAction$p$0 = Function.createDelegate(this, this._ribbonEscAction$p$0);
    this.$$d__ribbonMoveBackwardAction$p$0 = Function.createDelegate(this, this._ribbonMoveBackwardAction$p$0);
    this.$$d__ribbonMoveForwardAction$p$0 = Function.createDelegate(this, this._ribbonMoveForwardAction$p$0);
    this._focusManager$0 = focusManager;
    this._actionManager$0 = actionManager;
    this._wacRibbonPanel$0 = wacRibbonPanel;
    this._ribbonFocusId$0 = ribbonFocusId;
}
CommandUI.ReactRibbonFocusManager.prototype = {
    _focusManager$0: null,
    _actionManager$0: null,
    _wacRibbonPanel$0: null,
    _ribbonFocusId$0: null,
    
    initialize: function CommandUI_ReactRibbonFocusManager$initialize$in() {
        this._actionManager$0.addAction(Common.CommonCommands.ribbonMoveForward, Common.CommonContextIds.frame, this.$$d__ribbonMoveForwardAction$p$0);
        this._actionManager$0.addAction(Common.CommonCommands.ribbonMoveBackward, Common.CommonContextIds.frame, this.$$d__ribbonMoveBackwardAction$p$0);
        this._actionManager$0.addAction(Common.CommonCommands.ribbonEsc, Common.CommonContextIds.frame, this.$$d__ribbonEscAction$p$0);
        var ribbonScope = Common.CuiHeaderDomReference.initializeCuiScope(this._ribbonFocusId$0, null, this._wacRibbonPanel$0, false, true, true, true);
        ribbonScope.set_keyDownHandledExternally(true);
        this._rebindTabHandlers$p$0(ribbonScope, Common.CommonCommands.ribbonMoveForward, Common.CommonCommands.ribbonMoveBackward);
        ribbonScope.bindAction(Common.KeyInputManager.hashKey(Common.KeyCode.vK_Esc, 0), Common.CommonCommands.ribbonEsc);
        var transientUIScope = this._focusManager$0.getScope(Common.AFrame.reactTransientUIFocusId);
        transientUIScope.set_keyDownHandledExternally(true);
        this._rebindTabHandlers$p$0(transientUIScope, Common.CommonCommands.doBrowserDefault, Common.CommonCommands.doBrowserDefault);
        Common.MouseInputManager.get_instance().registerHandler(Common.EventNames.mouseDown, this._wacRibbonPanel$0, this.$$d__onRibbonMouseDown$p$0);
        var f6Manager = Common.F6Manager.get_instance();
        if (Common.AppChromeUtils.apiExists('enterKeytipMode')) {
            var $$t_4 = this;
            f6Manager.setOnPostF6(this._ribbonFocusId$0, function() {
                appChrome.api.enterKeytipMode(false);
            });
        }
        if (Common.AppChromeUtils.apiExists('exitKeytipMode')) {
            var $$t_5 = this;
            f6Manager.setOnBeforeF6(this._ribbonFocusId$0, function(moveForward) {
                appChrome.api.exitKeytipMode();
                Common.ShyRibbon.changeShyRibbonState(Common.PopOverState.expanded, 0);
            });
        }
    },
    
    _ribbonMoveForwardAction$p$0: function CommandUI_ReactRibbonFocusManager$_ribbonMoveForwardAction$p$0$in(actionId, context, behavior, reportingData, actionData) {
        return 4;
    },
    
    _ribbonMoveBackwardAction$p$0: function CommandUI_ReactRibbonFocusManager$_ribbonMoveBackwardAction$p$0$in(actionId, context, behavior, reportingData, actionData) {
        return 4;
    },
    
    _ribbonEscAction$p$0: function CommandUI_ReactRibbonFocusManager$_ribbonEscAction$p$0$in(actionId, context, behavior, reportingData, actionData) {
        if (Common.AppChromeUtils.apiExists('inKeytipMode') && !appChrome.api.inKeytipMode()) {
            if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ShyRibbonIsEnabled')) {
                var $$t_5;
                appChrome.api.dispatch(appChrome.actions.setShyState(($$t_5 = new Common.ShyComponentState(), $$t_5.state = 0, $$t_5)));
            }
            this._focusManager$0.setScope(Common.AFrame.documentFocusID);
        }
        return 4;
    },
    
    _rebindTabHandlers$p$0: function CommandUI_ReactRibbonFocusManager$_rebindTabHandlers$p$0$in(scope, tabActionId, tabShiftActionId) {
        var tabInput = Common.KeyInputManager.hashKey(Common.KeyCode.vK_Tab, 0);
        var tabShiftInput = Common.KeyInputManager.hashKey(Common.KeyCode.vK_Tab, Common.KeyModifiers.shift);
        scope.unBindAction(tabInput);
        scope.unBindAction(tabShiftInput);
        scope.bindAction(tabInput, tabActionId);
        scope.bindAction(tabShiftInput, tabShiftActionId);
    },
    
    _onRibbonMouseDown$p$0: function CommandUI_ReactRibbonFocusManager$_onRibbonMouseDown$p$0$in(args) {
        if (args.innerEvent && args.innerEvent.target && args.innerEvent.target.tagName.toLowerCase() !== 'input') {
            args.innerEvent.preventDefault();
        }
        return false;
    },
    
    dispose: function CommandUI_ReactRibbonFocusManager$dispose$in() {
        this._actionManager$0.removeAction(Common.CommonCommands.ribbonMoveForward, Common.CommonContextIds.frame, this.$$d__ribbonMoveForwardAction$p$0);
        this._actionManager$0.removeAction(Common.CommonCommands.ribbonMoveBackward, Common.CommonContextIds.frame, this.$$d__ribbonMoveBackwardAction$p$0);
        this._actionManager$0.removeAction(Common.CommonCommands.ribbonEsc, Common.CommonContextIds.frame, this.$$d__ribbonEscAction$p$0);
    }
}


CommandUI.ReactRibbonJewelProperties = function CommandUI_ReactRibbonJewelProperties(dataSource, trimmedIds, jewelId) {
    this.set_dataSource(dataSource);
    this.set_trimmedIds(trimmedIds);
    this.set_jewelId(jewelId);
}
CommandUI.ReactRibbonJewelProperties.prototype = {
    _$$pf_DataSource$p$0: null,
    
    get_dataSource: function CommandUI_ReactRibbonJewelProperties$get_dataSource$in() {
        return this._$$pf_DataSource$p$0;
    },
    
    set_dataSource: function CommandUI_ReactRibbonJewelProperties$set_dataSource$in(value) {
        this._$$pf_DataSource$p$0 = value;
        return value;
    },
    
    _$$pf_TrimmedIds$p$0: null,
    
    get_trimmedIds: function CommandUI_ReactRibbonJewelProperties$get_trimmedIds$in() {
        return this._$$pf_TrimmedIds$p$0;
    },
    
    set_trimmedIds: function CommandUI_ReactRibbonJewelProperties$set_trimmedIds$in(value) {
        this._$$pf_TrimmedIds$p$0 = value;
        return value;
    },
    
    _$$pf_JewelId$p$0: null,
    
    get_jewelId: function CommandUI_ReactRibbonJewelProperties$get_jewelId$in() {
        return this._$$pf_JewelId$p$0;
    },
    
    set_jewelId: function CommandUI_ReactRibbonJewelProperties$set_jewelId$in(value) {
        this._$$pf_JewelId$p$0 = value;
        return value;
    }
}


CommandUI.ReactRibbonRoot = function CommandUI_ReactRibbonRoot(rootManager, reactCommandDefinitionMapping, rootUser) {
    this._reactCommandDefinitionMapping$0 = reactCommandDefinitionMapping;
    rootManager.addRoot(this);
    this.set_rootUser(rootUser);
}
CommandUI.ReactRibbonRoot.prototype = {
    _reactCommandDefinitionMapping$0: null,
    _reactRibbonRootPoller$0: null,
    _lastPollTime$0: null,
    
    get__lastPollTime$i$0: function CommandUI_ReactRibbonRoot$get__lastPollTime$i$0$in() {
        if (!this._lastPollTime$0) {
            this._lastPollTime$0 = new Date();
            this._lastPollTime$0.setTime(0);
        }
        return this._lastPollTime$0;
    },
    
    set__lastPollTime$i$0: function CommandUI_ReactRibbonRoot$set__lastPollTime$i$0$in(value) {
        this._lastPollTime$0 = value;
        return value;
    },
    
    get_rootType: function CommandUI_ReactRibbonRoot$get_rootType$in() {
        return Common.UILocation.ribbon;
    },
    
    _$$pf_RootUser$p$0: null,
    
    get_rootUser: function CommandUI_ReactRibbonRoot$get_rootUser$in() {
        return this._$$pf_RootUser$p$0;
    },
    
    set_rootUser: function CommandUI_ReactRibbonRoot$set_rootUser$in(value) {
        this._$$pf_RootUser$p$0 = value;
        return value;
    },
    
    get_reactRibbonRootPoller: function CommandUI_ReactRibbonRoot$get_reactRibbonRootPoller$in() {
        if (!this._reactRibbonRootPoller$0) {
            this._reactRibbonRootPoller$0 = new CommandUI.ReactRibbonRootPoller(this._reactCommandDefinitionMapping$0, this.get_rootUser(), this.get_rootType());
        }
        return this._reactRibbonRootPoller$0;
    },
    
    commitAnyPendingChange: function CommandUI_ReactRibbonRoot$commitAnyPendingChange$in() {
        var activeElement = document.activeElement;
        if (Common.DomUtils.isEditable(activeElement)) {
            activeElement.blur();
        }
    },
    
    executeCommand: function CommandUI_ReactRibbonRoot$executeCommand$in(cuiCommandName, parameters, commandTabName, inputMethod, closeAllMenus, actionResultCallback, telemetryParameters, location) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_rootUser())) {
            var sqmInfo = new Common.CommandSqmInfo();
            sqmInfo.CommandLocation = location;
            sqmInfo.InvocationMethod = inputMethod;
            sqmInfo.CommandTabName = commandTabName;
            this._checkFloodgateSurveyInfo$p$0();
            Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrEmptyString(cuiCommandName), 23183693);
            parameters[Common.ReactRibbonConstants.uiLocation] = location;
            this.get_rootUser().executeRootCommand(cuiCommandName, parameters, sqmInfo, actionResultCallback, telemetryParameters);
        }
    },
    
    getPollForStateAndUpdateActions: function CommandUI_ReactRibbonRoot$getPollForStateAndUpdateActions$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_rootUser())) {
            return this.get_reactRibbonRootPoller().getPollForStateAndUpdateActions();
        }
        return new Array(0);
    },
    
    getGroupedPollForStateAndUpdateActions: function CommandUI_ReactRibbonRoot$getGroupedPollForStateAndUpdateActions$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_rootUser())) {
            return this.get_reactRibbonRootPoller().getGroupedPollForStateAndUpdateActions();
        }
        return new Array(0);
    },
    
    pollForStateAndUpdate: function CommandUI_ReactRibbonRoot$pollForStateAndUpdate$in() {
        var actions = this.getPollForStateAndUpdateActions();
        if (actions.length > 0) {
            this.set__lastPollTime$i$0(new Date());
            appChrome.api.dispatch(actions);
        }
    },
    
    updatePeopleWellControl: function CommandUI_ReactRibbonRoot$updatePeopleWellControl$in() {
        if (Common.AppChromeUtils.appChromeAlreadyLoaded()) {
            var peopleWellDict = {};
            peopleWellDict['PeopleWell'] = 'PeopleWell';
            this.get_reactRibbonRootPoller().pollForStateAndUpdateCommands(peopleWellDict, Common.UILocation.farPeripheralControls);
        }
    },
    
    updateDocChatControl: function CommandUI_ReactRibbonRoot$updateDocChatControl$in() {
        if (Common.AppChromeUtils.appChromeAlreadyLoaded()) {
            var docChatDic = {};
            docChatDic['DocChat'] = 'ButtonModel';
            this.get_reactRibbonRootPoller().pollForStateAndUpdateCommands(docChatDic, Common.UILocation.farPeripheralControls);
        }
    },
    
    updateControl: function CommandUI_ReactRibbonRoot$updateControl$in(controlId) {
    },
    
    _checkFloodgateSurveyInfo$p$0: function CommandUI_ReactRibbonRoot$_checkFloodgateSurveyInfo$p$0$in() {
        var sif = Common.Utils.Container.get_instance().tryResolve(Common.ISystemInitiatedFeedback, '');
        if (sif) {
            sif.logActivity('SLRCommandUsed', 'FGSLRUsageEnabled');
        }
        else {
            Diag.ULS.sendTraceTag(36741406, 340, 50, 'ISystemInitiatedFeedback was null');
        }
    }
}


CommandUI.ReactRibbonRootPoller = function CommandUI_ReactRibbonRootPoller(externalUICommandDefinitionMapping, rootUser, rootType) {
    if (!rootUser) {
        Common.Debug.assertNotReachedStringTag('RootUser is null', 24142614);
    }
    this._externalUICommandDefinitionMapping$0 = externalUICommandDefinitionMapping;
    this._rootUser$0 = rootUser;
    var rootPoller = new CommandUI._rootPoller();
    this._statePropsSelector$0 = new CommandUI.ReactStatePropsSelector();
    this._reactGalleryPoller$0 = new CommandUI.ReactGalleryPoller(rootPoller, this._rootUser$0, rootType, this._externalUICommandDefinitionMapping$0);
    this._reactPopulateQueryCommandPoller$0 = new CommandUI.ReactPopulateQueryCommandPoller(rootPoller, this._rootUser$0, rootType, this._externalUICommandDefinitionMapping$0, this._reactGalleryPoller$0);
    this._queryCommandPoller$0 = new CommandUI.ReactQueryCommandPoller(rootPoller, this._rootUser$0, this._externalUICommandDefinitionMapping$0, rootType, this._reactGalleryPoller$0);
}
CommandUI.ReactRibbonRootPoller.prototype = {
    _externalUICommandDefinitionMapping$0: null,
    _rootUser$0: null,
    _statePropsSelector$0: null,
    _queryCommandPoller$0: null,
    _reactPopulateQueryCommandPoller$0: null,
    _reactGalleryPoller$0: null,
    
    getPollForStateAndUpdateActions: function CommandUI_ReactRibbonRootPoller$getPollForStateAndUpdateActions$in() {
        var actions = new Array(0);
        if (!Common.AppChromeUtils.appChromeAlreadyLoaded()) {
            return actions;
        }
        actions.push.apply(actions, this._getUpdateContextualTabsActions$p$0());
        var disableTabActions = this._getDisableControlsInTabsActions$p$0(appChrome.selectors.getSelectedTabId());
        if (disableTabActions.length > 0) {
            actions.push.apply(actions, disableTabActions);
        }
        else {
            var activeControlIds = appChrome.selectors.getActiveControlIds();
            if (Object.keys(activeControlIds).length) {
                var controlsToDisable = this._getDisabledControlsInGroups$p$0(appChrome.selectors.getActiveGroupIds());
                for (var $$arr_4 = controlsToDisable, $$len_5 = $$arr_4.length, $$idx_6 = 0; $$idx_6 < $$len_5; ++$$idx_6) {
                    var controlId = $$arr_4[$$idx_6];
                    actions.push(appChrome.actions.updateControlEnabledDisabledState(controlId, true));
                    delete activeControlIds[controlId];
                }
                actions.push.apply(actions, this.getUpdateActionsForCommands(activeControlIds, 0));
            }
        }
        return actions;
    },
    
    getGroupedPollForStateAndUpdateActions: function CommandUI_ReactRibbonRootPoller$getGroupedPollForStateAndUpdateActions$in() {
        var actions = new Array(0);
        if (!Common.AppChromeUtils.appChromeAlreadyLoaded()) {
            return actions;
        }
        actions[actions.length] = this._getUpdateContextualTabsActions$p$0();
        var disableTabActions = this._getGroupedDisableControlsInTabActions$p$0(appChrome.selectors.getSelectedTabId());
        if (disableTabActions.length > 0) {
            actions.push.apply(actions, disableTabActions);
        }
        else {
            var activeControlIds = appChrome.selectors.getActiveControlIds();
            var groupIds = appChrome.selectors.getActiveGroupIds();
            var controlToDisableMap = this._getRibbonControlsToDisableMap$p$0(groupIds);
            for (var $$arr_5 = groupIds, $$len_6 = $$arr_5.length, $$idx_7 = 0; $$idx_7 < $$len_6; ++$$idx_7) {
                var groupId = $$arr_5[$$idx_7];
                var groupActions = new Array(0);
                for (var $$arr_A = appChrome.selectors.getVisibleControlsInGroup(groupId), $$len_B = $$arr_A.length, $$idx_C = 0; $$idx_C < $$len_B; ++$$idx_C) {
                    var controlId = $$arr_A[$$idx_C];
                    var modelType = activeControlIds[controlId];
                    if (controlToDisableMap[controlId]) {
                        groupActions.push(appChrome.actions.updateControlEnabledDisabledState(controlId, true));
                    }
                    else {
                        groupActions.push.apply(groupActions, this._getUpdateActionsForCommand$p$0(controlId, modelType, 0));
                    }
                    delete activeControlIds[controlId];
                }
                actions[actions.length] = groupActions;
            }
            actions[actions.length] = this.getUpdateActionsForCommands(activeControlIds, 0);
            return actions;
        }
        return actions;
    },
    
    pollForStateAndUpdateCommands: function CommandUI_ReactRibbonRootPoller$pollForStateAndUpdateCommands$in(commands, location) {
        if (Common.AppChromeUtils.appChromeAlreadyLoaded()) {
            var actions = this.getUpdateActionsForCommands(commands, location);
            appChrome.api.dispatch(actions);
        }
    },
    
    populateControlMenu: function CommandUI_ReactRibbonRootPoller$populateControlMenu$in(command, modelType, payload) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(command) && command.get_populationProps() && !this._reactPopulateQueryCommandPoller$0.skipPopulation(command)) {
            var populateActions = this._reactPopulateQueryCommandPoller$0.getReduxActionsAndCommandsToPoll(command, modelType, payload);
            if (Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ReactPopulateAndPollMenusAtSameTimeIsEnabled')) {
                if (!populateActions.wasShadowMenuOpen) {
                    var $$t_4;
                    ($$t_4 = populateActions.actions).push.apply($$t_4, this.getUpdateActionsForCommands(populateActions.commandsToPoll, Common.AppChromeUtils.getUILocationFromPayload(payload)));
                }
            }
            if (populateActions.actions.length > 0) {
                appChrome.api.dispatch(populateActions.actions);
                return true;
            }
        }
        return false;
    },
    
    getUpdateActionsForCommands: function CommandUI_ReactRibbonRootPoller$getUpdateActionsForCommands$in(ribbonCommands, location) {
        var actions = new Array(0);
        var $$dict_4 = ribbonCommands;
        for (var $$key_5 in $$dict_4) {
            var reactCommand = { key: $$key_5, value: $$dict_4[$$key_5] };
            actions.push.apply(actions, this._getUpdateActionsForCommand$p$0(reactCommand.key, reactCommand.value, location));
        }
        return actions;
    },
    
    _getUpdateActionsForCommand$p$0: function CommandUI_ReactRibbonRootPoller$_getUpdateActionsForCommand$p$0$in(ribbonCommand, modelType, location) {
        var actions = new Array(0);
        var command = this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId(ribbonCommand);
        var stateProps = {};
        if (appChrome.selectors.isControlDefined(ribbonCommand)) {
            stateProps = this._statePropsSelector$0.getStateProps(ribbonCommand, modelType);
        }
        stateProps[Common.ReactRibbonConstants.uiLocation] = location;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(command)) {
            stateProps['MenuItemId'] = command.get_menuItemId();
            stateProps['SourceControlId'] = ribbonCommand;
        }
        else {
            stateProps['ExternalUxId'] = ribbonCommand;
            var stateActions = this._queryCommandPoller$0.getEnabledDisabledActionBasedOnChildrenCommands(ribbonCommand, modelType, stateProps);
            if (stateActions && stateActions.length > 0) {
                actions.push.apply(actions, stateActions);
            }
        }
        actions.push.apply(actions, this._queryCommandPoller$0.getReduxActions(command, modelType, stateProps));
        return actions;
    },
    
    _getUpdateContextualTabsActions$p$0: function CommandUI_ReactRibbonRootPoller$_getUpdateContextualTabsActions$p$0$in() {
        var actions = new Array(0);
        var contextualTabIds = appChrome.selectors.getContextualTabIds();
        for (var i = 0; i < contextualTabIds.length; i++) {
            var legacyTabCommandId = this._externalUICommandDefinitionMapping$0.getTabCommandByExternalUxId(contextualTabIds[i]);
            if (legacyTabCommandId) {
                var enabled = this._rootUser$0.isRootCommandEnabled(legacyTabCommandId, null);
                actions.push(appChrome.actions.activateDeactivateContextualTab(contextualTabIds[i], enabled));
            }
        }
        return actions;
    },
    
    _getDisableControlsInTabsActions$p$0: function CommandUI_ReactRibbonRootPoller$_getDisableControlsInTabsActions$p$0$in(tabId) {
        var actions = new Array(0);
        var legacyTabCommandId = this._externalUICommandDefinitionMapping$0.getTabCommandByExternalUxId(tabId);
        if (legacyTabCommandId) {
            var enabled = this._rootUser$0.isRootCommandEnabled(legacyTabCommandId, null);
            if (!enabled) {
                actions.push(appChrome.actions.updateDisabledEnabledStateForControlsInTab(tabId, true));
            }
        }
        return actions;
    },
    
    _getGroupedDisableControlsInTabActions$p$0: function CommandUI_ReactRibbonRootPoller$_getGroupedDisableControlsInTabActions$p$0$in(tabId) {
        var actions = new Array(0);
        var legacyTabCommandId = this._externalUICommandDefinitionMapping$0.getTabCommandByExternalUxId(tabId);
        if (legacyTabCommandId) {
            var enabled = this._rootUser$0.isRootCommandEnabled(legacyTabCommandId, null);
            if (!enabled) {
                var groupIds = appChrome.selectors.getActiveGroupIds();
                for (var $$arr_5 = groupIds, $$len_6 = $$arr_5.length, $$idx_7 = 0; $$idx_7 < $$len_6; ++$$idx_7) {
                    var groupId = $$arr_5[$$idx_7];
                    var groupActions = new Array(0);
                    for (var $$arr_A = appChrome.selectors.getVisibleControlsInGroup(groupId), $$len_B = $$arr_A.length, $$idx_C = 0; $$idx_C < $$len_B; ++$$idx_C) {
                        var controlId = $$arr_A[$$idx_C];
                        groupActions.push(appChrome.actions.updateControlEnabledDisabledState(controlId, true));
                    }
                    actions[actions.length] = groupActions;
                }
            }
        }
        return actions;
    },
    
    _getRibbonControlsToDisableMap$p$0: function CommandUI_ReactRibbonRootPoller$_getRibbonControlsToDisableMap$p$0$in(groupIds) {
        var controlsToDisable = this._getDisabledControlsInGroups$p$0(groupIds);
        var controlToDisableMap = {};
        for (var $$arr_3 = controlsToDisable, $$len_4 = $$arr_3.length, $$idx_5 = 0; $$idx_5 < $$len_4; ++$$idx_5) {
            var control = $$arr_3[$$idx_5];
            controlToDisableMap[control] = true;
        }
        return controlToDisableMap;
    },
    
    _getDisabledControlsInGroups$p$0: function CommandUI_ReactRibbonRootPoller$_getDisabledControlsInGroups$p$0$in(groupIds) {
        var controlIds = new Array(0);
        for (var $$arr_2 = groupIds, $$len_3 = $$arr_2.length, $$idx_4 = 0; $$idx_4 < $$len_3; ++$$idx_4) {
            var groupId = $$arr_2[$$idx_4];
            var groups = this._externalUICommandDefinitionMapping$0.getGroupsMetadataByExternalUxId(groupId);
            if (!groups) {
                continue;
            }
            for (var $$arr_7 = groups, $$len_8 = $$arr_7.length, $$idx_9 = 0; $$idx_9 < $$len_8; ++$$idx_9) {
                var group = $$arr_7[$$idx_9];
                var enabled = this._rootUser$0.isRootCommandEnabled(group.get_commandId(), null);
                if (enabled) {
                    continue;
                }
                var controlsInGroup = group.get_externalUxCommandIds();
                if (!controlsInGroup) {
                    controlsInGroup = appChrome.selectors.getVisibleControlsInGroup(group.get_externalUxGroupId());
                }
                controlIds.push.apply(controlIds, controlsInGroup);
            }
        }
        return controlIds;
    },
    
    _getDisableControlsInGroupsActions$p$0: function CommandUI_ReactRibbonRootPoller$_getDisableControlsInGroupsActions$p$0$in(groupIds) {
        var actions = new Array(0);
        for (var $$arr_2 = groupIds, $$len_3 = $$arr_2.length, $$idx_4 = 0; $$idx_4 < $$len_3; ++$$idx_4) {
            var groupId = $$arr_2[$$idx_4];
            var groups = this._externalUICommandDefinitionMapping$0.getGroupsMetadataByExternalUxId(groupId);
            if (!groups) {
                continue;
            }
            for (var $$arr_7 = groups, $$len_8 = $$arr_7.length, $$idx_9 = 0; $$idx_9 < $$len_8; ++$$idx_9) {
                var group = $$arr_7[$$idx_9];
                var enabled = this._rootUser$0.isRootCommandEnabled(group.get_commandId(), null);
                if (enabled) {
                    continue;
                }
                if (group.get_externalUxCommandIds()) {
                    for (var $$arr_C = group.get_externalUxCommandIds(), $$len_D = $$arr_C.length, $$idx_E = 0; $$idx_E < $$len_D; ++$$idx_E) {
                        var controlId = $$arr_C[$$idx_E];
                        actions.push(appChrome.actions.updateControlEnabledDisabledState(controlId, true));
                    }
                }
                else {
                    actions.push(appChrome.actions.updateDisabledEnabledStateForControlsInGroup(group.get_externalUxGroupId(), true));
                }
            }
        }
        return actions;
    }
}


CommandUI.ReactRibbonUser = function CommandUI_ReactRibbonUser(containerElement, modalContainer, ribbonFocusId, focusManager, actionManager, externalUICommandDefinitionMapping, jewelProperties, ribbonTrimmingProperties, shouldRenderRibbon, reactRoot) {
    this.$$d__logRibbonLoadedActivity$p$0 = Function.createDelegate(this, this._logRibbonLoadedActivity$p$0);
    this.$$d_setRibbonPostInteractiveReady = Function.createDelegate(this, this.setRibbonPostInteractiveReady);
    this._setAppInitializationStatuses$0 = [];
    this._ribbonPanel = containerElement;
    this._modalContainer$0 = modalContainer;
    this._ribbonFocusId$0 = ribbonFocusId;
    this._focusManager = focusManager;
    this._actionManager = actionManager;
    this._externalUICommandDefinitionMapping$0 = externalUICommandDefinitionMapping;
    if (reactRoot) {
        this._ribbonRoot = reactRoot;
    }
    else {
        this._ribbonRoot = new CommandUI.ReactRibbonRoot(CommandUI.RootManager.get_instance(), this._externalUICommandDefinitionMapping$0, null);
    }
    this._jewelProperties = jewelProperties;
    this._ribbonExternal$0 = new CommandUI.ReactRibbonExternal();
    this._ribbonTrimmingProperties = ribbonTrimmingProperties;
    this._shouldRenderRibbon$0 = shouldRenderRibbon;
    this._reactAsyncDisptacher$0 = new CommandUI.ReactAsyncDispatcher();
    Common.App.AppLifecycleManager.get_instance().executeWhen(Common.App.AppInitializationStatus.chromeReady, this.$$d_setRibbonPostInteractiveReady, 3);
    Common.App.AppLifecycleManager.get_instance().executeWhen(Common.App.AppInitializationStatus.chromeReady, this.$$d__logRibbonLoadedActivity$p$0, 3);
}
CommandUI.ReactRibbonUser.prototype = {
    _ribbonRoot: null,
    _ribbonPanel: null,
    _actionManager: null,
    _focusManager: null,
    _shouldRenderRibbon$0: false,
    _ribbonFocusId$0: null,
    _externalUICommandDefinitionMapping$0: null,
    _commandHandler$0: null,
    _unregisterBindCommandHandlerAction$0: null,
    _ribbonExternal$0: null,
    _jewel$0: null,
    _elmJewelPlaceholder$0: null,
    _reactAsyncDisptacher$0: null,
    _modalContainer$0: null,
    _jewelProperties: null,
    _ribbonTrimmingProperties: null,
    _ribbonFocusManager$0: null,
    
    initialize: function CommandUI_ReactRibbonUser$initialize$in(ribbonStringsFileName, iconProviderJs, ribbonDownloadTask) {
        if (!this._shouldRenderRibbon$0) {
            this._setAppInitializationStatus$p$0(Common.App.AppInitializationStatus.ribbonInitialized);
        }
        if (ribbonDownloadTask) {
            var $$t_L = this, $$t_M = this;
            ribbonDownloadTask.then(function() {
                $$t_L.renderRibbon();
            }).catch(function(e) {
                return Diag.ULS.sendTraceTag(35436050, 340, 10, 'Failed to load the resources for the Ribbon');
            });
        }
        else {
            var $$t_N = this, $$t_O = this, $$t_P = this;
            Common.TaskUtils.then(Common.TaskUtils.then($$sc.Task.WAA(this.loadRibbonLocalizedJSFileAsync(ribbonStringsFileName), this.loadRibbonJSFileAsync(CommandUI.ReactRibbonUser._commonJSFile)), function() {
                return $$t_N.loadRibbonJSFileAsync(CommandUI.ReactRibbonUser._appChromeJSFile);
            }), function() {
                return $$t_O.loadRibbonLocalizedJSFileAsync(iconProviderJs);
            }).CWo(function(task) {
                $$t_P.renderRibbon();
            }, $$sc.TaskContinuationOptions.onlyOnRanToCompletion | $$sc.TaskContinuationOptions.executeSynchronously);
        }
        this.logRibbonLoaded();
    },
    
    dispose: function CommandUI_ReactRibbonUser$dispose$in() {
        if (this._unregisterBindCommandHandlerAction$0) {
            this._unregisterBindCommandHandlerAction$0();
        }
        if (this._jewel$0) {
            this._jewel$0.dispose();
        }
        if (this._ribbonFocusManager$0) {
            this._ribbonFocusManager$0.dispose();
        }
        for (var $$arr_0 = this._setAppInitializationStatuses$0, $$len_1 = $$arr_0.length, $$idx_2 = 0; $$idx_2 < $$len_1; ++$$idx_2) {
            var status = $$arr_0[$$idx_2];
            Common.App.AppLifecycleManager.get_instance().clearAppInitializationStatus(status);
        }
        Common.AFrameworkApplication.get_theActionManager().removeAction(Common.CommonCommands.reportOneLineRibbonLoaded, Common.CommonContextIds.frame, Common.ActionManager.doNothingButReportHandler);
    },
    
    logRibbonLoaded: function CommandUI_ReactRibbonUser$logRibbonLoaded$in() {
        Diag.ULS.sendTraceTag(34468252, 340, 50, 'User is booting the Single Line Ribbon');
        Common.AFrameworkApplication.get_theActionManager().addActionWithFlags(Common.CommonCommands.reportOneLineRibbonLoaded, Common.CommonContextIds.frame, Common.ActionManager.doNothingButReportHandler, 64);
        Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.reportOneLineRibbonLoaded, 2, null);
    },
    
    loadRibbonJSFileAsync: function CommandUI_ReactRibbonUser$loadRibbonJSFileAsync$in(filename) {
        var loader = Common.Utils.Container.get_instance().resolve(Common.ISharedDependencyLoader, '');
        return loader.loadSharedDependencyAsync(Common.AFrameworkApplication.scriptUrlFromName(filename, Common.ScriptNameFormat.jQuery));
    },
    
    loadRibbonLocalizedJSFileAsync: function CommandUI_ReactRibbonUser$loadRibbonLocalizedJSFileAsync$in(filename) {
        if (filename === '') {
            return $$sc.Task.fromResult(Boolean, true);
        }
        var loader = Common.Utils.Container.get_instance().resolve(Common.ISharedDependencyLoader, '');
        return loader.loadSharedDependencyAsync(Common.AFrameworkApplication.scriptUrlFromName(filename, Common.ScriptNameFormat.localizedScriptWithoutDebugExtension));
    },
    
    initializeRibbonStore: function CommandUI_ReactRibbonUser$initializeRibbonStore$in() {
        if (this._ribbonTrimmingProperties || this._jewelProperties) {
            appChrome.api.dispatch(this.getTrimmedIdsHideActions());
        }
        this.setUlsExternalLogger();
        if (Common.AppChromeUtils.apiExists('setWebpackPublicPath')) {
            appChrome.api.setWebpackPublicPath(Common.AFrameworkApplication.get_staticContentScriptNameBase());
        }
        this._ribbonRoot.pollForStateAndUpdate();
    },
    
    renderRibbon: function CommandUI_ReactRibbonUser$renderRibbon$in() {
        this.initializeRibbonStore();
        if (this._shouldRenderRibbon$0) {
            appChrome.renderAppChrome(this._ribbonPanel, Common.AppChromeUtils.getRenderAppChromeSettings());
            this._setAppInitializationStatus$p$0(Common.App.AppInitializationStatus.ribbonDisplayed);
        }
        this.addBindCommandHandlerCallback(null);
        this.buildAndSetJewel();
        if (this._shouldRenderRibbon$0) {
            this._setAppInitializationStatus$p$0(Common.App.AppInitializationStatus.ribbonInitialized);
        }
        this.initializeFocusManager();
    },
    
    initializeFocusManager: function CommandUI_ReactRibbonUser$initializeFocusManager$in() {
        if (this._focusManager && this._actionManager && this._ribbonFocusId$0) {
            this._ribbonFocusManager$0 = new CommandUI.ReactRibbonFocusManager(this._focusManager, this._actionManager, this._ribbonPanel, this._ribbonFocusId$0);
            this._ribbonFocusManager$0.initialize();
        }
    },
    
    get_ribbonExternal: function CommandUI_ReactRibbonUser$get_ribbonExternal$in() {
        return this._ribbonExternal$0;
    },
    
    _setCommandDefinitionMapping$p$0: function CommandUI_ReactRibbonUser$_setCommandDefinitionMapping$p$0$in() {
        if (Common.AppChromeUtils.apiExists('setCommandDefinitionMapping')) {
            var mapping = Common.CommandDefinitionMappingCreator.create(this._externalUICommandDefinitionMapping$0);
            appChrome.api.setCommandDefinitionMapping(mapping);
        }
    },
    
    addBindCommandHandlerCallback: function CommandUI_ReactRibbonUser$addBindCommandHandlerCallback$in(PRICommandHandler) {
        this._setCommandDefinitionMapping$p$0();
        var root = $$as(CommandUI.ReactRibbonRoot, this._ribbonRoot);
        Common.Debug.assertStringTag(!!root, 'IRoot is not a ReactRibbonRoot', 36570013);
        this._commandHandler$0 = new CommandUI.ReactExecuteCommandHandler(this._ribbonRoot, root.get_reactRibbonRootPoller(), this._externalUICommandDefinitionMapping$0, this._focusManager, this._modalContainer$0, Common.Utils.Container.get_instance().tryResolve(Common.IRibbonSQMInformation, ''), Common.Utils.Container.get_instance().tryResolve(Common.IFileMenuSQMInformation, ''), Common.AFrameworkApplication.get_theActionManager(), Common.AFrameworkApplication.appSettingsManager, Common.Utils.Container.get_instance().tryResolve(Common.ISystemInitiatedFeedback, ''), PRICommandHandler);
        var $$t_6 = this;
        this._unregisterBindCommandHandlerAction$0 = appChrome.api.bindCommandHandler(function(id, commandExecutionData) {
            $$t_6._commandHandler$0.executeCommand(id, commandExecutionData);
        });
    },
    
    setUlsExternalLogger: function CommandUI_ReactRibbonUser$setUlsExternalLogger$in() {
        appChrome.api.initializeLogger(new UlsExternalLogger());
    },
    
    getPollForStateAndUpdateActions: function CommandUI_ReactRibbonUser$getPollForStateAndUpdateActions$in() {
        if (this._ribbonRoot) {
            return this._ribbonRoot.getPollForStateAndUpdateActions();
        }
        return new Array(0);
    },
    
    getGroupedPollForStateAndUpdateActions: function CommandUI_ReactRibbonUser$getGroupedPollForStateAndUpdateActions$in() {
        if (this._ribbonRoot) {
            return this._ribbonRoot.getGroupedPollForStateAndUpdateActions();
        }
        return new Array(0);
    },
    
    pollForStateUpdate: function CommandUI_ReactRibbonUser$pollForStateUpdate$in() {
        var $$t_1 = this;
        Common.CpuMeterProxy.get_instance().profileFunction(function() {
            var actions = null;
            Common.CpuMeterProxy.get_instance().profileFunction(function() {
                actions = $$t_1.getPollForStateAndUpdateActions();
            }, 'ReactRibbon::PollForStateUpdate::GetActions');
            if (actions && actions.length > 0) {
                $$t_1._ribbonRoot.set__lastPollTime$i$0(new Date());
                Common.CpuMeterProxy.get_instance().profileFunction(function() {
                    appChrome.api.dispatch(actions);
                }, 'ReactRibbon::PollForStateUpdate::DispatchActions');
            }
            if ($$t_1._jewel$0) {
                Common.CpuMeterProxy.get_instance().profileFunction(function() {
                    $$t_1._jewel$0.pollForStateAndUpdate();
                }, 'ReactRibbon::PollForStateUpdate::Jewel');
            }
        }, 'ReactRibbon::PollForStateUpdate');
    },
    
    pollForStateAndUpdateWithAsyncDispatch: function CommandUI_ReactRibbonUser$pollForStateAndUpdateWithAsyncDispatch$in(callback) {
        var $$t_7 = this;
        Common.CpuMeterProxy.get_instance().profileFunction(function() {
            var groupedActions = null;
            var getActionsExecutionTime = 0;
            var pollForStateUpdateStartTime = Common.WindowUtils.getTickCount();
            Common.CpuMeterProxy.get_instance().profileFunction(function() {
                var getActionsTimeStart = Common.WindowUtils.getTickCount();
                if (Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ChunkedReactUpdateIsEnabled')) {
                    groupedActions = $$t_7.getGroupedPollForStateAndUpdateActions();
                }
                else {
                    groupedActions = new Array(0);
                    groupedActions[groupedActions.length] = $$t_7.getPollForStateAndUpdateActions();
                }
                getActionsExecutionTime = Common.WindowUtils.getTickCount() - getActionsTimeStart;
            }, 'ReactRibbon::PollForStateUpdate::GetActions');
            if (groupedActions && groupedActions.length > 0) {
                $$t_7._ribbonRoot.set__lastPollTime$i$0(new Date());
                $$t_7._reactAsyncDisptacher$0.dispatchGroupedActions(groupedActions, function(dispatchActionsExecutionTime) {
                    callback(pollForStateUpdateStartTime, getActionsExecutionTime, dispatchActionsExecutionTime);
                });
            }
            if ($$t_7._jewel$0) {
                Common.CpuMeterProxy.get_instance().profileFunction(function() {
                    $$t_7._jewel$0.pollForStateAndUpdate();
                }, 'ReactRibbon::PollForStateUpdate::Jewel');
            }
        }, 'ReactRibbon::PollForStateUpdate');
    },
    
    updatePeopleWellControl: function CommandUI_ReactRibbonUser$updatePeopleWellControl$in() {
        this._ribbonRoot.updatePeopleWellControl();
    },
    
    updateDocChatControl: function CommandUI_ReactRibbonUser$updateDocChatControl$in() {
        this._ribbonRoot.updateDocChatControl();
    },
    
    onComponentBuilt: function CommandUI_ReactRibbonUser$onComponentBuilt$in(root, componentId) {
    },
    
    activateAndSetCurrentContextualTab: function CommandUI_ReactRibbonUser$activateAndSetCurrentContextualTab$in(tabId) {
        var actions = [ appChrome.actions.activateDeactivateContextualTab(tabId, true), appChrome.actions.setCurrentTab(tabId) ];
        appChrome.api.dispatch(actions);
    },
    
    getTrimmedIdsHideActions: function CommandUI_ReactRibbonUser$getTrimmedIdsHideActions$in() {
        var appSettingsManager = Common.AFrameworkApplication.appSettingsManager;
        var actions = new Array(0);
        var enableTellMeForOneLineRibbonIsEnabled = appSettingsManager.getBooleanAppSetting('EnableTellMeForOneLineRibbonIsEnabled');
        if (!enableTellMeForOneLineRibbonIsEnabled) {
            actions.push(appChrome.actions.updateControlHiddenState('TellMeControl', true));
        }
        else if (appSettingsManager.getBooleanAppSetting('OcpsIsEnabled')) {
            var $$t_J = this;
            Common.Utils.Container.get_instance().resolveFuture(Common.App.ApplicationFeatureHelper.IApplicationFeatureHelper, '').execute(function(applicationFeatureHelper) {
                applicationFeatureHelper.isFeatureEnabled('ConnectedServices', true).then(function(isEnabled) {
                    if (isEnabled) {
                        appChrome.api.dispatch(appChrome.actions.updateControlHiddenState('TellMeControl', false));
                    }
                    return null;
                });
            });
        }
        actions.push.apply(actions, this.getFileMenuTrimmingActions());
        var trimHelper = new Common.ReactRibbonTrimmingHelper(this._externalUICommandDefinitionMapping$0);
        if (this._ribbonTrimmingProperties.get_trimmedIds()) {
            Common.CommandTrimmer.trimPeripheralControls(this._ribbonTrimmingProperties.get_trimmedIds());
            actions.push.apply(actions, trimHelper.getActionsForTrimmedIds(this._ribbonTrimmingProperties.get_trimmedIds()));
        }
        if (this._ribbonTrimmingProperties.get_trimmedGallerySections()) {
            for (var $$arr_9 = this._ribbonTrimmingProperties.get_trimmedGallerySections(), $$len_A = $$arr_9.length, $$idx_B = 0; $$idx_B < $$len_A; ++$$idx_B) {
                var gallerySection = $$arr_9[$$idx_B];
                actions.push(appChrome.actions.updateGallerySectionHiddenState(gallerySection.galleryId, gallerySection.sectionId, gallerySection.trimmedValue));
            }
        }
        actions.push.apply(actions, trimHelper.getActionsForTrimmedTabs(this._ribbonTrimmingProperties.get_trimmedTabs()));
        return actions;
    },
    
    getFileMenuTrimmingActions: function CommandUI_ReactRibbonUser$getFileMenuTrimmingActions$in() {
        var actions = new Array(0);
        if (this._jewelProperties && this._jewelProperties.get_trimmedIds()) {
            var $$dict_5 = this._jewelProperties.get_trimmedIds();
            for (var $$key_6 in $$dict_5) {
                var trimEntry = { key: $$key_6, value: $$dict_5[$$key_6] };
                var externalCommands = this._externalUICommandDefinitionMapping$0.getExternalUxIdsByLegacyControlId(trimEntry.key);
                if (externalCommands) {
                    var $$enum_4 = externalCommands.$$lge();
                    while ($$enum_4.$$mn()) {
                        var externalCommand = $$enum_4.$$cu();
                        actions.push(appChrome.actions.updateControlHiddenState(externalCommand, trimEntry.value));
                    }
                }
            }
        }
        return actions;
    },
    
    updateControls: function CommandUI_ReactRibbonUser$updateControls$in(controls) {
        if (!controls) {
            return;
        }
        this._ribbonRoot.get_reactRibbonRootPoller().pollForStateAndUpdateCommands(controls, 0);
    },
    
    populateControlMenu: function CommandUI_ReactRibbonUser$populateControlMenu$in(menuId) {
        var payload = {};
        payload['inputMethod'] = 0;
        this._ribbonRoot.get_reactRibbonRootPoller().populateControlMenu(this._externalUICommandDefinitionMapping$0.getCommandByExternalUxId(menuId), appChrome.selectors.getModelType(menuId), payload);
    },
    
    showActionButton: function CommandUI_ReactRibbonUser$showActionButton$in(buttonId) {
        var $$t_7 = this;
        Common.App.AppLifecycleManager.get_instance().executeWhen(Common.App.AppInitializationStatus.ribbonInitialized, null, 3).CW(function(a) {
            appChrome.api.dispatch($$t_7.getShowActionButtonStoreAction(buttonId));
        });
    },
    
    getShowActionButtonStoreAction: function CommandUI_ReactRibbonUser$getShowActionButtonStoreAction$in(buttonId) {
        var topRowControls = {};
        topRowControls['actionButtonId'] = buttonId;
        return appChrome.actions.updatePeripheralControls(topRowControls);
    },
    
    getShowCopyLinkButtonStoreAction: function CommandUI_ReactRibbonUser$getShowCopyLinkButtonStoreAction$in(buttonId) {
        var topRowControls = {};
        topRowControls['copyLinkButtonId'] = buttonId;
        return appChrome.actions.updatePeripheralControls(topRowControls);
    },
    
    _setAppInitializationStatus$p$0: function CommandUI_ReactRibbonUser$_setAppInitializationStatus$p$0$in(status) {
        Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(status);
        this._setAppInitializationStatuses$0.push(status);
    },
    
    setRibbonPostInteractiveReady: function CommandUI_ReactRibbonUser$setRibbonPostInteractiveReady$in() {
        if (Common.AppChromeUtils.appChromeContainsAction('updateRibbonInitializationState')) {
            var $$t_0;
            appChrome.api.dispatch(appChrome.actions.updateRibbonInitializationState(($$t_0 = new Common.RibbonInitState(), $$t_0.postRibbonInteractiveReady = true, $$t_0)));
        }
    },
    
    buildAndSetJewel: function CommandUI_ReactRibbonUser$buildAndSetJewel$in() {
        if (this._jewelProperties) {
            this._initializeJewelPlaceholder$i$0();
            var $$t_2;
            var options = ($$t_2 = new CommandUI.JewelBuildOptions(), $$t_2.trimmedIds = this._jewelProperties.get_trimmedIds(), $$t_2);
            var builder = new CommandUI.JewelBuilder(options, this._elmJewelPlaceholder$0, $$sc.Task.fromResult(Common.IRootBuildClient, $$as(Common.IRootBuildClient, this)));
            builder.set_dataSource(this._jewelProperties.get_dataSource());
            if (!builder.buildJewel(this._jewelProperties.get_jewelId(), null)) {
                throw Error.create('Jewel could not be built');
            }
            this._jewel$0 = builder.get_jewel();
            if (this._jewel$0) {
                this._jewel$0.set_rootUser(this._ribbonRoot.get_rootUser());
                this._jewel$0.pollForStateAndUpdate();
                (this._ribbonExternal$0).set_jewel(this._jewel$0);
                if (Common.AppChromeUtils.appChromeContainsAction('updateFileMenuDisabledValue')) {
                    appChrome.api.dispatch(appChrome.actions.updateFileMenuDisabledValue(false));
                }
            }
        }
    },
    
    _initializeJewelPlaceholder$i$0: function CommandUI_ReactRibbonUser$_initializeJewelPlaceholder$i$0$in() {
        this._elmJewelPlaceholder$0 = CommandUI.Utility.createElement('div');
        this._elmJewelPlaceholder$0.id = 'jewelcontainer';
        this._elmJewelPlaceholder$0.className = 'cui-jewel-container';
        this._elmJewelPlaceholder$0.style.display = 'block';
    },
    
    launchJewelMenu: function CommandUI_ReactRibbonUser$launchJewelMenu$in(inputMethod, submenuId) {
        if (this._jewel$0) {
            this._jewel$0.get__jewelMenuLauncher$i$2().launchMenuWithSubmenu(inputMethod, submenuId);
        }
    },
    
    ribbonModeToggledToMLR: function CommandUI_ReactRibbonUser$ribbonModeToggledToMLR$in(actionId, context, behavior, reportingData, actionData) {
        if (behavior === 1) {
            return 32;
        }
        this._setRibbonPreferenceCookie$p$0(true);
        this.pollForStateUpdate();
        return 32;
    },
    
    ribbonModeToggledToSLR: function CommandUI_ReactRibbonUser$ribbonModeToggledToSLR$in(actionId, context, behavior, reportingData, actionData) {
        if (behavior === 1) {
            return 32;
        }
        this._setRibbonPreferenceCookie$p$0(false);
        this._setSLREnabledCookie$p$0();
        this.pollForStateUpdate();
        return 32;
    },
    
    _setSLREnabledCookie$p$0: function CommandUI_ReactRibbonUser$_setSLREnabledCookie$p$0$in() {
        var cookieName = Common.AFrameworkApplication.appSettingsManager.getStringAppSetting('IsSimplifiedRibbonOnCookieName');
        Common.Cookie.setWithExpiration(cookieName, 'true', Common.Cookie.maxComplianceAllowedRetentionInDays);
    },
    
    _setRibbonPreferenceCookie$p$0: function CommandUI_ReactRibbonUser$_setRibbonPreferenceCookie$p$0$in(preferenceIsMLR) {
        var cookieName = Common.AFrameworkApplication.appSettingsManager.getStringAppSetting('ReactRibbonMLRPreferenceCookieName');
        Common.Cookie.setWithExpiration(cookieName, preferenceIsMLR.toString(), Common.Cookie.maxComplianceAllowedRetentionInDays);
    },
    
    _logRibbonLoadedActivity$p$0: function CommandUI_ReactRibbonUser$_logRibbonLoadedActivity$p$0$in() {
        if (Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactRibbonEnvironmentEnabled()) {
            var sifFuture = Common.Utils.Container.get_instance().resolveFuture(Common.ISystemInitiatedFeedback, '');
            if (appChrome.selectors.getRibbonMode() === 'SingleLine') {
                var $$t_5 = this;
                sifFuture.execute(function(sif) {
                    sif.logActivity('SingleRibbonModeActivity', null);
                });
            }
            else if (appChrome.selectors.getRibbonMode() === 'Multiline') {
                var $$t_6 = this;
                sifFuture.execute(function(sif) {
                    sif.logActivity('MultiRibbonModeActivity', null);
                });
            }
        }
    }
}


CommandUI.ReactStatePropsSelector = function CommandUI_ReactStatePropsSelector() {
}
CommandUI.ReactStatePropsSelector.prototype = {
    
    getStateProps: function CommandUI_ReactStatePropsSelector$getStateProps$in(commandId, modelType) {
        switch (modelType) {
            case 'ColorPickerModel':
                return appChrome.selectors.getColorPickerState(commandId);
            case 'ToggleButtonModel':
                return this._getPropsForToggleButtonModel$p$0(commandId);
            case 'InkButtonModel':
                return this._getPropsForInkButtonModel$p$0(commandId);
            case 'GalleryModel':
                return appChrome.selectors.getGalleryState(commandId);
            case 'SplitButtonModel':
                return appChrome.selectors.getSplitButtonState(commandId);
            case 'SliderModel':
                return appChrome.selectors.getSliderState(commandId);
        }
        return {};
    },
    
    _getPropsForToggleButtonModel$p$0: function CommandUI_ReactStatePropsSelector$_getPropsForToggleButtonModel$p$0$in(commandId) {
        var props = {};
        props[CommandUI.Controls.ToggleButtonCommandProperties.On] = appChrome.selectors.getButtonToggleState(commandId);
        return props;
    },
    
    _getPropsForInkButtonModel$p$0: function CommandUI_ReactStatePropsSelector$_getPropsForInkButtonModel$p$0$in(commandId) {
        var props = {};
        props[CommandUI.Controls.ToggleButtonCommandProperties.On] = (Common.AppChromeUtils.selectorExists('getInkButtonToggleState')) ? appChrome.selectors.getInkButtonToggleState(commandId) : appChrome.selectors.getButtonToggleState(commandId);
        return props;
    }
}


CommandUI.CollapsibleSection = function CommandUI_CollapsibleSection(root, id, title) {
    this.$$d__onTitleClick$p$1 = Function.createDelegate(this, this._onTitleClick$p$1);
    this.$$d__onTitleKeyUp$p$1 = Function.createDelegate(this, this._onTitleKeyUp$p$1);
    CommandUI.CollapsibleSection.initializeBase(this, [ root, id, title, '', null, true, true ]);
    this.set_arrowCollapsedImage(root.get_properties().ImageCollapsedArrow);
    this.set_arrowCollapsedImageClass(root.get_properties().ImageCollapsedArrowClass);
    this.set_arrowExpandedImage(root.get_properties().ImageExpandedArrow);
    this.set_arrowExpandedImageClass(root.get_properties().ImageExpandedArrowClass);
    this.set_isCollapsed(true);
}
CommandUI.CollapsibleSection.prototype = {
    _elmTitleA$1: null,
    _elmTitleSpan$1: null,
    _elmIconContainer$1: null,
    _elmImage$1: null,
    _elmBody$1: null,
    _$$pf_ArrowCollapsedImage$p$1: null,
    
    get_arrowCollapsedImage: function CommandUI_CollapsibleSection$get_arrowCollapsedImage$in() {
        return this._$$pf_ArrowCollapsedImage$p$1;
    },
    
    set_arrowCollapsedImage: function CommandUI_CollapsibleSection$set_arrowCollapsedImage$in(value) {
        this._$$pf_ArrowCollapsedImage$p$1 = value;
        return value;
    },
    
    _$$pf_ArrowCollapsedImageClass$p$1: null,
    
    get_arrowCollapsedImageClass: function CommandUI_CollapsibleSection$get_arrowCollapsedImageClass$in() {
        return this._$$pf_ArrowCollapsedImageClass$p$1;
    },
    
    set_arrowCollapsedImageClass: function CommandUI_CollapsibleSection$set_arrowCollapsedImageClass$in(value) {
        this._$$pf_ArrowCollapsedImageClass$p$1 = value;
        return value;
    },
    
    _$$pf_ArrowExpandedImage$p$1: null,
    
    get_arrowExpandedImage: function CommandUI_CollapsibleSection$get_arrowExpandedImage$in() {
        return this._$$pf_ArrowExpandedImage$p$1;
    },
    
    set_arrowExpandedImage: function CommandUI_CollapsibleSection$set_arrowExpandedImage$in(value) {
        this._$$pf_ArrowExpandedImage$p$1 = value;
        return value;
    },
    
    _$$pf_ArrowExpandedImageClass$p$1: null,
    
    get_arrowExpandedImageClass: function CommandUI_CollapsibleSection$get_arrowExpandedImageClass$in() {
        return this._$$pf_ArrowExpandedImageClass$p$1;
    },
    
    set_arrowExpandedImageClass: function CommandUI_CollapsibleSection$set_arrowExpandedImageClass$in(value) {
        this._$$pf_ArrowExpandedImageClass$p$1 = value;
        return value;
    },
    
    _$$pf_IsCollapsed$p$1: false,
    
    get_isCollapsed: function CommandUI_CollapsibleSection$get_isCollapsed$in() {
        return this._$$pf_IsCollapsed$p$1;
    },
    
    set_isCollapsed: function CommandUI_CollapsibleSection$set_isCollapsed$in(value) {
        this._$$pf_IsCollapsed$p$1 = value;
        return value;
    },
    
    refreshInternal: function CommandUI_CollapsibleSection$refreshInternal$in() {
        this.ensureDOMElementAndEmpty();
        this._ensureTitleRefreshed$i$1();
        this._elmBody$1 = CommandUI.Utility.createElement('div');
        this._elmBody$1.id = this.get_id() + '-Body';
        this._elmBody$1.className = 'cui-cs-body';
        this._elmBody$1.style.display = (this.get_isCollapsed()) ? 'none' : 'block';
        this.get_elementInternal().appendChild(this._elmBody$1);
        this.appendChildrenToElement(this._elmBody$1);
        this.ensureDOMElement();
        this.set_dirty(false);
    },
    
    _attachTitleEvents$p$1: function CommandUI_CollapsibleSection$_attachTitleEvents$p$1$in() {
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, this._elmTitleA$1, this.$$d__onTitleKeyUp$p$1);
        Common.ClickInputManager.get_instance().registerHandler(Common.EventNames.click, this._elmTitleA$1, this.$$d__onTitleClick$p$1);
    },
    
    _ensureTitleRefreshed$i$1: function CommandUI_CollapsibleSection$_ensureTitleRefreshed$i$1$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmTitleA$1)) {
            this._elmTitleA$1 = CommandUI.Utility.createElement('a');
            this._elmTitleA$1.id = this.get_id() + '-Title';
            this._elmTitleA$1.className = 'cui-cs-title cui-ctl-medium UIFontBold stretchedHorizontally';
            this._elmTitleA$1.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaButtonRole);
            this._elmTitleA$1.setAttribute(Common.AccessibilityUtils.ariaDisabledAttribute, Common.AccessibilityUtils.ariaFalseValue);
            this._elmTitleA$1.setAttribute('mscui:controltype', CommandUI.Control.buttonControlType);
            this._elmTitleA$1.tabIndex = 0;
            this._elmImage$1 = CommandUI.Utility.createElement('img');
            this._elmImage$1.alt = '';
            var iconContainerClass = 'cui-ctl-iconContainer';
            var imageSize = 4;
            var imageUrl = (this.get_isCollapsed()) ? this.get_arrowCollapsedImage() : this.get_arrowExpandedImage();
            var imageClass = (this.get_isCollapsed()) ? this.get_arrowCollapsedImageClass() : this.get_arrowExpandedImageClass();
            var elmImageCont = CommandUI.Utility._createClusteredImageContainerNew$i(imageSize, imageUrl, imageClass, this._elmImage$1, true, false);
            this._elmIconContainer$1 = CommandUI.Utility.createElement('span');
            this._elmIconContainer$1.className = iconContainerClass;
            this._elmIconContainer$1.appendChild(elmImageCont);
            this._elmTitleA$1.appendChild(this._elmIconContainer$1);
            this._elmTitleSpan$1 = CommandUI.Utility.createElement('span');
            this._elmTitleSpan$1.className = 'cui-ctl-mediumlabel';
            this._elmTitleSpan$1.innerText = this.get_title();
            this._elmTitleA$1.appendChild(this._elmTitleSpan$1);
            this.get_elementInternal().appendChild(this._elmTitleA$1);
            this._attachTitleEvents$p$1();
        }
    },
    
    get_cssClass: function CommandUI_CollapsibleSection$get_cssClass$in() {
        return 'cui-cs';
    },
    
    get_domElementTagName: function CommandUI_CollapsibleSection$get_domElementTagName$in() {
        return 'div';
    },
    
    ensureCorrectChildType: function CommandUI_CollapsibleSection$ensureCorrectChildType$in(child) {
        if (!(CommandUI.Section.isInstanceOfType(child))) {
            throw Error.create('Only children of type section can be added this Group');
        }
    },
    
    _onTitleKeyUp$p$1: function CommandUI_CollapsibleSection$_onTitleKeyUp$p$1$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent)) {
            var keyCode = args.innerEvent.keyCode;
            if ((keyCode === Sys.UI.Key.enter) || (keyCode === Sys.UI.Key.space)) {
                this._doTitleDefaultAction$i$1(Common.InputManager.InputMethod.keyboard);
                handled = true;
            }
        }
        return handled;
    },
    
    _onTitleClick$p$1: function CommandUI_CollapsibleSection$_onTitleClick$p$1$in(args) {
        this._doTitleDefaultAction$i$1(args.get_inputSource());
        return true;
    },
    
    _doTitleDefaultAction$i$1: function CommandUI_CollapsibleSection$_doTitleDefaultAction$i$1$in(inputMethod) {
        this.set_isCollapsed(!this.get_isCollapsed());
        this._elmBody$1.style.display = (this.get_isCollapsed()) ? 'none' : 'block';
        this._elmImage$1.src = (this.get_isCollapsed()) ? this.get_arrowCollapsedImage() : this.get_arrowExpandedImage();
        this._elmImage$1.className = (this.get_isCollapsed()) ? this.get_arrowCollapsedImageClass() : this.get_arrowExpandedImageClass();
        this.get_root().pollForStateAndUpdate();
    }
}


CommandUI._contextualGroup = function CommandUI__contextualGroup(id, title, color, command) {
    this._id$0 = id;
    this._title$0 = title;
    this._color$0 = color;
    this._command$0 = command;
}
CommandUI._contextualGroup._getColorNameForContextualTabColor$i = function CommandUI__contextualGroup$_getColorNameForContextualTabColor$i$st(color) {
    switch (color) {
        case 1:
            return 'or';
        case 2:
            return 'gr';
        case 3:
            return 'mg';
        case 4:
            return 'yl';
        case 5:
            return 'pp';
        default:
            return CommandUI.ScriptUtility._emptyString$i;
    }
}
CommandUI._contextualGroup.prototype = {
    _id$0: null,
    _title$0: null,
    _color$0: 0,
    _command$0: null,
    _tabCount$0: 0,
    
    get_id: function CommandUI__contextualGroup$get_id$in() {
        return this._id$0;
    },
    
    get_count: function CommandUI__contextualGroup$get_count$in() {
        return this._tabCount$0;
    },
    
    get_title: function CommandUI__contextualGroup$get_title$in() {
        return this._title$0;
    },
    
    get_color: function CommandUI__contextualGroup$get_color$in() {
        return this._color$0;
    },
    
    get_command: function CommandUI__contextualGroup$get_command$in() {
        return this._command$0;
    },
    
    _elmMain$0: null,
    _elmTitle$0: null,
    _elmTabTitleContainer$0: null,
    
    get__elementInternal$i$0: function CommandUI__contextualGroup$get__elementInternal$i$0$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmMain$0)) {
            this._elmMain$0 = CommandUI.Utility.createElement('li');
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_id())) {
                this._elmMain$0.id = this.get_id();
                Common.AccessibilityUtils.setAriaAttribute(this._elmMain$0, 'aria-labelledby', this.get_id() + '_upper');
            }
            this._elmMain$0.setAttribute('role', 'group');
            this._elmMain$0.className = 'cui-cg';
            if (!(Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonVisualRefreshEnabled())) {
                this._elmMain$0.className += ' UITextTranformUpperCase';
            }
            var strColor = CommandUI._contextualGroup._getColorNameForContextualTabColor$i(this._color$0);
            if (strColor !== CommandUI.ScriptUtility._emptyString$i) {
                CommandUI.Utility.ensureCSSClassOnElement(this._elmMain$0, 'cui-cg-' + strColor);
            }
            var elmInternal = CommandUI.Utility.createElement('div');
            elmInternal.className = 'cui-cg-i';
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_id())) {
                elmInternal.id = this.get_id() + '_upper';
            }
            this._elmMain$0.appendChild(elmInternal);
            this._elmTitle$0 = CommandUI.Utility.createElement('div');
            this._elmTitle$0.className = 'cui-cg-t';
            elmInternal.appendChild(this._elmTitle$0);
            var elmTitleInternal = CommandUI.Utility.createElement('span');
            elmTitleInternal.className = 'cui-cg-t-i UISmallFont';
            if (Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonVisualRefreshEnabled()) {
                elmTitleInternal.className = 'cui-cg-t-i';
            }
            elmTitleInternal.innerText = this._title$0;
            this._elmTitle$0.appendChild(elmTitleInternal);
            this._elmTabTitleContainer$0 = CommandUI.Utility.createElement('ul');
            this._elmTabTitleContainer$0.className = 'cui-ct-ul';
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_id())) {
                this._elmTabTitleContainer$0.id = this.get_id() + '_lower';
            }
            this._elmMain$0.appendChild(this._elmTabTitleContainer$0);
            this._tabCount$0 = 0;
        }
        return this._elmMain$0;
    },
    
    _addTabTitleDOMElement$i$0: function CommandUI__contextualGroup$_addTabTitleDOMElement$i$0$in(tabTitle) {
        this._elmTabTitleContainer$0.appendChild(tabTitle);
        this._tabCount$0++;
        if (this._tabCount$0 === 1) {
            CommandUI.Utility.ensureCSSClassOnElement(this._elmTabTitleContainer$0, 'cui-oneCtxTab');
        }
        else if (this._tabCount$0 === 2) {
            CommandUI.Utility.removeCSSClassFromElement(this._elmTabTitleContainer$0, 'cui-oneCtxTab');
        }
    },
    
    _ensureTabTitlesCleared$i$0: function CommandUI__contextualGroup$_ensureTabTitlesCleared$i$0$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._elmTabTitleContainer$0)) {
            CommandUI.Utility._removeChildNodesSlow$i(this._elmTabTitleContainer$0);
        }
        this._tabCount$0 = 0;
    },
    
    _ensureTabTitleWidths$i$0: function CommandUI__contextualGroup$_ensureTabTitleWidths$i$0$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmTabTitleContainer$0) || !(this._tabCount$0 > 0)) {
            return;
        }
        if (this._tabCount$0 === 1) {
            var tab = this._elmTabTitleContainer$0.childNodes[0];
            tab.style.width = '100%';
            return;
        }
        var contextualGroupWidth = Math.round(this._elmTabTitleContainer$0.offsetWidth);
        var contextualTabsWidth = Math.round(this._getTotalTabTitleWidth$p$0());
        if (contextualGroupWidth <= contextualTabsWidth) {
            return;
        }
        var extraWidthPerTab = Math.floor((contextualGroupWidth - contextualTabsWidth) / this._elmTabTitleContainer$0.childNodes.length);
        if (extraWidthPerTab > 0) {
            this._adjustAllTabTitleWidths$p$0(extraWidthPerTab);
        }
    },
    
    _getTotalTabTitleWidth$p$0: function CommandUI__contextualGroup$_getTotalTabTitleWidth$p$0$in() {
        var contextualTabsWidth = 0;
        for (var iTab = 0; iTab < this._elmTabTitleContainer$0.childNodes.length; iTab++) {
            var tab = this._elmTabTitleContainer$0.childNodes[iTab];
            var marginLeft = 0;
            var marginRight = 0;
            var currentStyle = Common.CssUtils.getCurrentStyle(tab);
            if (currentStyle) {
                marginLeft = parseInt(currentStyle.marginLeft);
                marginLeft = (isNaN(marginLeft)) ? 0 : marginLeft;
                marginRight = parseInt(currentStyle.marginRight);
                marginRight = (isNaN(marginRight)) ? 0 : marginRight;
            }
            contextualTabsWidth += tab.offsetWidth + marginLeft + marginRight;
        }
        return contextualTabsWidth;
    },
    
    _adjustAllTabTitleWidths$p$0: function CommandUI__contextualGroup$_adjustAllTabTitleWidths$p$0$in(extraWidthPerTab) {
        for (var iTab = 0; iTab < this._elmTabTitleContainer$0.childNodes.length; iTab++) {
            var tab = this._elmTabTitleContainer$0.childNodes[iTab];
            tab.style.width = (tab.offsetWidth + extraWidthPerTab) + 'px';
        }
    },
    
    dispose: function CommandUI__contextualGroup$dispose$in() {
        this._elmMain$0 = null;
        this._elmTitle$0 = null;
        this._elmTabTitleContainer$0 = null;
        this._tabCount$0 = 0;
    }
}


CommandUI._declarativeTemplateBuildContext = function CommandUI__declarativeTemplateBuildContext() {
}
CommandUI._declarativeTemplateBuildContext.prototype = {
    ribbon: null,
    controls: null,
    parameters: null
}


CommandUI._declarativeTemplate = function CommandUI__declarativeTemplate(data) {
    this.$$d__delayInitLayout$p$1 = Function.createDelegate(this, this._delayInitLayout$p$1);
    CommandUI._declarativeTemplate.initializeBase(this);
    this._data$1 = new CommandUI.DataNodeWrapper(data);
}
CommandUI._declarativeTemplate.prototype = {
    _data$1: null,
    
    createGroup: function CommandUI__declarativeTemplate$createGroup$in(ribbon, id, properties, title, description, command, controls, pars, hideLauncherButton) {
        var bc = new CommandUI._declarativeTemplateBuildContext();
        bc.ribbon = ribbon;
        bc.controls = controls;
        bc.parameters = pars;
        var group = ribbon._createGroup$i$3(id, properties, title, description, command, hideLauncherButton);
        for (var i = 0; i < this._data$1.get_children().length; i++) {
            var layout = this._createLayoutFromData$p$1(this._data$1.get_children()[i], group, bc);
            if (!CommandUI.ScriptUtility.isNullOrUndefined(layout)) {
                group.addChild(layout);
            }
        }
        return group;
    },
    
    _createLayoutFromData$p$1: function CommandUI__declarativeTemplate$_createLayoutFromData$p$1$in(data, group, bc) {
        Common.Debug.assertTag(data[CommandUI.DataNodeWrapper.NAME] === CommandUI.DataNodeWrapper.LAYOUT, 2131154);
        var title = data[CommandUI.DataNodeWrapper.ATTRIBUTES][CommandUI.DataNodeWrapper.TITLE];
        var layout = bc.ribbon._createLayout$i$3(group.get_id() + '-' + title, title, group.get_visible());
        layout._setDelayedInitData$i$0(this.$$d__delayInitLayout$p$1, data, bc);
        return layout;
    },
    
    _delayInitLayout$p$1: function CommandUI__declarativeTemplate$_delayInitLayout$p$1$in(component, data, bc) {
        var layout = component;
        var buildContext = bc;
        this._fillLayout$i$1(data, layout, buildContext);
        layout._onDelayedInitFinished$i$0(true);
        return layout;
    },
    
    _fillLayout$i$1: function CommandUI__declarativeTemplate$_fillLayout$i$1$in(data, layout, bc) {
        var children = data[CommandUI.DataNodeWrapper.CHILDREN];
        var sectionCounter = 0;
        for (var i = 0; i < children.length; i++) {
            var name = children[i][CommandUI.DataNodeWrapper.NAME];
            if (name === CommandUI.DataNodeWrapper.SECTION) {
                var section = this._createSectionFromData$p$1(children[i], bc, layout, sectionCounter++);
                layout.addChild(section);
            }
        }
    },
    
    _createSectionFromData$p$1: function CommandUI__declarativeTemplate$_createSectionFromData$p$1$in(data, bc, layout, sectionNumber) {
        Common.Debug.assertTag(data[CommandUI.DataNodeWrapper.NAME] === CommandUI.DataNodeWrapper.SECTION, 2131155);
        var type;
        var strType = data[CommandUI.DataNodeWrapper.ATTRIBUTES][CommandUI.DataNodeWrapper.TYPE];
        var strAlignment = data[CommandUI.DataNodeWrapper.ATTRIBUTES][CommandUI.DataNodeWrapper.ALIGNMENT];
        var strHorizontalAlignment = data[CommandUI.DataNodeWrapper.ATTRIBUTES][CommandUI.DataNodeWrapper.HORIZONTALALIGNMENT];
        var strShowSectionSeparator = data[CommandUI.DataNodeWrapper.ATTRIBUTES][CommandUI.DataNodeWrapper.SHOWECTIONSEPERATOR];
        switch (strType) {
            case CommandUI.DataNodeWrapper.ONEROW:
                type = 2;
                Common.Debug.assertStringTag(CommandUI.DataNodeWrapper.getNodeChildren(data).length === 1, 'This <Section> tag should have one <Row> child tag no more no less.', 1931101);
                break;
            case CommandUI.DataNodeWrapper.TWOROW:
                type = 3;
                Common.Debug.assertStringTag(CommandUI.DataNodeWrapper.getNodeChildren(data).length === 2, 'This <Section> tag should have two <Row> child tags no more no less.', 1931102);
                break;
            case CommandUI.DataNodeWrapper.THREEROW:
                type = 4;
                Common.Debug.assertStringTag(CommandUI.DataNodeWrapper.getNodeChildren(data).length === 3, 'This <Section> tag should have three <Row> child tags no more no less.', 1931103);
                break;
            case CommandUI.DataNodeWrapper.DIVIDER:
                type = 1;
                Common.Debug.assertStringTag(!CommandUI.DataNodeWrapper.getNodeChildren(data).length, 'This <Section> tag should have no child tags because it is Divider section.', 1931104);
                break;
            default:
                throw Error.create('Invalid Section attribute \"Type\" found in XML: ' + strType);
        }
        var verticalAlignment = CommandUI.SectionVerticalAlignment.top;
        if (strAlignment === 'Middle') {
            verticalAlignment = CommandUI.SectionVerticalAlignment.middle;
        }
        Common.Debug.assertStringTag(strHorizontalAlignment !== CommandUI.DataNodeWrapper.RIGHTALIGN, 'Ribbon only support left aligned sections', 4035526);
        var horizontalAlignment = CommandUI.SectionHorizontalAlignment.left;
        var showSectionSeparator = !!strShowSectionSeparator && Boolean.parse(strShowSectionSeparator);
        var section = bc.ribbon._createSection$i$3(layout.get_id() + '-' + sectionNumber, type, verticalAlignment, horizontalAlignment, showSectionSeparator, layout.get_visible());
        if (type !== 1) {
            this._handleRow$p$1(section.getRow(1), (((data[CommandUI.DataNodeWrapper.CHILDREN]))[0]), bc);
            if (section.get_type() === 3 || section.get_type() === 4) {
                this._handleRow$p$1(section.getRow(2), (((data[CommandUI.DataNodeWrapper.CHILDREN]))[1]), bc);
            }
            if (section.get_type() === 4) {
                this._handleRow$p$1(section.getRow(3), (((data[CommandUI.DataNodeWrapper.CHILDREN]))[2]), bc);
            }
        }
        return section;
    },
    
    _handleRow$p$1: function CommandUI__declarativeTemplate$_handleRow$p$1$in(row, data, bc) {
        Common.Debug.assertTag((data[CommandUI.DataNodeWrapper.NAME]) === CommandUI.DataNodeWrapper.ROW, 2131156);
        var children = data[CommandUI.DataNodeWrapper.CHILDREN];
        for (var i = 0; i < children.length; i++) {
            var name = children[i][CommandUI.DataNodeWrapper.NAME];
            var comp = null;
            Common.Debug.assertStringTag(name === CommandUI.DataNodeWrapper.CONTROL, 'Only nodes of type Control can be children of Row nodes.', 1931105);
            if (name === CommandUI.DataNodeWrapper.CONTROL) {
                comp = this._createControlComponentFromData$p$1(children[i], bc);
            }
            if (!CommandUI.ScriptUtility.isNullOrUndefined(comp)) {
                row.addChild(comp);
            }
        }
    },
    
    _createControlComponentFromData$p$1: function CommandUI__declarativeTemplate$_createControlComponentFromData$p$1$in(data, bc) {
        var attrs = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var alias = attrs[CommandUI.DataNodeWrapper.TEMPLATEALIAS];
        var displayMode = attrs[CommandUI.DataNodeWrapper.DISPLAYMODE];
        var control = bc.controls[alias];
        var comp = null;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(control) && CommandUI.Control.isInstanceOfType(control)) {
            comp = control.createComponentForDisplayMode(displayMode);
        }
        return comp;
    }
}


CommandUI.Group = function CommandUI_Group(root, id, title, description, command, usesLayouts, isTouchGroup, isStretched, properties, hideLauncherButton, minHeight) {
    CommandUI.Group.initializeBase(this, [ root, id, title, description, null, (properties && properties.Visible) ? Boolean.parse(properties.Visible) : true, true ]);
    this._isTouchGroup$1 = isTouchGroup;
    this._command$1 = command;
    this._usesLayouts$1 = usesLayouts;
    this._isStretched$1 = isStretched;
    this._minHeight$1 = minHeight;
    this._properties$1 = properties;
    this._hideLauncherButton$1 = hideLauncherButton;
}
CommandUI.Group.getLauncherButtonId = function CommandUI_Group$getLauncherButtonId$st(groupId) {
    return groupId + CommandUI.Group._dialogLauncherButtonId$p;
}
CommandUI.Group.prototype = {
    _elmBody$1: null,
    _elmGroupContainer$1: null,
    _elmTitle$1: null,
    _elmSeparator$1: null,
    _elmDialogLauncher$1: null,
    _dialogLauncherComponent$1: null,
    _usesLayouts$1: false,
    _showseparator$1: true,
    _isTouchGroup$1: false,
    _isStretched$1: false,
    _minHeight$1: null,
    _selectedLayout$1: null,
    _properties$1: null,
    _hideLauncherButton$1: false,
    
    get__properties$p$1: function CommandUI_Group$get__properties$p$1$in() {
        return this._properties$1;
    },
    
    get_displaySeparator: function CommandUI_Group$get_displaySeparator$in() {
        return this._showseparator$1;
    },
    
    set_displaySeparator: function CommandUI_Group$set_displaySeparator$in(value) {
        this._showseparator$1 = value;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._elmSeparator$1)) {
            this._elmSeparator$1.style.display = (this._showseparator$1) ? '' : 'none';
        }
        return value;
    },
    
    get_hasElementDialogLauncherComponent: function CommandUI_Group$get_hasElementDialogLauncherComponent$in() {
        return !!this._dialogLauncherComponent$1;
    },
    
    get_elementDialogLauncherComponent: function CommandUI_Group$get_elementDialogLauncherComponent$in() {
        return this._dialogLauncherComponent$1;
    },
    
    get__isTouchGroup$i$1: function CommandUI_Group$get__isTouchGroup$i$1$in() {
        return this._isTouchGroup$1;
    },
    
    set__isTouchGroup$i$1: function CommandUI_Group$set__isTouchGroup$i$1$in(value) {
        this._isTouchGroup$1 = value;
        return value;
    },
    
    get_bodyElement: function CommandUI_Group$get_bodyElement$in() {
        return this._elmBody$1;
    },
    
    get__titleDOMElement$i$1: function CommandUI_Group$get__titleDOMElement$i$1$in() {
        return this._elmTitle$1;
    },
    
    _createDialogLauncherComponent$p$1: function CommandUI_Group$_createDialogLauncherComponent$p$1$in() {
        var buttonProps = ({});
        buttonProps.Command = this._properties$1.DialogLauncherButtonCommand;
        buttonProps.Image16by16 = this._properties$1.ImageDialogLauncherButton;
        buttonProps.Image16by16Class = this._properties$1.ImageDialogLauncherButtonClass;
        buttonProps.Alt = this._properties$1.DialogLauncherButtonTooltip;
        buttonProps.Keytip = this._properties$1.Keytip;
        var dialogLauncherButton = new CommandUI.Controls.Button(this.get_root(), CommandUI.Group.getLauncherButtonId(this.get_id()), buttonProps);
        var dialogLauncherButtonComponent = dialogLauncherButton.createComponentForDisplayMode('Small');
        CommandUI.Utility.ensureCSSClassOnElement(dialogLauncherButtonComponent.get_elementInternal(), CommandUI.Group._dialogLauncherButtonCssClass$p);
        return dialogLauncherButtonComponent;
    },
    
    _tryInsertDialogLauncherButton$p$1: function CommandUI_Group$_tryInsertDialogLauncherButton$p$1$in(groupContainer, dialogLauncherElement) {
        groupContainer.appendChild(dialogLauncherElement);
        if (Common.WindowUtils.leftBoundsOverlapsRightBounds(Common.WindowUtils.getElementBounds(this._elmTitle$1), Common.WindowUtils.getElementBounds(dialogLauncherElement), Common.AFrameworkApplication.get_isRtl())) {
            groupContainer.removeChild(dialogLauncherElement);
        }
    },
    
    refreshInternal: function CommandUI_Group$refreshInternal$in() {
        this.ensureDOMElementAndEmpty();
        if (this._usesLayouts$1) {
            if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmTitle$1)) {
                this._elmTitle$1 = CommandUI.Utility.createElement('span');
                this._elmTitle$1.className = 'cui-groupTitle UISmallFont';
                this._elmTitle$1.id = this.get_id() + '-title';
                Common.AccessibilityUtils.setAriaAttribute(this._elmTitle$1, 'aria-hidden', 'true');
            }
            else {
                this._elmTitle$1 = CommandUI.Utility.removeChildNodes(this._elmTitle$1);
            }
            var title = this.get_title();
            if (!CommandUI.ScriptUtility.isNullOrUndefined(title)) {
                this._elmTitle$1.innerText = title;
            }
            if (!this._elmDialogLauncher$1 && this._properties$1.DialogLauncherButtonCommand && !this._hideLauncherButton$1) {
                this._dialogLauncherComponent$1 = this._createDialogLauncherComponent$p$1();
                this._elmDialogLauncher$1 = this._dialogLauncherComponent$1.get_elementInternal();
                this.addChild(this._dialogLauncherComponent$1);
            }
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmBody$1)) {
            this._elmBody$1 = CommandUI.Utility.createElement('span');
            this._elmBody$1.className = 'cui-groupBody';
        }
        else {
            this._elmBody$1 = CommandUI.Utility.removeChildNodes(this._elmBody$1);
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmSeparator$1) && this.get_displaySeparator()) {
            this._elmSeparator$1 = CommandUI.Utility.createElement('span');
            this._elmSeparator$1.className = 'cui-groupSeparator';
        }
        this._elmGroupContainer$1 = CommandUI.Utility.createElement('span');
        this._elmGroupContainer$1.className = 'cui-groupContainer';
        this._elmGroupContainer$1.appendChild(this._elmBody$1);
        if (this._usesLayouts$1) {
            this._elmGroupContainer$1.appendChild(this._elmTitle$1);
        }
        this.get_elementInternal().appendChild(this._elmGroupContainer$1);
        if (this.get_displaySeparator()) {
            this.get_elementInternal().appendChild(this._elmSeparator$1);
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._selectedLayout$1) && this._usesLayouts$1) {
            this._selectedLayout$1.ensureDOMElement();
            this._elmBody$1.appendChild(this._selectedLayout$1.get_elementInternal());
            this._selectedLayout$1.ensureRefreshed();
            this._selectedLayout$1.ensureBehaviorAttached();
        }
        else {
            this.appendChildrenToElement(this._elmBody$1);
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._minHeight$1)) {
            this.get_elementInternal().style.minHeight = this._minHeight$1 + 'px';
        }
        CommandUI.Component.prototype.refreshInternal.call(this);
    },
    
    onGroupAttachedToRibbon: function CommandUI_Group$onGroupAttachedToRibbon$in() {
        if (this._usesLayouts$1 && this._elmDialogLauncher$1) {
            this._tryInsertDialogLauncherButton$p$1(this._elmGroupContainer$1, this._elmDialogLauncher$1);
        }
    },
    
    ensureDOMElement: function CommandUI_Group$ensureDOMElement$in() {
        CommandUI.Component.prototype.ensureDOMElement.call(this);
        var role = Common.AccessibilityUtils.ariaPresentationRole;
        if (this._usesLayouts$1) {
            Common.AccessibilityUtils.setAriaAttribute(this.get_elementInternal(), Common.AccessibilityUtils.ariaLabelledByAttribute, this.get_id() + '-title');
            role = Common.AccessibilityUtils.ariaGroupRole;
        }
        this.get_elementInternal().setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, role);
    },
    
    get_cssClass: function CommandUI_Group$get_cssClass$in() {
        var className = 'cui-group';
        if (this._isStretched$1) {
            className += ' stretched';
        }
        return className;
    },
    
    get_domElementTagName: function CommandUI_Group$get_domElementTagName$in() {
        return 'li';
    },
    
    unselectLayout: function CommandUI_Group$unselectLayout$in() {
        this.selectLayout(null);
    },
    
    selectLayout: function CommandUI_Group$selectLayout$in(name) {
        var layout = (CommandUI.ScriptUtility.isNullOrUndefined(name)) ? null : this._getChildByTitle$i$0(name);
        if (layout === this._selectedLayout$1 || CommandUI.ScriptUtility.isNullOrUndefined(layout) && CommandUI.ScriptUtility.isNullOrUndefined(this._selectedLayout$1)) {
            return;
        }
        this._selectedLayout$1 = (!CommandUI.ScriptUtility.isNullOrUndefined(layout)) ? layout : null;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(layout)) {
            layout._setDirtyRecursively$i$0(true);
        }
        this._onDirtyingChange$i$0();
    },
    
    get__selectedLayout$i$1: function CommandUI_Group$get__selectedLayout$i$1$in() {
        return this._selectedLayout$1;
    },
    
    _isGroupDialogLauncherButton$p$1: function CommandUI_Group$_isGroupDialogLauncherButton$p$1$in(element) {
        return (!!element) && (!!element.className) && (element.className.indexOf(CommandUI.Group._dialogLauncherButtonCssClass$p) > 0);
    },
    
    ensureCorrectChildType: function CommandUI_Group$ensureCorrectChildType$in(child) {
        if (this._usesLayouts$1) {
            if (this._isGroupDialogLauncherButton$p$1(child.get_elementInternal())) {
                return;
            }
            if (!CommandUI._layout.isInstanceOfType(child)) {
                throw Error.create('Only children of type Layout or the dialog launcher button can be added this Group');
            }
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this._getChildByTitle$i$0(child.get_title()))) {
                throw Error.create('A Layout with title ' + child.get_title() + ' already exists in this Group.');
            }
        }
        else {
            if (!(CommandUI.Section.isInstanceOfType(child)) && !(CommandUI.CollapsibleSection.isInstanceOfType(child))) {
                throw Error.create('Only children of type Section or CollapsibleSection can be added this Group');
            }
        }
    },
    
    _command$1: null,
    
    get_command: function CommandUI_Group$get_command$in() {
        return this._command$1;
    },
    
    pollForStateAndUpdateInternal: function CommandUI_Group$pollForStateAndUpdateInternal$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_command())) {
            this.set__enabled$i$0(true);
        }
        else {
            var result = this.get_root().pollForCommandState(this.get_command(), null, null);
            this.set__enabled$i$0((result & 1) > 0);
        }
        if (!this._usesLayouts$1) {
            CommandUI.Component.prototype.pollForStateAndUpdateInternal.call(this);
            return;
        }
        if (!this.get__enabled$i$0() || CommandUI.ScriptUtility.isNullOrUndefined(this._selectedLayout$1)) {
            return;
        }
        this._selectedLayout$1.pollForStateAndUpdateInternal();
        if (this._dialogLauncherComponent$1) {
            var result = this.get_root().pollForCommandState(this._properties$1.DialogLauncherButtonCommand, null, null);
            this._dialogLauncherComponent$1.set__enabled$i$0((result & 1) > 0);
        }
    },
    
    onChildrenVisibleChanged: function CommandUI_Group$onChildrenVisibleChanged$in() {
        if (this._usesLayouts$1) {
            if (this.get__selectedLayout$i$1()) {
                this.set_visible(this.get__selectedLayout$i$1().get_visible());
            }
        }
        else {
            CommandUI.Component.prototype.onChildrenVisibleChanged.call(this);
        }
    }
}


CommandUI._layout = function CommandUI__layout(ribbon, id, title, visible) {
    CommandUI._layout.initializeBase(this, [ ribbon, id, title, '', null, visible ]);
}
CommandUI._layout.prototype = {
    
    refreshInternal: function CommandUI__layout$refreshInternal$in() {
        if (this.get__needsDelayIniting$i$0()) {
            this.doDelayedInit();
        }
        this.ensureDOMElementAndEmpty();
        this.appendChildrenToElement(this.get_elementInternal());
        CommandUI.Component.prototype.refreshInternal.call(this);
    },
    
    ensureCorrectChildType: function CommandUI__layout$ensureCorrectChildType$in(child) {
        if (!CommandUI.Section.isInstanceOfType(child)) {
            throw Error.create('Only children of Section can be added to a Layout');
        }
    },
    
    get_cssClass: function CommandUI__layout$get_cssClass$in() {
        return 'cui-layout';
    },
    
    get_visibleInDOM: function CommandUI__layout$get_visibleInDOM$in() {
        if (CommandUI.Group.isInstanceOfType(this.get_parent())) {
            var parent = this.get_parent();
            return parent.get__selectedLayout$i$1() === this;
        }
        else {
            Common.Debug.assertTag(CommandUI.ScriptUtility.isNullOrUndefined(this.get_parent()), 2131157);
            return false;
        }
    }
}


CommandUI.CommandContextSwitchCommandProperties = function CommandUI_CommandContextSwitchCommandProperties() {
    CommandUI.CommandContextSwitchCommandProperties.initializeBase(this);
}
CommandUI.CommandContextSwitchCommandProperties.prototype = {
    OldContextId: null,
    OldContextCommand: null,
    NewContextId: null,
    NewContextCommand: null
}


CommandUI.Ribbon = function CommandUI_Ribbon(id, properties, staticTouchMode, resizableContainer, isSingleRowLayoutRibbon) {
    this.$$d__onTabContainerKeyUp$p$3 = Function.createDelegate(this, this._onTabContainerKeyUp$p$3);
    this.$$d__onTabContainerKeyDown$p$3 = Function.createDelegate(this, this._onTabContainerKeyDown$p$3);
    this._pendingDismissRibbonTimeoutId$3 = -1;
    this._lastScaleTime$3 = new Date(0);
    CommandUI.Ribbon.initializeBase(this, [ id, properties, resizableContainer ]);
    this._contextualGroups$3 = {};
    this.set_isStaticUiTouchMode(staticTouchMode);
    this.set__isLowerRibbonTouchMode$i$3(staticTouchMode);
    this.set__isSingleRowLayoutRibbon$i$1(isSingleRowLayoutRibbon);
    Common.AFrameworkApplication.reportInitialUi(this.get__isLowerRibbonTouchMode$i$3());
}
CommandUI.Ribbon.add_onRibbonTabSwitchedEventHandler = function CommandUI_Ribbon$add_onRibbonTabSwitchedEventHandler$st(value) {
    CommandUI.Ribbon._ribbonTabSwitchedEventSource.addHandler(CommandUI.Ribbon._ribbonTabSwitchedEventName$p, value);
}
CommandUI.Ribbon.remove_onRibbonTabSwitchedEventHandler = function CommandUI_Ribbon$remove_onRibbonTabSwitchedEventHandler$st(value) {
    CommandUI.Ribbon._ribbonTabSwitchedEventSource.removeHandler(CommandUI.Ribbon._ribbonTabSwitchedEventName$p, value);
}
CommandUI.Ribbon.prototype = {
    _selectedTab$3: null,
    _previousTab$3: null,
    _elmTopBar2$3: null,
    _elmTabTitles$3: null,
    _elmRibbonShortcut$3: null,
    _elmTabContainer$3: null,
    _elmTabContainerOverflowContainer$3: null,
    _elmNavigationInstructions$3: null,
    _elmTopRowLeft$3: null,
    _elmTopRowCenter$3: null,
    _elmTopRowRight$3: null,
    _elmBottomRowLeft$3: null,
    _elmBottomRowCenter$3: null,
    _elmBottomRowRight$3: null,
    _peripheralContentsLoaded$3: false,
    _$$pf__headerContainer$p$3: null,
    
    get__headerContainer$3: function CommandUI_Ribbon$get__headerContainer$3$in() {
        return this._$$pf__headerContainer$p$3;
    },
    
    set__headerContainer$3: function CommandUI_Ribbon$set__headerContainer$3$in(value) {
        this._$$pf__headerContainer$p$3 = value;
        return value;
    },
    
    _ribbonStateChanged$3: false,
    _ribbonPinButton$3: null,
    
    get_activeModalUIZIndex: function CommandUI_Ribbon$get_activeModalUIZIndex$in() {
        return Common.AFrameworkApplication.get_activeFrame().get_activeModalUIZIndex();
    },
    
    get__keytipModeRibbonHeadersZIndex$p$3: function CommandUI_Ribbon$get__keytipModeRibbonHeadersZIndex$p$3$in() {
        return (this.get_activeModalUIZIndex() - 3);
    },
    
    _isLowerRibbonTouchMode$3: false,
    _keytipManager$i$3: null,
    
    get_upperRibbonHeight: function CommandUI_Ribbon$get_upperRibbonHeight$in() {
        return (this.get__isSingleRowLayoutRibbon$i$1()) ? Common.RibbonSize.get_singleRowLayoutUpperRibbonHeight() : Common.RibbonSize.get_upperRibbonHeight();
    },
    
    get_lowerRibbonHeight: function CommandUI_Ribbon$get_lowerRibbonHeight$in() {
        return Common.RibbonSize.lowerRibbonHeight(this.get__isLowerRibbonTouchMode$i$3(), this.get__isSingleRowLayoutRibbon$i$1());
    },
    
    _$$pf_PeripheralContentContainer$p$3: null,
    
    get_peripheralContentContainer: function CommandUI_Ribbon$get_peripheralContentContainer$in() {
        return this._$$pf_PeripheralContentContainer$p$3;
    },
    
    set_peripheralContentContainer: function CommandUI_Ribbon$set_peripheralContentContainer$in(value) {
        this._$$pf_PeripheralContentContainer$p$3 = value;
        return value;
    },
    
    _$$pf_ElmRibbonTopBars$p$3: null,
    
    get_elmRibbonTopBars: function CommandUI_Ribbon$get_elmRibbonTopBars$in() {
        return this._$$pf_ElmRibbonTopBars$p$3;
    },
    
    set_elmRibbonTopBars: function CommandUI_Ribbon$set_elmRibbonTopBars$in(value) {
        this._$$pf_ElmRibbonTopBars$p$3 = value;
        return value;
    },
    
    get__isLowerRibbonTouchMode$i$3: function CommandUI_Ribbon$get__isLowerRibbonTouchMode$i$3$in() {
        return this._isLowerRibbonTouchMode$3 || this.get_touchModeForcedOn();
    },
    
    set__isLowerRibbonTouchMode$i$3: function CommandUI_Ribbon$set__isLowerRibbonTouchMode$i$3$in(value) {
        this._isLowerRibbonTouchMode$3 = value;
        return value;
    },
    
    _$$pf_TheStandaloneRoot$p$3: null,
    
    get_theStandaloneRoot: function CommandUI_Ribbon$get_theStandaloneRoot$in() {
        return this._$$pf_TheStandaloneRoot$p$3;
    },
    
    set_theStandaloneRoot: function CommandUI_Ribbon$set_theStandaloneRoot$in(value) {
        this._$$pf_TheStandaloneRoot$p$3 = value;
        return value;
    },
    
    get_inKeytipMode: function CommandUI_Ribbon$get_inKeytipMode$in() {
        return !!this._keytipManager$i$3 && this._keytipManager$i$3.get_inKeytipMode();
    },
    
    attachStandaloneRoot: function CommandUI_Ribbon$attachStandaloneRoot$in(standaloneRoot) {
        this.set_theStandaloneRoot(standaloneRoot);
    },
    
    _forEachTab$p$3: function CommandUI_Ribbon$_forEachTab$p$3$in(action) {
        var $$enum_2 = this.get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var child = $$enum_2.get_current();
            if (CommandUI._tab.isInstanceOfType(child)) {
                action(child);
            }
        }
    },
    
    get_supportsInvisibleControls: function CommandUI_Ribbon$get_supportsInvisibleControls$in() {
        return Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('RibbonSupportsInvisibleControlsIsEnabled');
    },
    
    refreshInternal: function CommandUI_Ribbon$refreshInternal$in() {
        CommandUI.Root.prototype.refreshInternal.call(this);
        var focusedControlBeforeRefresh = this.get_root().get_controlWithFocus();
        this.ensureDOMElement();
        this._reparentPeripheralsAndCreateTabTitlesContainer$p$3(false);
        CommandUI.Utility.toggleCSSClassOnElement(this.get_elmRibbonTopBars(), Common.CuiHeaderDomReference.touchModeCssClass, this.get_isStaticUiTouchMode());
        if (this.get_elmRibbonTopBars() !== this.get__headerContainer$3()) {
            CommandUI.Utility.toggleCSSClassOnElement(this.get__headerContainer$3(), Common.CuiHeaderDomReference.touchModeCssClass, this.get_isStaticUiTouchMode());
        }
        CommandUI.Utility.toggleCSSClassOnElement(this.get_elmRibbonTopBars(), 'cui-ribbon-visible', this.get_tabShowing());
        if (this.get_elmRibbonTopBars() !== this.get__headerContainer$3()) {
            CommandUI.Utility.toggleCSSClassOnElement(this.get__headerContainer$3(), 'cui-ribbon-visible', this.get_tabShowing());
        }
        var selTab = null;
        var lastVisibleTab = null;
        var currentCtxId = null;
        var currentCtxGroup = null;
        CommandUI.Utility._removeChildNodesSlow$i(this._elmTabTitles$3);
        var $$dict_7 = this._contextualGroups$3;
        for (var $$key_8 in $$dict_7) {
            var de = { key: $$key_8, value: $$dict_7[$$key_8] };
            var cg = de.value;
            cg._ensureTabTitlesCleared$i$0();
        }
        var count = 0;
        var visibleTabs = new CommandUI.List();
        var $$t_V = this;
        this._forEachTab$p$3(function(tab) {
            if (tab.get_visible()) {
                visibleTabs.add(tab);
                count++;
            }
        });
        var tabPosition = 0;
        var tabCount = visibleTabs.get_count();
        var accessibilityTextSet = !(CommandUI.ScriptUtility.isNullOrEmptyString(this.get_ribbonProperties().ATTabPositionText) || CommandUI.ScriptUtility.isNullOrEmptyString(this.get_ribbonProperties().ATContextualTabText));
        var $$enum_G = visibleTabs.getEnumerator();
        while ($$enum_G.moveNext()) {
            var tab = $$enum_G.get_current();
            tab._ensureTitleRefreshed$i$2();
            tab._resetTitleCSSClasses$i$2();
            if (tab.get_contextual()) {
                if (!currentCtxId || tab.get_contextualGroupId() !== currentCtxId) {
                    if (tab.get_contextualGroupId() !== currentCtxId) {
                        if (!CommandUI.ScriptUtility.isNullOrUndefined(lastVisibleTab) && lastVisibleTab.get_contextual()) {
                            CommandUI.Utility.ensureCSSClassOnElement(lastVisibleTab.get__titleDOMElement$i$2(), 'cui-ct-last');
                        }
                    }
                    currentCtxId = tab.get_contextualGroupId();
                    currentCtxGroup = this._contextualGroups$3[tab.get_contextualGroupId()];
                    CommandUI.Utility.removeCSSClassFromElement(currentCtxGroup.get__elementInternal$i$0(), 'cui-cg-s');
                    this._setContextualColor$i$3(0);
                    this._elmTabTitles$3.appendChild(currentCtxGroup.get__elementInternal$i$0());
                    CommandUI.Utility.ensureCSSClassOnElement(tab.get__titleDOMElement$i$2(), 'cui-ct-first');
                }
                currentCtxGroup._addTabTitleDOMElement$i$0(tab.get__titleDOMElement$i$2());
            }
            else {
                if (currentCtxId) {
                    CommandUI.Utility.ensureCSSClassOnElement(lastVisibleTab.get__titleDOMElement$i$2(), 'cui-ct-last');
                    currentCtxId = null;
                    currentCtxGroup = null;
                }
                if (accessibilityTextSet) {
                    tabPosition++;
                    tab._setContextualText$i$2(this.get_ribbonProperties().ATTabPositionText, null, null, tabPosition, tabCount);
                }
                this._elmTabTitles$3.appendChild(tab.get__titleDOMElement$i$2());
            }
            if (tab === this._selectedTab$3) {
                selTab = tab;
            }
            lastVisibleTab = tab;
        }
        if (currentCtxId) {
            CommandUI.Utility.ensureCSSClassOnElement(lastVisibleTab.get__titleDOMElement$i$2(), 'cui-ct-last');
            lastVisibleTab = null;
            currentCtxId = null;
            currentCtxGroup = null;
        }
        var ctxlTabPosition = 1;
        if (accessibilityTextSet) {
            for (var i = 0; i < count; i++) {
                var tab = visibleTabs.get_item(i);
                if (tab.get_contextual()) {
                    if (tab.get_contextualGroupId() !== currentCtxId) {
                        currentCtxId = tab.get_contextualGroupId();
                        currentCtxGroup = this._contextualGroups$3[tab.get_contextualGroupId()];
                        ctxlTabPosition = 1;
                    }
                    tab._ensureHiddenATDOMElement$i$2();
                    tab._setContextualText$i$2(this.get_ribbonProperties().ATTabPositionText, this.get_ribbonProperties().ATContextualTabText, currentCtxGroup.get_title(), ctxlTabPosition, currentCtxGroup.get_count());
                    ctxlTabPosition++;
                }
            }
        }
        if (!this.get_tabShowing()) {
            selTab = null;
        }
        else if (CommandUI.ScriptUtility.isNullOrUndefined(selTab)) {
            if (!this._minimized$3) {
                var lastSelectedTab = this.get__lastSelectedTab$p$3();
                var homeTab = this.get__homeTab$i$3();
                if (!CommandUI.ScriptUtility.isNullOrUndefined(lastSelectedTab) && lastSelectedTab.get_visible()) {
                    selTab = lastSelectedTab;
                }
                else if (!CommandUI.ScriptUtility.isNullOrUndefined(homeTab) && homeTab.get_visible()) {
                    selTab = homeTab;
                }
                this._makeTabSelectedInternal$i$3(selTab);
                this._elmTabContainer$3.tabIndex = -1;
            }
            else if (this.get_tabPoppedUp()) {
                this._delayDismissTabPopup$p$3(0);
            }
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(selTab) && selTab.get_contextual()) {
            var cg = this._getContextualGroup$i$3(selTab.get_contextualGroupId());
            CommandUI.Utility.ensureCSSClassOnElement(cg.get__elementInternal$i$0(), 'cui-cg-s');
            this._setContextualColor$i$3(cg.get_color());
        }
        this._updateDOMForSelectedTab$i$3();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(selTab)) {
            if (selTab.get__rootPolledSinceLastPoll$i$0()) {
                CommandUI.Utility.setEnabledOnElement(this._elmTabContainer$3, false, false, false);
            }
            var disabled = this._elmTabContainer$3.className.indexOf('cui-disabled') !== -1;
            var ribbonType = '';
            if (this.get__isSingleRowLayoutRibbon$i$1()) {
                ribbonType = ' cui-singlerowlayout';
            }
            else if (this.get__isLowerRibbonTouchMode$i$3()) {
                ribbonType = ' cui-touch';
            }
            this._elmTabContainer$3.className = selTab._getContainerCSSClassName$i$2() + ribbonType + ((disabled) ? ' cui-disabled' : '');
        }
        if (focusedControlBeforeRefresh) {
            focusedControlBeforeRefresh.setFocusOnControl();
        }
        var $$dict_R = this._contextualGroups$3;
        for (var $$key_S in $$dict_R) {
            var entry = { key: $$key_S, value: $$dict_R[$$key_S] };
            var contextualGroup = (entry.value);
            contextualGroup._ensureTabTitleWidths$i$0();
        }
        this.set_dirty(false);
        if (this._ribbonStateChanged$3) {
            var commandStateChanged = this.get_ribbonProperties().CommandStateChanged;
            if (!CommandUI.ScriptUtility.isNullOrUndefined(commandStateChanged)) {
                this.executeCommand(commandStateChanged, null, this, 0, false, null, null);
            }
            this._ribbonStateChanged$3 = false;
        }
    },
    
    _eventsAttached$3: false,
    
    _attachEvents$p$3: function CommandUI_Ribbon$_attachEvents$p$3$in() {
        if (!this._eventsAttached$3) {
            Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, this._elmTabContainer$3, this.$$d__onTabContainerKeyDown$p$3);
            Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, this._elmTabContainer$3, this.$$d__onTabContainerKeyUp$p$3);
            this._eventsAttached$3 = true;
        }
    },
    
    _onTabContainerKeyDown$p$3: function CommandUI_Ribbon$_onTabContainerKeyDown$p$3$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            var keyEvt = args.innerEvent.rawEvent;
            var keyCode = args.innerEvent.keyCode;
            var shiftKey = keyEvt.shiftKey;
            var focusMovedOut = false;
            var ribbonNavigation = false;
            if (keyCode === Sys.UI.Key.tab) {
                if (this.wrapKeyboardFocus(args.get_sourceElement(), !shiftKey)) {
                    focusMovedOut = (args.get_sourceElement() === this._elmTabContainer$3);
                    handled = true;
                }
                ribbonNavigation = true;
            }
            else if (args.innerEvent.ctrlKey && ((keyCode === Sys.UI.Key.left) || (keyCode === Sys.UI.Key.right))) {
                var ltr = (!this.get_root().get_textDirection());
                var rightArrow = (keyCode === Sys.UI.Key.right);
                this._selectedTab$3._moveGroupFocus$i$2(args.get_sourceElement() === this._elmTabContainer$3, (ltr && rightArrow) || (!ltr && !rightArrow));
                focusMovedOut = true;
                ribbonNavigation = true;
                handled = true;
            }
            else if (keyCode === Sys.UI.Key.esc) {
                if (this.get_tabPoppedUp()) {
                    this.dismissTabPopup(true, true);
                    handled = true;
                }
            }
            else if (args.innerEvent.ctrlKey || ((keyCode >= 112) && (keyCode <= 123))) {
                if (this.get_tabPoppedUp()) {
                    if (args.innerEvent.ctrlKey && keyCode === 117) {
                        this.dismissAllTransientUI();
                    }
                    else {
                        handled = true;
                    }
                }
            }
            if (focusMovedOut) {
                this._elmTabContainer$3.tabIndex = -1;
            }
            if (ribbonNavigation) {
                this.exitKeytipMode(true, false);
            }
        }
        return handled;
    },
    
    _onTabContainerKeyUp$p$3: function CommandUI_Ribbon$_onTabContainerKeyUp$p$3$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            var keyEvt = args.innerEvent.rawEvent;
            var altKey = keyEvt.altKey;
            if (altKey) {
                if (this.get_tabPoppedUp()) {
                    this.dismissTabPopup(true, true);
                    handled = true;
                }
            }
        }
        return handled;
    },
    
    wrapKeyboardFocus: function CommandUI_Ribbon$wrapKeyboardFocus$in(focusedElement, forward) {
        var wrapped = false;
        var firstControl = this._selectedTab$3.get__firstControl$i$2();
        var lastControl = this._selectedTab$3.get__lastControl$i$2();
        if (this.get_tabPoppedUp()) {
            var nextControl = this._nextControlToFocusTabPoppedUp$p$3(focusedElement, forward, firstControl, lastControl);
            if (!CommandUI.ScriptUtility.isNullOrUndefined(nextControl)) {
                this._clearSelectionOnElement$p$3(focusedElement);
                if (nextControl.get_focusableElement()) {
                    nextControl.setFocusOnControl();
                    wrapped = true;
                }
            }
        }
        else {
            if (forward && (focusedElement === this._ribbonPinButton$3.get_focusableElement()) || !forward && (focusedElement === firstControl.get_focusableElement())) {
                this._clearSelectionOnElement$p$3(focusedElement);
                this.setFocusOnCurrentTabTitle();
                wrapped = true;
            }
            else if (forward && (focusedElement === lastControl.get_focusableElement()) || !forward && (focusedElement === this._ribbonPinButton$3.get_focusableElement())) {
                var nextControl = (focusedElement === lastControl.get_focusableElement()) ? this._ribbonPinButton$3 : lastControl;
                this._clearSelectionOnElement$p$3(focusedElement);
                if (nextControl.get_focusableElement()) {
                    nextControl.setFocusOnControl();
                    wrapped = true;
                }
            }
        }
        return wrapped;
    },
    
    _nextControlToFocusTabPoppedUp$p$3: function CommandUI_Ribbon$_nextControlToFocusTabPoppedUp$p$3$in(focusedElement, forward, firstControl, lastControl) {
        var tabContainerFocused = (focusedElement === this._elmTabContainer$3);
        var nextControl = null;
        if (forward) {
            if (tabContainerFocused || focusedElement === this._ribbonPinButton$3.get_focusableElement()) {
                nextControl = firstControl;
            }
            else if (focusedElement === lastControl.get_focusableElement()) {
                nextControl = this._ribbonPinButton$3;
            }
        }
        else {
            if (tabContainerFocused || focusedElement === firstControl.get_focusableElement()) {
                nextControl = this._ribbonPinButton$3;
            }
            else if (focusedElement === this._ribbonPinButton$3.get_focusableElement()) {
                nextControl = lastControl;
            }
        }
        return nextControl;
    },
    
    _clearSelectionOnElement$p$3: function CommandUI_Ribbon$_clearSelectionOnElement$p$3$in(element) {
        if (Common.DomUtils.getTag(element) === Common.DOMTag.input) {
            Common.WindowUtils.clearSelectionInInput(element);
        }
    },
    
    updateOpenMenu: function CommandUI_Ribbon$updateOpenMenu$in(menuId) {
        if (this.get_root() && this.get_root().refreshOpenMenu(menuId)) {
            return true;
        }
        if (this.get_jewel() && this.get_jewel().refreshOpenMenu(menuId)) {
            return true;
        }
        return false;
    },
    
    setFocusOnCurrentTabTitle: function CommandUI_Ribbon$setFocusOnCurrentTabTitle$in() {
        var tab = (!CommandUI.ScriptUtility.isNullOrUndefined(this._selectedTab$3)) ? this._selectedTab$3 : this.get__homeTab$i$3();
        Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrUndefined(tab), 2131158);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(tab)) {
            tab._setFocusOnTitle$i$2();
        }
    },
    
    prepareToEnterKeytipMode: function CommandUI_Ribbon$prepareToEnterKeytipMode$in() {
        this.beginModal(this, false, true);
        this.get_elmRibbonTopBars().style.zIndex = this.get__keytipModeRibbonHeadersZIndex$p$3();
        this.setTabContainerOverflow('visible');
    },
    
    enterKeytipMode: function CommandUI_Ribbon$enterKeytipMode$in(onExitCallback) {
        if (this._keytipManager$i$3) {
            this._keytipManager$i$3.enterKeytipMode();
            this._keytipManager$i$3.set_onExitCallback(onExitCallback);
        }
    },
    
    prepareToExitKeytipMode: function CommandUI_Ribbon$prepareToExitKeytipMode$in(dismissTabPopUp) {
        this.closeAllMenus();
        if (dismissTabPopUp && this.get_tabPoppedUp()) {
            this.dismissTabPopup(true, false);
        }
        if (!this.get_tabPoppedUp()) {
            this.get_elmRibbonTopBars().style.zIndex = CommandUI.Ribbon._defaultTopBarsZIndex;
        }
        if (this.get_inModalMode() && !this.get_tabPoppedUp()) {
            this.endModal(this, false, true);
        }
        else {
            this.endBlockingModeKeepModal();
        }
        this.setTabContainerOverflow('hidden');
    },
    
    exitKeytipMode: function CommandUI_Ribbon$exitKeytipMode$in(preserveRibbonFocus, dismissTabPopup) {
        if (this._keytipManager$i$3) {
            this._keytipManager$i$3.exitKeytipMode(preserveRibbonFocus, dismissTabPopup);
        }
    },
    
    setTabContainerOverflow: function CommandUI_Ribbon$setTabContainerOverflow$in(overflow) {
        this._elmTabContainerOverflowContainer$3.style.overflow = overflow;
        this._elmTabContainer$3.style.overflow = overflow;
    },
    
    get__isRibbonCurrentModalController$i$3: function CommandUI_Ribbon$get__isRibbonCurrentModalController$i$3$in() {
        return this.get_inModalMode() && this.isCurrentModalController(this);
    },
    
    _setFocusOnTabContainer$i$3: function CommandUI_Ribbon$_setFocusOnTabContainer$i$3$in() {
        Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrUndefined(this._elmTabContainer$3), 2131159);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._elmTabContainer$3)) {
            this._elmTabContainer$3.tabIndex = 0;
            this._elmTabContainer$3.focus();
        }
    },
    
    _contextualGroups$3: null,
    
    addContextualGroup: function CommandUI_Ribbon$addContextualGroup$in(id, title, color, command) {
        var cg = this._contextualGroups$3[id];
        if (!CommandUI.ScriptUtility.isNullOrUndefined(cg)) {
            throw Error.create('A contextual group with id: ' + id + ' has already been added to this ribbon.');
        }
        cg = new CommandUI._contextualGroup(id, title, color, command);
        this._contextualGroups$3[id] = cg;
    },
    
    get_contextualGroupIds: function CommandUI_Ribbon$get_contextualGroupIds$in() {
        var contextualGroups = [];
        var $$dict_2 = this._contextualGroups$3;
        for (var $$key_3 in $$dict_2) {
            var entry = { key: $$key_3, value: $$dict_2[$$key_3] };
            Array.add(contextualGroups, entry.key);
        }
        return contextualGroups;
    },
    
    removeContextualGroup: function CommandUI_Ribbon$removeContextualGroup$in(id) {
        var cg = this._contextualGroups$3[id];
        if (!CommandUI.ScriptUtility.isNullOrUndefined(cg)) {
            var $$t_4 = this;
            this._forEachTab$p$3(function(tab) {
                if (tab.get_contextual() && tab.get_contextualGroupId() === id) {
                    throw Error.create('You cannot remove a contextual group when there are Tabs that refer to it.');
                }
            });
            delete this._contextualGroups$3[id];
        }
    },
    
    _setVisibilityForContextualGroup$p$3: function CommandUI_Ribbon$_setVisibilityForContextualGroup$p$3$in(id, visibility, scaleHeader) {
        var cg = this._contextualGroups$3[id];
        if (CommandUI.ScriptUtility.isNullOrUndefined(cg)) {
            throw Error.create('This ribbon does not contain a contextual group with id: ' + id);
        }
        var changed = false;
        var $$t_7 = this;
        this._forEachTab$p$3(function(tab) {
            if (tab.get_contextualGroupId() === id) {
                if (tab.get_visible() !== visibility) {
                    changed = true;
                }
                tab.set__visibleInternal$i$0(visibility);
            }
        });
        if (changed) {
            this._onDirtyingChange$i$0();
            this.refreshInternal();
            if (scaleHeader) {
                this.scaleHeader();
            }
            if (visibility) {
                CommandUI.RibbonAnimator.animateContextualGroup(id);
            }
        }
        return changed;
    },
    
    _getContextualGroup$i$3: function CommandUI_Ribbon$_getContextualGroup$i$3$in(id) {
        return this._contextualGroups$3[id];
    },
    
    _addChildAtIndex$i$0: function CommandUI_Ribbon$_addChildAtIndex$i$0$in(child, index) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(child)) {
            Common.Debug.assertNotReachedStringTag('The child component passed to AddChildAtIndex must not be null or undefined.', 5002081);
            return;
        }
        this.ensureCorrectChildType(child);
        if (CommandUI._tab.isInstanceOfType(child)) {
            var tab = child;
            if (tab.get_contextual()) {
                var cg = this._contextualGroups$3[tab.get_contextualGroupId()];
                if (CommandUI.ScriptUtility.isNullOrUndefined(cg)) {
                    throw Error.create('A contextual tab with contextual group id: ' + tab.get_contextualGroupId() + ' cannot be added because ' + ' the ribbon does not have a contextual group with this id.');
                }
            }
        }
        CommandUI.Component.prototype._addChildAtIndex$i$0.call(this, child, index);
    },
    
    ensureCorrectChildType: function CommandUI_Ribbon$ensureCorrectChildType$in(child) {
        if (!(CommandUI._tab.isInstanceOfType(child)) && !this._isPinButtonElement$p$3(child.get_elementInternal())) {
            throw Error.create('Only children of type Tab or Pin button can be added to a Ribbon');
        }
    },
    
    get_cssClass: function CommandUI_Ribbon$get_cssClass$in() {
        return 'cui-ribbon';
    },
    
    get__cssClassMarker$p$3: function CommandUI_Ribbon$get__cssClassMarker$p$3$in() {
        return 'cui-ribbon-marker';
    },
    
    get_rootType: function CommandUI_Ribbon$get_rootType$in() {
        return Common.UILocation.ribbon;
    },
    
    _ensureJewelPlaceholder$p$3: function CommandUI_Ribbon$_ensureJewelPlaceholder$p$3$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_jewelElement())) {
            this.set_jewelElement(CommandUI.Utility.createElement('div'));
            this.get_jewelElement().id = 'jewelcontainer';
            this.get_jewelElement().className = 'cui-jewel-container';
            this.get_jewelElement().style.display = 'none';
            this._elmTopBar2$3.appendChild(this.get_jewelElement());
        }
    },
    
    _buildAndSetJewel$i$3: function CommandUI_Ribbon$_buildAndSetJewel$i$3$in(jewelId, ds) {
        this.get_jewelElement().style.display = 'block';
        var $$t_4;
        var options = this.get__ribbonBuilder$i$3().get__ribbonBuildOptions$i$1().jewelBuildOptions || ($$t_4 = new CommandUI.JewelBuildOptions(), $$t_4.trimmedIds = this.get__ribbonBuilder$i$3().get_options().trimmedIds, $$t_4);
        var builder = new CommandUI.JewelBuilder(options, this.get_jewelElement(), this.get__ribbonBuilder$i$3().get_buildClientTask());
        builder.set_dataSource(ds);
        if (!builder.buildJewel(jewelId, this)) {
            throw Error.create('Jewel could not be built');
        }
        this.set_jewel(builder.get_jewel());
    },
    
    _rebuildAndSetJewel$i$3: function CommandUI_Ribbon$_rebuildAndSetJewel$i$3$in(jewelId, ds) {
        if (this.get_jewel()) {
            this.get_jewel().dispose();
        }
        this.get_jewelElement().innerText = '';
        this._buildAndSetJewel$i$3(jewelId, ds);
        if (this.get_jewel()) {
            this.get_jewel().pollForStateAndUpdate();
        }
    },
    
    _$$pf_Jewel$p$3: null,
    
    get_jewel: function CommandUI_Ribbon$get_jewel$in() {
        return this._$$pf_Jewel$p$3;
    },
    
    set_jewel: function CommandUI_Ribbon$set_jewel$in(value) {
        this._$$pf_Jewel$p$3 = value;
        return value;
    },
    
    get_jewelDisplayedComponent: function CommandUI_Ribbon$get_jewelDisplayedComponent$in() {
        return (this.get_jewel() && this.get_jewel().get__jewelMenuLauncher$i$2()) ? this.get_jewel().get__jewelMenuLauncher$i$2().get_displayedComponent() : null;
    },
    
    _createTab$i$3: function CommandUI_Ribbon$_createTab$i$3$in(id, title, description, command, cssClass, keytip) {
        return new CommandUI._tab(this, id, title, description, command, false, null, cssClass, keytip);
    },
    
    _createContextualTab$i$3: function CommandUI_Ribbon$_createContextualTab$i$3$in(id, title, description, command, contextualGroupId, cssClass, keytip) {
        return new CommandUI._tab(this, id, title, description, command, true, contextualGroupId, cssClass, keytip);
    },
    
    _createGroup$i$3: function CommandUI_Ribbon$_createGroup$i$3$in(id, properties, title, description, command, hideLauncherButton) {
        return new CommandUI.Group(this, id, title, description, command, true, false, false, properties, hideLauncherButton, null);
    },
    
    _createLayout$i$3: function CommandUI_Ribbon$_createLayout$i$3$in(id, title, visible) {
        return new CommandUI._layout(this, id, title, visible);
    },
    
    _createSection$i$3: function CommandUI_Ribbon$_createSection$i$3$in(id, type, verticalAlignment, horizontalAlignment, showSectionSeparator, visible) {
        return new CommandUI.Section(this, id, type, verticalAlignment, horizontalAlignment, false, showSectionSeparator, null, '', CommandUI.SectionArrangement.horizontal, visible);
    },
    
    _updateDOMForSelectedTab$i$3: function CommandUI_Ribbon$_updateDOMForSelectedTab$i$3$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._selectedTab$3)) {
            this._selectedTab$3.ensureDOMElement();
            this.set__lastSelectedTab$p$3(this._selectedTab$3);
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._selectedTab$3) || !this._selectedTab$3.get_children().get_count()) {
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_elementInternal()) && !CommandUI.ScriptUtility.isNullOrUndefined(this._elmTabContainerOverflowContainer$3) && this.get_elementInternal().lastChild === this._elmTabContainerOverflowContainer$3) {
                this.get_elementInternal().removeChild(this._elmTabContainerOverflowContainer$3);
            }
        }
        else if (!CommandUI.ScriptUtility.isNullOrUndefined(this._elmTabContainerOverflowContainer$3)) {
            this.get_elementInternal().appendChild(this._elmTabContainerOverflowContainer$3);
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._selectedTab$3)) {
            return;
        }
        var wasDirty = this._selectedTab$3.get_dirty();
        this._selectedTab$3.ensureRefreshed();
        if (this._selectedTab$3.get_children().get_count() > 0 && !CommandUI.ScriptUtility.isNullOrUndefined(this._elmTabContainer$3)) {
            var firstChild = this._elmTabContainer$3.firstChild;
            if (!firstChild) {
                Common.Debug.assertNotReachedStringTag('Pin/unpin button is missing from the Ribbon!', 5002082);
                this._elmTabContainer$3.appendChild(this._selectedTab$3.get_elementInternal());
            }
            else if (this._isPinButtonElement$p$3(firstChild)) {
                this._elmTabContainer$3.insertBefore(this._selectedTab$3.get_elementInternal(), firstChild);
            }
            else if (firstChild !== this._selectedTab$3.get_elementInternal()) {
                Common.Debug.assertStringTag(this._isTabBodyElement$p$3(firstChild), 'The first child of the tab container is not the tab body!', 5002083);
                this._elmTabContainer$3.replaceChild(this._selectedTab$3.get_elementInternal(), firstChild);
            }
            this._selectedTab$3.onTabAttachedToRibbon();
        }
        if (this._previousTab$3 !== this._selectedTab$3) {
            var commandTabSwitched = this.get_ribbonProperties().CommandTabSwitched;
            var parameters = new CommandUI.CommandContextSwitchCommandProperties();
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this._previousTab$3)) {
                parameters.OldContextId = this._previousTab$3.get_id();
                parameters.OldContextCommand = this._previousTab$3.get_command();
            }
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this._selectedTab$3)) {
                parameters.NewContextId = this._selectedTab$3.get_id();
                parameters.NewContextCommand = this._selectedTab$3.get_command();
            }
            if (!CommandUI.ScriptUtility.isNullOrUndefined(commandTabSwitched)) {
                this.executeCommand(commandTabSwitched, parameters, this, 0, false, null, null);
            }
            CommandUI.Ribbon._ribbonTabSwitchedEventSource.raiseEvent(CommandUI.Ribbon._ribbonTabSwitchedEventName$p, parameters, null);
            this._updatePreviousSelectedTab$p$3(this._selectedTab$3);
        }
    },
    
    _makeTabSelectedInternal$i$3: function CommandUI_Ribbon$_makeTabSelectedInternal$i$3$in(tab) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(tab)) {
            this._onDirtyingChange$i$0();
            tab._setSelectedInternal$i$2(true, false);
            if (!tab.get_contextual()) {
                this._setContextualColor$i$3(0);
            }
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this._selectedTab$3) && (this._selectedTab$3 !== tab)) {
                this._selectedTab$3._setSelectedInternal$i$2(false, false);
            }
            this._selectedTab$3 = tab;
            if (this.get_minimized()) {
                this.displayTabPopup();
            }
        }
    },
    
    _updatePreviousSelectedTab$p$3: function CommandUI_Ribbon$_updatePreviousSelectedTab$p$3$in(newlySelectedTab) {
        this._previousTab$3 = newlySelectedTab;
    },
    
    selectTabById: function CommandUI_Ribbon$selectTabById$in(tabId, force) {
        Common.PerfMetrics.mark(10332);
        if (!force && !this.get_tabShowing()) {
            Common.PerfMetrics.mark(10333);
            return false;
        }
        var tab = this._getChild$i$0(tabId);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(tab)) {
            if (tab.get_selected() && tab.get_visible()) {
                Common.PerfMetrics.mark(10333);
                return true;
            }
            if (tab.get_contextual() && !tab.get_visible()) {
                this._setVisibilityForContextualGroup$p$3(tab.get_contextualGroupId(), true, true);
            }
            if (tab.get_visible()) {
                tab.set_selected(true);
                Common.PerfMetrics.mark(10333);
                return true;
            }
        }
        Common.PerfMetrics.mark(10333);
        return false;
    },
    
    getTabTitleDOMElementBounds: function CommandUI_Ribbon$getTabTitleDOMElementBounds$in(tabId) {
        var tab = this._getChild$i$0(tabId);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(tab)) {
            return Common.WindowUtils.getElementBounds(tab.get__titleDOMElement$i$2());
        }
        return null;
    },
    
    getGroupTitleDOMElementBounds: function CommandUI_Ribbon$getGroupTitleDOMElementBounds$in(tabId, groupId) {
        var tab = this._getChild$i$0(tabId);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(tab) && !CommandUI.ScriptUtility.isNullOrUndefined(tab._getChild$i$0(groupId))) {
            var group = tab._getChild$i$0(groupId);
            return Common.WindowUtils.getElementBounds(group.get__titleDOMElement$i$1());
        }
        return null;
    },
    
    scaleRibbon: function CommandUI_Ribbon$scaleRibbon$in() {
        this._scale$i$2();
    },
    
    isSelectedTab: function CommandUI_Ribbon$isSelectedTab$in(tabId) {
        return tabId === this.get_selectedTabId();
    },
    
    launchJewel: function CommandUI_Ribbon$launchJewel$in(inputMethod, submenuId) {
        this.get_jewel().get__jewelMenuLauncher$i$2().launchMenuWithSubmenu(inputMethod, submenuId);
    },
    
    _setContextualColor$i$3: function CommandUI_Ribbon$_setContextualColor$i$3$in(color) {
        var cssColor = CommandUI._contextualGroup._getColorNameForContextualTabColor$i(color);
        if (cssColor === CommandUI.ScriptUtility._emptyString$i) {
            CommandUI.Utility.removeCSSClassFromElement(this._elmTopBar2$3, this._currentCtxCss$3);
            this._currentCtxCss$3 = null;
        }
        else {
            if (!this._currentCtxCss$3) {
                CommandUI.Utility.removeCSSClassFromElement(this._elmTopBar2$3, this._currentCtxCss$3);
            }
            this._currentCtxCss$3 = 'cui-ct-topBar-' + cssColor;
            CommandUI.Utility.ensureCSSClassOnElement(this._elmTopBar2$3, this._currentCtxCss$3);
        }
    },
    
    _currentCtxCss$3: null,
    
    get_selectedTabId: function CommandUI_Ribbon$get_selectedTabId$in() {
        return (this._selectedTab$3) ? this._selectedTab$3.get_id() : null;
    },
    
    _scaleInternal$i$3: function CommandUI_Ribbon$_scaleInternal$i$3$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_elementInternal()) || CommandUI.ScriptUtility.isNullOrUndefined(this._selectedTab$3)) {
            return false;
        }
        var horizontalScaleRoom = 0;
        if (!this._selectedTab$3.get__scaledByCookie$i$2()) {
            var cookie = null;
            if (this.get_useDataCookie()) {
                cookie = this.getDataCookieValue(this._selectedTab$3.get_id());
            }
            var widthHeight = this._lastResizeWidthHeight;
            if (!CommandUI.ScriptUtility.isNullOrUndefined(cookie) && cookie.startsWith(widthHeight)) {
                var parts = cookie.split('|');
                if (!CommandUI.ScriptUtility.isNullOrUndefined(parts) && parts.length === 4) {
                    var index = parseInt(parts[1]);
                    var hsr = parseInt(parts[2]);
                    horizontalScaleRoom = (hsr > horizontalScaleRoom) ? hsr : horizontalScaleRoom;
                    if (!isNaN(index) && index >= 0) {
                        if (index >= 0 && index < this._selectedTab$3.get_scaling().get_stepsInternal().length) {
                            this._selectedTab$3.scaleIndex(index);
                            this._selectedTab$3.set__scaledByCookie$i$2(true);
                            this.refreshInternal();
                            this._selectedTab$3.set__lastScaleWidthHeight$i$2(this._lastResizeWidthHeight);
                            return true;
                        }
                    }
                }
            }
        }
        if (this._selectedTab$3.get_dirty()) {
            this.refreshInternal();
        }
        var timesDown = 0;
        var tabBodyWidth = this._selectedTab$3.get__width$i$2();
        var tabContentsCurScaleWidth = this._selectedTab$3.get__contentsCurScaleWidth$i$2();
        while ((tabContentsCurScaleWidth > tabBodyWidth) && (timesDown < CommandUI.Ribbon._maxScaleTries)) {
            if (!this._selectedTab$3.scaleDown()) {
                this._selectedTab$3.set__minWidth$i$2(tabContentsCurScaleWidth);
                if (this._elmTabContainer$3 && this._ribbonPinButton$3 && this._ribbonPinButton$3.get_displayedComponent() && this._ribbonPinButton$3.get_displayedComponent().get_elementInternal()) {
                    var tabContainerMinWidth = tabContentsCurScaleWidth + this._ribbonPinButton$3.get_displayedComponent().get_elementInternal().offsetWidth;
                    this._elmTabContainer$3.style.minWidth = tabContainerMinWidth + 'px';
                }
                else {
                    Common.Debug.assertNotReachedStringTag('The min width could not be set on the tab container!', 5002112);
                }
                break;
            }
            this.refreshInternal();
            tabContentsCurScaleWidth = this._selectedTab$3.get__contentsCurScaleWidth$i$2();
            timesDown++;
        }
        var timesUp = 0;
        var timesDownRevert = 0;
        if ((timesDown <= 0) && ((tabBodyWidth - tabContentsCurScaleWidth) > horizontalScaleRoom)) {
            while (timesUp < CommandUI.Ribbon._maxScaleTries) {
                if (!this._selectedTab$3.scaleUp()) {
                    break;
                }
                this.refreshInternal();
                timesUp++;
                if (this._selectedTab$3.get__contentsCurScaleWidth$i$2() > tabBodyWidth) {
                    this._selectedTab$3.scaleDown();
                    this.refreshInternal();
                    timesDownRevert++;
                    break;
                }
            }
        }
        if (this.get_useDataCookie() && this._selectedTab$3.get_currentScalingIndex() >= -1) {
            this._storeTabScaleCookie$p$3();
        }
        this._selectedTab$3.set__lastScaleWidthHeight$i$2(this._lastResizeWidthHeight);
        this.scaleHeader();
        return timesDown > 0 || timesUp - timesDownRevert > 0;
    },
    
    scaleHeader: function CommandUI_Ribbon$scaleHeader$in() {
        if (this._enhancedMobileViewIsEnabled$p$3()) {
            var app = document.getElementById('application');
            app.style.minWidth = '0px';
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_peripheralContentContainer())) {
                var scalingManager = new Common.TopBarScalingManager(this.get_peripheralContentContainer(), this._elmTopBar2$3, this.get_root().get_textDirection() === 1);
                scalingManager.scaleHeader();
            }
        }
        else if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_peripheralContentContainer())) {
            Common.RibbonTabScalingActor.scaleHeaderUsingContainers(this.get_peripheralContentContainer(), this._elmTopBar2$3, this.get_root().get_textDirection() === 1);
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._elmTabTitles$3)) {
            var tabTitlesCSSClass = this._elmTabTitles$3.className;
            var step = 0;
            if (tabTitlesCSSClass.indexOf('cui-tts-scale-1') !== -1) {
                step = 1;
            }
            else if (tabTitlesCSSClass.indexOf('cui-tts-scale-2') !== -1) {
                step = 2;
            }
            var $$t_6 = this;
            this._forEachTab$p$3(function(tab) {
                tab.onTitleScale(step);
            });
        }
    },
    
    _enhancedMobileViewIsEnabled$p$3: function CommandUI_Ribbon$_enhancedMobileViewIsEnabled$p$3$in() {
        if (!Common.AFrameworkApplication.appSettingsManager) {
            return false;
        }
        return Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('EnhancedMobileViewIsEnabled');
    },
    
    _scale$i$2: function CommandUI_Ribbon$_scale$i$2$in() {
        CommandUI.ScalableRoot.prototype._scale$i$2.call(this);
        if (!this.get_tabShowing()) {
            this.scaleHeader();
            this.refreshInternal();
            return false;
        }
        var scaled = this._scaleInternal$i$3();
        this._lastScaleTime$3 = new Date();
        Common.Debug.assertStringTag(!this.get_dirty(), 'The ribbon should not be dirty after we scale.', 1581580);
        return scaled;
    },
    
    _scaleIndex$i$3: function CommandUI_Ribbon$_scaleIndex$i$3$in(index) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._selectedTab$3)) {
            this._selectedTab$3._scaleIndexInternal$i$2(index);
        }
    },
    
    get__lastScaleTime$i$3: function CommandUI_Ribbon$get__lastScaleTime$i$3$in() {
        return this._lastScaleTime$3.getTime();
    },
    
    _storeTabScaleCookie$p$3: function CommandUI_Ribbon$_storeTabScaleCookie$p$3$in() {
        var scalingRoom = this._selectedTab$3.get__width$i$2() - this._selectedTab$3.get__contentsCurScaleWidth$i$2();
        this.storeDataCookie(this._selectedTab$3.get_id(), this.get_elementInternal().clientWidth.toString() + this.get_elementInternal().clientHeight.toString() + '|' + this._selectedTab$3.get_currentScalingIndex().toString() + '|' + scalingRoom.toString());
    },
    
    _minimized$3: false,
    
    get_minimized: function CommandUI_Ribbon$get_minimized$in() {
        return this._minimized$3;
    },
    
    set_minimized: function CommandUI_Ribbon$set_minimized$in(value) {
        if (this._minimized$3 !== value) {
            this.set__minimizedInternal$i$3(value);
            if (!value && this.get_pollForState()) {
                this.pollForStateAndUpdate();
            }
        }
        return value;
    },
    
    _minimizedEverSet$3: false,
    
    get__minimizedInternal$i$3: function CommandUI_Ribbon$get__minimizedInternal$i$3$in() {
        return this._minimized$3;
    },
    
    set__minimizedInternal$i$3: function CommandUI_Ribbon$set__minimizedInternal$i$3$in(value) {
        if (this._minimized$3 !== value || !this._minimizedEverSet$3) {
            this._onDirtyingChange$i$0();
            this._minimized$3 = value;
            this._minimizedEverSet$3 = true;
            if (value && !CommandUI.ScriptUtility.isNullOrUndefined(this._selectedTab$3)) {
                this._selectedTab$3._setSelectedInternal$i$2(false, false);
                this._selectedTab$3 = null;
            }
            this._ribbonStateChanged$3 = true;
        }
        return value;
    },
    
    get_tabShowing: function CommandUI_Ribbon$get_tabShowing$in() {
        return !this._minimized$3 || this.get_tabPoppedUp();
    },
    
    toggleMinimizedState: function CommandUI_Ribbon$toggleMinimizedState$in(inputMethod) {
        Common.PerfMetrics.mark(10330);
        Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.oreoOnToggleRibbonState, 2, null);
        if (inputMethod === Common.InputManager.InputMethod.touch) {
            this.set__isLowerRibbonTouchMode$i$3(true);
        }
        else if (inputMethod === Common.InputManager.InputMethod.mouse) {
            this.set__isLowerRibbonTouchMode$i$3(false);
        }
        var initiallyMinimized = this.get_minimized();
        var initiallyTabPoppedUp = this.get_tabPoppedUp();
        this.dismissTabPopup(true, true);
        this.set_minimized(!this.get_minimized());
        if (!!(initiallyMinimized & (!!Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonFlexBoxLayoutEnabled()))) {
            this._elmTabContainerOverflowContainer$3.style.position = 'relative';
            this._elmTabContainerOverflowContainer$3.style.width = '';
            Common.CssUtils.removeStyle(this._elmTabContainerOverflowContainer$3, 'zIndex');
        }
        if (initiallyMinimized && initiallyTabPoppedUp) {
            CommandUI.RibbonAnimator.animateRibbonExpandCollapse(this, true, true);
            Common.AFrameworkApplication.get_activeFrame().animateDocumentPanel(false, true);
        }
        else if (initiallyMinimized) {
            CommandUI.RibbonAnimator.animateRibbonExpandCollapse(this, true, false);
            Common.AFrameworkApplication.get_activeFrame().animateDocumentPanel(false, false);
        }
        else {
            CommandUI.RibbonAnimator.animateRibbonExpandCollapse(this, false, false);
            Common.AFrameworkApplication.get_activeFrame().animateDocumentPanel(true, false);
        }
        this._updatePinButtonProperties$p$3();
        this.refresh();
        Common.PerfMetrics.mark(10331);
    },
    
    pollForStateAndUpdateInternal: function CommandUI_Ribbon$pollForStateAndUpdateInternal$in() {
        if (!this.get_rootUser()) {
            return;
        }
        this.set__lastPollTime$i$0(new Date());
        this.set_needScaling(false);
        var enabledGroups = {};
        var headerNeedsScaling = false;
        var $$dict_5 = this._contextualGroups$3;
        for (var $$key_6 in $$dict_5) {
            var entry = { key: $$key_6, value: $$dict_5[$$key_6] };
            var group = entry.value;
            var enabled = false;
            if (!CommandUI.ScriptUtility.isNullOrUndefined(group.get_command())) {
                enabled = this.get_rootUser().isRootCommandEnabled(group.get_command(), null);
                enabled = enabled || group.get_command() === 'DEBUG_ALWAYS_ENABLED';
            }
            if (enabled) {
                enabledGroups[entry.key] = true;
            }
            if (this._setVisibilityForContextualGroup$p$3(entry.key, enabled, false)) {
                headerNeedsScaling = true;
            }
        }
        if (headerNeedsScaling) {
            this.scaleHeader();
        }
        if (this.get_jewel()) {
            this.get_jewel().pollForStateAndUpdate();
        }
        this.ensureRefreshed();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._selectedTab$3)) {
            this._selectedTab$3.pollForStateAndUpdateInternal();
        }
        if (this.get_needScaling()) {
            this._scale$i$2();
            this.set_needScaling(false);
            this.set_needRefresh(false);
        }
        else if (this.get_needRefresh()) {
            this.refreshInternal();
            this.set_needRefresh(false);
        }
        this.ensureGlobalDisablingRemoved();
    },
    
    _$$pf_JewelElement$p$3: null,
    
    get_jewelElement: function CommandUI_Ribbon$get_jewelElement$in() {
        return this._$$pf_JewelElement$p$3;
    },
    
    set_jewelElement: function CommandUI_Ribbon$set_jewelElement$in(value) {
        this._$$pf_JewelElement$p$3 = value;
        return value;
    },
    
    get_ribbonProperties: function CommandUI_Ribbon$get_ribbonProperties$in() {
        return this.get_properties();
    },
    
    get__ribbonBuilder$i$3: function CommandUI_Ribbon$get__ribbonBuilder$i$3$in() {
        return this.get_builder();
    },
    
    set__ribbonBuilder$i$3: function CommandUI_Ribbon$set__ribbonBuilder$i$3$in(value) {
        this.set_builder(value);
        return value;
    },
    
    ensureTabsInitialized: function CommandUI_Ribbon$ensureTabsInitialized$in() {
        var $$t_2 = this;
        this._forEachTab$p$3(function(tab) {
            tab.ensureTabInitialized();
        });
    },
    
    _$$pf_HomeTab$p$3: null,
    
    get__homeTab$i$3: function CommandUI_Ribbon$get__homeTab$i$3$in() {
        return this._$$pf_HomeTab$p$3;
    },
    
    set__homeTab$i$3: function CommandUI_Ribbon$set__homeTab$i$3$in(value) {
        this._$$pf_HomeTab$p$3 = value;
        return value;
    },
    
    _$$pf_LastSelectedTab$p$3: null,
    
    get__lastSelectedTab$p$3: function CommandUI_Ribbon$get__lastSelectedTab$p$3$in() {
        return this._$$pf_LastSelectedTab$p$3;
    },
    
    set__lastSelectedTab$p$3: function CommandUI_Ribbon$set__lastSelectedTab$p$3$in(value) {
        this._$$pf_LastSelectedTab$p$3 = value;
        return value;
    },
    
    get_domElementTagName: function CommandUI_Ribbon$get_domElementTagName$in() {
        return 'div';
    },
    
    ensureDOMElement: function CommandUI_Ribbon$ensureDOMElement$in() {
        CommandUI.Root.prototype.ensureDOMElement.call(this);
        Common.AccessibilityUtils.setAriaAttribute(this.get_elementInternal(), 'aria-describedby', 'ribboninstructions');
        this.get_elementInternal().setAttribute('role', 'toolbar');
        Sys.UI.DomElement.addCssClass(this.get_elementInternal(), this.get__cssClassMarker$p$3());
        this._ensureElementForRibbonShortcut$p$3();
        this._ensureTopBars$p$3();
        this._ensureTopBars1And2$p$3();
        this._ensureJewelPlaceholder$p$3();
        this._ensureTabContainer$p$3();
        this._ensureJewelPlaceholder$p$3();
        this._findPeripherals$p$3();
        this._attachEvents$p$3();
    },
    
    _ensureElementForRibbonShortcut$p$3: function CommandUI_Ribbon$_ensureElementForRibbonShortcut$p$3$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmRibbonShortcut$3)) {
            this._elmRibbonShortcut$3 = CommandUI.Utility.createElement('div');
            this._elmRibbonShortcut$3.id = CommandUI.Keytip.ribbonShortcutId;
            this._elmRibbonShortcut$3.innerText = (Common.BrowserUtils.get_isMac()) ? 'Alt Ctrl' : 'Alt Windows';
            Sys.UI.DomElement.addCssClass(this._elmRibbonShortcut$3, 'WACAltTextDescribedBy');
            Common.AccessibilityUtils.setAriaAttribute(this._elmRibbonShortcut$3, Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaPresentationRole);
            Common.AccessibilityUtils.setAriaAttribute(this._elmRibbonShortcut$3, Common.AccessibilityUtils.ariaHiddenAttribute, Common.AccessibilityUtils.ariaTrueValue);
            this.get_elementInternal().appendChild(this._elmRibbonShortcut$3);
        }
    },
    
    _ensureTopBars1And2$p$3: function CommandUI_Ribbon$_ensureTopBars1And2$p$3$in() {
        var useExternalHeaderDiv = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('UseExternalHeaderDiv') && document.getElementsByClassName(Common.CuiHeaderDomReference.get_topBarOneCssClass()).length > 0;
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_peripheralContentContainer()) && !useExternalHeaderDiv) {
            this.set_peripheralContentContainer(CommandUI.Utility.createElement('div'));
            this.get_peripheralContentContainer().className = Common.CuiHeaderDomReference.get_topBarOneCssClass();
            this.get_peripheralContentContainer().style.display = 'none';
            this.get__headerContainer$3().appendChild(this.get_peripheralContentContainer());
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmTopBar2$3)) {
            this._elmTopBar2$3 = CommandUI.Utility.createElement('div');
            this._elmTopBar2$3.className = 'cui-topBar2';
            this.get_elmRibbonTopBars().appendChild(this._elmTopBar2$3);
        }
    },
    
    _ensureTopBars$p$3: function CommandUI_Ribbon$_ensureTopBars$p$3$in() {
        if ((this.get_properties()).NavigationHelpText && CommandUI.ScriptUtility.isNullOrUndefined(this._elmNavigationInstructions$3)) {
            this._elmNavigationInstructions$3 = CommandUI.Utility.createElement('span');
            this._elmNavigationInstructions$3.className = 'cui-hidden';
            this._elmNavigationInstructions$3.id = 'ribboninstruction';
            this._elmNavigationInstructions$3.innerText = (this.get_properties()).NavigationHelpText;
            this.get_elementInternal().appendChild(this._elmNavigationInstructions$3);
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_elmRibbonTopBars())) {
            this.set_elmRibbonTopBars(CommandUI.Utility.createElement('div'));
            this.get_elmRibbonTopBars().id = Common.CuiHelper.headerTopBarsId;
            this.get_elmRibbonTopBars().className = 'cui-ribbonTopBars' + ((this.get__isSingleRowLayoutRibbon$i$1()) ? ' cui-singlerowlayout' : '');
            this.get_elmRibbonTopBars().style.zIndex = CommandUI.Ribbon._defaultTopBarsZIndex;
            this.get_elementInternal().appendChild(this.get_elmRibbonTopBars());
        }
        this._ensureHeaderDom$p$3();
    },
    
    _ensureHeaderDom$p$3: function CommandUI_Ribbon$_ensureHeaderDom$p$3$in() {
        var appHeaderPanel;
        var $$t_1, $$t_2;
        if (($$t_2 = Common.CuiHeaderDomReference.tryEnsuredHeaderPanelInitialized(($$t_1 = {'val': appHeaderPanel}), true, false)), appHeaderPanel = $$t_1.val, $$t_2) {
            if (CommandUI.ScriptUtility.isNullOrUndefined(this.get__headerContainer$3())) {
                this.set__headerContainer$3(CommandUI.Utility.createElement('div'));
                this.get__headerContainer$3().className = 'cui-ribbonTopBars';
                this.get__headerContainer$3().id = Common.CuiHelper.externalHeaderFullTopBarsId;
                appHeaderPanel.appendChild(this.get__headerContainer$3());
            }
            this._ensureExternalHeaderCss$p$3();
            Sys.UI.DomElement.addCssClass(this.get_elementInternal(), 'cui-exth');
            if (Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonFlexBoxLayoutEnabled() && !Common.AFrameworkApplication.hideHeaderEmbedded) {
                this._ensureFlexBoxPositioningCss$p$3();
            }
        }
        else {
            this.set__headerContainer$3(this.get_elmRibbonTopBars());
        }
    },
    
    _ensureExternalHeaderCss$p$3: function CommandUI_Ribbon$_ensureExternalHeaderCss$p$3$in() {
        Sys.UI.DomElement.addCssClass(this.get__headerContainer$3(), this.get_cssClass());
        if (this.get_textDirection() === 1) {
            CommandUI.Utility.ensureCSSClassOnElement(this.get__headerContainer$3(), 'cui-rtl');
        }
    },
    
    _ensureFlexBoxPositioningCss$p$3: function CommandUI_Ribbon$_ensureFlexBoxPositioningCss$p$3$in() {
        Sys.UI.DomElement.addCssClass(this.get__headerContainer$3(), 'FlexBoxLayout');
    },
    
    _ensureTabContainer$p$3: function CommandUI_Ribbon$_ensureTabContainer$p$3$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmTabContainer$3)) {
            this._elmTabContainerOverflowContainer$3 = CommandUI.Utility.createElement('div');
            this._elmTabContainerOverflowContainer$3.id = CommandUI.Ribbon._tabContainerOverflowId$i;
            this._elmTabContainerOverflowContainer$3.setAttribute('role', 'presentation');
            this._elmTabContainerOverflowContainer$3.style.overflow = 'hidden';
            this._elmTabContainer$3 = CommandUI.Utility.createElement('div');
            this._elmTabContainer$3.setAttribute('role', 'presentation');
            CommandUI.Utility.setEnabledOnElement(this._elmTabContainer$3, false, false, false);
            this._elmTabContainerOverflowContainer$3.appendChild(this._elmTabContainer$3);
            this._ensurePinButton$p$3();
        }
    },
    
    _getPinButtonProperties$p$3: function CommandUI_Ribbon$_getPinButtonProperties$p$3$in() {
        var pinButtonProps = ({});
        pinButtonProps.Command = this.get_ribbonProperties().CommandToggleRibbonState;
        if (this.get_minimized()) {
            pinButtonProps.Image16by16 = this.get_ribbonProperties().ImagePinButton;
            pinButtonProps.Image16by16Class = this.get_ribbonProperties().ImagePinButtonClass;
            pinButtonProps.Alt = this.get_ribbonProperties().PinButtonTooltip;
        }
        else {
            pinButtonProps.Image16by16 = this.get_ribbonProperties().ImageUnpinButton;
            pinButtonProps.Image16by16Class = this.get_ribbonProperties().ImageUnpinButtonClass;
            pinButtonProps.Alt = this.get_ribbonProperties().UnpinButtonTooltip;
        }
        return pinButtonProps;
    },
    
    _updatePinButtonProperties$p$3: function CommandUI_Ribbon$_updatePinButtonProperties$p$3$in() {
        var pinButtonBehavior = this._ribbonPinButton$3.get_behavior();
        if (pinButtonBehavior) {
            var props = this._getPinButtonProperties$p$3();
            this._ribbonPinButton$3.get_stateProperties()[CommandUI.Controls.ButtonCommandProperties.Image16by16Class] = props.Image16by16Class;
            this._ribbonPinButton$3.get_stateProperties()[CommandUI.SharedControlCommandProperties.alt] = props.Alt;
            pinButtonBehavior.updateImage();
            pinButtonBehavior.updateTooltip();
        }
    },
    
    _ensurePinButton$p$3: function CommandUI_Ribbon$_ensurePinButton$p$3$in() {
        this._ribbonPinButton$3 = new CommandUI.Controls.Button(this, CommandUI.Ribbon._pinButtonId$p, this._getPinButtonProperties$p$3());
        Common.Debug.assertTag(!!this._ribbonPinButton$3, 5002113);
        if (this._ribbonPinButton$3) {
            var pinButtonComponent = this._ribbonPinButton$3.createComponentForDisplayMode('Small');
            CommandUI.Utility.ensureCSSClassOnElement(pinButtonComponent.get_elementInternal(), CommandUI.Ribbon._pinButtonCssClass$p);
            pinButtonComponent.set__enabled$i$0(true);
            this._addChildAtIndex$i$0(pinButtonComponent, this.get_children().get_count());
            this._elmTabContainer$3.appendChild(pinButtonComponent.get_elementInternal());
        }
    },
    
    _isPinButtonElement$p$3: function CommandUI_Ribbon$_isPinButtonElement$p$3$in(element) {
        return (!!element) && (!!element.id) && element.id.startsWith(CommandUI.Ribbon._pinButtonId$p);
    },
    
    _isTabBodyElement$p$3: function CommandUI_Ribbon$_isTabBodyElement$p$3$in(element) {
        return (!!element.className) && (element.className.indexOf(CommandUI._tab.tabBodyCssClassName) !== -1);
    },
    
    _findPeripherals$p$3: function CommandUI_Ribbon$_findPeripherals$p$3$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmTopRowCenter$3)) {
            this._elmTopRowCenter$3 = document.getElementById(this.get__clientID$i$1() + '-' + Common.RibbonPeripheralSection.topRowCenter);
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmTopRowRight$3)) {
            this._elmTopRowRight$3 = document.getElementById(this.get__clientID$i$1() + '-' + Common.RibbonPeripheralSection.topRowRight);
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmTopRowLeft$3)) {
            this._elmTopRowLeft$3 = document.getElementById(this.get__clientID$i$1() + '-' + Common.RibbonPeripheralSection.topRowLeft);
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmBottomRowLeft$3)) {
            this._elmBottomRowLeft$3 = document.getElementById(this.get__clientID$i$1() + '-' + Common.RibbonPeripheralSection.bottomRowLeft);
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmBottomRowCenter$3)) {
            this._elmBottomRowCenter$3 = document.getElementById(this.get__clientID$i$1() + '-' + Common.RibbonPeripheralSection.bottomRowCenter);
            if (!(Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonVisualRefreshEnabled())) {
                CommandUI.Utility.ensureCSSClassOnElement(this._elmBottomRowCenter$3, 'UITextTranformUpperCase');
            }
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmBottomRowRight$3)) {
            this._elmBottomRowRight$3 = document.getElementById(this.get__clientID$i$1() + '-' + Common.RibbonPeripheralSection.bottomRowRight);
        }
    },
    
    reloadPeripherals: function CommandUI_Ribbon$reloadPeripherals$in() {
        this._findPeripherals$p$3();
        this._reparentPeripheralsAndCreateTabTitlesContainer$p$3(true);
        this._scale$i$2();
    },
    
    _reparentPeripheralsAndCreateTabTitlesContainer$p$3: function CommandUI_Ribbon$_reparentPeripheralsAndCreateTabTitlesContainer$p$3$in(forceReparenting) {
        if (this._peripheralContentsLoaded$3 && !forceReparenting) {
            return;
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_peripheralContentContainer())) {
            this.get_peripheralContentContainer().style.display = 'block';
        }
        var elmTopRowLeftParent = this.get_peripheralContentContainer();
        this._reparentPeripheral$p$3(this._elmTopRowLeft$3, elmTopRowLeftParent, 'inline-block');
        this._reparentPeripheral$p$3(this._elmTopRowCenter$3, this.get_peripheralContentContainer(), 'inline-block');
        this._reparentPeripheral$p$3(this._elmTopRowRight$3, this.get_peripheralContentContainer(), 'inline-block');
        this._reparentPeripheral$p$3(this._elmBottomRowLeft$3, this._elmTopBar2$3, 'block');
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmTabTitles$3)) {
            this._elmTabTitles$3 = CommandUI.Utility.createElement('ul');
            this._elmTabTitles$3.setAttribute('role', 'tablist');
            this._elmTabTitles$3.className = 'cui-tts';
            this._elmTopBar2$3.appendChild(this._elmTabTitles$3);
        }
        this._reparentPeripheral$p$3(this._elmBottomRowCenter$3, this._elmTopBar2$3, 'inline-block');
        this._reparentPeripheral$p$3(this._elmBottomRowRight$3, this._elmTopBar2$3, 'flex');
        this._peripheralContentsLoaded$3 = true;
    },
    
    _reparentPeripheral$p$3: function CommandUI_Ribbon$_reparentPeripheral$p$3$in(elmPeripheral, elmParent, displayStyle) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(elmPeripheral) && !CommandUI.ScriptUtility.isNullOrUndefined(elmParent) && elmPeripheral.parentNode !== elmParent) {
            elmParent.appendChild(elmPeripheral);
            elmPeripheral.style.display = displayStyle;
            CommandUI.Utility._setUnselectable$i(elmPeripheral, true, false);
        }
    },
    
    ensureGlobalDisablingRemoved: function CommandUI_Ribbon$ensureGlobalDisablingRemoved$in() {
        CommandUI.Utility.setEnabledOnElement(this._elmTabTitles$3, true, false, false);
        this._ensureTabContainerGlobalDisablingRemoved$i$3();
    },
    
    _ensureTabContainerGlobalDisablingRemoved$i$3: function CommandUI_Ribbon$_ensureTabContainerGlobalDisablingRemoved$i$3$in() {
        CommandUI.Utility.setEnabledOnElement(this._elmTabContainer$3, true, false, false);
    },
    
    get_rootUser: function CommandUI_Ribbon$get_rootUser$in() {
        return CommandUI.Root.prototype.get_rootUser.call(this);
    },
    
    set_rootUser: function CommandUI_Ribbon$set_rootUser$in(value) {
        CommandUI.Root.prototype.set_rootUser.call(this, value);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_jewel())) {
            this.get_jewel().set_rootUser(value);
        }
        return value;
    },
    
    get_visibleInDOM: function CommandUI_Ribbon$get_visibleInDOM$in() {
        return true;
    },
    
    dispose: function CommandUI_Ribbon$dispose$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._elmTabContainer$3)) {
            CommandUI.Utility.unregisterAllHandlers(this._elmTabContainer$3);
        }
        CommandUI.Root.prototype.dispose.call(this);
        if (this.get_jewel()) {
            this.get_jewel().dispose();
        }
        this._previousTab$3 = null;
        this._selectedTab$3 = null;
        this.set_elmRibbonTopBars(null);
        this._elmTabTitles$3 = null;
        this.set_jewelElement(null);
        this._elmTabContainer$3 = null;
        this._elmTabContainerOverflowContainer$3 = null;
        this._elmTopRowLeft$3 = null;
        this._elmTopRowCenter$3 = null;
        this._elmTopRowRight$3 = null;
        this._elmBottomRowLeft$3 = null;
        this._elmBottomRowCenter$3 = null;
        this._elmBottomRowRight$3 = null;
        this.set_peripheralContentContainer(null);
        this._elmTopBar2$3 = null;
        var $$dict_2 = this._contextualGroups$3;
        for (var $$key_3 in $$dict_2) {
            var entry = { key: $$key_3, value: $$dict_2[$$key_3] };
            var cg = entry.value;
            cg.dispose();
        }
        this._contextualGroups$3 = null;
        if (this._ribbonPinButton$3) {
            this._ribbonPinButton$3.dispose();
            this._ribbonPinButton$3 = null;
        }
        this.set__disposed$i$1(true);
    },
    
    _$$pf_TabPoppedUp$p$3: false,
    
    get_tabPoppedUp: function CommandUI_Ribbon$get_tabPoppedUp$in() {
        return this._$$pf_TabPoppedUp$p$3;
    },
    
    set_tabPoppedUp: function CommandUI_Ribbon$set_tabPoppedUp$in(value) {
        this._$$pf_TabPoppedUp$p$3 = value;
        return value;
    },
    
    _elmHadFocus$3: null,
    _tabPopupInvocationMethod$3: 0,
    _dismissingTabPopup$3: false,
    
    onModalBodyPointerDown: function CommandUI_Ribbon$onModalBodyPointerDown$in(args) {
        var handled = false;
        if (this.get_inKeytipMode()) {
            this.exitKeytipMode(false, true);
            handled = true;
        }
        if (args.get_inputSource() !== Common.InputManager.InputMethod.touch) {
            this.dismissTabPopup(true, true);
            handled = true;
        }
        return handled;
    },
    
    onModalBodyPointerUp: function CommandUI_Ribbon$onModalBodyPointerUp$in(args) {
        var handled = false;
        if (window.navigator.msPointerEnabled && args.get_inputSource() === Common.InputManager.InputMethod.touch) {
            this.dismissTabPopup(true, true);
            handled = true;
        }
        return handled;
    },
    
    onModalBodyPointerMove: function CommandUI_Ribbon$onModalBodyPointerMove$in(args) {
        return false;
    },
    
    onModalBodyPointerOut: function CommandUI_Ribbon$onModalBodyPointerOut$in(args) {
        return false;
    },
    
    onModalBodyClick: function CommandUI_Ribbon$onModalBodyClick$in(args) {
        var handled = false;
        if (!window.navigator.msPointerEnabled && args.get_inputSource() === Common.InputManager.InputMethod.touch) {
            this.dismissTabPopup(true, true);
            handled = true;
        }
        return handled;
    },
    
    onModalBodyMouseWheel: function CommandUI_Ribbon$onModalBodyMouseWheel$in(args) {
        return false;
    },
    
    displayTabPopup: function CommandUI_Ribbon$displayTabPopup$in() {
        if (!this.get_tabPoppedUp()) {
            Common.PerfMetrics.mark(10328);
            this._elmHadFocus$3 = Common.WindowUtils.getActiveElement(this.get_elementInternal().ownerDocument);
            this.beginModal(this, true, false);
            this.get_elementInternal().parentNode.style.zIndex = this.get_activeModalUIZIndex();
            var ribbonZIndex = (this.get_activeModalUIZIndex() + 1);
            this.get_elmRibbonTopBars().style.zIndex = ribbonZIndex;
            this.set_tabPoppedUp(true);
            this._tabPopupInvocationMethod$3 = this._selectedTab$3.get__popupInvocationMethod$i$2();
            if (Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonFlexBoxLayoutEnabled()) {
                this._elmTabContainerOverflowContainer$3.style.position = 'absolute';
                this._elmTabContainerOverflowContainer$3.style.width = '100%';
                this._elmTabContainerOverflowContainer$3.style.zIndex = ribbonZIndex;
            }
            this._ribbonStateChanged$3 = true;
            this.refresh();
            CommandUI.RibbonAnimator.animateRibbonExpandCollapse(this, true, this.get_inKeytipMode());
            Common.PerfMetrics.mark(10329);
        }
    },
    
    dismissTabPopup: function CommandUI_Ribbon$dismissTabPopup$in(endBlocking, loseFocus) {
        this._cancelPendingDismissTabPopup$p$3();
        if (this.get_tabPoppedUp() && !this._dismissingTabPopup$3 && this.isCurrentModalController(this)) {
            CommandUI.RibbonAnimator.animateRibbonExpandCollapse(this, false, false);
            this._dismissingTabPopup$3 = true;
            this.commitAnyPendingChange();
            this.endModal(this, loseFocus, endBlocking);
            Common.CssUtils.removeStyle(this.get_elementInternal().parentNode, 'zIndex');
            var ribbonZIndex = (this.get_inKeytipMode()) ? this.get__keytipModeRibbonHeadersZIndex$p$3() : CommandUI.Ribbon._defaultTopBarsZIndex;
            this.get_elmRibbonTopBars().style.zIndex = ribbonZIndex;
            if (Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonFlexBoxLayoutEnabled()) {
                this._elmTabContainerOverflowContainer$3.style.zIndex = ribbonZIndex;
            }
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this._selectedTab$3)) {
                this._selectedTab$3._setSelectedInternal$i$2(false, false);
                this._selectedTab$3 = null;
            }
            this._previousTab$3 = null;
            this.set_tabPoppedUp(false);
            this._ribbonStateChanged$3 = true;
            this.refreshInternal();
            Common.AFrameworkApplication.get_activeFrame().restoreFocusAfterDismissingPopup(this._elmHadFocus$3, this._tabPopupInvocationMethod$3);
            this._elmHadFocus$3 = null;
            this._dismissingTabPopup$3 = false;
            return true;
        }
        return false;
    },
    
    _delayDismissTabPopup$p$3: function CommandUI_Ribbon$_delayDismissTabPopup$p$3$in(delay) {
        if ((this._pendingDismissRibbonTimeoutId$3 === -1) && !this._dismissingTabPopup$3) {
            var $$t_1 = this;
            this._pendingDismissRibbonTimeoutId$3 = window.setTimeout(function() {
                $$t_1.dismissTabPopup(true, true);
            }, delay);
        }
    },
    
    _cancelPendingDismissTabPopup$p$3: function CommandUI_Ribbon$_cancelPendingDismissTabPopup$p$3$in() {
        var $$t_0;
        CommandUI.Utility.cancelPendingTimeout(($$t_0 = {'val': this._pendingDismissRibbonTimeoutId$3})), this._pendingDismissRibbonTimeoutId$3 = $$t_0.val;
    },
    
    dismissAllTransientUI: function CommandUI_Ribbon$dismissAllTransientUI$in() {
        var anyTransientUIDismissed = CommandUI.Root.prototype.dismissAllTransientUI.call(this);
        if (this.dismissTabPopup(true, true)) {
            anyTransientUIDismissed = true;
        }
        if (this.get_inKeytipMode()) {
            this.exitKeytipMode(true, true);
            anyTransientUIDismissed = true;
        }
        return anyTransientUIDismissed;
    },
    
    getControlVisibility: function CommandUI_Ribbon$getControlVisibility$in(controlId) {
        var control = this.getControlById(controlId);
        return (!control) ? false : control.get_visible();
    },
    
    setControlVisibility: function CommandUI_Ribbon$setControlVisibility$in(controlId, isVisible) {
        var control = this.getControlById(controlId);
        if (control) {
            control.set_visible(isVisible);
            if (this.get_dirty()) {
                this.refreshInternal();
            }
        }
    },
    
    isControlEnabled: function CommandUI_Ribbon$isControlEnabled$in(controlId) {
        var control = this.getControlById(controlId);
        return (!control) ? false : control.get_enabled();
    },
    
    forceEnableControl: function CommandUI_Ribbon$forceEnableControl$in(controlId, isEnabled) {
        var control = this.getControlById(controlId);
        if (control) {
            control.forceSetEnabledState(isEnabled);
            if (this.get_dirty()) {
                this.refreshInternal();
            }
        }
    }
}


CommandUI.RibbonAnimator = function CommandUI_RibbonAnimator() {
}
CommandUI.RibbonAnimator.get__ribbonCollapsedTop$p = function CommandUI_RibbonAnimator$get__ribbonCollapsedTop$p$st() {
    return -Common.AFrameworkApplication.get_activeFrame().get_lowerRibbonHeight();
}
CommandUI.RibbonAnimator.animateRibbonExpandCollapse = function CommandUI_RibbonAnimator$animateRibbonExpandCollapse$st(ribbon, expanding, immediate) {
    if (Common.BrowserUtils.get_isInternetExplorer8()) {
        Common.WacAirSpace.temporarilyDisableAnimation(1000);
    }
    var ribbonContainer = ribbon.get_element();
    var lowerRibbonOverflowContainer = Common.DomUtils.getChildById(ribbonContainer, CommandUI.Ribbon._tabContainerOverflowId$i);
    if (!lowerRibbonOverflowContainer) {
        return;
    }
    var lowerRibbon = lowerRibbonOverflowContainer.firstChild;
    if (lowerRibbon) {
        Common.WacAirSpace.setAnimationClass(lowerRibbon, CommandUI.RibbonAnimator._ribbonAnimationClass$p);
    }
    if (expanding && lowerRibbon) {
        if (lowerRibbon.id.endsWith('_clone')) {
            lowerRibbonOverflowContainer.removeChild(lowerRibbon);
            lowerRibbon = lowerRibbonOverflowContainer.firstChild;
            if (lowerRibbon) {
                Common.WacAirSpace.setAnimationClass(lowerRibbon, CommandUI.RibbonAnimator._ribbonAnimationClass$p);
            }
        }
        var onMove = new Common.MoveAnimationEvent(lowerRibbon);
        onMove.animateY((immediate) ? CommandUI.RibbonAnimator._ribbonExpandedTop$p : CommandUI.RibbonAnimator.get__ribbonCollapsedTop$p(), CommandUI.RibbonAnimator._ribbonExpandedTop$p);
        var onShowBody = new Common.ShowAnimationEvent(lowerRibbon);
        onShowBody.animateOpacity((immediate) ? 1 : 0, 1);
        Common.WacAirSpace.animate(onMove, null, CommandUI.RibbonAnimator._onAfterRibbonMoveDown$p);
        Common.WacAirSpace.animate(onShowBody, null, CommandUI.RibbonAnimator._onAfterShowRibbon$p);
    }
    else if (!expanding && lowerRibbon) {
        var lowerRibbonClone = Common.WacAirSpace.cloneElement(lowerRibbon, false, true);
        var onMove = new Common.MoveAnimationEvent(lowerRibbonClone);
        onMove.animateY(CommandUI.RibbonAnimator._ribbonExpandedTop$p, CommandUI.RibbonAnimator.get__ribbonCollapsedTop$p());
        var onHideBody = new Common.HideAnimationEvent(lowerRibbonClone);
        onHideBody.animateOpacity((immediate) ? 0 : 1, 0);
        CommandUI.RibbonAnimator._animatingContextualGroupsAfterRibbonCollapse = Array.clone(CommandUI.RibbonAnimator._animatingContextualGroups);
        Common.WacAirSpace.animate(onMove, null, CommandUI.RibbonAnimator._onAfterCloneAnimation$p);
        Common.WacAirSpace.animate(onHideBody, null, CommandUI.RibbonAnimator._onAfterHideRibbon$p);
    }
}
CommandUI.RibbonAnimator.animateContextualGroup = function CommandUI_RibbonAnimator$animateContextualGroup$st(id) {
    if (!id) {
        Common.Debug.assertNotReachedTag(1619600);
        return;
    }
    var contextualGroup = $get(id);
    if (contextualGroup) {
        if (!Array.contains(CommandUI.RibbonAnimator._animatingContextualGroups, id)) {
            Array.add(CommandUI.RibbonAnimator._animatingContextualGroups, id);
        }
        var upperGroup = contextualGroup.children[0];
        Common.WacAirSpace.setAnimationClass(upperGroup, CommandUI.RibbonAnimator._contextualGroupUpperAnimationClass$p);
        var onShow = new Common.ShowAnimationEvent(upperGroup);
        onShow.animateOpacity(0, 1);
        Common.WacAirSpace.animate(onShow, null, null);
        var lowerGroup = contextualGroup.children[1];
        Common.WacAirSpace.setAnimationClass(lowerGroup, CommandUI.RibbonAnimator._contextualGroupLowerAnimationClass$p);
        var onMove = new Common.MoveAnimationEvent(lowerGroup);
        onMove.animateY(CommandUI.RibbonAnimator._contextualGroupCollapsedYValue$p, CommandUI.RibbonAnimator._contextualGroupExpandedYValue$p);
        Common.WacAirSpace.animate(onMove, null, CommandUI.RibbonAnimator._onAfterContextualGroupAnimation$p);
    }
}
CommandUI.RibbonAnimator._onAfterContextualGroupAnimation$p = function CommandUI_RibbonAnimator$_onAfterContextualGroupAnimation$p$st(args) {
    if (CommandUI.RibbonAnimator._animatingContextualGroups.length >= 1) {
        Array.removeAt(CommandUI.RibbonAnimator._animatingContextualGroups, 0);
    }
}
CommandUI.RibbonAnimator._onAfterRibbonMoveDown$p = function CommandUI_RibbonAnimator$_onAfterRibbonMoveDown$p$st(args) {
    var ribbonTabBody = args.get_element();
    ribbonTabBody.style.top = CommandUI.RibbonAnimator._ribbonExpandedTop$p + 'px';
}
CommandUI.RibbonAnimator._onAfterShowRibbon$p = function CommandUI_RibbonAnimator$_onAfterShowRibbon$p$st(args) {
    var ribbonTabBody = args.get_element();
    Common.BrowserUtils.setOpacity(ribbonTabBody, 1);
}
CommandUI.RibbonAnimator._onAfterHideRibbon$p = function CommandUI_RibbonAnimator$_onAfterHideRibbon$p$st(args) {
    var ribbonTabBody = args.get_element();
    Common.BrowserUtils.setOpacity(ribbonTabBody, 0);
}
CommandUI.RibbonAnimator._onAfterCloneAnimation$p = function CommandUI_RibbonAnimator$_onAfterCloneAnimation$p$st(args) {
    var lowerRibbonClone = args.get_element();
    if (lowerRibbonClone && lowerRibbonClone.parentNode) {
        lowerRibbonClone.parentNode.removeChild(lowerRibbonClone);
    }
    for (var iAnimatingContext = 0; iAnimatingContext < CommandUI.RibbonAnimator._animatingContextualGroupsAfterRibbonCollapse.length; iAnimatingContext++) {
        var contextualId = CommandUI.RibbonAnimator._animatingContextualGroupsAfterRibbonCollapse[iAnimatingContext];
        CommandUI.RibbonAnimator.animateContextualGroup(contextualId);
    }
    CommandUI.RibbonAnimator._animatingContextualGroups = [];
    CommandUI.RibbonAnimator._animatingContextualGroupsAfterRibbonCollapse = [];
}


CommandUI._ribbonBuildContext = function CommandUI__ribbonBuildContext() {
    CommandUI._ribbonBuildContext.initializeBase(this);
}
CommandUI._ribbonBuildContext.prototype = {
    
    clone: function CommandUI__ribbonBuildContext$clone$in() {
        var rbc = new CommandUI._ribbonBuildContext();
        rbc.initializedTab = this.initializedTab;
        rbc.initialTabId = this.initialTabId;
        rbc.ribbon = this.ribbon;
        return rbc;
    },
    
    initializedTab: null,
    initialTabId: null,
    ribbon: null
}


CommandUI.RibbonBuildOptions = function CommandUI_RibbonBuildOptions() {
    CommandUI.RibbonBuildOptions.initializeBase(this);
}
CommandUI.RibbonBuildOptions.prototype = {
    showJewelId: null,
    jewelBuildOptions: null,
    displayMinimized: false,
    staticUiTouchMode: false,
    isSingleRowLayoutRibbon: false
}


CommandUI.RibbonBuilder = function CommandUI_RibbonBuilder(options, elmPlaceholder, rootBuildClient, resizableContainer) {
    this.$$d__onReturnTab$p$1 = Function.createDelegate(this, this._onReturnTab$p$1);
    this.$$d__delayInitTab$p$1 = Function.createDelegate(this, this._delayInitTab$p$1);
    this.$$d__onReturnRibbonAndInitialTab$p$1 = Function.createDelegate(this, this._onReturnRibbonAndInitialTab$p$1);
    CommandUI.RibbonBuilder.initializeBase(this, [ options, elmPlaceholder, $$sc.Task.fromResult(Common.IRootBuildClient, rootBuildClient), resizableContainer ]);
    if (CommandUI.ScriptUtility.isNullOrUndefined(elmPlaceholder)) {
        throw Error.create('Ribbon placeholder DOM element is null or undefined.');
    }
    Diag.ULS.sendTraceTag(34468253, 340, 50, 'User is booting the Classic Ribbon');
    Common.AFrameworkApplication.get_theActionManager().addActionWithFlags(Common.CommonCommands.reportLegacyRibbonLoaded, Common.CommonContextIds.frame, Common.ActionManager.doNothingButReportHandler, 64);
    Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.reportLegacyRibbonLoaded, 2, null);
}
CommandUI.RibbonBuilder.prototype = {
    
    get_ribbon: function CommandUI_RibbonBuilder$get_ribbon$in() {
        return this.get_root();
    },
    
    set_ribbon: function CommandUI_RibbonBuilder$set_ribbon$in(value) {
        this.set_root(value);
        return value;
    },
    
    get__ribbonBuildOptions$i$1: function CommandUI_RibbonBuilder$get__ribbonBuildOptions$i$1$in() {
        return this.get_options();
    },
    
    get__tableOfContentUpdateIsEnabled$p$1: function CommandUI_RibbonBuilder$get__tableOfContentUpdateIsEnabled$p$1$in() {
        return !!Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('WordEditorTableOfContentUpdateIsEnabled') && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('WordEditorAutoSaveParametersIsEnabled');
    },
    
    _keytipManager$1: null,
    
    buildRibbonAndInitialTab: function CommandUI_RibbonBuilder$buildRibbonAndInitialTab$in(initialTabId) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(initialTabId)) {
            throw Error.create('Initial tab for ribbon is null or undefined');
        }
        if (this.get_inQuery()) {
            return false;
        }
        var rbc = new CommandUI._ribbonBuildContext();
        rbc.initialTabId = initialTabId;
        this.set_inQuery(true);
        var query = new CommandUI.DataQuery();
        query.id = rbc.initialTabId;
        query.queryType = 2;
        query.handler = this.$$d__onReturnRibbonAndInitialTab$p$1;
        query.data = rbc;
        this.get_dataSource().runQuery(query);
        Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(Common.App.AppInitializationStatus.ribbonDisplayed);
        return true;
    },
    
    buildRibbonFromData: function CommandUI_RibbonBuilder$buildRibbonFromData$in(dataNode, initialTabId) {
        var rbc = new CommandUI._ribbonBuildContext();
        rbc.initialTabId = initialTabId;
        var res = new CommandUI.DataQueryResult();
        res.success = true;
        res.queryData = dataNode;
        res.contextData = rbc;
        this._onReturnRibbonAndInitialTab$p$1(res);
    },
    
    rebuildGroupsInTab: function CommandUI_RibbonBuilder$rebuildGroupsInTab$in(tabId) {
        var query = new CommandUI.DataQuery();
        var result = new CommandUI.DataQueryResult();
        query.id = tabId;
        query.queryType = 2;
        var $$t_G = this;
        query.handler = (function(val) {
            result = val;
        });
        this.get_dataSource().runQuery(query);
        var rbc = new CommandUI._ribbonBuildContext();
        rbc.initialTabId = this.get_ribbon().get__homeTab$i$3().get_id();
        rbc.initializedTab = this.get_ribbon().get__homeTab$i$3();
        var ribbonElement = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(result.queryData, CommandUI.DataNodeWrapper.RIBBON);
        var dnw = new CommandUI.DataNodeWrapper(ribbonElement);
        var tabChildren = CommandUI.DataNodeWrapper.getNodeChildren(CommandUI.DataNodeWrapper.getFirstChildNodeWithName(dnw.get_node(), CommandUI.DataNodeWrapper.TABS));
        for (var j = 0; j < tabChildren.length; j++) {
            var tabData = tabChildren[j];
            var dataNodeWrapperForTab = new CommandUI.DataNodeWrapper(tabData);
            if (dataNodeWrapperForTab.get_attributes()[CommandUI.DataNodeWrapper.id] === tabId) {
                var groupsNode = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(tabData, CommandUI.DataNodeWrapper.GROUPS);
                var groupChildren = CommandUI.DataNodeWrapper.getNodeChildren(groupsNode);
                var tab = this.get_ribbon()._getChild$i$0(tabId);
                for (var i = 0; i < groupChildren.length; i++) {
                    var groupId = CommandUI.DataNodeWrapper.getNodeAttribute(groupChildren[i], CommandUI.DataNodeWrapper.id);
                    if (CommandUI.ScriptUtility.isNullOrUndefined(groupId) || CommandUI.ScriptUtility.isNullOrUndefined(tab._getChild$i$0(groupId))) {
                        continue;
                    }
                    tab.removeChild(groupId);
                    tab.get_scaling().removeGroupMaxSize(groupId);
                    tab.get_scaling().removeScalingStepWithGroupId(groupId);
                }
                this._addGroupToRibbon$i$1(tabId, tabData, rbc);
                break;
            }
        }
    },
    
    rebuildJewel: function CommandUI_RibbonBuilder$rebuildJewel$in() {
        if (!CommandUI.ScriptUtility.isNullOrEmptyString(this.get__ribbonBuildOptions$i$1().showJewelId)) {
            this.get_ribbon()._rebuildAndSetJewel$i$3(this.get__ribbonBuildOptions$i$1().showJewelId, this.get_dataSource());
        }
    },
    
    _addTabToRibbon$i$1: function CommandUI_RibbonBuilder$_addTabToRibbon$i$1$in(tabData, rbc, index) {
        var tabs = [];
        tabs[0] = tabData;
        this._addTabsToRibbon$p$1(tabs, null, rbc, true, index);
    },
    
    _addGroupToRibbon$i$1: function CommandUI_RibbonBuilder$_addGroupToRibbon$i$1$in(tabId, tabData, rbc) {
        var tab = this.get_ribbon()._getChild$i$0(tabId);
        this._fillTab$p$1(tab, tabData, rbc, true);
        tab.refreshInternal();
    },
    
    _removeGroupAndTabFromRibbon$i$1: function CommandUI_RibbonBuilder$_removeGroupAndTabFromRibbon$i$1$in(tabId, groupId) {
        var tab = this.get_ribbon()._getChild$i$0(tabId);
        if (!tab) {
            Common.Debug.assertNotReachedStringTag(String.format('[RemoveGroupAndTabFromRibbon] Didn\'t find a Tab \'{0}\'!', tabId), 9248777);
            return;
        }
        if (!tab._getChild$i$0(groupId)) {
            Common.Debug.assertNotReachedStringTag(String.format('[RemoveGroupAndTabFromRibbon] Didn\'t find a Group \'{0}\' in tab \'{1}\'', tabId, groupId), 9248778);
            return;
        }
        tab.removeChild(groupId);
        tab.get_scaling().removeGroupMaxSize(groupId);
        tab.get_scaling().removeScalingStepWithGroupId(groupId);
        var $$enum_4 = tab.get_children().getEnumerator();
        while ($$enum_4.moveNext()) {
            var child = $$enum_4.get_current();
            return;
        }
        this.get_ribbon().removeChild(tabId);
    },
    
    _onReturnRibbonAndInitialTab$p$1: function CommandUI_RibbonBuilder$_onReturnRibbonAndInitialTab$p$1$in(res) {
        var rbc = res.contextData;
        CommandUI.Utility.ensureCSSClassOnElement(this.get_placeholder(), 'loaded');
        var templates = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(res.queryData, CommandUI.DataNodeWrapper.TEMPLATES);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(templates)) {
            CommandUI._templateManager.get_instance().loadTemplates(templates);
        }
        this.set_ribbon(this._buildRibbon$p$1(res.queryData, rbc));
        this.get_ribbon().set__ribbonBuilder$i$3(this);
        var minimized = this.get__ribbonBuildOptions$i$1().displayMinimized;
        this.get_ribbon().set__minimizedInternal$i$3(minimized);
        var homeTab = this.get_ribbon()._getChild$i$0(rbc.initialTabId);
        Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrUndefined(homeTab), 2131160);
        this.get_ribbon().set__homeTab$i$3(homeTab);
        if (!minimized) {
            this.get_ribbon()._makeTabSelectedInternal$i$3(homeTab);
        }
        this.get_ribbon().set__clientID$i$1(this.get__ribbonBuildOptions$i$1().clientID);
        this.get_ribbon().ensureDOMElement();
        if (!CommandUI.ScriptUtility.isNullOrEmptyString(this.get__ribbonBuildOptions$i$1().showJewelId)) {
            this.get_ribbon()._buildAndSetJewel$i$3(this.get__ribbonBuildOptions$i$1().showJewelId, this.get_dataSource());
        }
        CommandUI.Utility._removeChildNodesSlow$i(this.get_placeholder());
        this.get_placeholder().appendChild(this.get_ribbon().get_elementInternal());
        this.get_ribbon()._scale$i$2();
        var $$t_H = this;
        this.get_buildClientTask().CWo(function(t) {
            $$t_H.get_buildClientTask().get_result().onComponentBuilt($$t_H.get_ribbon(), $$t_H.get_ribbon().get_id());
        }, $$sc.TaskContinuationOptions.onlyOnRanToCompletion | $$sc.TaskContinuationOptions.executeSynchronously);
    },
    
    _onReturnTab$p$1: function CommandUI_RibbonBuilder$_onReturnTab$p$1$in(res) {
        var rbc = res.contextData;
        if (res.success) {
            var tabNode = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(res.queryData, CommandUI.DataNodeWrapper.TAB);
            if (!tabNode) {
                Common.Debug.assertNotReachedStringTag('Didn\'t find a <Tab> node', 5256330);
                return;
            }
            var templatesNode = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(res.queryData, CommandUI.DataNodeWrapper.TEMPLATES);
            if (templatesNode) {
                CommandUI._templateManager.get_instance().loadTemplates(templatesNode);
            }
            this._fillTab$p$1(rbc.initializedTab, tabNode, rbc, false);
            rbc.initializedTab._onDelayedInitFinished$i$0(true);
        }
    },
    
    _buildRibbon$p$1: function CommandUI_RibbonBuilder$_buildRibbon$p$1$in(data, rbc) {
        var ribbonElement = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(data, CommandUI.DataNodeWrapper.RIBBON);
        if (CommandUI.ScriptUtility.isNullOrUndefined(ribbonElement)) {
            throw Error.create('No ribbon element was present in the data');
        }
        var dnw = new CommandUI.DataNodeWrapper(ribbonElement);
        this.set_ribbon(new CommandUI.Ribbon(dnw.get_attributes()['Id'], dnw.get_attributes(), this.get__ribbonBuildOptions$i$1().staticUiTouchMode, this.get__resizableContainer(), this.get__ribbonBuildOptions$i$1().isSingleRowLayoutRibbon));
        this._keytipManager$1 = new CommandUI.KeytipManager(this.get_ribbon(), Common.KeyInputManager.get_instance(), Common.PointerInputManager.get_instance());
        this.get_ribbon()._keytipManager$i$3 = this._keytipManager$1;
        this.get_ribbon().set_useDataCookie(true);
        var tabChildren = CommandUI.DataNodeWrapper.getNodeChildren(CommandUI.DataNodeWrapper.getFirstChildNodeWithName(dnw.get_node(), CommandUI.DataNodeWrapper.TABS));
        this._addTabsToRibbon$p$1(tabChildren, null, rbc, false, -1);
        var contextualTabs = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(dnw.get_node(), CommandUI.DataNodeWrapper.CONTEXTUALTABS);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(contextualTabs)) {
            var cgChildren = CommandUI.DataNodeWrapper.getNodeChildren(contextualTabs);
            for (var j = 0; j < cgChildren.length; j++) {
                this._addContextualGroup$p$1(cgChildren[j], rbc);
            }
        }
        return this.get_ribbon();
    },
    
    _addContextualGroup$p$1: function CommandUI_RibbonBuilder$_addContextualGroup$p$1$in(data, rbc) {
        Common.Debug.assertStringTag(CommandUI.DataNodeWrapper.getNodeName(data) === CommandUI.DataNodeWrapper.CONTEXTUALGROUP, 'Was expecting node of type ContextualGroup', 1647174);
        var attributes = CommandUI.DataNodeWrapper.getNodeAttributes(data);
        var color = 0;
        var contextualGroupId = attributes[CommandUI.DataNodeWrapper.id];
        switch (attributes[CommandUI.DataNodeWrapper.COLOR]) {
            case CommandUI.DataNodeWrapper.MAGENTA:
                color = 3;
                break;
            case CommandUI.DataNodeWrapper.GREEN:
                color = 2;
                break;
            case CommandUI.DataNodeWrapper.ORANGE:
                color = 1;
                break;
            case CommandUI.DataNodeWrapper.PURPLE:
                color = 5;
                break;
            case CommandUI.DataNodeWrapper.YELLOW:
                color = 4;
                break;
            default:
                color = 0;
                break;
        }
        this.get_ribbon().addContextualGroup(contextualGroupId, attributes[CommandUI.DataNodeWrapper.TITLE], color, attributes[CommandUI.DataNodeWrapper.COMMAND]);
        var tabChildren = CommandUI.DataNodeWrapper.getNodeChildren(data);
        this._addTabsToRibbon$p$1(tabChildren, attributes[CommandUI.DataNodeWrapper.id], rbc, false, -1);
    },
    
    _addTabsToRibbon$p$1: function CommandUI_RibbonBuilder$_addTabsToRibbon$p$1$in(tabs, contextualGroupId, rbc, addScalingStepToBegining, startIndex) {
        var tableOfContentUpdateIsEnabled = this.get__tableOfContentUpdateIsEnabled$p$1();
        for (var j = 0; j < tabs.length; j++) {
            var tabData = tabs[j];
            var dataNodeWrapper = new CommandUI.DataNodeWrapper(tabData);
            var tabId = dataNodeWrapper.get_attributes()[CommandUI.DataNodeWrapper.id];
            if (!this._isIdTrimmed$i$0(tabId)) {
                if (startIndex !== -1) {
                    this.get_ribbon()._addChildAtIndex$i$0(this._buildTab$p$1(tabData, rbc, contextualGroupId, addScalingStepToBegining), startIndex + j);
                }
                else {
                    this.get_ribbon().addChild(this._buildTab$p$1(tabData, rbc, contextualGroupId, addScalingStepToBegining));
                }
            }
            else if (tabId === 'tabReferences' && startIndex !== -1 && !tableOfContentUpdateIsEnabled) {
                this.get_ribbon()._addChildAtIndex$i$0(this._buildTab$p$1(tabData, rbc, contextualGroupId, addScalingStepToBegining), startIndex + j);
            }
        }
    },
    
    _buildTab$p$1: function CommandUI_RibbonBuilder$_buildTab$p$1$in(data, rbc, contextualGroupId, addScalingStepToBegining) {
        var dnw = new CommandUI.DataNodeWrapper(data);
        Common.Debug.assertTag(dnw.get_name() === CommandUI.DataNodeWrapper.TAB, 2131161);
        var keytipString = dnw.get_attributes()[CommandUI.DataNodeWrapper.KEYTIP];
        if (!keytipString && this._keytipManager$1) {
            keytipString = this._keytipManager$1.getNewGeneratedKeytipString();
        }
        var tab;
        if (CommandUI.ScriptUtility.isNullOrUndefined(contextualGroupId)) {
            tab = this.get_ribbon()._createTab$i$3(dnw.get_attributes()[CommandUI.DataNodeWrapper.id], dnw.get_attributes()[CommandUI.DataNodeWrapper.TITLE], dnw.get_attributes()[CommandUI.DataNodeWrapper.DESCRIPTION], dnw.get_attributes()[CommandUI.DataNodeWrapper.COMMAND], dnw.get_attributes()[CommandUI.DataNodeWrapper.CSSCLASS], keytipString);
        }
        else {
            tab = this.get_ribbon()._createContextualTab$i$3(dnw.get_attributes()[CommandUI.DataNodeWrapper.id], dnw.get_attributes()[CommandUI.DataNodeWrapper.TITLE], dnw.get_attributes()[CommandUI.DataNodeWrapper.DESCRIPTION], dnw.get_attributes()[CommandUI.DataNodeWrapper.COMMAND], contextualGroupId, dnw.get_attributes()[CommandUI.DataNodeWrapper.CSSCLASS], keytipString);
        }
        if (!dnw.get_children().length) {
            tab._setDelayedInitData$i$0(this.$$d__delayInitTab$p$1, dnw.get_node(), rbc.clone());
        }
        else {
            this._fillTab$p$1(tab, data, rbc, addScalingStepToBegining);
        }
        return tab;
    },
    
    _fillTab$p$1: function CommandUI_RibbonBuilder$_fillTab$p$1$in(tab, data, rbc, addScalingStepToBegining) {
        var groupsNode = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(data, CommandUI.DataNodeWrapper.GROUPS);
        var groupChildren = CommandUI.DataNodeWrapper.getNodeChildren(groupsNode);
        var emptyTrimmedGroupIds = {};
        for (var i = 0; i < groupChildren.length; i++) {
            if (this.isNodeTrimmed(groupChildren[i])) {
                continue;
            }
            var group = this._buildGroup$p$1(groupChildren[i], rbc, tab);
            if (!CommandUI.ScriptUtility.isNullOrUndefined(group)) {
                tab.addChild(group);
            }
            else {
                var id = CommandUI.DataNodeWrapper.getNodeAttribute(groupChildren[i], CommandUI.DataNodeWrapper.id);
                if (!CommandUI.ScriptUtility.isNullOrUndefined(id)) {
                    emptyTrimmedGroupIds[id] = id;
                }
            }
        }
        var scaling = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(data, CommandUI.DataNodeWrapper.SCALING);
        var children = CommandUI.DataNodeWrapper.getNodeChildren(scaling);
        var _scaleWarningMessage = null;
        var _scaleWarning = false;
        for (var i = 0; i < children.length; i++) {
            var name = CommandUI.DataNodeWrapper.getNodeName(children[i]);
            var attributes = CommandUI.DataNodeWrapper.getNodeAttributes(children[i]);
            var groupId = attributes[CommandUI.DataNodeWrapper.GROUPID];
            if (name === CommandUI.DataNodeWrapper.MAXSIZE) {
                if (this._isIdTrimmed$i$0(groupId) || !CommandUI.ScriptUtility.isNullOrUndefined(emptyTrimmedGroupIds[groupId])) {
                    continue;
                }
                tab.get_scaling().setGroupMaxSize(groupId, attributes[CommandUI.DataNodeWrapper.SIZE]);
            }
            else if (name === CommandUI.DataNodeWrapper.SCALE) {
                if (this._isIdTrimmed$i$0(groupId) || !CommandUI.ScriptUtility.isNullOrUndefined(emptyTrimmedGroupIds[groupId])) {
                    continue;
                }
                this._assertScaleHasMatchingGroup$p$1(tab, groupId);
                tab.get_scaling().addScalingStep(new CommandUI._scalingStep(groupId, attributes[CommandUI.DataNodeWrapper.SIZE], _scaleWarningMessage, _scaleWarning), addScalingStepToBegining);
                _scaleWarningMessage = null;
                _scaleWarning = false;
            }
            else if (name === CommandUI.DataNodeWrapper.LOWSCALEWARNING) {
                _scaleWarningMessage = attributes[CommandUI.DataNodeWrapper.MESSAGE];
                _scaleWarning = true;
            }
            else {
                throw Error.create('Was expecting a node with name MaxSize or Scale.');
            }
        }
        tab.scaleMax();
    },
    
    _assertScaleHasMatchingGroup$p$1: function CommandUI_RibbonBuilder$_assertScaleHasMatchingGroup$p$1$in(tab, groupId) {
        var foundMatch = false;
        var $$enum_4 = tab.get_children().getEnumerator();
        while ($$enum_4.moveNext()) {
            var child = $$enum_4.get_current();
            Common.Debug.assertTag(CommandUI.Group.isInstanceOfType(child), 4797185);
            var group = child;
            if (group.get_id() === groupId) {
                foundMatch = true;
                break;
            }
        }
        Common.Debug.assertStringTag(foundMatch, String.format('Found a <Scale> instruction with no matching <Group>, GroupId {0}', groupId), 4797186);
    },
    
    _delayInitTab$p$1: function CommandUI_RibbonBuilder$_delayInitTab$p$1$in(component, data, buildContext) {
        var rbc = buildContext;
        var tab = component;
        var dnw = new CommandUI.DataNodeWrapper(data);
        Common.Debug.assertStringTag(dnw.get_name() === CommandUI.DataNodeWrapper.TAB, 'Expected a data node called \'Tab\'', 1647175);
        rbc.initializedTab = component;
        if (!dnw.get_hasChildren()) {
            var query = new CommandUI.DataQuery();
            query.id = rbc.initializedTab.get_id();
            query.queryType = 3;
            query.handler = this.$$d__onReturnTab$p$1;
            query.data = rbc;
            this.get_dataSource().runQuery(query);
            return null;
        }
        this._fillTab$p$1(tab, data, rbc, false);
        tab._onDelayedInitFinished$i$0(true);
        this.get_ribbon().refresh();
        return tab;
    },
    
    _buildGroup$p$1: function CommandUI_RibbonBuilder$_buildGroup$p$1$in(data, rbc, tab) {
        var dnw = new CommandUI.DataNodeWrapper(data);
        Common.Debug.assertTag(dnw.get_name() === CommandUI.DataNodeWrapper.GROUP, 2131162);
        var templateName = dnw.get_attributes()[CommandUI.DataNodeWrapper.TEMPLATE];
        var template = CommandUI._templateManager.get_instance().getTemplate(templateName);
        if (CommandUI.ScriptUtility.isNullOrUndefined(template)) {
            throw Error.create('A template with name: ' + templateName + ' could not be loaded.');
        }
        var controls = {};
        var controlsData = null;
        for (var i = 0; i < dnw.get_children().length; i++) {
            if ((dnw.get_children()[i][CommandUI.DataNodeWrapper.NAME]) === CommandUI.DataNodeWrapper.CONTROLS) {
                controlsData = dnw.get_children()[i];
                break;
            }
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(controlsData)) {
            throw Error.create('No Controls node found in this Group tag.');
        }
        var children = CommandUI.DataNodeWrapper.getNodeChildren(controlsData);
        for (var i = 0; i < children.length; i++) {
            if (this.isNodeTrimmed(children[i])) {
                continue;
            }
            var control = this.buildControl(children[i], rbc);
            if (control) {
                if (this._keytipManager$1 && control.get__needsAKeytip$i$0() && !control.get_controlProperties().Keytip) {
                    control.get_controlProperties().Keytip = this._keytipManager$1.getNewGeneratedKeytipString();
                }
                control.set_parentKeytipsIds(String.format('{0} {1}{2}', CommandUI.Keytip.ribbonShortcutId, tab.get_id(), CommandUI.Keytip.keytipId));
                control.set_parentKeytipsKeys(tab.get_keytip().get_key().toLocaleLowerCase());
                var rec = controls[control.get_templateAlias()];
                if (CommandUI.ScriptUtility.isNullOrUndefined(rec)) {
                    controls[control.get_templateAlias()] = control;
                }
                else if (Array.isInstanceOfType(rec)) {
                    Array.add(rec, control);
                }
                else {
                    controls[control.get_templateAlias()] = [ rec, control ];
                }
            }
        }
        var groupId = dnw.get_attributes()[CommandUI.DataNodeWrapper.id];
        var hideLauncherButton = this._isIdTrimmed$i$0(CommandUI.Group.getLauncherButtonId(groupId));
        var group = template.createGroup(this.get_ribbon(), groupId, dnw.get_attributes(), dnw.get_attributes()[CommandUI.DataNodeWrapper.TITLE], dnw.get_attributes()[CommandUI.DataNodeWrapper.DESCRIPTION], dnw.get_attributes()[CommandUI.DataNodeWrapper.COMMAND], controls, null, hideLauncherButton);
        return group;
    },
    
    clearGlobalAppState: function CommandUI_RibbonBuilder$clearGlobalAppState$in() {
        Common.App.AppLifecycleManager.get_instance().clearAppInitializationStatus(Common.App.AppInitializationStatus.ribbonDisplayed);
        Common.AFrameworkApplication.get_theActionManager().removeAction(Common.CommonCommands.reportLegacyRibbonLoaded, Common.CommonContextIds.frame, Common.ActionManager.doNothingButReportHandler);
    }
}


CommandUI._ribbonComponent = function CommandUI__ribbonComponent(ribbon, id, title, description, keytipString, visible) {
    CommandUI._ribbonComponent.initializeBase(this, [ ribbon, id, title, description, keytipString, visible, true ]);
}
CommandUI._ribbonComponent.prototype = {
    
    get_ribbon: function CommandUI__ribbonComponent$get_ribbon$in() {
        return this.get_root();
    }
}


CommandUI.RibbonExtensibilityBuilder = function CommandUI_RibbonExtensibilityBuilder(root) {
    this._ribbon$0 = root;
    this._ribbonBuilder$0 = this._ribbon$0.get__ribbonBuilder$i$3();
}
CommandUI.RibbonExtensibilityBuilder.prototype = {
    _ribbonBuilder$0: null,
    _ribbon$0: null,
    
    addRibbonExtensibility: function CommandUI_RibbonExtensibilityBuilder$addRibbonExtensibility$in(ribbonXMLString, orderedTabIdList) {
        var ribbonData = CommandUI.Builder.convertXMLStringToJSON(ribbonXMLString);
        if (CommandUI.ScriptUtility.isNullOrUndefined(ribbonData)) {
            Common.Debug.assertNotReachedStringTag('The Ribbon XML string is null or undefined.', 9248779);
            return;
        }
        var rbc = new CommandUI._ribbonBuildContext();
        rbc.initialTabId = this._ribbon$0.get__homeTab$i$3().get_id();
        rbc.initializedTab = this._ribbon$0.get__homeTab$i$3();
        rbc.ribbon = this._ribbon$0;
        var dnw = new CommandUI.DataNodeWrapper(ribbonData);
        var tabsData = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(dnw.get_node(), CommandUI.DataNodeWrapper.TABS);
        if (CommandUI.ScriptUtility.isNullOrUndefined(tabsData)) {
            Common.Debug.assertNotReachedStringTag('No TABS element was present in the data.', 9248780);
            return;
        }
        var tabChildren = CommandUI.DataNodeWrapper.getNodeChildren(tabsData);
        for (var j = 0; j < tabChildren.length; j++) {
            var tabData = tabChildren[j];
            var dataNodeWrapper = new CommandUI.DataNodeWrapper(tabData);
            var tabId = dataNodeWrapper.get_attributes()[CommandUI.DataNodeWrapper.id];
            if (this._ribbon$0._getChild$i$0(tabId)) {
                this._ribbonBuilder$0._addGroupToRibbon$i$1(tabId, tabData, rbc);
            }
            else {
                var index = -1;
                if (orderedTabIdList) {
                    index = this._findInsertLocationForTargetTab$p$0(tabId, orderedTabIdList);
                }
                if (index !== -1) {
                    this._ribbonBuilder$0._addTabToRibbon$i$1(tabData, rbc, index);
                }
                else {
                    this._ribbonBuilder$0._addTabToRibbon$i$1(tabData, rbc, -1);
                }
            }
        }
    },
    
    _findInsertLocationForTargetTab$p$0: function CommandUI_RibbonExtensibilityBuilder$_findInsertLocationForTargetTab$p$0$in(targetTabId, orderOfAllTabId) {
        var indexOfTargetTabInOrderedTabList = Array.indexOf(orderOfAllTabId, targetTabId);
        if (indexOfTargetTabInOrderedTabList === -1) {
            return -1;
        }
        var indexInOrder = indexOfTargetTabInOrderedTabList - 1;
        var indexInRibbon = -1;
        while (indexInOrder >= 0) {
            indexInRibbon = this._getIndexInRibbon$p$0(orderOfAllTabId[indexInOrder]);
            if (indexInRibbon !== -1) {
                break;
            }
            indexInOrder--;
        }
        return indexInRibbon + 1;
    },
    
    _getIndexInRibbon$p$0: function CommandUI_RibbonExtensibilityBuilder$_getIndexInRibbon$p$0$in(tabId) {
        var index = 0;
        var isFound = false;
        var $$enum_4 = this._ribbon$0.get_children().getEnumerator();
        while ($$enum_4.moveNext()) {
            var tab = $$enum_4.get_current();
            if (tab.get_id() === tabId) {
                isFound = true;
                break;
            }
            if (tab.get_visible()) {
                index++;
            }
        }
        return (isFound) ? index : -1;
    },
    
    removeRibbonExtensibility: function CommandUI_RibbonExtensibilityBuilder$removeRibbonExtensibility$in(ribbonXMLString) {
        var ribbonData = CommandUI.Builder.convertXMLStringToJSON(ribbonXMLString);
        if (CommandUI.ScriptUtility.isNullOrUndefined(ribbonData)) {
            Common.Debug.assertNotReachedStringTag('The Ribbon XML string is null or undefined.', 9248781);
            return;
        }
        var dnw = new CommandUI.DataNodeWrapper(ribbonData);
        var tabsData = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(dnw.get_node(), CommandUI.DataNodeWrapper.TABS);
        if (CommandUI.ScriptUtility.isNullOrUndefined(tabsData)) {
            Common.Debug.assertNotReachedStringTag('No TABS element was present in the data.', 9248782);
            return;
        }
        var tabChildren = CommandUI.DataNodeWrapper.getNodeChildren(tabsData);
        for (var j = 0; j < tabChildren.length; j++) {
            var tabData = tabChildren[j];
            var dataNodeWrapper = new CommandUI.DataNodeWrapper(tabData);
            var tabId = dataNodeWrapper.get_attributes()[CommandUI.DataNodeWrapper.id];
            var groupsNode = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(tabData, CommandUI.DataNodeWrapper.GROUPS);
            var groupChildren = CommandUI.DataNodeWrapper.getNodeChildren(groupsNode);
            for (var i = 0; i < groupChildren.length; i++) {
                var groupId = CommandUI.DataNodeWrapper.getNodeAttribute(groupChildren[i], CommandUI.DataNodeWrapper.id);
                if (CommandUI.ScriptUtility.isNullOrUndefined(groupId)) {
                    continue;
                }
                this._ribbonBuilder$0._removeGroupAndTabFromRibbon$i$1(tabId, groupId);
            }
        }
    }
}


CommandUI.RowProperties = function CommandUI_RowProperties() {
    CommandUI.RowProperties.initializeBase(this);
}
CommandUI.RowProperties.prototype = {
    TextAlign: null,
    Height: null
}


CommandUI.Row = function CommandUI_Row(root, id, textAlign, height, visible) {
    CommandUI.Row.initializeBase(this, [ root, id, '', '', null, visible, true ]);
    this._align$1 = textAlign;
    this._height$1 = height;
}
CommandUI.Row.prototype = {
    _align$1: 0,
    _height$1: null,
    
    refreshInternal: function CommandUI_Row$refreshInternal$in() {
        this.ensureDOMElementAndEmpty();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._height$1)) {
            this.get_elementInternal().style.height = this._height$1;
        }
        this.appendChildrenToElement(this.get_elementInternal());
        CommandUI.Component.prototype.refreshInternal.call(this);
    },
    
    ensureCorrectChildType: function CommandUI_Row$ensureCorrectChildType$in(child) {
        if (!CommandUI.ControlComponent.isInstanceOfType(child)) {
            throw Error.create('Only children of type ControlComponent can be added to Row Components.');
        }
    },
    
    get_domElementTagName: function CommandUI_Row$get_domElementTagName$in() {
        return 'span';
    },
    
    get_cssClass: function CommandUI_Row$get_cssClass$in() {
        var cssClass = '';
        var type = (this.get_parent()).get_type();
        switch (type) {
            case 2:
                cssClass += 'cui-row-onerow';
                break;
            case 3:
                cssClass += 'cui-row-tworow';
                break;
            case 4:
                cssClass += 'cui-row-threerow';
                break;
            default:
                cssClass += 'cui-row';
                break;
        }
        if (this._align$1 === CommandUI.TextAlign.right) {
            cssClass += ' textAlignRight';
        }
        return cssClass;
    }
}


CommandUI._scalingStep = function CommandUI__scalingStep(groupId, layoutName, scaleWarningMessage, warnForScale) {
    if (CommandUI.ScriptUtility.isNullOrUndefined(groupId) || CommandUI.ScriptUtility.isNullOrUndefined(layoutName)) {
        throw Error.create('groupId, layoutName and message cannot be undefined or null');
    }
    this._groupId$0 = groupId;
    this._layoutName$0 = layoutName;
    this._scaleWarningMessage$0 = scaleWarningMessage;
    this._warnForScale$0 = warnForScale;
}
CommandUI._scalingStep.prototype = {
    _groupId$0: null,
    _layoutName$0: null,
    _scaleWarningMessage$0: null,
    _warnForScale$0: false,
    _scalingInfo$0: null,
    
    _setParent$i$0: function CommandUI__scalingStep$_setParent$i$0$in(parent) {
        this._scalingInfo$0 = parent;
    },
    
    get_groupId: function CommandUI__scalingStep$get_groupId$in() {
        return this._groupId$0;
    },
    
    get_layoutName: function CommandUI__scalingStep$get_layoutName$in() {
        return this._layoutName$0;
    },
    
    get_scaleWarningMessage: function CommandUI__scalingStep$get_scaleWarningMessage$in() {
        return this._scaleWarningMessage$0;
    },
    
    get_hasScaleWarning: function CommandUI__scalingStep$get_hasScaleWarning$in() {
        return this._warnForScale$0;
    },
    
    get_previousLayoutName: function CommandUI__scalingStep$get_previousLayoutName$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._scalingInfo$0)) {
            return null;
        }
        var prevName = this._scalingInfo$0.getGroupMaxSize(this._groupId$0);
        var steps = this._scalingInfo$0.get_stepsInternal();
        for (var i = 0; i < steps.length; i++) {
            var step = steps[i];
            if (step === this) {
                break;
            }
            if (step.get_groupId() === this._groupId$0) {
                prevName = step.get_layoutName();
            }
        }
        return prevName;
    }
}


CommandUI._scaling = function CommandUI__scaling() {
    this._steps$0 = [];
    this._maxGroupSizes$0 = {};
}
CommandUI._scaling.prototype = {
    _maxGroupSizes$0: null,
    
    setGroupMaxSize: function CommandUI__scaling$setGroupMaxSize$in(groupId, layoutName) {
        this._maxGroupSizes$0[groupId] = layoutName;
        this._dirty$0 = true;
    },
    
    removeGroupMaxSize: function CommandUI__scaling$removeGroupMaxSize$in(groupId) {
        delete this._maxGroupSizes$0[groupId];
        this._dirty$0 = true;
    },
    
    getGroupMaxSize: function CommandUI__scaling$getGroupMaxSize$in(groupId) {
        return this._maxGroupSizes$0[groupId];
    },
    
    addScalingStep: function CommandUI__scaling$addScalingStep$in(step, addScalingStepToBegining) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(step)) {
            throw Error.create('step must be definined and not null');
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._maxGroupSizes$0[step.get_groupId()])) {
            throw Error.create('You must set the GroupMaxSize of Group: ' + step.get_groupId() + ' before you add ScalingSteps for it');
        }
        this.addScalingStepAtIndex(step, (addScalingStepToBegining) ? 0 : this._steps$0.length);
    },
    
    addScalingStepAtIndex: function CommandUI__scaling$addScalingStepAtIndex$in(step, index) {
        if (Array.contains(this._steps$0, step)) {
            throw Error.create('This ScalingInfo already contains this ScaleStep');
        }
        Array.insert(this._steps$0, index, step);
        step._setParent$i$0(this);
        this._dirty$0 = true;
    },
    
    removeScalingStep: function CommandUI__scaling$removeScalingStep$in(step) {
        Array.remove(this._steps$0, step);
        step._setParent$i$0(null);
        this._dirty$0 = true;
    },
    
    removeScalingStepWithGroupId: function CommandUI__scaling$removeScalingStepWithGroupId$in(groupId) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(groupId)) {
            return;
        }
        for (var $$arr_1 = this._steps$0, $$len_2 = $$arr_1.length, $$idx_3 = 0; $$idx_3 < $$len_2; ++$$idx_3) {
            var step = $$arr_1[$$idx_3];
            if (step.get_groupId() === groupId) {
                this.removeScalingStep(step);
                break;
            }
        }
    },
    
    get_steps: function CommandUI__scaling$get_steps$in() {
        return Array.clone(this._steps$0);
    },
    
    get_stepsInternal: function CommandUI__scaling$get_stepsInternal$in() {
        return this._steps$0;
    },
    
    _dirty$0: true,
    
    get__dirty$i$0: function CommandUI__scaling$get__dirty$i$0$in() {
        return this._dirty$0;
    },
    
    set__dirty$i$0: function CommandUI__scaling$set__dirty$i$0$in(value) {
        this._dirty$0 = value;
        return value;
    }
}


CommandUI.Section = function CommandUI_Section(root, id, type, verticalAlignment, horizontalAlignment, stretchedHorizontally, showSectionSeparator, rows, title, arrangement, visible) {
    CommandUI.Section.initializeBase(this, [ root, id, title, '', null, visible, true ]);
    this._type$1 = type;
    this.set_verticalAlignment(verticalAlignment);
    this.set_horizontalAlignment(horizontalAlignment);
    this.set_stretchedHorizontally(stretchedHorizontally);
    this.set_arrangement(arrangement);
    this._showSectionSeparator$1 = showSectionSeparator;
    var numOfRows = 0;
    switch (type) {
        case 4:
            numOfRows = 3;
            break;
        case 3:
            numOfRows = 2;
            break;
        case 2:
            numOfRows = 1;
            break;
        case 5:
        case 1:
            break;
        default:
            throw Error.create('Invalid SectionType');
    }
    for (var i = 0; i < numOfRows; i++) {
        var rowId = id + '-' + i;
        var align = CommandUI.TextAlign.left;
        var height = '';
        if (rows) {
            var dnw = new CommandUI.DataNodeWrapper(rows[i]);
            if (!CommandUI.ScriptUtility.isNullOrUndefined(dnw.get_attributes()[CommandUI.DataNodeWrapper.id])) {
                rowId = dnw.get_attributes()[CommandUI.DataNodeWrapper.id];
            }
            if (dnw.get_attributes()[CommandUI.DataNodeWrapper.TEXTALIGN] === CommandUI.DataNodeWrapper.RIGHTALIGN) {
                align = CommandUI.TextAlign.right;
            }
            if (!CommandUI.ScriptUtility.isNullOrUndefined(dnw.get_attributes()[CommandUI.DataNodeWrapper.HEIGHT])) {
                height = dnw.get_attributes()[CommandUI.DataNodeWrapper.HEIGHT];
            }
        }
        this._addChildInternal$i$0(new CommandUI.Row(root, rowId, align, height, visible), false);
    }
}
CommandUI.Section.prototype = {
    _type$1: 0,
    _$$pf_VerticalAlignment$p$1: 0,
    
    get_verticalAlignment: function CommandUI_Section$get_verticalAlignment$in() {
        return this._$$pf_VerticalAlignment$p$1;
    },
    
    set_verticalAlignment: function CommandUI_Section$set_verticalAlignment$in(value) {
        this._$$pf_VerticalAlignment$p$1 = value;
        return value;
    },
    
    _$$pf_HorizontalAlignment$p$1: 0,
    
    get_horizontalAlignment: function CommandUI_Section$get_horizontalAlignment$in() {
        return this._$$pf_HorizontalAlignment$p$1;
    },
    
    set_horizontalAlignment: function CommandUI_Section$set_horizontalAlignment$in(value) {
        this._$$pf_HorizontalAlignment$p$1 = value;
        return value;
    },
    
    _$$pf_StretchedHorizontally$p$1: false,
    
    get_stretchedHorizontally: function CommandUI_Section$get_stretchedHorizontally$in() {
        return this._$$pf_StretchedHorizontally$p$1;
    },
    
    set_stretchedHorizontally: function CommandUI_Section$set_stretchedHorizontally$in(value) {
        this._$$pf_StretchedHorizontally$p$1 = value;
        return value;
    },
    
    _$$pf_Arrangement$p$1: 0,
    
    get_arrangement: function CommandUI_Section$get_arrangement$in() {
        return this._$$pf_Arrangement$p$1;
    },
    
    set_arrangement: function CommandUI_Section$set_arrangement$in(value) {
        this._$$pf_Arrangement$p$1 = value;
        return value;
    },
    
    _showSectionSeparator$1: false,
    
    refreshInternal: function CommandUI_Section$refreshInternal$in() {
        this.ensureDOMElementAndEmpty();
        this.appendChildrenToElement(this.get_elementInternal());
        this.ensureDOMElement();
        if (this.get_type() !== 1 && this.get_type() !== 5) {
            var children = this.get_children();
            this._appendRow$p$1(children, 1);
            if (this.get_type() === 3 || this.get_type() === 4) {
                this._appendRow$p$1(children, 2);
            }
            if (this.get_type() === 4) {
                this._appendRow$p$1(children, 3);
            }
        }
        this.set_dirty(false);
    },
    
    _appendRow$p$1: function CommandUI_Section$_appendRow$p$1$in(children, rowNumber) {
        var row = children.get_item(rowNumber - 1);
        row.ensureDOMElement();
        if (this.get_type() === 2) {
            if ((row.get_children().get_count() > 0) && (CommandUI.Controls.GalleryButton.isInstanceOfType((row.get_children().get_item(0)).get_control()))) {
                CommandUI.Utility.ensureCSSClassOnElement(row.get_elementInternal(), 'cui-inRibbonGallery');
            }
        }
        CommandUI.Utility.ensureCSSClassOnElement(row.get_elementInternal(), 'cui-row-' + rowNumber);
        if (!this.get_root().get_supportsInvisibleControls() || row.get_visible()) {
            this.get_elementInternal().appendChild(row.get_elementInternal());
        }
        row.ensureRefreshed();
    },
    
    get_cssClass: function CommandUI_Section$get_cssClass$in() {
        var cssClass = null;
        if (this.get_verticalAlignment() === CommandUI.SectionVerticalAlignment.middle) {
            cssClass = 'cui-section-alignmiddle';
        }
        else {
            cssClass = 'cui-section';
        }
        if (this.get_horizontalAlignment() === CommandUI.SectionHorizontalAlignment.right) {
            cssClass += ' alignRight';
        }
        if (this.get_stretchedHorizontally()) {
            cssClass += ' stretchedHorizontally';
        }
        if (this.get_arrangement() === CommandUI.SectionArrangement.vertical) {
            cssClass += ' verticalArrange';
        }
        return cssClass;
    },
    
    get_type: function CommandUI_Section$get_type$in() {
        return this._type$1;
    },
    
    removeChild: function CommandUI_Section$removeChild$in(id) {
        throw Error.create('Cannot directly add and remove children from Section Components');
    },
    
    _addChildAtIndex$i$0: function CommandUI_Section$_addChildAtIndex$i$0$in(child, index) {
        throw Error.create('Cannot directly add and remove children from Section Components');
    },
    
    getRow: function CommandUI_Section$getRow$in(rowNum) {
        switch (this._type$1) {
            case 4:
                if (rowNum < 1 || rowNum > 3) {
                    throw Error.create('This Section type only has Row numbers 1, 2 and 3.');
                }
                break;
            case 3:
                if (rowNum < 1 || rowNum > 2) {
                    throw Error.create('This Section type only has Row numbers 1 and 2');
                }
                break;
            case 2:
                if (rowNum !== 1) {
                    throw Error.create('This Section type only has Row number 1.');
                }
                break;
            case 5:
            default:
                throw Error.create('This Section type does not have any rows');
        }
        return this.get_children().get_item(rowNum - 1);
    },
    
    ensureDOMElement: function CommandUI_Section$ensureDOMElement$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_elementInternal())) {
            return;
        }
        if (this.get_type() === 1) {
            var elmDivider = CommandUI.Utility.createElement('span');
            elmDivider.className = 'cui-section-divider';
            if (this._showSectionSeparator$1) {
                elmDivider.className += ' cui-section-divider-separator';
            }
            this.set_elementInternal(elmDivider);
            return;
        }
        CommandUI.Component.prototype.ensureDOMElement.call(this);
    },
    
    ensureCorrectChildType: function CommandUI_Section$ensureCorrectChildType$in(child) {
        var count = this.get_children().get_count();
        if ((this.get_type() === 2 && count > 0) || (this.get_type() === 3 && count > 1) || (this.get_type() === 4 && count > 2)) {
            throw Error.create('No more children can be added to a Section of this type.');
        }
        if (this.get_type() === 1) {
            throw Error.create('Cannot add child components to Divider Section types.');
        }
        if (!CommandUI.Row.isInstanceOfType(child)) {
            throw Error.create('Only children of type Row can be added to Section Components.');
        }
    },
    
    get_domElementTagName: function CommandUI_Section$get_domElementTagName$in() {
        return 'span';
    }
}


CommandUI._tab = function CommandUI__tab(ribbon, id, title, description, command, contextual, contextualGroupId, cssClass, keytipString) {
    this.$$d__dismissRibbonPopup$p$2 = Function.createDelegate(this, this._dismissRibbonPopup$p$2);
    this.$$d__displayTab$p$2 = Function.createDelegate(this, this._displayTab$p$2);
    this.$$d__onTitleKeyPress$p$2 = Function.createDelegate(this, this._onTitleKeyPress$p$2);
    this.$$d__onTitleKeyUp$p$2 = Function.createDelegate(this, this._onTitleKeyUp$p$2);
    this.$$d__onTitlePointerDown$p$2 = Function.createDelegate(this, this._onTitlePointerDown$p$2);
    this.$$d__onTitleDblClick$p$2 = Function.createDelegate(this, this._onTitleDblClick$p$2);
    this._pendingDisplayTabTimeoutId$2 = -1;
    this._pendingDismissTabTimeoutId$2 = -1;
    CommandUI._tab.initializeBase(this, [ ribbon, id, title, description, keytipString, true ]);
    this.set_currentScalingIndex(-1);
    this._scalingInfo$2 = new CommandUI._scaling();
    this._contextual$2 = contextual;
    this._contextualGroupId$2 = contextualGroupId;
    this._command$2 = command;
    this._cssClass$2 = (CommandUI.ScriptUtility.isNullOrUndefined(cssClass)) ? '' : cssClass;
    if (contextual) {
        this.set__visibleInternal$i$0(false);
    }
    if (command === 'DEBUG_ALWAYS_ENABLED') {
        this.set__visibleInternal$i$0(true);
    }
}
CommandUI._tab.prototype = {
    _selected$2: false,
    _elmTitleA$2: null,
    _elmTitleSpan$2: null,
    _elmATText$2: null,
    _cssClass$2: null,
    _contextual$2: false,
    _contextualGroupId$2: null,
    
    refreshInternal: function CommandUI__tab$refreshInternal$in() {
        this.ensureDOMElementAndEmpty();
        this._ensureTitleRefreshed$i$2();
        this.appendChildrenToElement(this.get_elementInternal());
        CommandUI.Component.prototype.refreshInternal.call(this);
    },
    
    _attachTitleEvents$p$2: function CommandUI__tab$_attachTitleEvents$p$2$in() {
        Common.ClickInputManager.get_instance().registerHandler(Common.EventNames.doubleClick, this._elmTitleA$2, this.$$d__onTitleDblClick$p$2);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, this._elmTitleA$2, this.$$d__onTitlePointerDown$p$2);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, this._elmTitleA$2, this.$$d__onTitleKeyUp$p$2);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyPress, this._elmTitleA$2, this.$$d__onTitleKeyPress$p$2);
    },
    
    ensureDOMElement: function CommandUI__tab$ensureDOMElement$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_elementInternal())) {
            return;
        }
        CommandUI.Component.prototype.ensureDOMElement.call(this);
        this.get_elementInternal().setAttribute('role', 'tabpanel');
        Common.AccessibilityUtils.setAriaAttribute(this.get_elementInternal(), 'aria-labelledby', this.get_id() + '-title');
    },
    
    _addChildAtIndexInternal$i$0: function CommandUI__tab$_addChildAtIndexInternal$i$0$in(child, index, validateChild) {
        if (!index) {
            this._firstControl$2 = null;
        }
        if (index === this.get_children().get_count() || index === -1) {
            this._lastControl$2 = null;
        }
        CommandUI.Component.prototype._addChildAtIndexInternal$i$0.call(this, child, index, validateChild);
    },
    
    removeChild: function CommandUI__tab$removeChild$in(id) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_children().get_item(0)) && (this.get_children().get_item(0)).get_id() === id) {
            this._firstControl$2 = null;
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_children().get_item(this.get_children().get_count() - 1)) && (this.get_children().get_item(this.get_children().get_count() - 1)).get_id() === id) {
            this._lastControl$2 = null;
        }
        CommandUI.Component.prototype.removeChild.call(this, id);
    },
    
    _removeChildren$i$0: function CommandUI__tab$_removeChildren$i$0$in() {
        this._firstControl$2 = null;
        this._lastControl$2 = null;
        CommandUI.Component.prototype._removeChildren$i$0.call(this);
    },
    
    get_domElementTagName: function CommandUI__tab$get_domElementTagName$in() {
        return 'ul';
    },
    
    _$$pf_TitleDOMElement$p$2: null,
    
    get__titleDOMElement$i$2: function CommandUI__tab$get__titleDOMElement$i$2$in() {
        return this._$$pf_TitleDOMElement$p$2;
    },
    
    set__titleDOMElement$i$2: function CommandUI__tab$set__titleDOMElement$i$2$in(value) {
        this._$$pf_TitleDOMElement$p$2 = value;
        return value;
    },
    
    _ensureTitleDOMElement$i$2: function CommandUI__tab$_ensureTitleDOMElement$i$2$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get__titleDOMElement$i$2())) {
            this.set__titleDOMElement$i$2(CommandUI.Utility.createElement('li'));
        }
    },
    
    _ensureHiddenATDOMElement$i$2: function CommandUI__tab$_ensureHiddenATDOMElement$i$2$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmATText$2)) {
            this._elmATText$2 = CommandUI.Utility.createElement('span');
        }
    },
    
    onTitleScale: function CommandUI__tab$onTitleScale$in(step) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get__titleDOMElement$i$2())) {
            this.get__titleDOMElement$i$2().title = (step >= 2) ? this.get_title() : '';
        }
    },
    
    onTabAttachedToRibbon: function CommandUI__tab$onTabAttachedToRibbon$in() {
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var group = $$enum_1.get_current();
            group.onGroupAttachedToRibbon();
        }
    },
    
    _ensureTitleRefreshed$i$2: function CommandUI__tab$_ensureTitleRefreshed$i$2$in() {
        var ctxTabClasses = ' ';
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmTitleA$2)) {
            this._ensureTitleDOMElement$i$2();
            this._elmTitleA$2 = CommandUI.Utility.createElement('a');
            CommandUI.Utility._addToTabLoop$i(this._elmTitleA$2);
            this._elmTitleA$2.className = 'cui-tt-a';
            this._elmTitleA$2.setAttribute('role', 'tab');
            this.get__titleDOMElement$i$2().appendChild(this._elmTitleA$2);
            this._elmTitleSpan$2 = CommandUI.Utility.createElement('span');
            this._elmTitleSpan$2.className = 'cui-tt-span';
            this._elmTitleA$2.appendChild(this._elmTitleSpan$2);
            this._attachTitleEvents$p$2();
        }
        else {
            ctxTabClasses += (this.get__titleDOMElement$i$2().className.indexOf('cui-ct-first') > -1) ? 'cui-ct-first ' : '';
            ctxTabClasses += (this.get__titleDOMElement$i$2().className.indexOf('cui-ct-last') > -1) ? 'cui-ct-last' : '';
            ctxTabClasses = ctxTabClasses.trimEnd();
        }
        this.get__titleDOMElement$i$2().className = this._getTitleCSSClassName$p$2() + ctxTabClasses;
        this.get__titleDOMElement$i$2().id = this.get_id() + '-title';
        this.get__titleDOMElement$i$2().setAttribute('role', 'presentation');
        Common.AccessibilityUtils.setAriaAttribute(this._elmTitleA$2, Common.AccessibilityUtils.ariaSelectedAttribute, (this._selected$2) ? Common.AccessibilityUtils.ariaTrueValue : Common.AccessibilityUtils.ariaFalseValue);
        Common.AccessibilityUtils.setAriaAttribute(this._elmTitleA$2, Common.AccessibilityUtils.ariaExpandedAttribute, (this._selected$2 && this.get_ribbon().get_tabShowing()) ? Common.AccessibilityUtils.ariaTrueValue : Common.AccessibilityUtils.ariaFalseValue);
        this._elmTitleSpan$2.innerText = this.get_title();
        if (!CommandUI.ScriptUtility.isNullOrEmptyString(this.get__description$i$0())) {
            this._elmTitleA$2.setAttribute('title', this.get__description$i$0());
        }
        this._ensureKeytip$i$0(this.get__keytipDomContainer$i$0(), this.get__keytipDomContainer$i$0(), CommandUI.Keytip.ribbonShortcutId, '');
    },
    
    get__keytipDomContainer$i$0: function CommandUI__tab$get__keytipDomContainer$i$0$in() {
        return this._elmTitleA$2;
    },
    
    _setContextualText$i$2: function CommandUI__tab$_setContextualText$i$2$in(positionText, contextualText, groupName, tabPos, totalTabs) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmATText$2)) {
            this._ensureHiddenATDOMElement$i$2();
        }
        if (this.get_contextual()) {
            contextualText = String.format(contextualText, groupName, tabPos, totalTabs);
        }
        else {
            contextualText = String.format(positionText, tabPos, totalTabs);
        }
        this._elmATText$2.innerText = contextualText;
        CommandUI.Utility.ensureCSSClassOnElement(this._elmATText$2, 'cui-hidden');
        this._elmTitleA$2.appendChild(this._elmATText$2);
    },
    
    _resetTitleCSSClasses$i$2: function CommandUI__tab$_resetTitleCSSClasses$i$2$in() {
        this.get__titleDOMElement$i$2().className = this._getTitleCSSClassName$p$2();
    },
    
    get_cssClass: function CommandUI__tab$get_cssClass$in() {
        return this._getBodyCSSClassName$p$2();
    },
    
    get_selected: function CommandUI__tab$get_selected$in() {
        return this._selected$2;
    },
    
    set_selected: function CommandUI__tab$set_selected$in(value) {
        if (!this.get_visible()) {
            throw Error.create(String.format('Tabs must be visible and enabled in order to be selected. Id:{0}. Contextual:{1}. ContextualGroupId:{2}', this.get_id(), this.get_contextual(), this.get_contextualGroupId()));
        }
        if (value) {
            if (this.get__needsDelayIniting$i$0()) {
                Diag.ULS.sendTraceTag(5256331, 207, 50, 'Tab not available');
                return value;
            }
            this.get_ribbon()._makeTabSelectedInternal$i$3(this);
            this.get_ribbon().refreshInternal();
            if (this.get__lastScaleWidthHeight$i$2() !== this.get_ribbon().get__lastResizeWidthHeight$i$2()) {
                this.get_ribbon()._scale$i$2();
            }
            this.pollIfRootPolledSinceLastPoll();
            if (this.get_ribbon().get_tabPoppedUp()) {
                if (this.get__popupInvocationMethod$i$2() === Common.InputManager.InputMethod.keyboard) {
                    this._setFocusOnFirstControl$i$0();
                }
                else {
                    this.get_ribbon()._setFocusOnTabContainer$i$3();
                }
            }
        }
        else {
            throw Error.create('Selected cannot be set to false explicitly.\n' + 'Selecting another Tab will do this implicitly.');
        }
        return value;
    },
    
    _rememberActiveTabId$p$2: function CommandUI__tab$_rememberActiveTabId$p$2$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_ribbon().get__ribbonBuilder$i$3()) && !CommandUI.ScriptUtility.isNullOrUndefined(this.get_ribbon().get__ribbonBuilder$i$3().get__ribbonBuildOptions$i$1()) && !CommandUI.ScriptUtility.isNullOrEmptyString(this.get_ribbon().get__ribbonBuilder$i$3().get__ribbonBuildOptions$i$1().clientID)) {
            var elem = document.getElementById(this.get_ribbon().get__ribbonBuilder$i$3().get__ribbonBuildOptions$i$1().clientID + '_activeTabId');
            if (elem) {
                elem.value = this.get_id();
            }
        }
    },
    
    _setSelectedInternal$i$2: function CommandUI__tab$_setSelectedInternal$i$2$in(selected, refresh) {
        if (selected) {
            this._rememberActiveTabId$p$2();
        }
        this._selected$2 = selected;
        this._onDirtyingChange$i$0();
        if (refresh) {
            this._ensureTitleRefreshed$i$2();
        }
    },
    
    ensureTabInitialized: function CommandUI__tab$ensureTabInitialized$in() {
        if (this.get__needsDelayIniting$i$0()) {
            this.doDelayedInit();
        }
    },
    
    ensureCorrectChildType: function CommandUI__tab$ensureCorrectChildType$in(child) {
        if (!CommandUI.Group.isInstanceOfType(child)) {
            throw Error.create('Only children of type Group can be added to Tab Components');
        }
    },
    
    _scalingInfo$2: null,
    
    get_scaling: function CommandUI__tab$get_scaling$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._scalingInfo$2)) {
            this._scalingInfo$2 = new CommandUI._scaling();
        }
        return this._scalingInfo$2;
    },
    
    _$$pf_CurrentScalingIndex$p$2: 0,
    
    get_currentScalingIndex: function CommandUI__tab$get_currentScalingIndex$in() {
        return this._$$pf_CurrentScalingIndex$p$2;
    },
    
    set_currentScalingIndex: function CommandUI__tab$set_currentScalingIndex$in(value) {
        this._$$pf_CurrentScalingIndex$p$2 = value;
        return value;
    },
    
    _$$pf_LastScaleWidthHeight$p$2: null,
    
    get__lastScaleWidthHeight$i$2: function CommandUI__tab$get__lastScaleWidthHeight$i$2$in() {
        return this._$$pf_LastScaleWidthHeight$p$2;
    },
    
    set__lastScaleWidthHeight$i$2: function CommandUI__tab$set__lastScaleWidthHeight$i$2$in(value) {
        this._$$pf_LastScaleWidthHeight$p$2 = value;
        return value;
    },
    
    scaleMax: function CommandUI__tab$scaleMax$in() {
        this._scaleMaxInternal$i$2();
        this._onDirtyingChange$i$0();
    },
    
    _scaleMaxInternal$i$2: function CommandUI__tab$_scaleMaxInternal$i$2$in() {
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var group = $$enum_1.get_current();
            var layoutName = this._scalingInfo$2.getGroupMaxSize(group.get_id());
            if (!CommandUI.ScriptUtility.isNullOrUndefined(layoutName)) {
                group.selectLayout(layoutName);
            }
            else {
                Common.Debug.assertNotReachedStringTag(String.format('Your group with id {0} doesn\'t specify a MaxSize layout for scaling, so clicks will no-op.', group.get_id()), 17150160);
            }
        }
        this.set_currentScalingIndex(-1);
    },
    
    scaleIndex: function CommandUI__tab$scaleIndex$in(index) {
        this._scaleIndexInternal$i$2(index);
        this._onDirtyingChange$i$0();
    },
    
    _scaleIndexInternal$i$2: function CommandUI__tab$_scaleIndexInternal$i$2$in(index) {
        Common.Debug.assertStringTag(index > -2 && index < this._scalingInfo$2.get_stepsInternal().length, 'Scale index for tab: ' + this.get_id() + ' must be between -1 and ' + this._scalingInfo$2.get_stepsInternal().length, 1581581);
        this._scaleMaxInternal$i$2();
        while (index > this.get_currentScalingIndex()) {
            if (!this._scaleDownInternal$i$2()) {
                break;
            }
        }
    },
    
    _scaleUpInternal$i$2: function CommandUI__tab$_scaleUpInternal$i$2$in() {
        if (this.get_currentScalingIndex() === -2) {
            this._scaleMaxInternal$i$2();
            return true;
        }
        if (this.get_currentScalingIndex() === -1) {
            return false;
        }
        var steps = this._scalingInfo$2.get_stepsInternal();
        var step = steps[this.get_currentScalingIndex()];
        var group = this._getChild$i$0(step.get_groupId());
        group.selectLayout(step.get_previousLayoutName());
        this.set_currentScalingIndex(this.get_currentScalingIndex() - (1));
        return true;
    },
    
    scaleUp: function CommandUI__tab$scaleUp$in() {
        var scaled = this._scaleUpInternal$i$2();
        if (scaled) {
            this._onDirtyingChange$i$0();
        }
        return scaled;
    },
    
    _scaleDownInternal$i$2: function CommandUI__tab$_scaleDownInternal$i$2$in() {
        if (this.get_currentScalingIndex() === -2) {
            this.scaleMax();
            return true;
        }
        var steps = this._scalingInfo$2.get_stepsInternal();
        if (steps.length <= this.get_currentScalingIndex() + 1) {
            return false;
        }
        this.set_currentScalingIndex(this.get_currentScalingIndex() + (1));
        var step = steps[this.get_currentScalingIndex()];
        var group = this._getChild$i$0(step.get_groupId());
        if (!(this.get_title().startsWith('[') && this.get_title().endsWith(']'))) {
            if (step.get_hasScaleWarning()) {
                alert('Tab Scale Warning hit for:\nTab: ' + this.get_id() + '\nGroup: ' + group.get_id() + '\nSize: ' + step.get_layoutName() + '\nMessage: ' + step.get_scaleWarningMessage());
            }
        }
        if (group) {
            group.selectLayout(step.get_layoutName());
        }
        else {
            Common.Debug.assertNotReachedStringTag(String.format('Cannot scale to group \'{0}\', does not exist', step.get_groupId()), 4797187);
        }
        return true;
    },
    
    scaleDown: function CommandUI__tab$scaleDown$in() {
        var scaled = this._scaleDownInternal$i$2();
        if (scaled) {
            this._onDirtyingChange$i$0();
        }
        return scaled;
    },
    
    _$$pf_ScaledByCookie$p$2: false,
    
    get__scaledByCookie$i$2: function CommandUI__tab$get__scaledByCookie$i$2$in() {
        return this._$$pf_ScaledByCookie$p$2;
    },
    
    set__scaledByCookie$i$2: function CommandUI__tab$set__scaledByCookie$i$2$in(value) {
        this._$$pf_ScaledByCookie$p$2 = value;
        return value;
    },
    
    get__width$i$2: function CommandUI__tab$get__width$i$2$in() {
        var width = 0;
        var tabBody = this.get_elementInternal();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(tabBody)) {
            width = tabBody.offsetWidth;
        }
        return width;
    },
    
    get__contentsCurScaleWidth$i$2: function CommandUI__tab$get__contentsCurScaleWidth$i$2$in() {
        var sum = 0;
        var nodes = this.get_elementInternal().childNodes;
        for (var i = 0; i < nodes.length; i++) {
            sum += nodes[i].offsetWidth + 0.5;
        }
        return Math.ceil(sum);
    },
    
    _tabBodyMinWidth$2: 0,
    
    get__minWidth$i$2: function CommandUI__tab$get__minWidth$i$2$in() {
        return this._tabBodyMinWidth$2;
    },
    
    set__minWidth$i$2: function CommandUI__tab$set__minWidth$i$2$in(value) {
        var tabBody = this.get_elementInternal();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(tabBody)) {
            tabBody.style.minWidth = value + 'px';
            this._tabBodyMinWidth$2 = value;
        }
        else {
            Common.Debug.assertNotReachedTag(1627864);
        }
        return value;
    },
    
    get_contextual: function CommandUI__tab$get_contextual$in() {
        return this._contextual$2;
    },
    
    get_contextualGroupId: function CommandUI__tab$get_contextualGroupId$in() {
        return this._contextualGroupId$2;
    },
    
    _lastTabDisplayTime$2: null,
    
    get__lastTabDisplayTime$i$2: function CommandUI__tab$get__lastTabDisplayTime$i$2$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._lastTabDisplayTime$2)) {
            this._lastTabDisplayTime$2 = new Date();
            this._lastTabDisplayTime$2.setTime(0);
        }
        return this._lastTabDisplayTime$2;
    },
    
    set__lastTabDisplayTime$i$2: function CommandUI__tab$set__lastTabDisplayTime$i$2$in(value) {
        this._lastTabDisplayTime$2 = value;
        return value;
    },
    
    _$$pf_PopupInvocationMethod$p$2: 0,
    
    get__popupInvocationMethod$i$2: function CommandUI__tab$get__popupInvocationMethod$i$2$in() {
        return this._$$pf_PopupInvocationMethod$p$2;
    },
    
    set__popupInvocationMethod$i$2: function CommandUI__tab$set__popupInvocationMethod$i$2$in(value) {
        this._$$pf_PopupInvocationMethod$p$2 = value;
        return value;
    },
    
    _onTitleKeyPress$p$2: function CommandUI__tab$_onTitleKeyPress$p$2$in(args) {
        if (args.innerEvent) {
            args.innerEvent.preventDefault();
        }
        return false;
    },
    
    _onTitleKeyUp$p$2: function CommandUI__tab$_onTitleKeyUp$p$2$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent)) {
            var keyCode = args.innerEvent.keyCode;
            if ((keyCode === Sys.UI.Key.enter) || (keyCode === Sys.UI.Key.space)) {
                this._doTitleDefaultAction$i$2(Common.InputManager.InputMethod.keyboard);
                if (!this.get_ribbon().get_minimized()) {
                    this._setFocusOnFirstControl$i$0();
                }
                handled = true;
            }
        }
        return handled;
    },
    
    _onTitlePointerDown$p$2: function CommandUI__tab$_onTitlePointerDown$p$2$in(args) {
        var handled = false;
        if (args.get_inputSource() !== Common.InputManager.InputMethod.mouse || !args.get_mouseButton()) {
            this._doTitleDefaultAction$i$2(args.get_inputSource());
            handled = true;
        }
        return handled;
    },
    
    _doTitleDefaultAction$i$2: function CommandUI__tab$_doTitleDefaultAction$i$2$in(inputMethod) {
        this.set__popupInvocationMethod$i$2(inputMethod);
        this._cancelPendingDisplayTab$p$2();
        if (this.get_selected()) {
            if (this.get_ribbon().get_tabPoppedUp()) {
                var now = new Date();
                if ((now.getTime() - this.get__lastTabDisplayTime$i$2().getTime()) > CommandUI._tab._activeTabClickDelay$p) {
                    this._delayDismissRibbon$p$2(CommandUI._tab._activeTabClickDelay$p);
                }
            }
            else {
                this._delayDisplayTab$p$2(CommandUI._tab._activeTabClickDelay$p);
            }
        }
        else {
            if (this.get_ribbon().get_minimized() && !this.get_ribbon().get_tabPoppedUp()) {
                if (inputMethod === Common.InputManager.InputMethod.mouse || inputMethod === Common.InputManager.InputMethod.touch) {
                    this.get_ribbon().set__isLowerRibbonTouchMode$i$3((inputMethod === Common.InputManager.InputMethod.touch));
                }
            }
            this._displayTab$p$2();
        }
    },
    
    _onTitleDblClick$p$2: function CommandUI__tab$_onTitleDblClick$p$2$in(args) {
        if (this.get_selected()) {
            if (this.get_ribbon().get_minimized() && !this.get_ribbon().get_tabPoppedUp()) {
                this.get_ribbon().set__isLowerRibbonTouchMode$i$3(false);
            }
            this._cancelPendingDisplayTab$p$2();
            this._cancelPendingDismissRibbonPopup$p$2();
            this.get_ribbon().toggleMinimizedState(Common.InputManager.InputMethod.mouse);
        }
        return true;
    },
    
    _displayTab$p$2: function CommandUI__tab$_displayTab$p$2$in() {
        Common.PerfMetrics.mark(10334);
        Common.WindowUtils.measureTimeToNextFrame(this.get_id(), 'TabSwitch');
        this._cancelPendingDisplayTab$p$2();
        var restoreFocusToTitle = !this.get_ribbon().get_minimized() && Common.WindowUtils.isActiveElement(this._elmTitleA$2);
        this.set_selected(true);
        if (restoreFocusToTitle) {
            this._setFocusOnTitle$i$2();
        }
        this.set__lastTabDisplayTime$i$2(new Date());
        Common.PerfMetrics.mark(10335);
        Diag.ULS.sendTraceTag(20459935, 340, 50, 'DisplayTab: {0}', { Title: this.get_title() });
        if (Common.Utils.Container.get_instance().tryResolve(Common.IRibbonSQMInformation, '')) {
            var props = {};
            props[Common.RibbonSQMProperties.tabId] = this.get_id();
            Common.AFrameworkApplication.get_theActionManager().processActionWithData(Common.CommonCommands.reportTabSwitch, 2, props, null);
        }
    },
    
    _dismissRibbonPopup$p$2: function CommandUI__tab$_dismissRibbonPopup$p$2$in() {
        this._cancelPendingDismissRibbonPopup$p$2();
        this.get_ribbon().dismissTabPopup(true, true);
    },
    
    _delayDisplayTab$p$2: function CommandUI__tab$_delayDisplayTab$p$2$in(delay) {
        if (this._pendingDisplayTabTimeoutId$2 === -1) {
            this._pendingDisplayTabTimeoutId$2 = window.setTimeout(this.$$d__displayTab$p$2, delay);
        }
    },
    
    _cancelPendingDisplayTab$p$2: function CommandUI__tab$_cancelPendingDisplayTab$p$2$in() {
        var $$t_0;
        CommandUI.Utility.cancelPendingTimeout(($$t_0 = {'val': this._pendingDisplayTabTimeoutId$2})), this._pendingDisplayTabTimeoutId$2 = $$t_0.val;
    },
    
    _delayDismissRibbon$p$2: function CommandUI__tab$_delayDismissRibbon$p$2$in(delay) {
        if (this._pendingDismissTabTimeoutId$2 === -1) {
            this._pendingDismissTabTimeoutId$2 = window.setTimeout(this.$$d__dismissRibbonPopup$p$2, delay);
        }
    },
    
    _cancelPendingDismissRibbonPopup$p$2: function CommandUI__tab$_cancelPendingDismissRibbonPopup$p$2$in() {
        var $$t_0;
        CommandUI.Utility.cancelPendingTimeout(($$t_0 = {'val': this._pendingDismissTabTimeoutId$2})), this._pendingDismissTabTimeoutId$2 = $$t_0.val;
    },
    
    _moveGroupFocus$i$2: function CommandUI__tab$_moveGroupFocus$i$2$in(startFromContainer, forward) {
        var elm = Common.WindowUtils.getActiveElement(this.get_elementInternal().ownerDocument);
        var length = this.get_children().get_count();
        var startGroupIndex = 0;
        var nextGroupIndex = 0;
        if (startFromContainer) {
            startGroupIndex = -1;
            nextGroupIndex = (forward) ? 0 : length - 1;
        }
        else {
            var groupId = this._findGroupId$p$2(elm);
            var $$enum_8 = this.get_children().getEnumerator();
            while ($$enum_8.moveNext()) {
                var gr1 = $$enum_8.get_current();
                if (gr1.get_id() === groupId) {
                    break;
                }
                startGroupIndex++;
            }
            if (forward) {
                nextGroupIndex = (startGroupIndex + 1) % length;
            }
            else {
                nextGroupIndex = startGroupIndex - 1;
            }
            if (nextGroupIndex < 0) {
                nextGroupIndex = length + nextGroupIndex;
            }
        }
        if ((nextGroupIndex !== startGroupIndex) && (Common.DomUtils.getTag(elm) === Common.DOMTag.input)) {
            Common.WindowUtils.clearSelectionInInput(elm);
        }
        while (nextGroupIndex !== startGroupIndex) {
            var gr = this.get_children().get_item(nextGroupIndex);
            if (gr._setFocusOnFirstControl$i$0()) {
                return;
            }
            if (forward) {
                nextGroupIndex = (nextGroupIndex + 1) % length;
            }
            else {
                nextGroupIndex = nextGroupIndex - 1;
            }
            if (nextGroupIndex < 0) {
                nextGroupIndex = length + nextGroupIndex;
            }
        }
    },
    
    _findGroupId$p$2: function CommandUI__tab$_findGroupId$p$2$in(elm) {
        if (elm.nodeName === 'LI') {
            return elm.id;
        }
        else {
            return this._findGroupId$p$2(elm.parentNode);
        }
    },
    
    _firstControl$2: null,
    
    get__firstControl$i$2: function CommandUI__tab$get__firstControl$i$2$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._firstControl$2)) {
            Common.Debug.assertTag(this.get_children().get_count() > 0, 2131163);
            var firstGroup = this.get_children().get_item(0);
            var numSections = firstGroup.get__selectedLayout$i$1().get_children().get_count();
            var curSection = 0;
            Common.Debug.assertTag(numSections > 0, 2131164);
            while ((curSection < numSections) && CommandUI.ScriptUtility.isNullOrUndefined(this._firstControl$2)) {
                var firstSection = firstGroup.get__selectedLayout$i$1().get_children().get_item(curSection);
                var numRows = firstSection.get_children().get_count();
                if (numRows > 0) {
                    var firstRow = firstSection.get_children().get_item(0);
                    if (firstRow.get_children().get_count() > 0) {
                        this._firstControl$2 = (firstRow.get_children().get_item(0)).get_control();
                    }
                }
                curSection++;
            }
            Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrUndefined(this._firstControl$2), 2131166);
        }
        return this._firstControl$2;
    },
    
    _lastControl$2: null,
    
    get__lastControl$i$2: function CommandUI__tab$get__lastControl$i$2$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._lastControl$2)) {
            var numGroups = this.get_children().get_count();
            Common.Debug.assertTag(numGroups > 0, 2131167);
            var lastGroup = this.get_children().get_item(numGroups - 1);
            if (lastGroup.get_hasElementDialogLauncherComponent()) {
                this._lastControl$2 = lastGroup.get_elementDialogLauncherComponent().get_control();
            }
            var sections = lastGroup.get__selectedLayout$i$1().get_children();
            var curSection = sections.get_count() - 1;
            Common.Debug.assertTag(curSection >= 0, 2131168);
            while ((curSection >= 0) && CommandUI.ScriptUtility.isNullOrUndefined(this._lastControl$2)) {
                var lastSection = sections.get_item(curSection);
                var numRows = lastSection.get_children().get_count();
                if (numRows > 0) {
                    var lastRow = lastSection.get_children().get_item(numRows - 1);
                    var numComponents = lastRow.get_children().get_count();
                    if (numComponents > 0) {
                        this._lastControl$2 = (lastRow.get_children().get_item(numComponents - 1)).get_control();
                    }
                }
                curSection--;
            }
            Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrUndefined(this._lastControl$2), 2131170);
        }
        return this._lastControl$2;
    },
    
    _setFocusOnFirstControl$i$0: function CommandUI__tab$_setFocusOnFirstControl$i$0$in() {
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var gr = $$enum_1.get_current();
            if (gr._setFocusOnFirstControl$i$0()) {
                return true;
            }
        }
        return false;
    },
    
    _setFocusOnTitle$i$2: function CommandUI__tab$_setFocusOnTitle$i$2$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._elmTitleA$2)) {
            this._elmTitleA$2.focus();
        }
    },
    
    _getTitleCSSClassName$p$2: function CommandUI__tab$_getTitleCSSClassName$p$2$in() {
        var className = 'cui-tt ' + this._cssClass$2;
        if (!(Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonVisualRefreshEnabled())) {
            className += ' UITextTranformUpperCase';
        }
        if (this._selected$2) {
            className += ' cui-tt-s';
        }
        return className;
    },
    
    _getBodyCSSClassName$p$2: function CommandUI__tab$_getBodyCSSClassName$p$2$in() {
        var className = CommandUI._tab.tabBodyCssClassName;
        if (this.get_contextual()) {
            className += ' cui-tabBody-' + CommandUI._contextualGroup._getColorNameForContextualTabColor$i(this.get_ribbon()._getContextualGroup$i$3(this.get_contextualGroupId()).get_color());
        }
        return className;
    },
    
    _getContainerCSSClassName$i$2: function CommandUI__tab$_getContainerCSSClassName$i$2$in() {
        var className = 'cui-tabContainer';
        if (this.get_contextual()) {
            className += ' cui-tabContainer-' + CommandUI._contextualGroup._getColorNameForContextualTabColor$i(this.get_ribbon()._getContextualGroup$i$3(this.get_contextualGroupId()).get_color());
        }
        return className;
    },
    
    get_visible: function CommandUI__tab$get_visible$in() {
        return CommandUI.Component.prototype.get_visible.call(this);
    },
    
    set_visible: function CommandUI__tab$set_visible$in(value) {
        if (this.get_contextual()) {
            throw Error.create('Visibility of Contextual Tabs cannot be set explicitly.');
        }
        CommandUI.Component.prototype.set_visible.call(this, value);
        return value;
    },
    
    _command$2: null,
    
    get_command: function CommandUI__tab$get_command$in() {
        return this._command$2;
    },
    
    pollForStateAndUpdateInternal: function CommandUI__tab$pollForStateAndUpdateInternal$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_command())) {
            this.set__enabled$i$0(true);
        }
        else {
            var result = this.get_ribbon().pollForCommandState(this.get_command(), null, null);
            this.set__enabled$i$0((result & 1) > 0);
        }
        if (this.get__enabled$i$0()) {
            this.set__lastPollTime$i$0(new Date());
            CommandUI.Component.prototype.pollForStateAndUpdateInternal.call(this);
        }
        this.get_ribbon()._ensureTabContainerGlobalDisablingRemoved$i$3();
    },
    
    dispose: function CommandUI__tab$dispose$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._elmTitleA$2)) {
            CommandUI.Utility.unregisterAllHandlers(this._elmTitleA$2);
        }
        CommandUI.Component.prototype.dispose.call(this);
        CommandUI.Utility.releaseEventHandlersRecursively(this.get__titleDOMElement$i$2());
        this._elmATText$2 = null;
        this.set__titleDOMElement$i$2(null);
        this._elmTitleA$2 = null;
        this._elmTitleSpan$2 = null;
    }
}


CommandUI._template = function CommandUI__template() {
}


CommandUI._templateManager = function CommandUI__templateManager() {
    this._templates$0 = {};
}
CommandUI._templateManager.get_instance = function CommandUI__templateManager$get_instance$st() {
    if (CommandUI.ScriptUtility.isNullOrUndefined(CommandUI._templateManager._instance)) {
        CommandUI._templateManager._instance = new CommandUI._templateManager();
    }
    return CommandUI._templateManager._instance;
}
CommandUI._templateManager.prototype = {
    _templates$0: null,
    
    addTemplate: function CommandUI__templateManager$addTemplate$in(template, id) {
        Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrUndefined(this._templates$0[id]), 2131171);
        this._templates$0[id] = template;
    },
    
    removeTemplate: function CommandUI__templateManager$removeTemplate$in(id) {
        this._templates$0[id] = null;
    },
    
    getTemplate: function CommandUI__templateManager$getTemplate$in(id) {
        return this._templates$0[id];
    },
    
    loadTemplates: function CommandUI__templateManager$loadTemplates$in(data) {
        var templatesNode = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(data, CommandUI.DataNodeWrapper.RIBBONTEMPLATES);
        var children = CommandUI.DataNodeWrapper.getNodeChildren(templatesNode);
        for (var i = 0; i < children.length; i++) {
            Common.Debug.assertStringTag(children[i][CommandUI.DataNodeWrapper.NAME] === CommandUI.DataNodeWrapper.GROUPTEMPLATE, 'Only GroupTemplate tags can be children of RibbonTemplate tags', 1931107);
            this._loadGroupTemplate$p$0(children[i]);
        }
    },
    
    _loadGroupTemplate$p$0: function CommandUI__templateManager$_loadGroupTemplate$p$0$in(data) {
        var dnw = new CommandUI.DataNodeWrapper(data);
        Common.Debug.assertStringTag(dnw.get_name() === CommandUI.DataNodeWrapper.GROUPTEMPLATE, 'Expected tag with name GroupTemplate.', 1931136);
        var id = dnw.get_attributes()[CommandUI.DataNodeWrapper.id];
        var className = dnw.get_attributes()[CommandUI.DataNodeWrapper.CLASSNAME];
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._templates$0[id])) {
            return;
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(className)) {
            this._templates$0[id] = new CommandUI._declarativeTemplate(data);
        }
    }
}


CommandUI.MenuPositioningInfo = function CommandUI_MenuPositioningInfo() {
}
CommandUI.MenuPositioningInfo.prototype = {
    launchedLeft: false,
    launchedUp: false,
    viewPortHeight: 0,
    viewPortWidth: 0,
    flyoutTop: 0,
    flyoutLeft: 0,
    flyoutWidth: 0,
    flyoutHeight: 0
}


CommandUI.ControlBehaviorFactoryProvider = function CommandUI_ControlBehaviorFactoryProvider() {
}
CommandUI.ControlBehaviorFactoryProvider.get_controlBehaviorFactory = function CommandUI_ControlBehaviorFactoryProvider$get_controlBehaviorFactory$st() {
    return CommandUI.ControlBehaviorFactoryProvider._instance;
}
CommandUI.ControlBehaviorFactoryProvider.set_controlBehaviorFactory = function CommandUI_ControlBehaviorFactoryProvider$set_controlBehaviorFactory$st(value) {
    Common.Debug.assertStringTag(!CommandUI.ControlBehaviorFactoryProvider._instance, 'Can only set this instance once', 4778205);
    CommandUI.ControlBehaviorFactoryProvider._instance = value;
    return value;
}


CommandUI.RootProperties = function CommandUI_RootProperties() {
}
CommandUI.RootProperties.prototype = {
    DivSyndicated: null,
    ImageDownArrow: null,
    ImageDownArrowClass: null,
    ImageDownArrow8by8: null,
    ImageDownArrow8by8Class: null,
    ImageSideArrow: null,
    ImageSideArrowClass: null,
    ImageUpArrow: null,
    ImageUpArrowClass: null,
    ImageUpArrow8by8: null,
    ImageUpArrow8by8Class: null,
    ImageCheckMark: null,
    ImageCheckMarkClass: null,
    ImageUncheckMark: null,
    ImageUncheckMarkClass: null,
    ImageCollapsedArrow: null,
    ImageCollapsedArrowClass: null,
    ImageExpandedArrow: null,
    ImageExpandedArrowClass: null,
    ImageSpinner: null,
    TextDirection: null,
    LabelText: null
}


CommandUI.Root = function CommandUI_Root(id, properties, rootManager, resizableContainer) {
    this.$$d__onModalMouseWheel$p$1 = Function.createDelegate(this, this._onModalMouseWheel$p$1);
    this.$$d__onModalClick$p$1 = Function.createDelegate(this, this._onModalClick$p$1);
    this.$$d__onModalPointerOut$p$1 = Function.createDelegate(this, this._onModalPointerOut$p$1);
    this.$$d__onModalPointerMove$p$1 = Function.createDelegate(this, this._onModalPointerMove$p$1);
    this.$$d__onModalPointerUp$p$1 = Function.createDelegate(this, this._onModalPointerUp$p$1);
    this.$$d__onModalPointerDown$p$1 = Function.createDelegate(this, this._onModalPointerDown$p$1);
    this.$$d__onModalWithCaptureMouseWheel$p$1 = Function.createDelegate(this, this._onModalWithCaptureMouseWheel$p$1);
    this.$$d__onModalWithCaptureClick$p$1 = Function.createDelegate(this, this._onModalWithCaptureClick$p$1);
    this.$$d__onModalWithCapturePointerOut$p$1 = Function.createDelegate(this, this._onModalWithCapturePointerOut$p$1);
    this.$$d__onModalWithCapturePointerMove$p$1 = Function.createDelegate(this, this._onModalWithCapturePointerMove$p$1);
    this.$$d__onModalWithCapturePointerUp$p$1 = Function.createDelegate(this, this._onModalWithCapturePointerUp$p$1);
    this.$$d__onModalWithCapturePointerDown$p$1 = Function.createDelegate(this, this._onModalWithCapturePointerDown$p$1);
    this.$$d__closePendingMenuStack$p$1 = Function.createDelegate(this, this._closePendingMenuStack$p$1);
    this.$$d_onResize = Function.createDelegate(this, this.onResize);
    this._pendingCloseMenuStackTimeoutId$1 = -1;
    this._pendingCloseMenuStackLauncherIndex$1 = -1;
    CommandUI.Root.initializeBase(this, [ null, id, null, null, null, true, true ]);
    this.initRootMember(this);
    this._properties$1 = properties;
    this._controls$1 = {};
    this._unique$1 = 0;
    this._rootManager$1 = rootManager || CommandUI.RootManager.get_instance();
    this._resizableContainer$1 = resizableContainer;
    if (this._resizableContainer$1) {
        this._resizableContainer$1.add_onResize(this.$$d_onResize);
    }
    if (!CommandUI.ScriptUtility.isNullOrUndefined(properties.TextDirection)) {
        this._textDirection = (properties.TextDirection.toLowerCase() === 'rtl') ? 1 : 0;
    }
    this._rootManager$1.addRoot(this);
    this._rootPoller$1 = new CommandUI._rootPoller();
}
CommandUI.Root.add_onSQMEventHandler = function CommandUI_Root$add_onSQMEventHandler$st(value) {
    CommandUI.Root._SQMEventSource.addHandler(CommandUI.Root._sqmEventName$p, value);
}
CommandUI.Root.remove_onSQMEventHandler = function CommandUI_Root$remove_onSQMEventHandler$st(value) {
    CommandUI.Root._SQMEventSource.removeHandler(CommandUI.Root._sqmEventName$p, value);
}
CommandUI.Root.raiseSQMEvent = function CommandUI_Root$raiseSQMEvent$st(eventArgs) {
    var SqmCommandEventSourceEnabled = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('SqmCommandEventSourceEnabled');
    if (SqmCommandEventSourceEnabled) {
        CommandUI.Root._SQMEventSource.raiseEvent(CommandUI.Root._sqmEventName$p, eventArgs, null);
    }
}
CommandUI.Root.prototype = {
    _controls$1: null,
    _unique$1: 0,
    _textDirection: 0,
    _isStaticUiTouchMode: false,
    _isSingleRowLayoutRibbon: false,
    _launchMenusUp: false,
    _rootManager$1: null,
    _rootPoller$1: null,
    _resizableContainer$1: null,
    hiddenLabel: null,
    
    get_rootManager: function CommandUI_Root$get_rootManager$in() {
        return this._rootManager$1;
    },
    
    _clientID$1: null,
    
    get__clientID$i$1: function CommandUI_Root$get__clientID$i$1$in() {
        return this._clientID$1;
    },
    
    set__clientID$i$1: function CommandUI_Root$set__clientID$i$1$in(value) {
        this._clientID$1 = value;
        return value;
    },
    
    _initializing$1: true,
    
    get_initializing: function CommandUI_Root$get_initializing$in() {
        return this._initializing$1;
    },
    
    get_supportsInvisibleControls: function CommandUI_Root$get_supportsInvisibleControls$in() {
        return false;
    },
    
    get_supportsDynamicDisplayMode: function CommandUI_Root$get_supportsDynamicDisplayMode$in() {
        return false;
    },
    
    get_isStaticUiTouchMode: function CommandUI_Root$get_isStaticUiTouchMode$in() {
        return this._isStaticUiTouchMode || this.get_touchModeForcedOn();
    },
    
    set_isStaticUiTouchMode: function CommandUI_Root$set_isStaticUiTouchMode$in(value) {
        this._isStaticUiTouchMode = value;
        return value;
    },
    
    get__isSingleRowLayoutRibbon$i$1: function CommandUI_Root$get__isSingleRowLayoutRibbon$i$1$in() {
        return this._isSingleRowLayoutRibbon;
    },
    
    set__isSingleRowLayoutRibbon$i$1: function CommandUI_Root$set__isSingleRowLayoutRibbon$i$1$in(value) {
        this._isSingleRowLayoutRibbon = value;
        return value;
    },
    
    get_touchModeForcedOn: function CommandUI_Root$get_touchModeForcedOn$in() {
        return Common.BrowserUtils.get_isIPad() || Common.AFrameworkApplication.forceTouchRibbon;
    },
    
    get__launchMenusUp$i$1: function CommandUI_Root$get__launchMenusUp$i$1$in() {
        return this._launchMenusUp;
    },
    
    get_controls: function CommandUI_Root$get_controls$in() {
        return this._controls$1;
    },
    
    _$$pf_SupportsEmphasizedControls$p$1: false,
    
    get__supportsEmphasizedControls$i$1: function CommandUI_Root$get__supportsEmphasizedControls$i$1$in() {
        return this._$$pf_SupportsEmphasizedControls$p$1;
    },
    
    set__supportsEmphasizedControls$i$1: function CommandUI_Root$set__supportsEmphasizedControls$i$1$in(value) {
        this._$$pf_SupportsEmphasizedControls$p$1 = value;
        return value;
    },
    
    _$$pf_ControlWithFocus$p$1: null,
    
    get_controlWithFocus: function CommandUI_Root$get_controlWithFocus$in() {
        return this._$$pf_ControlWithFocus$p$1;
    },
    
    set_controlWithFocus: function CommandUI_Root$set_controlWithFocus$in(value) {
        this._$$pf_ControlWithFocus$p$1 = value;
        return value;
    },
    
    _$$pf_ControlIdPrefix$p$1: '',
    
    get_controlIdPrefix: function CommandUI_Root$get_controlIdPrefix$in() {
        return this._$$pf_ControlIdPrefix$p$1;
    },
    
    set_controlIdPrefix: function CommandUI_Root$set_controlIdPrefix$in(value) {
        this._$$pf_ControlIdPrefix$p$1 = value;
        return value;
    },
    
    _$$pf_ActiveControl$p$1: null,
    
    get_activeControl: function CommandUI_Root$get_activeControl$in() {
        return this._$$pf_ActiveControl$p$1;
    },
    
    set_activeControl: function CommandUI_Root$set_activeControl$in(value) {
        this._$$pf_ActiveControl$p$1 = value;
        return value;
    },
    
    _$$pf_ShouldHandleElementResize$p$1: false,
    
    get_shouldHandleElementResize: function CommandUI_Root$get_shouldHandleElementResize$in() {
        return this._$$pf_ShouldHandleElementResize$p$1;
    },
    
    set_shouldHandleElementResize: function CommandUI_Root$set_shouldHandleElementResize$in(value) {
        this._$$pf_ShouldHandleElementResize$p$1 = value;
        return value;
    },
    
    ensureBehaviorAttached: function CommandUI_Root$ensureBehaviorAttached$in() {
        CommandUI.Component.prototype.ensureBehaviorAttached.call(this);
        this.pollForStateAndUpdate();
    },
    
    menuPositioningInfo: null,
    
    _registerControl$i$1: function CommandUI_Root$_registerControl$i$1$in(control) {
        if ((control.get_id()) in this._controls$1) {
            Common.Debug.log(String.format('Duplicate control ID \'{0}\' in root type \'{1}\'.', control.get_id(), Common.UILocation.toString(this.get_rootType())), 'Ribbon', 0);
        }
        this._controls$1[control.get_id()] = control;
    },
    
    getControlById: function CommandUI_Root$getControlById$in(id) {
        return this._controls$1[id];
    },
    
    getValidControl: function CommandUI_Root$getValidControl$in(controlId) {
        var control = this.getControlById(controlId);
        if (!this._disposed$1 && control && !control.get_disposed() && !this.get_builder()._isIdTrimmed$i$0(controlId)) {
            return control;
        }
        return null;
    },
    
    refreshInternal: function CommandUI_Root$refreshInternal$in() {
        CommandUI.Component.prototype.refreshInternal.call(this);
        this._initializing$1 = false;
    },
    
    ensureDOMElement: function CommandUI_Root$ensureDOMElement$in() {
        CommandUI.Component.prototype.ensureDOMElement.call(this);
        if (this.get_textDirection() === 1) {
            CommandUI.Utility.ensureCSSClassOnElement(this.get_elementInternal(), 'cui-rtl');
        }
        this._ensureHiddenLabel$p$1();
        this.set_shouldHandleElementResize(true);
    },
    
    _ensureHiddenLabel$p$1: function CommandUI_Root$_ensureHiddenLabel$p$1$in() {
        if (this.get_properties().LabelText && !this.hiddenLabel) {
            this.hiddenLabel = Common.AccessibilityUtils.appendHiddenLabel(this.get_element(), this.get_id() + '-label', this.get_properties().LabelText);
        }
    },
    
    refresh: function CommandUI_Root$refresh$in() {
        this.refreshInternal();
    },
    
    refreshOpenMenu: function CommandUI_Root$refreshOpenMenu$in(menuId) {
        for (var i = 0; i < this.get_menuStackDepth(); i++) {
            var menuLauncher = this.get_menuLauncherStack()[i];
            if (menuLauncher.get_id() === menuId) {
                menuLauncher.refreshMenu();
                return true;
            }
        }
        return false;
    },
    
    updateControl: function CommandUI_Root$updateControl$in(controlId) {
        if ((controlId) in this._controls$1) {
            (this._controls$1[controlId])._pollForStateAndUpdate$i$0();
        }
    },
    
    commitAnyPendingChange: function CommandUI_Root$commitAnyPendingChange$in() {
        if (this.get_controlWithFocus()) {
            this.get_controlWithFocus()._commitPendingChange$i$0();
        }
    },
    
    _$$pf_NeedScaling$p$1: false,
    
    get_needScaling: function CommandUI_Root$get_needScaling$in() {
        return this._$$pf_NeedScaling$p$1;
    },
    
    set_needScaling: function CommandUI_Root$set_needScaling$in(value) {
        this._$$pf_NeedScaling$p$1 = value;
        return value;
    },
    
    _$$pf_NeedRefresh$p$1: false,
    
    get_needRefresh: function CommandUI_Root$get_needRefresh$in() {
        return this._$$pf_NeedRefresh$p$1;
    },
    
    set_needRefresh: function CommandUI_Root$set_needRefresh$in(value) {
        this._$$pf_NeedRefresh$p$1 = value;
        return value;
    },
    
    _rootUser$1: null,
    
    get_rootUser: function CommandUI_Root$get_rootUser$in() {
        return this._rootUser$1;
    },
    
    set_rootUser: function CommandUI_Root$set_rootUser$in(value) {
        this._rootUser$1 = value;
        return value;
    },
    
    _builder$1: null,
    
    get_builder: function CommandUI_Root$get_builder$in() {
        return this._builder$1;
    },
    
    set_builder: function CommandUI_Root$set_builder$in(value) {
        this._builder$1 = value;
        return value;
    },
    
    get_pollForState: function CommandUI_Root$get_pollForState$in() {
        return !CommandUI.ScriptUtility.isNullOrUndefined(this._rootUser$1);
    },
    
    pollForCommandState: function CommandUI_Root$pollForCommandState$in(commandName, queryCommandId, properties, inputMethod) {
        return this._rootPoller$1.pollForCommandState(this._rootUser$1, this.get_rootType(), commandName, queryCommandId, properties, inputMethod);
    },
    
    pollForStateAndUpdate: function CommandUI_Root$pollForStateAndUpdate$in() {
        this.pollForStateAndUpdateInternal();
    },
    
    pollForStateAndUpdateInternal: function CommandUI_Root$pollForStateAndUpdateInternal$in() {
        this.set__lastPollTime$i$0(new Date());
        CommandUI.Component.prototype.pollForStateAndUpdateInternal.call(this);
        this.ensureGlobalDisablingRemoved();
    },
    
    ensureGlobalDisablingRemoved: function CommandUI_Root$ensureGlobalDisablingRemoved$in() {
        CommandUI.Utility.setEnabledOnElement(this.get_elementInternal(), true, false, false);
    },
    
    get_element: function CommandUI_Root$get_element$in() {
        return this.get_elementInternal();
    },
    
    get_cssClass: function CommandUI_Root$get_cssClass$in() {
        return 'cui-disabled';
    },
    
    get_textDirection: function CommandUI_Root$get_textDirection$in() {
        return this._textDirection;
    },
    
    getUniqueNumber: function CommandUI_Root$getUniqueNumber$in() {
        return this._unique$1++;
    },
    
    _createMenuSection$i$1: function CommandUI_Root$_createMenuSection$i$1$in(id, title, description, properties, menu) {
        return new CommandUI.MenuSection(this, id, title, description, properties, menu);
    },
    
    _createMenu$i$1: function CommandUI_Root$_createMenu$i$1$in(id, title, description, maxWidth, isComboboxListbox, horizontalAlignment) {
        return new CommandUI.Menu(this, id, title, description, maxWidth, this._rootManager$1, isComboboxListbox, horizontalAlignment);
    },
    
    _createGallery$i$1: function CommandUI_Root$_createGallery$i$1$in(id, title, description, properties) {
        return new CommandUI._gallery(this, id, title, description, properties);
    },
    
    _createControlComponent$i$1: function CommandUI_Root$_createControlComponent$i$1$in(id, displayMode, control) {
        return new CommandUI.ControlComponent(this, id, displayMode, control);
    },
    
    createMenuItem: function CommandUI_Root$createMenuItem$in(id, displayMode, control) {
        return new CommandUI.MenuItem(this, id, displayMode, control);
    },
    
    _events$1: null,
    
    get__events$p$1: function CommandUI_Root$get__events$p$1$in() {
        if (!this._events$1) {
            this._events$1 = new Sys.EventHandlerList();
        }
        return this._events$1;
    },
    
    executeCommand: function CommandUI_Root$executeCommand$in(name, parameters, source, inputMethod, closeAllMenus, actionResultCallback, telemetryParameters) {
        this._notifyMenuLaunchersCommandExecuted$p$1(source, closeAllMenus);
        if (closeAllMenus) {
            if (CommandUI.IFloatie.isInstanceOfType(this) && (CommandUI.ControlComponent.isInstanceOfType(source))) {
                if ((source).get_control().isMemberOfContextMenuDropDown() || (source).get_control().get__isDefinitive$i$0()) {
                    this.dismissAllTransientUI();
                }
            }
            this.closeAllMenus();
            if ((CommandUI.Ribbon.isInstanceOfType(this)) && (CommandUI.ControlComponent.isInstanceOfType(source))) {
                if ((source).get_control().get__isDefinitive$i$0()) {
                    (this).dismissTabPopup(true, true);
                }
            }
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._rootUser$1)) {
            var sqmInfo = new Common.CommandSqmInfo();
            sqmInfo.CommandLocation = this.get_rootType();
            sqmInfo.InvocationMethod = inputMethod;
            var comp = source;
            while (!CommandUI.ScriptUtility.isNullOrUndefined(comp)) {
                if (CommandUI._tab.isInstanceOfType(comp)) {
                    sqmInfo.CommandTabName = comp.get_id();
                    break;
                }
                comp = comp.get_parent();
            }
            if (parameters && CommandUI.ControlComponent.isInstanceOfType(source)) {
                var control = (source).get_control();
                if (control) {
                    if (!parameters['ParentMenuId'] && control.get_stateProperties() && control.get_stateProperties()['ParentMenuId']) {
                        parameters['ParentMenuId'] = control.get_stateProperties()['ParentMenuId'];
                    }
                    if (!parameters['SqmControlId'] && !parameters['SourceControlId'] && control.get_controlProperties() && control.get_controlProperties().Id) {
                        parameters['SqmControlId'] = control.get_controlProperties().Id;
                    }
                }
            }
            Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrEmptyString(name), 2131137);
            this._rootUser$1.executeRootCommand(name, parameters, sqmInfo, actionResultCallback, telemetryParameters);
        }
    },
    
    _notifyMenuLaunchersCommandExecuted$p$1: function CommandUI_Root$_notifyMenuLaunchersCommandExecuted$p$1$in(source, closeAllMenus) {
        if (!this.get_menuLauncherStack() || !this.get_menuLauncherStack().length || !(CommandUI.ControlComponent.isInstanceOfType(source))) {
            return;
        }
        var controlComponent = source;
        if (!controlComponent.isMenuItem()) {
            return;
        }
        for (var i = 0; i < this.get_menuLauncherStack().length; i++) {
            this.get_menuLauncherStack()[i].notifyCommandExecuted(source, closeAllMenus);
        }
    },
    
    _menuLauncherStack$1: null,
    
    get_menuLauncherStack: function CommandUI_Root$get_menuLauncherStack$in() {
        return this._menuLauncherStack$1;
    },
    
    set_menuLauncherStack: function CommandUI_Root$set_menuLauncherStack$in(value) {
        this._menuLauncherStack$1 = value;
        return value;
    },
    
    get_menuStackDepth: function CommandUI_Root$get_menuStackDepth$in() {
        var menuLauncherStack = this.get_menuLauncherStack();
        return (CommandUI.ScriptUtility.isNullOrUndefined(menuLauncherStack)) ? 0 : menuLauncherStack.length;
    },
    
    addMenuLauncherToStack: function CommandUI_Root$addMenuLauncherToStack$in(ml) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_menuLauncherStack())) {
            this.set_menuLauncherStack([]);
        }
        Array.add(this.get_menuLauncherStack(), ml);
    },
    
    closeAllMenus: function CommandUI_Root$closeAllMenus$in() {
        return this.closeMenuStackAtIndex(0, true, true);
    },
    
    _closeMenuStack$i$1: function CommandUI_Root$_closeMenuStack$i$1$in(par) {
        this.closeMenuStackAtIndex(Array.indexOf(this.get_menuLauncherStack(), par), true, true);
    },
    
    _closeInProgress$1: false,
    
    closeMenuStackAtIndex: function CommandUI_Root$closeMenuStackAtIndex$in(menuLauncherIndex, immediate, exitKeytips) {
        var menuClosed = false;
        this.cancelPendingCloseMenuStack();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_menuLauncherStack())) {
            if (immediate) {
                if (!this._closeInProgress$1) {
                    this._closeInProgress$1 = true;
                    for (var i = this.get_menuLauncherStack().length - 1; i >= menuLauncherIndex; i--) {
                        this.get_menuLauncherStack()[i]._closeMenu$i$1(exitKeytips);
                        Array.removeAt(this.get_menuLauncherStack(), i);
                        menuClosed = true;
                        if (!i) {
                            this._onMenuStackCleared$i$1();
                        }
                    }
                    this._closeInProgress$1 = false;
                }
            }
            else {
                this._pendingCloseMenuStackLauncherIndex$1 = menuLauncherIndex;
                this._pendingCloseMenuStackTimeoutId$1 = window.setTimeout(this.$$d__closePendingMenuStack$p$1, CommandUI.Root._closeMenuStackDelay$p);
            }
        }
        return menuClosed;
    },
    
    clearMenuStack: function CommandUI_Root$clearMenuStack$in(launcher) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_menuLauncherStack())) {
            return;
        }
        while (this.get_menuLauncherStack().length > 0) {
            var lastIndex = this.get_menuLauncherStack().length - 1;
            var current = this.get_menuLauncherStack()[lastIndex];
            Array.removeAt(this.get_menuLauncherStack(), lastIndex);
            if (!this.get_menuLauncherStack().length) {
                this.endModal(launcher, false, false);
            }
            if (current === launcher) {
                return;
            }
            current._closeMenu$i$1(true);
        }
        Common.Debug.assertNotReachedTag(4023578);
    },
    
    _closePendingMenuStack$p$1: function CommandUI_Root$_closePendingMenuStack$p$1$in() {
        this.closeMenuStackAtIndex(this._pendingCloseMenuStackLauncherIndex$1, true, true);
    },
    
    cancelPendingCloseMenuStack: function CommandUI_Root$cancelPendingCloseMenuStack$in() {
        if (this) {
            var $$t_0;
            CommandUI.Utility.cancelPendingTimeout(($$t_0 = {'val': this._pendingCloseMenuStackTimeoutId$1})), this._pendingCloseMenuStackTimeoutId$1 = $$t_0.val;
        }
    },
    
    _onMenuStackCleared$i$1: function CommandUI_Root$_onMenuStackCleared$i$1$in() {
    },
    
    _elmModalDiv$1: null,
    _modalControllerStack$1: null,
    _modalWithCaptureControllerStack$1: null,
    _currentModalController$1: null,
    _currentModalWithCaptureController$1: null,
    _inBlockingMode$1: false,
    
    beginModal: function CommandUI_Root$beginModal$in(controller, takeFocus, isBlocking) {
        var alreadyInModalMode = this.get_inModalMode();
        var modalDiv = this.get_modalDiv();
        if (alreadyInModalMode && this._inBlockingMode$1) {
            return;
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._modalControllerStack$1)) {
            this._modalControllerStack$1 = [];
        }
        Array.add(this._modalControllerStack$1, controller);
        this._currentModalController$1 = controller;
        if (isBlocking && !this._inBlockingMode$1) {
            this._inBlockingMode$1 = true;
        }
        if (!alreadyInModalMode) {
            modalDiv.style.visibility = 'hidden';
            modalDiv.style.display = 'block';
            modalDiv.style.visibility = 'visible';
        }
        Common.AFrameworkApplication.get_activeFrame().beginModal(takeFocus);
        modalDiv.style.zIndex = Common.AFrameworkApplication.get_activeFrame().get_activeModalDivZIndex();
    },
    
    beginModalWithCapture: function CommandUI_Root$beginModalWithCapture$in(controller, takeFocus) {
        Diag.ULS.sendTraceTag(20308505, 207, 50, 'Begin Light Dismiss Modal using Capture');
        var alreadyInModalWithCaptureMode = this.get_inModalWithCaptureMode();
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._modalWithCaptureControllerStack$1)) {
            this._modalWithCaptureControllerStack$1 = [];
        }
        Array.add(this._modalWithCaptureControllerStack$1, controller);
        this._currentModalWithCaptureController$1 = controller;
        if (!alreadyInModalWithCaptureMode) {
            Common.PointerInputManager.get_instance().registerHandlerWithCaptureOption(Common.EventNames.pointerDown, window.document.body, this.$$d__onModalWithCapturePointerDown$p$1, true);
            Common.PointerInputManager.get_instance().registerHandlerWithCaptureOption(Common.EventNames.pointerUp, window.document.body, this.$$d__onModalWithCapturePointerUp$p$1, true);
            Common.PointerInputManager.get_instance().registerHandlerWithCaptureOption(Common.EventNames.pointerMove, window.document.body, this.$$d__onModalWithCapturePointerMove$p$1, true);
            Common.PointerInputManager.get_instance().registerHandlerWithCaptureOption(Common.EventNames.pointerOut, window.document.body, this.$$d__onModalWithCapturePointerOut$p$1, true);
            Common.ClickInputManager.get_instance().registerHandlerWithCaptureOption(Common.EventNames.click, window.document.body, this.$$d__onModalWithCaptureClick$p$1, null, false, true);
            Common.MouseInputManager.get_instance().registerHandlerWithCaptureOption(Common.EventNames.get_mouseWheel(), window.document.body, this.$$d__onModalWithCaptureMouseWheel$p$1, null, true);
        }
        Common.AFrameworkApplication.get_activeFrame().beginModal(takeFocus);
    },
    
    get_inModalMode: function CommandUI_Root$get_inModalMode$in() {
        return !CommandUI.ScriptUtility.isNullOrUndefined(this._modalControllerStack$1) && (this._modalControllerStack$1.length > 0);
    },
    
    get_inModalWithCaptureMode: function CommandUI_Root$get_inModalWithCaptureMode$in() {
        return !CommandUI.ScriptUtility.isNullOrUndefined(this._modalWithCaptureControllerStack$1) && (this._modalWithCaptureControllerStack$1.length > 0);
    },
    
    isCurrentModalController: function CommandUI_Root$isCurrentModalController$in(controller) {
        return controller === this._currentModalController$1;
    },
    
    endModal: function CommandUI_Root$endModal$in(controller, loseFocus, endBlocking) {
        if (!this.isCurrentModalController(controller)) {
            return;
        }
        if (!this.get_inModalMode()) {
            throw Error.create('Cannot end modal mode because the Ribbon is not in Modal Mode');
        }
        if (this._inBlockingMode$1 && !endBlocking) {
            return;
        }
        if (endBlocking) {
            this._inBlockingMode$1 = false;
        }
        Array.removeAt(this._modalControllerStack$1, this._modalControllerStack$1.length - 1);
        this._currentModalController$1 = null;
        if (this._modalControllerStack$1.length > 0) {
            this._currentModalController$1 = this._modalControllerStack$1[this._modalControllerStack$1.length - 1];
        }
        Common.AFrameworkApplication.get_activeFrame().endModal(loseFocus);
        this.get_modalDiv().style.zIndex = Common.AFrameworkApplication.get_activeFrame().get_activeModalDivZIndex();
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._currentModalController$1)) {
            this.get_modalDiv().style.display = 'none';
        }
    },
    
    endModalWithCapture: function CommandUI_Root$endModalWithCapture$in(controller, loseFocus) {
        Diag.ULS.sendTraceTag(20308506, 207, 50, 'End Light Dismiss Modal using Capture');
        if (controller !== this._currentModalWithCaptureController$1) {
            return;
        }
        if (!this.get_inModalWithCaptureMode()) {
            throw Error.create('Cannot end modal mode because the Control is not in Modal Mode');
        }
        Array.removeAt(this._modalWithCaptureControllerStack$1, this._modalWithCaptureControllerStack$1.length - 1);
        this._currentModalWithCaptureController$1 = null;
        if (this._modalWithCaptureControllerStack$1.length > 0) {
            this._currentModalWithCaptureController$1 = this._modalWithCaptureControllerStack$1[this._modalWithCaptureControllerStack$1.length - 1];
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._currentModalWithCaptureController$1)) {
            Common.PointerInputManager.get_instance().unregisterHandlerWithCaptureOption(Common.EventNames.pointerDown, window.document.body, this.$$d__onModalWithCapturePointerDown$p$1, true);
            Common.PointerInputManager.get_instance().unregisterHandlerWithCaptureOption(Common.EventNames.pointerUp, window.document.body, this.$$d__onModalWithCapturePointerUp$p$1, true);
            Common.PointerInputManager.get_instance().unregisterHandlerWithCaptureOption(Common.EventNames.pointerMove, window.document.body, this.$$d__onModalWithCapturePointerMove$p$1, true);
            Common.PointerInputManager.get_instance().unregisterHandlerWithCaptureOption(Common.EventNames.pointerOut, window.document.body, this.$$d__onModalWithCapturePointerOut$p$1, true);
            Common.ClickInputManager.get_instance().unregisterHandlerWithCaptureOption(Common.EventNames.click, window.document.body, this.$$d__onModalWithCaptureClick$p$1, false, true);
            Common.MouseInputManager.get_instance().unregisterHandlerWithCaptureOption(Common.EventNames.get_mouseWheel(), window.document.body, this.$$d__onModalWithCaptureMouseWheel$p$1, true);
        }
        Common.AFrameworkApplication.get_activeFrame().endModal(loseFocus);
    },
    
    endBlockingModeKeepModal: function CommandUI_Root$endBlockingModeKeepModal$in() {
        this._inBlockingMode$1 = false;
    },
    
    get_modalDiv: function CommandUI_Root$get_modalDiv$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmModalDiv$1)) {
            this._elmModalDiv$1 = CommandUI.Utility.createElement('div');
            this._elmModalDiv$1.setAttribute('id', CommandUI.Root._modalDivId$p);
            CommandUI.Utility.ensureCSSClassOnElement(this._elmModalDiv$1, 'cui-modalDiv');
            CommandUI.Utility._setUnselectable$i(this._elmModalDiv$1, true, false);
            document.body.appendChild(this._elmModalDiv$1);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, this._elmModalDiv$1, this.$$d__onModalPointerDown$p$1);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerUp, this._elmModalDiv$1, this.$$d__onModalPointerUp$p$1);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerMove, this._elmModalDiv$1, this.$$d__onModalPointerMove$p$1);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOut, this._elmModalDiv$1, this.$$d__onModalPointerOut$p$1);
            Common.ClickInputManager.get_instance().registerHandler(Common.EventNames.click, this._elmModalDiv$1, this.$$d__onModalClick$p$1);
            Common.MouseInputManager.get_instance().registerHandler(Common.EventNames.get_mouseWheel(), this._elmModalDiv$1, this.$$d__onModalMouseWheel$p$1);
        }
        return this._elmModalDiv$1;
    },
    
    _onModalPointerDown$p$1: function CommandUI_Root$_onModalPointerDown$p$1$in(args) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._currentModalController$1)) {
            return this._currentModalController$1.onModalBodyPointerDown(args);
        }
        return false;
    },
    
    _onModalPointerUp$p$1: function CommandUI_Root$_onModalPointerUp$p$1$in(args) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._currentModalController$1)) {
            return this._currentModalController$1.onModalBodyPointerUp(args);
        }
        return false;
    },
    
    _onModalPointerMove$p$1: function CommandUI_Root$_onModalPointerMove$p$1$in(args) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._currentModalController$1)) {
            return this._currentModalController$1.onModalBodyPointerMove(args);
        }
        return false;
    },
    
    _onModalPointerOut$p$1: function CommandUI_Root$_onModalPointerOut$p$1$in(args) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._currentModalController$1)) {
            return this._currentModalController$1.onModalBodyPointerOut(args);
        }
        return false;
    },
    
    _onModalClick$p$1: function CommandUI_Root$_onModalClick$p$1$in(args) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._currentModalController$1)) {
            return this._currentModalController$1.onModalBodyClick(args);
        }
        return false;
    },
    
    _onModalMouseWheel$p$1: function CommandUI_Root$_onModalMouseWheel$p$1$in(args) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._currentModalController$1)) {
            return this._currentModalController$1.onModalBodyMouseWheel(args);
        }
        return false;
    },
    
    _shouldHandleOnCapturePhase$p$1: function CommandUI_Root$_shouldHandleOnCapturePhase$p$1$in(currentElement, eventElement) {
        if (!Common.DomUtils.isDescendantOf(currentElement, eventElement) && !CommandUI.ScriptUtility.isNullOrUndefined(this._currentModalWithCaptureController$1) && CommandUI.ScriptUtility.isNullOrUndefined(this._currentModalController$1)) {
            return true;
        }
        return false;
    },
    
    _onModalWithCapturePointerDown$p$1: function CommandUI_Root$_onModalWithCapturePointerDown$p$1$in(args) {
        if (this._shouldHandleOnCapturePhase$p$1(this.get_element(), args.get_sourceElement())) {
            return this._currentModalWithCaptureController$1.onModalBodyPointerDown(args);
        }
        return false;
    },
    
    _onModalWithCapturePointerUp$p$1: function CommandUI_Root$_onModalWithCapturePointerUp$p$1$in(args) {
        if (this._shouldHandleOnCapturePhase$p$1(this.get_element(), args.get_sourceElement())) {
            return this._currentModalWithCaptureController$1.onModalBodyPointerUp(args);
        }
        return false;
    },
    
    _onModalWithCapturePointerMove$p$1: function CommandUI_Root$_onModalWithCapturePointerMove$p$1$in(args) {
        if (this._shouldHandleOnCapturePhase$p$1(this.get_element(), args.get_sourceElement())) {
            return this._currentModalWithCaptureController$1.onModalBodyPointerMove(args);
        }
        return false;
    },
    
    _onModalWithCapturePointerOut$p$1: function CommandUI_Root$_onModalWithCapturePointerOut$p$1$in(args) {
        if (this._shouldHandleOnCapturePhase$p$1(this.get_element(), args.get_sourceElement())) {
            return this._currentModalWithCaptureController$1.onModalBodyPointerOut(args);
        }
        return false;
    },
    
    _onModalWithCaptureClick$p$1: function CommandUI_Root$_onModalWithCaptureClick$p$1$in(args) {
        if (this._shouldHandleOnCapturePhase$p$1(this.get_element(), args.get_sourceElement())) {
            return this._currentModalWithCaptureController$1.onModalBodyClick(args);
        }
        return false;
    },
    
    _onModalWithCaptureMouseWheel$p$1: function CommandUI_Root$_onModalWithCaptureMouseWheel$p$1$in(args) {
        if (this._shouldHandleOnCapturePhase$p$1(this.get_element(), args.get_sourceElement())) {
            return this._currentModalWithCaptureController$1.onModalBodyMouseWheel(args);
        }
        return false;
    },
    
    dismissAllTransientUI: function CommandUI_Root$dismissAllTransientUI$in() {
        return this.closeAllMenus();
    },
    
    onResize: function CommandUI_Root$onResize$in() {
        if (!this.get_shouldHandleElementResize()) {
            return;
        }
        if (!Common.BrowserUtils.get_isAndroid()) {
            this.dismissAllTransientUI();
        }
    },
    
    dispose: function CommandUI_Root$dispose$in() {
        if (this._disposed$1) {
            return;
        }
        this._disposed$1 = true;
        var elementInternal = this.get_elementInternal();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(elementInternal)) {
            CommandUI.Utility.unregisterAllHandlers(elementInternal);
        }
        this.set_shouldHandleElementResize(false);
        if (this._resizableContainer$1) {
            this._resizableContainer$1.remove_onResize(this.$$d_onResize);
            this._resizableContainer$1 = null;
        }
        this.hiddenLabel = null;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._elmModalDiv$1)) {
            CommandUI.Utility.unregisterAllHandlers(this._elmModalDiv$1);
        }
        this._rootManager$1.removeRoot(this);
        this._elmModalDiv$1 = null;
        this._rootUser$1 = null;
        this._builder$1 = null;
        CommandUI.Component.prototype.dispose.call(this);
    },
    
    _disposed$1: false,
    
    get__disposed$i$1: function CommandUI_Root$get__disposed$i$1$in() {
        return this._disposed$1;
    },
    
    set__disposed$i$1: function CommandUI_Root$set__disposed$i$1$in(value) {
        this._disposed$1 = value;
        return value;
    },
    
    _cookieDataVersion$1: '',
    
    get_cookieDataVersion: function CommandUI_Root$get_cookieDataVersion$in() {
        return this._cookieDataVersion$1;
    },
    
    set_cookieDataVersion: function CommandUI_Root$set_cookieDataVersion$in(value) {
        this._cookieDataVersion$1 = value;
        return value;
    },
    
    _useDataCookie$1: false,
    
    get_useDataCookie: function CommandUI_Root$get_useDataCookie$in() {
        return this._useDataCookie$1;
    },
    
    set_useDataCookie: function CommandUI_Root$set_useDataCookie$in(value) {
        this._useDataCookie$1 = value;
        return value;
    },
    
    storeDataCookie: function CommandUI_Root$storeDataCookie$in(name, value) {
        name = this.get_cookieDataVersion() + name;
        Common.Cookie.setWithExpiration(name, value, 7);
    },
    
    getDataCookieValue: function CommandUI_Root$getDataCookieValue$in(name) {
        name = this.get_cookieDataVersion() + name;
        return Common.Cookie.get(name);
    },
    
    _properties$1: null,
    
    get_properties: function CommandUI_Root$get_properties$in() {
        return this._properties$1;
    },
    
    setFlyoutCoordinates: function CommandUI_Root$setFlyoutCoordinates$in(flyout, dimensions, flyoutDirection, launcherBounds) {
        return null;
    }
}


CommandUI.Root.SQMEventArgs = function CommandUI_Root_SQMEventArgs(controlId, legacyId, parentMenuId, command, timeStamp, sqmInfo) {
    CommandUI.Root.SQMEventArgs.initializeBase(this);
    this.set_controlId(controlId);
    this.set_legacyId(legacyId);
    this.set_parentMenuId(parentMenuId);
    this.set_control(command);
    this.set_time(timeStamp);
    this.set_sqmInfo(sqmInfo);
}
CommandUI.Root.SQMEventArgs.prototype = {
    _$$pf_ControlId$p$1: null,
    
    get_controlId: function CommandUI_Root_SQMEventArgs$get_controlId$in() {
        return this._$$pf_ControlId$p$1;
    },
    
    set_controlId: function CommandUI_Root_SQMEventArgs$set_controlId$in(value) {
        this._$$pf_ControlId$p$1 = value;
        return value;
    },
    
    _$$pf_LegacyId$p$1: null,
    
    get_legacyId: function CommandUI_Root_SQMEventArgs$get_legacyId$in() {
        return this._$$pf_LegacyId$p$1;
    },
    
    set_legacyId: function CommandUI_Root_SQMEventArgs$set_legacyId$in(value) {
        this._$$pf_LegacyId$p$1 = value;
        return value;
    },
    
    _$$pf_ParentMenuId$p$1: null,
    
    get_parentMenuId: function CommandUI_Root_SQMEventArgs$get_parentMenuId$in() {
        return this._$$pf_ParentMenuId$p$1;
    },
    
    set_parentMenuId: function CommandUI_Root_SQMEventArgs$set_parentMenuId$in(value) {
        this._$$pf_ParentMenuId$p$1 = value;
        return value;
    },
    
    _$$pf_Control$p$1: null,
    
    get_control: function CommandUI_Root_SQMEventArgs$get_control$in() {
        return this._$$pf_Control$p$1;
    },
    
    set_control: function CommandUI_Root_SQMEventArgs$set_control$in(value) {
        this._$$pf_Control$p$1 = value;
        return value;
    },
    
    _$$pf_Time$p$1: 0,
    
    get_time: function CommandUI_Root_SQMEventArgs$get_time$in() {
        return this._$$pf_Time$p$1;
    },
    
    set_time: function CommandUI_Root_SQMEventArgs$set_time$in(value) {
        this._$$pf_Time$p$1 = value;
        return value;
    },
    
    _$$pf_SqmInfo$p$1: null,
    
    get_sqmInfo: function CommandUI_Root_SQMEventArgs$get_sqmInfo$in() {
        return this._$$pf_SqmInfo$p$1;
    },
    
    set_sqmInfo: function CommandUI_Root_SQMEventArgs$set_sqmInfo$in(value) {
        this._$$pf_SqmInfo$p$1 = value;
        return value;
    }
}


CommandUI.RootManager = function CommandUI_RootManager() {
    this._roots$0 = [];
}
CommandUI.RootManager.get_instance = function CommandUI_RootManager$get_instance$st() {
    return CommandUI.RootManager._instance || CommandUI.RootManager._initializeRootManager$p();
}
CommandUI.RootManager._initializeRootManager$p = function CommandUI_RootManager$_initializeRootManager$p$st() {
    CommandUI.RootManager._initializeComponents$p();
    CommandUI.RootManager._instance = new CommandUI.RootManager();
    return CommandUI.RootManager._instance;
}
CommandUI.RootManager._initializeComponents$p = function CommandUI_RootManager$_initializeComponents$p$st() {
}
CommandUI.RootManager.prototype = {
    
    get_roots: function CommandUI_RootManager$get_roots$in() {
        return this._roots$0;
    },
    
    _$$pf_Ribbon$p$0: null,
    
    get_ribbon: function CommandUI_RootManager$get_ribbon$in() {
        return this._$$pf_Ribbon$p$0;
    },
    
    set_ribbon: function CommandUI_RootManager$set_ribbon$in(value) {
        this._$$pf_Ribbon$p$0 = value;
        return value;
    },
    
    get_inKeytipMode: function CommandUI_RootManager$get_inKeytipMode$in() {
        var inKeytipMode = false;
        inKeytipMode = !!this.get_ribbon() && this.get_ribbon().get_inKeytipMode();
        return inKeytipMode;
    },
    
    addRoot: function CommandUI_RootManager$addRoot$in(root) {
        if (root && !Array.contains(this._roots$0, root)) {
            Array.add(this._roots$0, root);
        }
        if (CommandUI.Ribbon.isInstanceOfType(root)) {
            Common.Debug.assertStringTag(!this.get_ribbon(), 'Multiple ribbons?', 5256329);
            this.set_ribbon(root);
        }
    },
    
    removeRoot: function CommandUI_RootManager$removeRoot$in(root) {
        var removed = Array.remove(this._roots$0, root);
        if (CommandUI.Ribbon.isInstanceOfType(root)) {
            this.set_ribbon(null);
        }
        return removed;
    },
    
    getFirstValidControl: function CommandUI_RootManager$getFirstValidControl$in(controlId) {
        for (var $$arr_1 = this.get_roots(), $$len_2 = $$arr_1.length, $$idx_3 = 0; $$idx_3 < $$len_2; ++$$idx_3) {
            var root = $$arr_1[$$idx_3];
            var cuiRoot = $$as(Common.ICUIRoot, root);
            if (!cuiRoot) {
                continue;
            }
            var controlIdToLookup = (!controlId.startsWith(cuiRoot.get_controlIdPrefix())) ? cuiRoot.get_controlIdPrefix() + controlId : controlId;
            var control = cuiRoot.getValidControl(controlIdToLookup);
            if (control) {
                return control;
            }
        }
        return null;
    },
    
    commitAnyPendingChange: function CommandUI_RootManager$commitAnyPendingChange$in() {
        for (var $$arr_0 = this._roots$0, $$len_1 = $$arr_0.length, $$idx_2 = 0; $$idx_2 < $$len_1; ++$$idx_2) {
            var root = $$arr_0[$$idx_2];
            root.commitAnyPendingChange();
        }
    },
    
    dispose: function CommandUI_RootManager$dispose$in() {
        this._roots$0 = null;
    }
}


CommandUI._rootPoller = function CommandUI__rootPoller() {
}
CommandUI._rootPoller.prototype = {
    
    pollForCommandState: function CommandUI__rootPoller$pollForCommandState$in(rootUser, rootType, commandName, queryCommandId, properties, inputMethod) {
        var result = 0;
        if (rootUser) {
            if (this.pollForEnabledDisabledControlState(rootUser, commandName, properties)) {
                result |= 1;
            }
            var commandSqmInfo = new Common.CommandSqmInfo();
            commandSqmInfo.CommandLocation = rootType;
            if (!isNullOrUndefined(inputMethod)) {
                commandSqmInfo.InvocationMethod = inputMethod;
            }
            if (!CommandUI.ScriptUtility.isNullOrUndefined(queryCommandId) && rootUser.executeRootCommand(queryCommandId, properties, commandSqmInfo, null, null)) {
                result |= 2;
            }
        }
        return result;
    },
    
    pollForEnabledDisabledControlState: function CommandUI__rootPoller$pollForEnabledDisabledControlState$in(rootUser, commandName, properties) {
        if (rootUser) {
            return rootUser.isRootCommandEnabled(commandName, properties);
        }
        return false;
    }
}


CommandUI.ScalableRoot = function CommandUI_ScalableRoot(id, properties, resizableContainer) {
    this._clientWidth = Common.DomUtils.getViewPortWidth();
    this._clientHeight = Common.DomUtils.getViewPortHeight();
    CommandUI.ScalableRoot.initializeBase(this, [ id, properties, null, resizableContainer ]);
    this._lastResizeWidthHeight = this._getClientWidthHeightString$p$2();
}
CommandUI.ScalableRoot.prototype = {
    _handlingResize$2: false,
    _lastResizeWidthHeight: null,
    
    get__lastResizeWidthHeight$i$2: function CommandUI_ScalableRoot$get__lastResizeWidthHeight$i$2$in() {
        return this._lastResizeWidthHeight;
    },
    
    _$$pf_AutoScale$p$2: true,
    
    get__autoScale$i$2: function CommandUI_ScalableRoot$get__autoScale$i$2$in() {
        return this._$$pf_AutoScale$p$2;
    },
    
    set__autoScale$i$2: function CommandUI_ScalableRoot$set__autoScale$i$2$in(value) {
        this._$$pf_AutoScale$p$2 = value;
        return value;
    },
    
    _scale$i$2: function CommandUI_ScalableRoot$_scale$i$2$in() {
        this._resetCachedClientDimensions$p$2();
        return true;
    },
    
    refresh: function CommandUI_ScalableRoot$refresh$in() {
        CommandUI.Root.prototype.refresh.call(this);
        this._scale$i$2();
    },
    
    _getClientWidthHeightString$p$2: function CommandUI_ScalableRoot$_getClientWidthHeightString$p$2$in() {
        if (!this.get_elementInternal()) {
            return '';
        }
        return this.get_elementInternal().clientWidth.toString() + this.get_elementInternal().clientHeight.toString();
    },
    
    _clientDimensionsChanged$p$2: function CommandUI_ScalableRoot$_clientDimensionsChanged$p$2$in() {
        return (this._clientWidth !== this.get_elementInternal().clientWidth) || (this._clientHeight !== this.get_elementInternal().clientHeight);
    },
    
    _resetCachedClientDimensions$p$2: function CommandUI_ScalableRoot$_resetCachedClientDimensions$p$2$in() {
        this._clientWidth = this.get_elementInternal().clientWidth;
        this._clientHeight = this.get_elementInternal().clientHeight;
    },
    
    onResize: function CommandUI_ScalableRoot$onResize$in() {
        if (!this.get_shouldHandleElementResize()) {
            return;
        }
        var newResizeWidthHeight = this._getClientWidthHeightString$p$2();
        if (this._lastResizeWidthHeight === newResizeWidthHeight) {
            return;
        }
        this._lastResizeWidthHeight = newResizeWidthHeight;
        if (!this._handlingResize$2 && this.get__autoScale$i$2() && this._clientDimensionsChanged$p$2()) {
            this._resetCachedClientDimensions$p$2();
            this._handlingResize$2 = true;
            CommandUI.Root.prototype.onResize.call(this);
            var scaled = this._scale$i$2();
            if (scaled) {
                this.pollForStateAndUpdate();
            }
            this._handlingResize$2 = false;
        }
    }
}


CommandUI._buttonDockProperties = function CommandUI__buttonDockProperties() {
    CommandUI._buttonDockProperties.initializeBase(this);
}
CommandUI._buttonDockProperties.prototype = {
    Alignment: null,
    ScalingDirection: null
}


CommandUI._buttonDock = function CommandUI__buttonDock(root, id, properties) {
    CommandUI._buttonDock.initializeBase(this, [ root, id, '', '', null, true, true ]);
    this._alignment$1 = properties.Alignment;
    this._dropFromStart$1 = properties.ScalingDirection === CommandUI.DataNodeWrapper.FIRSTTOLAST;
}
CommandUI._buttonDock.prototype = {
    _alignment$1: null,
    _dropFromStart$1: false,
    
    refreshInternal: function CommandUI__buttonDock$refreshInternal$in() {
        this.ensureDOMElementAndEmpty();
        this.appendChildrenToElement(this.get_elementInternal());
        CommandUI.Component.prototype.refreshInternal.call(this);
    },
    
    appendChildrenToElement: function CommandUI__buttonDock$appendChildrenToElement$in(elm) {
        var $$enum_2 = this.get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var child = $$enum_2.get_current();
            child.ensureDOMElement();
            switch (this._alignment$1) {
                case CommandUI.DataNodeWrapper.LEFTALIGN:
                    CommandUI.Utility.ensureCSSClassOnElement(child.get_elementInternal(), 'cui-toolbar-button-left');
                    break;
                case CommandUI.DataNodeWrapper.CENTERALIGN:
                    CommandUI.Utility.ensureCSSClassOnElement(child.get_elementInternal(), 'cui-toolbar-button-center');
                    break;
                case CommandUI.DataNodeWrapper.RIGHTALIGN:
                    CommandUI.Utility.ensureCSSClassOnElement(child.get_elementInternal(), 'cui-toolbar-button-right');
                    break;
                default:
                    throw Error.argumentOutOfRange(this._alignment$1);
            }
            if (child.get_visible()) {
                elm.appendChild(child.get_elementInternal());
            }
            child.ensureRefreshed();
        }
    },
    
    ensureCorrectChildType: function CommandUI__buttonDock$ensureCorrectChildType$in(child) {
        if (!CommandUI.ControlComponent.isInstanceOfType(child)) {
            throw Error.create('Only children of type ControlComponent can be added to a ButtonDock.');
        }
    },
    
    get_cssClass: function CommandUI__buttonDock$get_cssClass$in() {
        switch (this._alignment$1) {
            case CommandUI.DataNodeWrapper.LEFTALIGN:
                return 'cui-toolbar-buttondock alignleft';
            case CommandUI.DataNodeWrapper.CENTERALIGN:
                return 'cui-toolbar-buttondock aligncenter';
            case CommandUI.DataNodeWrapper.RIGHTALIGN:
                return 'cui-toolbar-buttondock alignright';
            default:
                throw Error.argumentOutOfRange(this._alignment$1);
        }
    },
    
    get_visibleInDOM: function CommandUI__buttonDock$get_visibleInDOM$in() {
        return true;
    },
    
    get_alignment: function CommandUI__buttonDock$get_alignment$in() {
        return this._alignment$1;
    },
    
    _getWidthPx$i$1: function CommandUI__buttonDock$_getWidthPx$i$1$in() {
        var width = 0;
        if (this.get_alignment() === CommandUI.DataNodeWrapper.CENTERALIGN) {
            var $$enum_2 = this.get_children().getEnumerator();
            while ($$enum_2.moveNext()) {
                var child = $$enum_2.get_current();
                var comp = child;
                if (comp.get_visible()) {
                    width += comp.get_elementInternal().offsetWidth;
                }
            }
        }
        else {
            width = this.get_elementInternal().offsetWidth;
        }
        return width;
    },
    
    _getStartPoint$i$1: function CommandUI__buttonDock$_getStartPoint$i$1$in() {
        var b = null;
        if (this.get_alignment() === CommandUI.DataNodeWrapper.CENTERALIGN) {
            var $$enum_2 = this.get_children().getEnumerator();
            while ($$enum_2.moveNext()) {
                var c = $$enum_2.get_current();
                if (c.get_visible()) {
                    b = Sys.UI.DomElement.getBounds(c.get_elementInternal());
                    break;
                }
            }
        }
        else {
            b = Sys.UI.DomElement.getBounds(this.get_elementInternal());
        }
        if (!b) {
            return 0;
        }
        return (!this.get_root().get_textDirection()) ? b.x : b.x + b.width;
    },
    
    _getEndPoint$i$1: function CommandUI__buttonDock$_getEndPoint$i$1$in() {
        var b = null;
        if (this.get_alignment() === CommandUI.DataNodeWrapper.CENTERALIGN) {
            if (this.get_children().get_count() > 0) {
                var le = this.get_children()._getEnumeratorAtPos$i$0(this.get_children().get_count() - 1);
                while (le.movePrevious()) {
                    var c = le.get_current();
                    if (c.get_visible()) {
                        b = Sys.UI.DomElement.getBounds(c.get_elementInternal());
                        break;
                    }
                }
            }
        }
        else {
            b = Sys.UI.DomElement.getBounds(this.get_elementInternal());
        }
        if (!b) {
            return 0;
        }
        return (!this.get_root().get_textDirection()) ? b.x + b.width : b.x;
    },
    
    _ensureNoChildrenScaledAway$i$1: function CommandUI__buttonDock$_ensureNoChildrenScaledAway$i$1$in() {
        var $$enum_1 = this.get_children().getEnumerator();
        while ($$enum_1.moveNext()) {
            var obj = $$enum_1.get_current();
            var c = obj;
            if (!(CommandUI.ControlComponent.isInstanceOfType(c)) || (c).get_control().get_visible()) {
                c.set_visible(true);
            }
        }
    },
    
    _scaleDownToFitSize$i$1: function CommandUI__buttonDock$_scaleDownToFitSize$i$1$in(pxWidth) {
        var childrenArray = this.get_children()._toArray$i$0();
        var childrenToHide = new CommandUI.List();
        var childIdx = (this._dropFromStart$1) ? 0 : childrenArray.length - 1;
        var childCount = this.get_children().get_count();
        var rootSupportsInvisibleControls = this.get_root().get_supportsInvisibleControls();
        while (this._getWidthPx$i$1() >= pxWidth) {
            if (childIdx >= childCount || childIdx < 0) {
                break;
            }
            var child = childrenArray[childIdx];
            if (rootSupportsInvisibleControls && CommandUI.ControlComponent.isInstanceOfType(child) && (child).get_control().get_visible()) {
                childrenToHide.add(child);
                child._applyHideElementOverride$i$0();
            }
            childIdx += (this._dropFromStart$1) ? 1 : -1;
        }
        var $$enum_8 = childrenToHide.getEnumerator();
        while ($$enum_8.moveNext()) {
            var child = $$enum_8.get_current();
            child._removeHideElementOverride$i$0();
            child.set_visible(false);
        }
    }
}


CommandUI.StatusBar = function CommandUI_StatusBar(id, properties, builder, resizableContainer, toolbarScalingOptimizationEnabled) {
    CommandUI.StatusBar.initializeBase(this, [ id, properties, builder, false, false, resizableContainer, toolbarScalingOptimizationEnabled ]);
    this._launchMenusUp = true;
}
CommandUI.StatusBar.get__statusBarClassName$i = function CommandUI_StatusBar$get__statusBarClassName$i$st() {
    var className = 'cui-statusbar';
    if (!(Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonVisualRefreshEnabled())) {
        className += ' UISmallFont UITextTranformUpperCase';
    }
    return className;
}
CommandUI.StatusBar.prototype = {
    
    get_rootType: function CommandUI_StatusBar$get_rootType$in() {
        return Common.UILocation.statusBar;
    },
    
    get_cssClass: function CommandUI_StatusBar$get_cssClass$in() {
        return CommandUI.StatusBar.get__statusBarClassName$i() + ' ' + CommandUI.Toolbar.prototype.get_cssClass.call(this);
    }
}


CommandUI.ToolbarProperties = function CommandUI_ToolbarProperties() {
    CommandUI.ToolbarProperties.initializeBase(this);
}
CommandUI.ToolbarProperties.prototype = {
    Scale: null,
    Size: null,
    Title: null
}


CommandUI.Toolbar = function CommandUI_Toolbar(id, properties, builder, isStaticUiTouchMode, supportsEmphasizedControls, resizableContainer, toolbarScalingOptimizationEnabled) {
    CommandUI.Toolbar.initializeBase(this, [ id, properties, resizableContainer ]);
    this._builder$3 = builder;
    this.set_isStaticUiTouchMode(isStaticUiTouchMode);
    this.set__supportsEmphasizedControls$i$1(supportsEmphasizedControls);
    this._toolbarSize$3 = 0;
    if (!CommandUI.ScriptUtility.isNullOrUndefined(properties.Size)) {
        if (properties.Size === CommandUI.DataNodeWrapper.ONEROW || (builder.get_options()).isOneRowToolbar) {
            this._toolbarSize$3 = 0;
        }
        else if (properties.Size === CommandUI.DataNodeWrapper.SINGLEDOCK) {
            this._toolbarSize$3 = CommandUI.ToolbarSize.singleDock;
        }
    }
    this._toolbarScalingOptimizationsEnabled$3 = toolbarScalingOptimizationEnabled;
}
CommandUI.Toolbar.prototype = {
    _builder$3: null,
    _startDock$3: null,
    _centerDock$3: null,
    _endDock$3: null,
    _multipleDocksOfSameType$3: false,
    _toolbarScalingOptimizationsEnabled$3: false,
    _toolbarSize$3: 0,
    
    get_supportsInvisibleControls: function CommandUI_Toolbar$get_supportsInvisibleControls$in() {
        return true;
    },
    
    addChild: function CommandUI_Toolbar$addChild$in(child) {
        CommandUI.Component.prototype.addChild.call(this, child);
        if (CommandUI._buttonDock.isInstanceOfType(child) && !this._multipleDocksOfSameType$3) {
            var buttonDock = child;
            if (buttonDock.get_alignment() === CommandUI.DataNodeWrapper.LEFTALIGN) {
                if (this._startDock$3) {
                    this._setMultipleDocksOfSameType$p$3();
                }
                this._startDock$3 = buttonDock;
            }
            else if (buttonDock.get_alignment() === CommandUI.DataNodeWrapper.CENTERALIGN) {
                if (this._centerDock$3) {
                    this._setMultipleDocksOfSameType$p$3();
                }
                this._centerDock$3 = buttonDock;
            }
            else if (buttonDock.get_alignment() === CommandUI.DataNodeWrapper.RIGHTALIGN) {
                if (this._endDock$3) {
                    this._setMultipleDocksOfSameType$p$3();
                }
                this._endDock$3 = buttonDock;
            }
        }
    },
    
    _setMultipleDocksOfSameType$p$3: function CommandUI_Toolbar$_setMultipleDocksOfSameType$p$3$in() {
        this._multipleDocksOfSameType$3 = true;
        this._startDock$3 = null;
        this._centerDock$3 = null;
        this._endDock$3 = null;
    },
    
    setControlVisibility: function CommandUI_Toolbar$setControlVisibility$in(controlId, visible, refresh) {
        var ctrl = this.getControlById(controlId);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(ctrl) && ctrl.get_visible() !== visible) {
            ctrl.set_visible(visible);
            if (refresh) {
                this.refresh();
            }
        }
    },
    
    refreshInternal: function CommandUI_Toolbar$refreshInternal$in() {
        CommandUI.Root.prototype.refreshInternal.call(this);
        this._refreshInternalCore$p$3(true);
    },
    
    _refreshInternalCore$p$3: function CommandUI_Toolbar$_refreshInternalCore$p$3$in(doFinalLayout) {
        var focusedControlBeforeRefresh = this.get_root().get_controlWithFocus();
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_elementInternal())) {
            this.createToolbarStructure();
        }
        this.set_elementInternal(CommandUI.Utility.removeChildNodes(this.get_elementInternal()));
        if (this.hiddenLabel) {
            this.get_elementInternal().appendChild(this.hiddenLabel);
        }
        var $$enum_3 = this.get_children().getEnumerator();
        while ($$enum_3.moveNext()) {
            var child = $$enum_3.get_current();
            if (child.get_visible()) {
                child.ensureDOMElement();
                this.get_elementInternal().appendChild(child.get_elementInternal());
                child.ensureRefreshed();
            }
        }
        if (this._centerDock$3 && doFinalLayout) {
            this._ensureCenterDockLayout$p$3();
        }
        if (focusedControlBeforeRefresh) {
            focusedControlBeforeRefresh.setFocusOnControl();
        }
        this.set_dirty(false);
    },
    
    _ensureCenterDockLayout$p$3: function CommandUI_Toolbar$_ensureCenterDockLayout$p$3$in() {
        Common.Debug.assertTag(!!this._centerDock$3, 2131200);
        if (!this._centerDock$3.get_visible() || !this._centerDock$3.get_children().get_count()) {
            return;
        }
        this._applyMarginsToCenterDock$p$3(0, 0);
        if (this._doesCenterDockCollide$p$3(this._startDock$3, this._centerDock$3, this._endDock$3)) {
            var startMargin = 0;
            var endMargin = 0;
            var startDockWidth = (!this._startDock$3) ? 0 : this._startDock$3._getWidthPx$i$1();
            var endDockWidth = (!this._endDock$3) ? 0 : this._endDock$3._getWidthPx$i$1();
            if (endDockWidth > 0 || startDockWidth > 0) {
                if (endDockWidth > startDockWidth) {
                    startMargin = 0;
                    endMargin = endDockWidth - startDockWidth;
                }
                else {
                    startMargin = startDockWidth - endDockWidth;
                    endMargin = 0;
                }
            }
            this._applyMarginsToCenterDock$p$3(startMargin, endMargin);
        }
    },
    
    _doesCenterDockCollide$p$3: function CommandUI_Toolbar$_doesCenterDockCollide$p$3$in(startDock, centerDock, endDock) {
        Common.Debug.assertTag(!!centerDock, 2131201);
        var centerDockCollides = false;
        if (!this.get_root().get_textDirection()) {
            if (startDock) {
                centerDockCollides = startDock._getEndPoint$i$1() > centerDock._getStartPoint$i$1();
            }
            if (!centerDockCollides && endDock) {
                centerDockCollides = centerDock._getEndPoint$i$1() > endDock._getStartPoint$i$1();
            }
        }
        else {
            if (startDock) {
                centerDockCollides = startDock._getEndPoint$i$1() < centerDock._getStartPoint$i$1();
            }
            if (!centerDockCollides && endDock) {
                centerDockCollides = centerDock._getEndPoint$i$1() < endDock._getStartPoint$i$1();
            }
        }
        return centerDockCollides;
    },
    
    _applyMarginsToCenterDock$p$3: function CommandUI_Toolbar$_applyMarginsToCenterDock$p$3$in(startMargin, endMargin) {
        Common.Debug.assertTag(!!this._centerDock$3, 2131202);
        if (!this.get_textDirection()) {
            this._centerDock$3.get_elementInternal().style.marginLeft = startMargin + 'px';
            this._centerDock$3.get_elementInternal().style.marginRight = endMargin + 'px';
        }
        else {
            this._centerDock$3.get_elementInternal().style.marginRight = startMargin + 'px';
            this._centerDock$3.get_elementInternal().style.marginLeft = endMargin + 'px';
        }
    },
    
    createToolbarStructure: function CommandUI_Toolbar$createToolbarStructure$in() {
        this.ensureDOMElement();
    },
    
    pollForStateAndUpdateInternal: function CommandUI_Toolbar$pollForStateAndUpdateInternal$in() {
        var $$t_0 = this;
        this._doPoll$p$3(function() {
            CommandUI.Root.prototype.pollForStateAndUpdateInternal.call($$t_0);
        });
    },
    
    pollForControlState: function CommandUI_Toolbar$pollForControlState$in(controlId) {
        var ctrl = this.getControlById(controlId);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(ctrl)) {
            this._doPoll$p$3(ctrl.$$d__pollForStateAndUpdate$i$0);
        }
    },
    
    _doPoll$p$3: function CommandUI_Toolbar$_doPoll$p$3$in(pollAction) {
        this.set_needScaling(false);
        this.set_needRefresh(false);
        pollAction();
        if (this.get_needScaling() || this.get_needRefresh()) {
            if (!this._toolbarScalingOptimizationsEnabled$3) {
                this.refresh();
            }
            this._scale$i$2();
        }
    },
    
    ensureCorrectChildType: function CommandUI_Toolbar$ensureCorrectChildType$in(child) {
        if (!(CommandUI._heroDock.isInstanceOfType(child)) && !(CommandUI._buttonDock.isInstanceOfType(child))) {
            throw Error.create('Only children of type ButtonDock and HeroDock can be added to a Toolbar');
        }
        if (CommandUI._buttonDock.isInstanceOfType(child)) {
            var dock = child;
            if (dock.get_alignment() === CommandUI.DataNodeWrapper.CENTERALIGN) {
                var $$enum_3 = this.get_children().getEnumerator();
                while ($$enum_3.moveNext()) {
                    var current = $$enum_3.get_current();
                    if (current.get_alignment() === CommandUI.DataNodeWrapper.CENTERALIGN) {
                        throw Error.create('Can\'t add a centered buttondock because one is already present.');
                    }
                }
            }
        }
    },
    
    get_cssClass: function CommandUI_Toolbar$get_cssClass$in() {
        var cssClassString = 'cui-toolbar-toolbar ';
        if (!this._toolbarSize$3) {
            cssClassString += 'cui-toolbar-onerow ';
            if (!(Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonVisualRefreshEnabled())) {
                cssClassString += 'UITextTranformUpperCase ';
            }
        }
        else if (this._toolbarSize$3 === CommandUI.ToolbarSize.singleDock) {
            cssClassString += 'cui-toolbar-singledock ';
        }
        return cssClassString + CommandUI.Root.prototype.get_cssClass.call(this);
    },
    
    get_domElementTagName: function CommandUI_Toolbar$get_domElementTagName$in() {
        return 'div';
    },
    
    get_rootType: function CommandUI_Toolbar$get_rootType$in() {
        return Common.UILocation.toolbar;
    },
    
    get__toolbarBuilder$i$3: function CommandUI_Toolbar$get__toolbarBuilder$i$3$in() {
        return this.get_builder();
    },
    
    set__toolbarBuilder$i$3: function CommandUI_Toolbar$set__toolbarBuilder$i$3$in(value) {
        this.set_builder(value);
        return value;
    },
    
    _createButtonDock$i$3: function CommandUI_Toolbar$_createButtonDock$i$3$in(data, buildContext) {
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var dock = new CommandUI._buttonDock(this.get_root(), properties.Id, properties);
        return dock;
    },
    
    ensureDOMElement: function CommandUI_Toolbar$ensureDOMElement$in() {
        CommandUI.Root.prototype.ensureDOMElement.call(this);
        this.get_elementInternal().setAttribute('role', 'toolbar');
        if ((this.get_properties()).Title) {
            this.get_elementInternal().setAttribute('title', (this.get_properties()).Title);
        }
    },
    
    updateOpenMenu: function CommandUI_Toolbar$updateOpenMenu$in(menuId) {
        if (this.get_root() && this.get_root().refreshOpenMenu(menuId)) {
            return true;
        }
        return false;
    },
    
    setFocusOnToolbar: function CommandUI_Toolbar$setFocusOnToolbar$in() {
        return this._setFocusOnFirstControl$i$0();
    },
    
    _scale$i$2: function CommandUI_Toolbar$_scale$i$2$in() {
        CommandUI.ScalableRoot.prototype._scale$i$2.call(this);
        var scaleSettingOn = CommandUI.Utility.isTrue((this.get_properties()).Scale);
        if (!scaleSettingOn) {
            return false;
        }
        if (this._multipleDocksOfSameType$3) {
            return false;
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._startDock$3)) {
            this._startDock$3.set_visible(true);
            this._startDock$3._ensureNoChildrenScaledAway$i$1();
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._centerDock$3)) {
            this._centerDock$3.set_visible(true);
            this._centerDock$3._ensureNoChildrenScaledAway$i$1();
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._endDock$3)) {
            this._endDock$3.set_visible(true);
            this._endDock$3._ensureNoChildrenScaledAway$i$1();
        }
        this._refreshInternalCore$p$3(false);
        var spaceForButtonDocks = this.get_elementInternal().offsetWidth;
        var startDockWidth = (CommandUI.ScriptUtility.isNullOrUndefined(this._startDock$3)) ? 0 : this._startDock$3._getWidthPx$i$1();
        var centerDockWidth = (CommandUI.ScriptUtility.isNullOrUndefined(this._centerDock$3)) ? 0 : this._centerDock$3._getWidthPx$i$1();
        var endDockWidth = (CommandUI.ScriptUtility.isNullOrUndefined(this._endDock$3)) ? 0 : this._endDock$3._getWidthPx$i$1();
        if (endDockWidth + centerDockWidth + startDockWidth >= spaceForButtonDocks) {
            if (endDockWidth + startDockWidth >= spaceForButtonDocks) {
                this._hideDockIfPresent$p$3(this._centerDock$3);
                if (endDockWidth >= spaceForButtonDocks) {
                    this._hideDockIfPresent$p$3(this._startDock$3);
                    this._scaleDockIfPresent$p$3(this._endDock$3, spaceForButtonDocks);
                }
                else {
                    this._scaleDockIfPresent$p$3(this._startDock$3, spaceForButtonDocks - endDockWidth);
                }
            }
            else {
                this._scaleDockIfPresent$p$3(this._centerDock$3, spaceForButtonDocks - endDockWidth - startDockWidth);
            }
        }
        this.set_needScaling(false);
        this.refreshInternal();
        return false;
    },
    
    _hideDockIfPresent$p$3: function CommandUI_Toolbar$_hideDockIfPresent$p$3$in(dock) {
        if (dock) {
            dock.set_visible(false);
        }
    },
    
    _scaleDockIfPresent$p$3: function CommandUI_Toolbar$_scaleDockIfPresent$p$3$in(dock, sizePx) {
        if (dock) {
            dock._scaleDownToFitSize$i$1(sizePx);
        }
    }
}


CommandUI._toolbarBuildContext = function CommandUI__toolbarBuildContext() {
    CommandUI._toolbarBuildContext.initializeBase(this);
}
CommandUI._toolbarBuildContext.prototype = {
    toolbar: null,
    isStatusBar: false
}


CommandUI.ToolbarBuildOptions = function CommandUI_ToolbarBuildOptions() {
    this.maxElementsBeforeOverflow = (Common.AFrameworkApplication.isMobileMode) ? 1 : CommandUI._heroDock.defaultHeroControlCount;
    CommandUI.ToolbarBuildOptions.initializeBase(this);
}
CommandUI.ToolbarBuildOptions.prototype = {
    staticUiTouchMode: false,
    isOneRowToolbar: false,
    supportsEmphasizedControls: false
}


CommandUI.ToolbarBuilder = function CommandUI_ToolbarBuilder(options, elmPlaceholder, rootBuildClient, resizableContainer) {
    this.$$d__onReturnToolbarData$p$1 = Function.createDelegate(this, this._onReturnToolbarData$p$1);
    CommandUI.ToolbarBuilder.initializeBase(this, [ options, elmPlaceholder, $$sc.Task.fromResult(Common.IRootBuildClient, rootBuildClient), resizableContainer ]);
    if (CommandUI.ScriptUtility.isNullOrUndefined(elmPlaceholder)) {
        throw Error.create('Toolbar placeholder DOM element is null or undefined.');
    }
}
CommandUI.ToolbarBuilder.prototype = {
    
    get_toolbar: function CommandUI_ToolbarBuilder$get_toolbar$in() {
        return this.get_root();
    },
    
    set_toolbar: function CommandUI_ToolbarBuilder$set_toolbar$in(value) {
        this.set_root(value);
        return value;
    },
    
    get__toolbarBuildOptions$p$1: function CommandUI_ToolbarBuilder$get__toolbarBuildOptions$p$1$in() {
        return this.get_options();
    },
    
    buildToolbar: function CommandUI_ToolbarBuilder$buildToolbar$in() {
        var context = new CommandUI._toolbarBuildContext();
        var query = new CommandUI.DataQuery();
        query.id = 'toolbar';
        query.queryType = 1;
        query.handler = this.$$d__onReturnToolbarData$p$1;
        query.data = context;
        this.get_dataSource().runQuery(query);
    },
    
    _onReturnToolbarData$p$1: function CommandUI_ToolbarBuilder$_onReturnToolbarData$p$1$in(res) {
        var context = res.contextData;
        this.set_toolbar(this._buildToolbarFromData$p$1(res.queryData, context));
        this.get_toolbar().set__toolbarBuilder$i$3(this);
        this.get_toolbar().refreshInternal();
        this.get_placeholder().appendChild(this.get_toolbar().get_elementInternal());
        CommandUI.Utility.ensureCSSClassOnElement(this.get_placeholder(), 'loaded');
        var $$t_E = this;
        this.get_buildClientTask().CWo(function(t) {
            $$t_E.get_buildClientTask().get_result().onComponentBuilt($$t_E.get_toolbar(), $$t_E.get_toolbar().get_id());
        }, $$sc.TaskContinuationOptions.onlyOnRanToCompletion | $$sc.TaskContinuationOptions.executeSynchronously);
    },
    
    _buildToolbarFromData$p$1: function CommandUI_ToolbarBuilder$_buildToolbarFromData$p$1$in(data, context) {
        var toolbarElement = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(data, CommandUI.DataNodeWrapper.TOOLBAR);
        if (CommandUI.ScriptUtility.isNullOrUndefined(toolbarElement)) {
            toolbarElement = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(data, CommandUI.DataNodeWrapper.STATUSBAR);
            context.isStatusBar = true;
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(toolbarElement)) {
            throw Error.create('No toolbar element was present in the data');
        }
        var dnw = new CommandUI.DataNodeWrapper(toolbarElement);
        var toolbarScalingOptimizationEnabled = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ToolbarScalingRedundancyEliminationIsEnabled');
        if (context.isStatusBar) {
            this.set_toolbar(new CommandUI.StatusBar(dnw.get_attributes()[CommandUI.DataNodeWrapper.id], dnw.get_attributes(), this, this.get__resizableContainer(), toolbarScalingOptimizationEnabled));
        }
        else {
            this.set_toolbar(new CommandUI.Toolbar(dnw.get_attributes()[CommandUI.DataNodeWrapper.id], dnw.get_attributes(), this, this.get__toolbarBuildOptions$p$1().staticUiTouchMode, this.get__toolbarBuildOptions$p$1().supportsEmphasizedControls, this.get__resizableContainer(), toolbarScalingOptimizationEnabled));
        }
        this.get_toolbar().set__clientID$i$1(this.get_options().clientID);
        this.get_toolbar().set_useDataCookie(true);
        this.get_toolbar().refreshInternal();
        var dockChildren = CommandUI.DataNodeWrapper.getNodeChildren(CommandUI.DataNodeWrapper.getFirstChildNodeWithName(dnw.get_node(), CommandUI.DataNodeWrapper.DOCKS));
        var docks = this._buildAllDocksFromData$i$1(dockChildren, context);
        for (var $$arr_7 = docks, $$len_8 = $$arr_7.length, $$idx_9 = 0; $$idx_9 < $$len_8; ++$$idx_9) {
            var d = $$arr_7[$$idx_9];
            this.get_toolbar().addChild(d);
        }
        return this.get_toolbar();
    },
    
    _buildAllDocksFromData$i$1: function CommandUI_ToolbarBuilder$_buildAllDocksFromData$i$1$in(dockChildren, context) {
        var docks = new Array(0);
        for (var i = 0; i < dockChildren.length; i++) {
            if (!this.isNodeTrimmed(dockChildren[i])) {
                Array.add(docks, this._buildDockFromData$i$1(dockChildren[i], context));
            }
        }
        return docks;
    },
    
    _buildDockFromData$i$1: function CommandUI_ToolbarBuilder$_buildDockFromData$i$1$in(dock, context) {
        var dockNodeName = CommandUI.DataNodeWrapper.getNodeName(dock);
        var dockComponent = null;
        if (dockNodeName === CommandUI.DataNodeWrapper.BUTTONDOCK) {
            dockComponent = this._buildButtonDockFromData$i$1(dock, context);
        }
        else if (dockNodeName === CommandUI.DataNodeWrapper.HERODOCK) {
            dockComponent = this._buildHeroDockFromData$i$1(dock, context);
        }
        else {
            Common.Debug.assertNotReachedStringTag('Toolbars can only have button docks or hero docks as their children', 6840408);
        }
        return dockComponent;
    },
    
    _buildHeroDockFromData$i$1: function CommandUI_ToolbarBuilder$_buildHeroDockFromData$i$1$in(data, context) {
        var dnw = new CommandUI.DataNodeWrapper(data);
        var properties = data[CommandUI.DataNodeWrapper.ATTRIBUTES];
        var heroDock = new CommandUI._heroDock(this.get_root(), dnw.get_attributes()[CommandUI.DataNodeWrapper.id], properties);
        heroDock.heroControlCount = this.get__toolbarBuildOptions$p$1().maxElementsBeforeOverflow;
        var controlsNode = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(data, CommandUI.DataNodeWrapper.CONTROLS);
        var controlNodes = CommandUI.DataNodeWrapper.getNodeChildren(controlsNode);
        var herodockControls = new Array(0);
        for (var i = 0; i < controlNodes.length; i++) {
            var controlNode = controlNodes[i];
            if (this.isNodeTrimmed(controlNode)) {
                continue;
            }
            var control = this.buildControl(controlNode, context);
            Array.add(herodockControls, control);
        }
        heroDock.set__heroDockControls$i$1(herodockControls);
        return heroDock;
    },
    
    _buildButtonDockFromData$i$1: function CommandUI_ToolbarBuilder$_buildButtonDockFromData$i$1$in(data, buildContext) {
        var dnw = new CommandUI.DataNodeWrapper(data);
        Common.Debug.assertTag(dnw.get_name() === CommandUI.DataNodeWrapper.BUTTONDOCK, 2131204);
        var dock = this.get_toolbar()._createButtonDock$i$3(data, buildContext);
        var controlsNode = CommandUI.DataNodeWrapper.getFirstChildNodeWithName(data, CommandUI.DataNodeWrapper.CONTROLS);
        var controls = CommandUI.DataNodeWrapper.getNodeChildren(controlsNode);
        for (var i = 0; i < controls.length; i++) {
            if (this.isNodeTrimmed(controls[i])) {
                continue;
            }
            var currentDisplayComponent = this._buildToolbarControlComponent$i$1(controls[i], buildContext);
            dock.addChild(currentDisplayComponent);
        }
        return dock;
    },
    
    _buildToolbarControlComponent$i$1: function CommandUI_ToolbarBuilder$_buildToolbarControlComponent$i$1$in(data, buildContext) {
        var control = null;
        var dnw = new CommandUI.DataNodeWrapper(data);
        var name = dnw.get_name();
        var displayMode = dnw.get_attributes()[CommandUI.DataNodeWrapper.DISPLAYMODE];
        var defaultMode;
        if (buildContext.isStatusBar) {
            Common.Debug.assertTag(!displayMode || displayMode === 'Small14' || displayMode === 'Medium14' || displayMode === 'MediumCompact', 2131205);
            defaultMode = 'Small14';
        }
        else {
            Common.Debug.assertTag(!displayMode || displayMode === 'Small' || displayMode === 'Medium' || displayMode === 'Small20' || displayMode === 'Medium20', 2131206);
            defaultMode = 'Small';
        }
        switch (name) {
            case CommandUI.DataNodeWrapper.button:
                control = this.buildControl(data, buildContext);
                return control.createComponentForDisplayMode((CommandUI.ScriptUtility.isNullOrEmptyString(displayMode)) ? defaultMode : displayMode);
            case CommandUI.DataNodeWrapper.flyoutAnchor:
                defaultMode = (buildContext.isStatusBar) ? 'Medium14' : 'Medium';
                control = this.buildControl(data, buildContext);
                return control.createComponentForDisplayMode((CommandUI.ScriptUtility.isNullOrEmptyString(displayMode)) ? defaultMode : displayMode);
            case CommandUI.DataNodeWrapper.label:
                control = this.buildControl(data, buildContext);
                return control.createComponentForDisplayMode((CommandUI.ScriptUtility.isNullOrEmptyString(displayMode)) ? defaultMode : displayMode);
            case CommandUI.DataNodeWrapper.separator:
                Common.Debug.assertTag(!buildContext.isStatusBar, 2131207);
                control = this.buildControl(data, buildContext);
                return control.createComponentForDisplayMode('Small');
            case CommandUI.DataNodeWrapper.toggleButton:
                control = this.buildControl(data, buildContext);
                return control.createComponentForDisplayMode((CommandUI.ScriptUtility.isNullOrEmptyString(displayMode)) ? defaultMode : displayMode);
            default:
                throw Error.create('Invalid control type.');
        }
    }
}


CommandUI.Unit = function CommandUI_Unit(unitType, min, max, step) {
    this._type$0 = unitType;
    this._min$0 = min;
    this._max$0 = max;
    this._step$0 = step;
}
CommandUI.Unit.prototype = {
    _type$0: 0,
    _min$0: 0,
    _max$0: 0,
    _step$0: 0,
    
    normalizeNumber: function CommandUI_Unit$normalizeNumber$in(number) {
        if (number < this._min$0) {
            return this._min$0;
        }
        if (number > this._max$0) {
            return this._max$0;
        }
        return number;
    },
    
    get_type: function CommandUI_Unit$get_type$in() {
        return this._type$0;
    },
    
    get_min: function CommandUI_Unit$get_min$in() {
        return this._min$0;
    },
    
    get_max: function CommandUI_Unit$get_max$in() {
        return this._max$0;
    },
    
    set_max: function CommandUI_Unit$set_max$in(value) {
        this._max$0 = value;
        return value;
    },
    
    get_step: function CommandUI_Unit$get_step$in() {
        return this._step$0;
    }
}


CommandUI.Utility = function CommandUI_Utility() {
}
CommandUI.Utility.removeChildNodes = function CommandUI_Utility$removeChildNodes$st(elm) {
    if (CommandUI.ScriptUtility.isNullOrUndefined(elm)) {
        return null;
    }
    var parent = elm.parentNode;
    if (parent) {
        var d = elm.cloneNode(false);
        parent.replaceChild(d, elm);
        return d;
    }
    else {
        var p = elm.firstChild;
        var aux;
        while (p) {
            aux = p.nextSibling;
            elm.removeChild(p);
            p = aux;
        }
        return elm;
    }
}
CommandUI.Utility._removeChildNodesSlow$i = function CommandUI_Utility$_removeChildNodesSlow$i$st(elm) {
    while (elm.hasChildNodes()) {
        elm.removeChild(elm.firstChild);
    }
}
CommandUI.Utility.toggleCSSClassOnElement = function CommandUI_Utility$toggleCSSClassOnElement$st(element, cssClass, on) {
    if (on) {
        CommandUI.Utility.ensureCSSClassOnElement(element, cssClass);
    }
    else {
        CommandUI.Utility.removeCSSClassFromElement(element, cssClass);
    }
}
CommandUI.Utility.ensureCSSClassOnElement = function CommandUI_Utility$ensureCSSClassOnElement$st(element, cssClass) {
    if (CommandUI.ScriptUtility.isNullOrUndefined(element)) {
        return;
    }
    var oldValue = element.className;
    if (!CommandUI.ScriptUtility.isNullOrUndefined(oldValue) && oldValue.indexOf(cssClass) !== -1) {
        return;
    }
    var cn = (oldValue.trim() + ' ' + cssClass);
    cn = cn.trim();
    element.className = cn;
}
CommandUI.Utility.removeCSSClassFromElement = function CommandUI_Utility$removeCSSClassFromElement$st(element, cssClass) {
    if (CommandUI.ScriptUtility.isNullOrUndefined(element) || CommandUI.ScriptUtility.isNullOrUndefined(cssClass) || CommandUI.ScriptUtility.isNullOrUndefined(element.className)) {
        return;
    }
    var cn = element.className;
    if (cn !== cn.replace(cssClass, '')) {
        element.className = cn.replace(cssClass, '');
    }
}
CommandUI.Utility.setEnabledOnElement = function CommandUI_Utility$setEnabledOnElement$st(element, enabled, isLabel, isEditable) {
    if (!CommandUI.ScriptUtility.isNullOrUndefined(element) && !isLabel) {
        CommandUI.Utility.toggleCSSClassOnElement(element, 'cui-disabled', !enabled);
        var isDisabled = (enabled) ? Common.AccessibilityUtils.ariaFalseValue : Common.AccessibilityUtils.ariaTrueValue;
        Common.AccessibilityUtils.setAriaAttribute(element, Common.AccessibilityUtils.ariaDisabledAttribute, isDisabled);
        if (isEditable) {
            Common.AccessibilityUtils.setAriaAttribute(element, Common.AccessibilityUtils.ariaReadOnlyAttribute, isDisabled);
        }
    }
}
CommandUI.Utility._addToTabLoop$i = function CommandUI_Utility$_addToTabLoop$i$st(element) {
    element.tabIndex = 0;
}
CommandUI.Utility._createNoOpLink$i = function CommandUI_Utility$_createNoOpLink$i$st(isFocusable) {
    var elm = CommandUI.Utility.createElement('a');
    if (isFocusable) {
        CommandUI.Utility._addToTabLoop$i(elm);
    }
    return elm;
}
CommandUI.Utility.validateStringProperty = function CommandUI_Utility$validateStringProperty$st(value, defaultValue) {
    if (CommandUI.ScriptUtility.isNullOrUndefined(value)) {
        value = defaultValue;
        if (CommandUI.ScriptUtility.isNullOrUndefined(value)) {
            value = '';
        }
    }
    return value;
}
CommandUI.Utility._setUnselectable$i = function CommandUI_Utility$_setUnselectable$i$st(element, on, recursive) {
    if (CommandUI.ScriptUtility.isNullOrUndefined(element) || (element.nodeName === '#text')) {
        return;
    }
    if (on) {
        element.setAttribute('unselectable', 'on');
    }
    else {
        element.setAttribute('unselectable', 'off');
    }
    if (recursive) {
        var p = element.firstChild;
        while (p) {
            CommandUI.Utility._setUnselectable$i(p, on, true);
            p = p.nextSibling;
        }
    }
}
CommandUI.Utility._createClusteredImageContainerNew$i = function CommandUI_Utility$_createClusteredImageContainerNew$i$st(size, imageSource, imageClass, elmImage, inlineBlockDisplay, blockDisplay) {
    var cont = (blockDisplay) ? CommandUI.Utility._createBlockSpan$i() : CommandUI.Utility.createElement('span');
    cont.className += (inlineBlockDisplay) ? ' cui-img-cont-float ' : ' cui-img-container ';
    cont.className += CommandUI.Utility._imageSizeToClass$i[size];
    if (!CommandUI.ScriptUtility.isNullOrEmptyString(imageSource)) {
        cont.appendChild(elmImage);
        elmImage.src = imageSource;
        elmImage.setAttribute('role', 'presentation');
        if (!CommandUI.ScriptUtility.isNullOrUndefined(imageClass)) {
            elmImage.className = imageClass;
        }
    }
    return cont;
}
CommandUI.Utility._setLargeControlText$i = function CommandUI_Utility$_setLargeControlText$i$st(elmTextContainer, text, arrow) {
    var line1 = text;
    var lineBreak = false;
    var line2 = null;
    var idxChar = text.lastIndexOf('\u200b\u200b');
    if (idxChar !== -1) {
        line1 = text.substr(0, idxChar);
        lineBreak = true;
        line2 = text.substr(idxChar + 2);
    }
    else {
        var idxSpace = text.lastIndexOf(' ');
        if (idxSpace !== -1) {
            line1 = text.substr(0, idxSpace);
            lineBreak = true;
            line2 = text.substr(idxSpace + 1) + ((arrow) ? ' ' : '');
        }
        else if (arrow) {
            lineBreak = true;
        }
    }
    elmTextContainer.innerHTML = '';
    elmTextContainer.appendChild(document.createTextNode(line1));
    if (lineBreak) {
        elmTextContainer.appendChild(document.createElement('br'));
    }
    var twoLines = !CommandUI.ScriptUtility.isNullOrEmptyString(line2);
    if (twoLines) {
        elmTextContainer.appendChild(document.createTextNode(line2));
    }
    CommandUI.Utility.ensureCSSClassOnElement(elmTextContainer, (twoLines) ? 'cui-ctl-largelabel-twoline' : 'cui-ctl-largelabel-singleline');
}
CommandUI.Utility.setControlText = function CommandUI_Utility$setControlText$st(elmTextContainer, formatText, userGeneratedPlaceholderReplacements) {
    var formatCallback = function(content) {
        var newElem;
        newElem = CommandUI.Utility.createElement('span');
        newElem.setAttribute('dir', 'auto');
        newElem.innerText = content;
        return newElem;
    };
    Common.DomUtils.setFormattedTextToPlaceholders(elmTextContainer, formatText, userGeneratedPlaceholderReplacements, formatCallback);
}
CommandUI.Utility.releaseEventHandlersRecursively = function CommandUI_Utility$releaseEventHandlersRecursively$st(elm) {
    if (CommandUI.ScriptUtility.isNullOrUndefined(elm)) {
        return;
    }
    CommandUI.Utility.unregisterAllHandlers(elm);
    if (!CommandUI.ScriptUtility.isNullOrUndefined(elm.childNodes)) {
        for (var i = 0; i < elm.childNodes.length; i++) {
            CommandUI.Utility.releaseEventHandlersRecursively(elm.childNodes[i]);
        }
    }
}
CommandUI.Utility._createBlockSpan$i = function CommandUI_Utility$_createBlockSpan$i$st() {
    var elmSpan = CommandUI.Utility.createElement('span');
    elmSpan.className = 'cui-block';
    return elmSpan;
}
CommandUI.Utility.isTrue = function CommandUI_Utility$isTrue$st(value) {
    return !CommandUI.ScriptUtility.isNullOrUndefined(value) && (Common.StringUtils.toLower(value) === 'true');
}
CommandUI.Utility.isFalse = function CommandUI_Utility$isFalse$st(value) {
    return !CommandUI.ScriptUtility.isNullOrUndefined(value) && (Common.StringUtils.toLower(value) === 'false');
}
CommandUI.Utility.createElement = function CommandUI_Utility$createElement$st(tagName) {
    var ret = document.createElement(tagName);
    ret.setAttribute('unselectable', 'on');
    return ret;
}
CommandUI.Utility._createSelectableElement$i = function CommandUI_Utility$_createSelectableElement$i$st(tagName) {
    return document.createElement(tagName);
}
CommandUI.Utility.cancelPendingTimeout = function CommandUI_Utility$cancelPendingTimeout$st(timeoutId) {
    if (timeoutId.val !== -1) {
        window.clearTimeout(timeoutId.val);
        timeoutId.val = -1;
    }
}
CommandUI.Utility.cancelInterval = function CommandUI_Utility$cancelInterval$st(intervalId) {
    if (intervalId.val !== -1) {
        window.clearInterval(intervalId.val);
        intervalId.val = -1;
    }
}
CommandUI.Utility.unregisterAllHandlers = function CommandUI_Utility$unregisterAllHandlers$st(element) {
    Common.EventHandlerManager.get_instance().unregisterAllHandlers(element);
}
CommandUI.Utility._logOnIPad$i = function CommandUI_Utility$_logOnIPad$i$st(str) {
    var evalStr = 'console.log(\'' + str + ' (' + (new Date()).toTimeString() + ')' + '\');';
    try {
        eval(evalStr);
    }
    catch ($$e_2) {
        str = 'Bad string passed to LogOnIPad';
        evalStr = 'console.log(\'' + str + '\');';
        eval(evalStr);
    }
}
CommandUI.Utility.preventDefaultKeyAction = function CommandUI_Utility$preventDefaultKeyAction$st(args, targetKey) {
    if (args.innerEvent.keyCode === targetKey) {
        args.innerEvent.preventDefault();
        return true;
    }
    return false;
}
CommandUI.Utility._isEncodedStringArray$i = function CommandUI_Utility$_isEncodedStringArray$i$st(value) {
    return value.startsWith(CommandUI.Utility._encodedStringArrayToken);
}
CommandUI.Utility.encodeStringArrayXmlAttribute = function CommandUI_Utility$encodeStringArrayXmlAttribute$st(array) {
    if (!array || !array.length) {
        return null;
    }
    var sb = new Sys.StringBuilder(CommandUI.Utility._encodedStringArrayToken);
    for (var $$arr_2 = array, $$len_3 = $$arr_2.length, $$idx_4 = 0; $$idx_4 < $$len_3; ++$$idx_4) {
        var s = $$arr_2[$$idx_4];
        sb.append((!s) ? 0 : s.length);
        sb.append(',');
        sb.append(s);
        sb.append(',');
    }
    return sb.toString().slice(0, -1);
}
CommandUI.Utility._decodeStringArrayXmlAttribute$i = function CommandUI_Utility$_decodeStringArrayXmlAttribute$i$st(encoded) {
    if (CommandUI.ScriptUtility.isNullOrEmptyString(encoded) || !encoded.startsWith(CommandUI.Utility._encodedStringArrayToken)) {
        return null;
    }
    encoded = encoded.slice(CommandUI.Utility._encodedStringArrayToken.length);
    if (!encoded.length) {
        return null;
    }
    var decoded = [];
    while (encoded.length > 0) {
        var strLen = parseInt(encoded);
        if (isNaN(strLen) || strLen < 0) {
            return null;
        }
        var commaPos = encoded.indexOf(',');
        if (commaPos === -1) {
            return null;
        }
        decoded.push(encoded.substr(commaPos + 1, strLen));
        encoded = encoded.slice(commaPos + 1 + strLen + 1);
    }
    return decoded;
}


CommandUI.ScriptUtility = function CommandUI_ScriptUtility() {
}
CommandUI.ScriptUtility.isNullOrEmptyString = function CommandUI_ScriptUtility$isNullOrEmptyString$st(str) {
    var strNull = null;
    return str === strNull || typeof(str) === 'undefined' || !str.length;
}
CommandUI.ScriptUtility.isNullOrUndefined = function CommandUI_ScriptUtility$isNullOrUndefined$st(obj) {
    var objNull = null;
    return obj === objNull || typeof(obj) === 'undefined';
}


CommandUI._listNode = function CommandUI__listNode(o, prev, next) {
    this._next$i$0 = next;
    this._previous$i$0 = prev;
    this._data$i$0 = o;
}
CommandUI._listNode.prototype = {
    _next$i$0: null,
    _previous$i$0: null,
    _data$i$0: null
}


CommandUI.List = function CommandUI_List() {
}
CommandUI.List.prototype = {
    _head$0: null,
    _tail$0: null,
    
    add: function CommandUI_List$add$in(o) {
        if (!this._head$0) {
            this._head$0 = this._tail$0 = new CommandUI._listNode(o, null, null);
        }
        else {
            this._tail$0 = this._tail$0._next$i$0 = new CommandUI._listNode(o, this._tail$0, null);
        }
        this.set_count(this.get_count() + (1));
    },
    
    _insert$i$0: function CommandUI_List$_insert$i$0$in(pos, o) {
        if (pos > this.get_count() || 0 > pos) {
            throw Error.argumentOutOfRange('pos');
        }
        if (pos === this.get_count()) {
            this.add(o);
            return;
        }
        var ip = this._head$0;
        while (0 !== pos--) {
            ip = ip._next$i$0;
        }
        var n = new CommandUI._listNode(o, ip._previous$i$0, ip);
        if (!n._previous$i$0) {
            this._head$0 = n;
        }
        else {
            n._previous$i$0._next$i$0 = n;
        }
        if (!n._next$i$0) {
            this._tail$0 = n;
        }
        else {
            n._next$i$0._previous$i$0 = n;
        }
        this.set_count(this.get_count() + (1));
    },
    
    _remove$i$0: function CommandUI_List$_remove$i$0$in(o) {
        var p = this._head$0;
        while (p) {
            if (p._data$i$0 === o) {
                break;
            }
            p = p._next$i$0;
        }
        if (!p) {
            return false;
        }
        if (!p._previous$i$0) {
            this._head$0 = p._next$i$0;
        }
        else {
            p._previous$i$0._next$i$0 = p._next$i$0;
        }
        if (!p._next$i$0) {
            this._tail$0 = p._previous$i$0;
        }
        else {
            p._next$i$0._previous$i$0 = p._previous$i$0;
        }
        this.set_count(this.get_count() - (1));
        return true;
    },
    
    _clear$i$0: function CommandUI_List$_clear$i$0$in() {
        var p = this._head$0, aux;
        this._head$0 = null;
        this._tail$0 = null;
        while (p) {
            aux = p._next$i$0;
            p._previous$i$0 = null;
            p._next$i$0 = null;
            p = aux;
        }
        this.set_count(0);
    },
    
    _indexOf$i$0: function CommandUI_List$_indexOf$i$0$in(o) {
        var p = this._head$0;
        var i = 0;
        while (p) {
            if (p._data$i$0 === o) {
                break;
            }
            p = p._next$i$0;
            i++;
        }
        if (!p) {
            return -1;
        }
        return i;
    },
    
    get_item: function CommandUI_List$get_item$in(pos) {
        var p = this._at$p$0(pos);
        return p._data$i$0;
    },
    
    _$$pf_Count$p$0: 0,
    
    get_count: function CommandUI_List$get_count$in() {
        return this._$$pf_Count$p$0;
    },
    
    set_count: function CommandUI_List$set_count$in(value) {
        this._$$pf_Count$p$0 = value;
        return value;
    },
    
    getEnumerator: function CommandUI_List$getEnumerator$in() {
        return new CommandUI.ListEnumerator(this._head$0);
    },
    
    _getEnumeratorAtPos$i$0: function CommandUI_List$_getEnumeratorAtPos$i$0$in(pos) {
        var aux = this._at$p$0(pos);
        return new CommandUI.ListEnumerator(aux);
    },
    
    _toArray$i$0: function CommandUI_List$_toArray$i$0$in() {
        var newArray = new Array(this.get_count());
        var idx = 0;
        var $$enum_3 = this.getEnumerator();
        while ($$enum_3.moveNext()) {
            var c = $$enum_3.get_current();
            newArray[idx] = c;
            idx++;
        }
        return newArray;
    },
    
    _at$p$0: function CommandUI_List$_at$p$0$in(pos) {
        var p = this._head$0;
        var i = 0;
        while (i !== pos) {
            if (!p) {
                throw Error.argumentOutOfRange('pos');
            }
            p = p._next$i$0;
            i++;
        }
        return p;
    }
}


CommandUI.ListEnumerator = function CommandUI_ListEnumerator(first) {
    this._first$0 = first;
}
CommandUI.ListEnumerator.prototype = {
    _first$0: null,
    _node$0: null,
    
    get_current: function CommandUI_ListEnumerator$get_current$in() {
        if (!this._node$0) {
            throw Error.argumentOutOfRange();
        }
        return this._node$0._data$i$0;
    },
    
    moveNext: function CommandUI_ListEnumerator$moveNext$in() {
        if (!this._node$0) {
            this._node$0 = this._first$0;
            return !!this._first$0;
        }
        if (!this._node$0._next$i$0) {
            return false;
        }
        this._node$0 = this._node$0._next$i$0;
        return true;
    },
    
    movePrevious: function CommandUI_ListEnumerator$movePrevious$in() {
        if (!this._node$0) {
            this._node$0 = this._first$0;
            return !!this._first$0;
        }
        if (!this._node$0._previous$i$0) {
            return false;
        }
        this._node$0 = this._node$0._previous$i$0;
        return true;
    },
    
    reset: function CommandUI_ListEnumerator$reset$in() {
        this._node$0 = this._first$0;
    }
}


Type.registerNamespace('CommandUI.Controls');

CommandUI.Controls.ColorCellInfo = function CommandUI_Controls_ColorCellInfo() {
    this.Color = null;
    this.DisplayColor = null;
    this.Title = null;
}


CommandUI.Controls.IComboBoxBehavior = function() {}
CommandUI.Controls.IComboBoxBehavior.registerInterface('CommandUI.Controls.IComboBoxBehavior');


CommandUI.Controls.IIconColorFormatManager = function() {}
CommandUI.Controls.IIconColorFormatManager.registerInterface('CommandUI.Controls.IIconColorFormatManager');


CommandUI.Controls.IIconColorManager = function() {}
CommandUI.Controls.IIconColorManager.registerInterface('CommandUI.Controls.IIconColorManager');


CommandUI.Controls._iInsertTable = function() {}
CommandUI.Controls._iInsertTable.registerInterface('CommandUI.Controls._iInsertTable');


CommandUI.Controls.ISearchBoxBehavior = function() {}
CommandUI.Controls.ISearchBoxBehavior.registerInterface('CommandUI.Controls.ISearchBoxBehavior');


CommandUI.Controls.ISpinnerBehavior = function() {}
CommandUI.Controls.ISpinnerBehavior.registerInterface('CommandUI.Controls.ISpinnerBehavior');


CommandUI.Controls.ITextBoxBehavior = function() {}
CommandUI.Controls.ITextBoxBehavior.registerInterface('CommandUI.Controls.ITextBoxBehavior');


CommandUI.Controls.ContextMenuControlProperties = function CommandUI_Controls_ContextMenuControlProperties() {
    CommandUI.Controls.ContextMenuControlProperties.initializeBase(this);
}


CommandUI.Controls.ContextMenuControl = function CommandUI_Controls_ContextMenuControl(root, id, properties, menu) {
    CommandUI.Controls.ContextMenuControl.initializeBase(this, [ root, id, properties, menu ]);
    this.addDisplayMode('Menu');
}
CommandUI.Controls.ContextMenuControl.prototype = {
    _m_elmDefault$p$3: null,
    
    get_controlType: function CommandUI_Controls_ContextMenuControl$get_controlType$in() {
        return CommandUI.Control.contextMenuControlType;
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_ContextMenuControl$createComponentDomForDisplayMode$in(displayMode) {
        this._m_elmDefault$p$3 = CommandUI.Utility.createElement('span');
        return new CommandUI.ControlComponentDom(displayMode, this._m_elmDefault$p$3, null);
    },
    
    get__properties$p$3: function CommandUI_Controls_ContextMenuControl$get__properties$p$3$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    constructClonedMenuLauncher: function CommandUI_Controls_ContextMenuControl$constructClonedMenuLauncher$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.ContextMenuControl(root, this.get_id(), properties, clonedMenu);
    }
}


CommandUI.Controls.ButtonProperties = function CommandUI_Controls_ButtonProperties() {
    CommandUI.Controls.ButtonProperties.initializeBase(this);
}
CommandUI.Controls.ButtonProperties.prototype = {
    CommandPreview: null,
    CommandRevert: null,
    QueryCommand: null,
    ImageBackColor: '',
    HasPopup: null,
    ShortcutHint: null
}


CommandUI.Controls.Button = function CommandUI_Controls_Button(root, id, properties) {
    CommandUI.Controls.Button.initializeBase(this, [ root, id, properties ]);
    this.addDisplayMode('Small');
    this.addDisplayMode('Small14');
    this.addDisplayMode('Small20');
    this.addDisplayMode('Small24');
    this.addDisplayMode('Medium');
    this.addDisplayMode('Medium14');
    this.addDisplayMode('Medium20');
    this.addDisplayMode('MediumCompact');
    this.addDisplayMode('Large');
    this.addDisplayMode('Large16');
    this.addDisplayMode('Large30');
    this.addDisplayMode('LargeNoText');
    this.addDisplayMode('Menu');
    this.addDisplayMode('Menu16');
    this.addDisplayMode('Menu16DescriptionEnabled');
    this.addDisplayMode('MenuTellMe');
    this.addDisplayMode('MenuTellMeExtended');
    this.addDisplayMode('Menu20');
    this.addDisplayMode('Menu32');
    this.addDisplayMode('Menu48');
    this.addDisplayMode('MenuFooter');
    this.addDisplayMode('MenuHeader');
    this.addDisplayMode('MenuMru');
    this.addDisplayMode('MenuTemplate');
    this.addDisplayMode('FloatieLarge');
    this.addDisplayMode('Initials');
    this.get_stateProperties()[CommandUI.Controls.ButtonCommandProperties.LabelText] = this.set_labelText(this.get__properties$p$1().LabelText);
    this.get_stateProperties()[CommandUI.Controls.ButtonCommandProperties.Visible] = this.get_visible();
    this.get_stateProperties()[CommandUI.Controls.ButtonCommandProperties.HasPopup] = CommandUI.Utility.isTrue(properties.HasPopup);
    this.get_stateProperties()[CommandUI.Controls.ButtonCommandProperties.Alt] = (CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$1().Alt)) ? this.get__properties$p$1().LabelText : this.get__properties$p$1().Alt;
}
CommandUI.Controls.Button.prototype = {
    
    createComponentDomForDisplayMode: function CommandUI_Controls_Button$createComponentDomForDisplayMode$in(displayMode) {
        var controlComponentDom = null;
        var domStrategy = this._getDomElementCreationStrategy$p$1(displayMode);
        if (domStrategy) {
            controlComponentDom = domStrategy.buildControlDom(this, displayMode);
            if (this.get__hasPopup$p$1()) {
                Common.AccessibilityUtils.setAriaAttribute(controlComponentDom.elmControl, Common.AccessibilityUtils.ariaHasPopupAttribute, Common.AccessibilityUtils.ariaTrueValue);
            }
            if (this.get_root().get_rootType() === Common.UILocation.taskPane) {
                var has16x16Image = !CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$1().Image16by16);
                if ((!has16x16Image && displayMode === 'Medium') || (has16x16Image && displayMode === 'Small')) {
                    Sys.UI.DomElement.addCssClass(controlComponentDom.elmControl, 'showBorder');
                    if (displayMode === 'Medium') {
                        Sys.UI.DomElement.addCssClass(controlComponentDom.elmLabel, 'showBorder');
                    }
                }
            }
            if (this.get_root().get_rootType() === Common.UILocation.contextMenu && !CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$1().ShortcutHint)) {
                CommandUI.Utility.ensureCSSClassOnElement(controlComponentDom.elmControl, 'cui-shortcut-container');
                var shortcutHint = CommandUI.Utility.createElement('span');
                shortcutHint.innerText = this.get__properties$p$1().ShortcutHint;
                shortcutHint.className = controlComponentDom.elmLabel.className;
                CommandUI.Utility.ensureCSSClassOnElement(shortcutHint, 'cui-shortcut-hint');
                controlComponentDom.elmControl.appendChild(shortcutHint);
            }
            var elm = (controlComponentDom.get_displayMode() === 'Initials') ? controlComponentDom.elmIconContainer : controlComponentDom.elmImage;
            this._setIconBackgroundColor$p$1(elm);
        }
        else {
            Common.Debug.assertNotReachedStringTag('Expected a way to create a DOM element for display mode ' + displayMode, 4474466);
        }
        return controlComponentDom;
    },
    
    _getDomElementCreationStrategy$p$1: function CommandUI_Controls_Button$_getDomElementCreationStrategy$p$1$in(displayMode) {
        switch (displayMode) {
            case 'MenuMru':
                return new CommandUI.Controls._mruButtonDomStrategy();
            case 'MenuTemplate':
                return new CommandUI.Controls._templateButtonDomStrategy();
            case 'MenuHeader':
                return new CommandUI.Controls._menuHeaderButtonDomStrategy();
            case 'MenuFooter':
                return new CommandUI.Controls._menuFooterButtonDomStrategy();
            default:
                return new CommandUI.Controls._standardControlDomStrategy(false);
        }
    },
    
    get_controlType: function CommandUI_Controls_Button$get_controlType$in() {
        if (CommandUI.Jewel.isInstanceOfType(this.get_root())) {
            return CommandUI.Control.fileMenuButtonControlType;
        }
        return CommandUI.Control.buttonControlType;
    },
    
    get__needsAKeytip$i$0: function CommandUI_Controls_Button$get__needsAKeytip$i$0$in() {
        return true;
    },
    
    getTextValue: function CommandUI_Controls_Button$getTextValue$in() {
        return this.get_labelText();
    },
    
    get_focusableElement: function CommandUI_Controls_Button$get_focusableElement$in() {
        return this.getDisplayedComponentElement();
    },
    
    get_activatesOnPress: function CommandUI_Controls_Button$get_activatesOnPress$in() {
        return !this.isStandardMenuItem();
    },
    
    get__properties$p$1: function CommandUI_Controls_Button$get__properties$p$1$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    _setImageBackgroundColor$p$1: function CommandUI_Controls_Button$_setImageBackgroundColor$p$1$in(image) {
        this._setIconBackgroundColor$p$1(image);
    },
    
    _setIconBackgroundColor$p$1: function CommandUI_Controls_Button$_setIconBackgroundColor$p$1$in(ElmIconContainer) {
        if (ElmIconContainer && this.get__properties$p$1().ImageBackColor !== '') {
            ElmIconContainer.style.backgroundColor = this.get__properties$p$1().ImageBackColor;
        }
    },
    
    get__hasPopup$p$1: function CommandUI_Controls_Button$get__hasPopup$p$1$in() {
        return this.get_stateProperties()[CommandUI.Controls.ButtonCommandProperties.HasPopup];
    },
    
    constructClonedControl: function CommandUI_Controls_Button$constructClonedControl$in(root, properties) {
        return new CommandUI.Controls.Button(root, this.get_id(), properties);
    }
}


CommandUI.Controls.ColorPickerProperties = function CommandUI_Controls_ColorPickerProperties() {
    CommandUI.Controls.ColorPickerProperties.initializeBase(this);
}
CommandUI.Controls.ColorPickerProperties.prototype = {
    CommandPreview: null,
    CommandRevert: null,
    McuLayout: null,
    QueryCommand: null,
    Width: null,
    Stateful: null
}


CommandUI.Controls.ColorPickerComponentDom = function CommandUI_Controls_ColorPickerComponentDom(displayMode, elmControl) {
    this.aTags = [];
    this.colorCells = [];
    CommandUI.Controls.ColorPickerComponentDom.initializeBase(this, [ displayMode, elmControl, null ]);
}


CommandUI.Controls.ColorPicker = function CommandUI_Controls_ColorPicker(root, id, properties, colors) {
    CommandUI.Controls.ColorPicker.initializeBase(this, [ root, id, properties ]);
    this.addDisplayMode('Menu');
    this._colors$1 = colors;
    this.set_width(parseInt(properties.Width));
}
CommandUI.Controls.ColorPicker._setRowCssClass$p = function CommandUI_Controls_ColorPicker$_setRowCssClass$p$st(rowElement, row, numRows, mcuLayout) {
    if (row === 1) {
        CommandUI.Utility.ensureCSSClassOnElement(rowElement, CommandUI.Controls.ColorPicker._firstRowClassName$p);
    }
    if (mcuLayout) {
        if (row === 1) {
            CommandUI.Utility.ensureCSSClassOnElement(rowElement, CommandUI.Controls.ColorPicker._mcuRowClassName$p);
        }
        else {
            CommandUI.Utility.ensureCSSClassOnElement(rowElement, CommandUI.Controls.ColorPicker._compactRowClassName$p);
            if (row === 2) {
                CommandUI.Utility.ensureCSSClassOnElement(rowElement, CommandUI.Controls.ColorPicker._firstCompactRowClassName$p);
            }
            else if (row === numRows) {
                CommandUI.Utility.ensureCSSClassOnElement(rowElement, CommandUI.Controls.ColorPicker._lastCompactRowClassName$p);
            }
        }
    }
    else {
        CommandUI.Utility.ensureCSSClassOnElement(rowElement, CommandUI.Controls.ColorPicker._spacedRowClassName$p);
    }
}
CommandUI.Controls.ColorPicker.prototype = {
    _colors$1: null,
    _$$pf_Width$p$1: 0,
    
    get_width: function CommandUI_Controls_ColorPicker$get_width$in() {
        return this._$$pf_Width$p$1;
    },
    
    set_width: function CommandUI_Controls_ColorPicker$set_width$in(value) {
        this._$$pf_Width$p$1 = value;
        return value;
    },
    
    _$$pf_ColorPickerDom$p$1: null,
    
    get_colorPickerDom: function CommandUI_Controls_ColorPicker$get_colorPickerDom$in() {
        return this._$$pf_ColorPickerDom$p$1;
    },
    
    set_colorPickerDom: function CommandUI_Controls_ColorPicker$set_colorPickerDom$in(value) {
        this._$$pf_ColorPickerDom$p$1 = value;
        return value;
    },
    
    get_controlType: function CommandUI_Controls_ColorPicker$get_controlType$in() {
        return CommandUI.Control.colorPickerControlType;
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_ColorPicker$createComponentDomForDisplayMode$in(displayMode) {
        var colorTable = CommandUI.Utility.createElement('table');
        if (this.get_root().get_textDirection() === 1) {
            colorTable.dir = 'rtl';
        }
        else {
            colorTable.dir = 'ltr';
        }
        colorTable.className = CommandUI.Controls.ColorPicker._colorTableClassName$p;
        colorTable.setAttribute('cellSpacing', '0');
        colorTable.setAttribute('cellPadding', '0');
        colorTable.setAttribute('mscui:controltype', this.get_controlType());
        colorTable.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaGridRole);
        var colorPickerDom = new CommandUI.Controls.ColorPickerComponentDom(displayMode, colorTable);
        var colorTableBody = CommandUI.Utility.createElement('tbody');
        this._addColorCells$p$1(colorPickerDom, colorTableBody, this._colors$1);
        colorTable.appendChild(colorTableBody);
        this.set_colorPickerDom(colorPickerDom);
        return colorPickerDom;
    },
    
    _addColorCells$p$1: function CommandUI_Controls_ColorPicker$_addColorCells$p$1$in(colorPickerDom, colorTableBody, colors) {
        var rowElement = null;
        var doc = colorTableBody.ownerDocument;
        var numRows = colors.length / this.get_width();
        var row = 0;
        var col = 0;
        var mcuLayout = CommandUI.Utility.isTrue(this.get__properties$p$1().McuLayout);
        for (var i = 0; i < colors.length; i++) {
            col++;
            if (!(i % this.get_width())) {
                row++;
                col = 1;
                rowElement = doc.createElement('tr');
                rowElement.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaRowRole);
                rowElement.setAttribute(Common.AccessibilityUtils.ariaLabelAttribute, String.format(CommonUIStrings.l_GalleryRowAccessibleLabelFormat, row));
                colorTableBody.appendChild(rowElement);
                CommandUI.Controls.ColorPicker._setRowCssClass$p(rowElement, row, numRows, mcuLayout);
            }
            var cell = doc.createElement('td');
            cell.className = CommandUI.Controls.ColorPicker._normalCellClassName$p;
            cell.setAttribute('arrayPosition', String.format('{0}', i));
            cell.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaPresentationRole);
            if (!mcuLayout && (this.get_width() < CommandUI.Controls.ColorPicker._minSmallCellColumnWidth$p)) {
                CommandUI.Utility.ensureCSSClassOnElement(cell, CommandUI.Controls.ColorPicker._largeCellClassName$p);
            }
            if (col === 1) {
                CommandUI.Utility.ensureCSSClassOnElement(cell, CommandUI.Controls.ColorPicker._firstColClassName$p);
            }
            rowElement.appendChild(cell);
            var link = CommandUI.Utility._createNoOpLink$i(true);
            var displayName = colors[i].Title;
            link.title = displayName;
            link.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaGridCellRole);
            link.className = CommandUI.Controls.ColorPicker._cellAnchorClassName$p;
            var element = doc.createElement('canvas');
            element.className = CommandUI.Controls.ColorPicker._cellDivClassName$p;
            var context = element.getContext('2d');
            context.fillStyle = colors[i].DisplayColor;
            context.fillRect(0, 0, element.width, element.height);
            var internalelmDiv = doc.createElement('div');
            internalelmDiv.className = CommandUI.Controls.ColorPicker._cellInternalDivClassName$p;
            cell.appendChild(link);
            link.appendChild(element);
            element.appendChild(internalelmDiv);
            cell[CommandUI.Controls.ColorPicker.colorInformation] = colors[i].Color;
            Array.add(colorPickerDom.colorCells, cell);
            Array.add(colorPickerDom.aTags, link);
        }
    },
    
    get__properties$p$1: function CommandUI_Controls_ColorPicker$get__properties$p$1$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    constructClonedControl: function CommandUI_Controls_ColorPicker$constructClonedControl$in(root, properties) {
        return new CommandUI.Controls.ColorPicker(root, this.get_id(), properties, this._colors$1);
    }
}


CommandUI.Controls.ComboBoxProperties = function CommandUI_Controls_ComboBoxProperties() {
    CommandUI.Controls.ComboBoxProperties.initializeBase(this);
}
CommandUI.Controls.ComboBoxProperties.prototype = {
    AllowFreeForm: null,
    AutoComplete: null,
    AutoCompleteDelay: null,
    FillContainer: null,
    ArrowImgId: null
}


CommandUI.Controls.ComboBoxComponentDom = function CommandUI_Controls_ComboBoxComponentDom(displayMode) {
    CommandUI.Controls.ComboBoxComponentDom.initializeBase(this, [ displayMode, null, null ]);
}
CommandUI.Controls.ComboBoxComponentDom.prototype = {
    elmInput: null,
    elmBtnA: null,
    elmArwImg: null
}


CommandUI.Controls.ComboBox = function CommandUI_Controls_ComboBox(root, id, properties, menu) {
    CommandUI.Controls.ComboBox.initializeBase(this, [ root, id, properties, menu ]);
    if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_cbProperties().AllowFreeForm)) {
        this.set_allowFreeForm(false);
    }
    else {
        this.set_allowFreeForm(this.get_cbProperties().AllowFreeForm.toLowerCase() === 'true');
    }
    if (CommandUI.ScriptUtility.isNullOrEmptyString(this.get_cbProperties().AutoComplete)) {
        this.get_cbProperties().AutoComplete = 'true';
    }
    if (!CommandUI.ScriptUtility.isNullOrEmptyString(this.get_cbProperties().AutoCompleteDelay)) {
        try {
            this.set_autoCompleteDelay(parseInt(this.get_cbProperties().AutoCompleteDelay));
        }
        catch ($$e_4) {
            this.set_autoCompleteDelay(CommandUI.Controls.ComboBox._defaulT_AUTOCOMPLETE_DELAY$p);
        }
    }
}
CommandUI.Controls.ComboBox.prototype = {
    _$$pf_ComboBoxDom$p$3: null,
    
    get_comboBoxDom: function CommandUI_Controls_ComboBox$get_comboBoxDom$in() {
        return this._$$pf_ComboBoxDom$p$3;
    },
    
    set_comboBoxDom: function CommandUI_Controls_ComboBox$set_comboBoxDom$in(value) {
        this._$$pf_ComboBoxDom$p$3 = value;
        return value;
    },
    
    _$$pf_AllowFreeForm$p$3: false,
    
    get_allowFreeForm: function CommandUI_Controls_ComboBox$get_allowFreeForm$in() {
        return this._$$pf_AllowFreeForm$p$3;
    },
    
    set_allowFreeForm: function CommandUI_Controls_ComboBox$set_allowFreeForm$in(value) {
        this._$$pf_AllowFreeForm$p$3 = value;
        return value;
    },
    
    _$$pf_AutoCompleteDelay$p$3: 0,
    
    get_autoCompleteDelay: function CommandUI_Controls_ComboBox$get_autoCompleteDelay$in() {
        return this._$$pf_AutoCompleteDelay$p$3;
    },
    
    set_autoCompleteDelay: function CommandUI_Controls_ComboBox$set_autoCompleteDelay$in(value) {
        this._$$pf_AutoCompleteDelay$p$3 = value;
        return value;
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_ComboBox$createComponentDomForDisplayMode$in(displayMode) {
        var alt = (CommandUI.ScriptUtility.isNullOrUndefined(this.get_cbProperties().Alt)) ? '' : this.get_cbProperties().Alt;
        var elmMedium;
        var elmMediumInput;
        var elmMediumBtnA;
        var elmMediumArwImgCont = null;
        var elmMediumArwImgDefault = null;
        var elmMediumArwImgOverride = null;
        elmMedium = CommandUI.Utility.createElement('span');
        elmMedium.className = 'cui-cb';
        elmMedium.setAttribute('mscui:controltype', this.get_controlType());
        elmMediumInput = CommandUI.Utility._createSelectableElement$i('input');
        elmMediumInput.type = 'text';
        elmMediumInput.style.width = (this.isSmallWidth(displayMode)) ? this.get_cbProperties().SmallWidth : this.get_cbProperties().Width;
        elmMediumInput.className = 'cui-cb-input';
        elmMediumInput.setAttribute('autocomplete', 'off');
        elmMediumInput.setAttribute('data-lpignore', 'true');
        elmMediumInput.setAttribute('data-lpignore', 'true');
        elmMediumInput.id = this.get_cbProperties().Id;
        elmMediumInput.title = alt;
        this.set_inMenu(CommandUI.ControlComponent._isDisplayModeMenu$i(displayMode));
        this.setInitialAriaMenuLauncherAttributes(elmMediumInput);
        if (this.get_cbProperties().FillContainer === 'true') {
            CommandUI.Utility.ensureCSSClassOnElement(elmMediumInput, 'cui-cb-fill-input');
            CommandUI.Utility.ensureCSSClassOnElement(elmMedium, 'cui-cb-fill-container');
        }
        CommandUI.Utility._addToTabLoop$i(elmMediumInput);
        elmMediumBtnA = CommandUI.Utility.createElement('a');
        CommandUI.Utility.ensureCSSClassOnElement(elmMediumBtnA, 'cui-dd-arrow-button');
        elmMediumBtnA.tabIndex = -1;
        elmMediumBtnA.setAttribute('role', 'presentation');
        var arrowImgOverridden = !CommandUI.ScriptUtility.isNullOrEmptyString(this.get_cbProperties().ArrowImgId);
        var imageOverrideFound = false;
        if (arrowImgOverridden) {
            elmMediumArwImgOverride = document.getElementById(this.get_cbProperties().ArrowImgId);
            if (elmMediumArwImgOverride) {
                elmMediumArwImgCont = document.createElement('span');
                elmMediumArwImgCont.appendChild(elmMediumArwImgOverride);
                imageOverrideFound = true;
            }
        }
        if (!imageOverrideFound) {
            elmMediumArwImgDefault = CommandUI.Utility.createElement('img');
            if (this.get__isVisualRefreshEnabled$i$0()) {
                elmMediumArwImgCont = CommandUI.Utility._createClusteredImageContainerNew$i(2, this.get_root().get_properties().ImageDownArrow8by8, this.get_root().get_properties().ImageDownArrow8by8Class, elmMediumArwImgDefault, true, false);
            }
            else {
                elmMediumArwImgCont = CommandUI.Utility._createClusteredImageContainerNew$i(1, this.get_root().get_properties().ImageDownArrow, this.get_root().get_properties().ImageDownArrowClass, elmMediumArwImgDefault, true, false);
            }
        }
        if (elmMediumArwImgDefault) {
            elmMediumArwImgDefault.alt = alt;
        }
        elmMediumBtnA.title = alt;
        elmMedium.appendChild(elmMediumInput);
        elmMedium.appendChild(elmMediumBtnA);
        elmMediumBtnA.appendChild(elmMediumArwImgCont);
        this.set_comboBoxDom(new CommandUI.Controls.ComboBoxComponentDom(displayMode));
        this.get_comboBoxDom().elmControl = elmMedium;
        this.get_comboBoxDom().elmInput = elmMediumInput;
        this.get_comboBoxDom().elmBtnA = elmMediumBtnA;
        this.get_comboBoxDom().elmArwImg = (elmMediumArwImgOverride) ? elmMediumArwImgOverride : elmMediumArwImgDefault;
        this.get_comboBoxDom().elmIconContainer = elmMediumArwImgCont;
        return this.get_comboBoxDom();
    },
    
    ensureKeytipForControl: function CommandUI_Controls_ComboBox$ensureKeytipForControl$in(controlComponent, keytipParentElement) {
        controlComponent._ensureKeytip$i$0(keytipParentElement, this.get_comboBoxDom().elmInput, this.get_parentKeytipsIds(), this.get_parentKeytipsKeys());
    },
    
    get_controlType: function CommandUI_Controls_ComboBox$get_controlType$in() {
        return CommandUI.Control.comboBoxControlType;
    },
    
    get__ariaRole$i$0: function CommandUI_Controls_ComboBox$get__ariaRole$i$0$in() {
        return Common.AccessibilityUtils.ariaComboboxRole;
    },
    
    _menuItems$3: null,
    
    get_menuItems: function CommandUI_Controls_ComboBox$get_menuItems$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._menuItems$3)) {
            this._menuItems$3 = {};
        }
        return this._menuItems$3;
    },
    
    set_menuItems: function CommandUI_Controls_ComboBox$set_menuItems$in(value) {
        this._menuItems$3 = value;
        return value;
    },
    
    get_focusableElement: function CommandUI_Controls_ComboBox$get_focusableElement$in() {
        return (!this.get_comboBoxDom()) ? null : this.get_comboBoxDom().elmInput;
    },
    
    selectDropdownItem: function CommandUI_Controls_ComboBox$selectDropdownItem$in(isc) {
        if (this.get_selectedControl() !== isc) {
            this._selectedControl = isc;
            this.get_comboBoxDom().elmInput.value = (isc).getTextValue();
            if (this.get_behavior().get_isCommitChangeFixEnabled() && !this.get_allowFreeForm()) {
                this.get_stateProperties()[CommandUI.Controls.ComboBoxCommandProperties.Value] = (isc).getTextValue();
            }
        }
    },
    
    _commitPendingChange$i$0: function CommandUI_Controls_ComboBox$_commitPendingChange$i$0$in() {
        (this.get_behavior()).commitPendingChange();
    },
    
    get_cbProperties: function CommandUI_Controls_ComboBox$get_cbProperties$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    constructClonedMenuLauncher: function CommandUI_Controls_ComboBox$constructClonedMenuLauncher$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.ComboBox(root, this.get_id(), properties, clonedMenu);
    },
    
    get__isEditable$i$0: function CommandUI_Controls_ComboBox$get__isEditable$i$0$in() {
        return true;
    }
}


CommandUI.Controls.ButtonCommandProperties = function CommandUI_Controls_ButtonCommandProperties() {
}


CommandUI.Controls.ColorPickerCommandProperties = function CommandUI_Controls_ColorPickerCommandProperties() {
}


CommandUI.Controls.ComboBoxCommandProperties = function CommandUI_Controls_ComboBoxCommandProperties() {
}


CommandUI.Controls.DropDownCommandProperties = function CommandUI_Controls_DropDownCommandProperties() {
}


CommandUI.Controls.FlyoutAnchorCommandProperties = function CommandUI_Controls_FlyoutAnchorCommandProperties() {
}


CommandUI.Controls.GalleryButtonCommandProperties = function CommandUI_Controls_GalleryButtonCommandProperties() {
}


CommandUI.Controls.IconColorCommandProperties = function CommandUI_Controls_IconColorCommandProperties() {
}


CommandUI.Controls.InsertTableCommandProperties = function CommandUI_Controls_InsertTableCommandProperties() {
}


CommandUI.Controls.LabelCommandProperties = function CommandUI_Controls_LabelCommandProperties() {
}


CommandUI.Controls.SliderCommandProperties = function CommandUI_Controls_SliderCommandProperties() {
}


CommandUI.Controls.SpinnerCommandProperties = function CommandUI_Controls_SpinnerCommandProperties() {
}


CommandUI.Controls.SplitButtonCommandProperties = function CommandUI_Controls_SplitButtonCommandProperties() {
}


CommandUI.Controls.StatefulImageSplitButtonCommandProperties = function CommandUI_Controls_StatefulImageSplitButtonCommandProperties() {
}


CommandUI.Controls.TextBoxCommandProperties = function CommandUI_Controls_TextBoxCommandProperties() {
}


CommandUI.Controls.ToggleButtonCommandProperties = function CommandUI_Controls_ToggleButtonCommandProperties() {
}


CommandUI.Controls._diagnosticsItemTextBoxDomStrategy = function CommandUI_Controls__diagnosticsItemTextBoxDomStrategy() {
    CommandUI.Controls._diagnosticsItemTextBoxDomStrategy.initializeBase(this);
}
CommandUI.Controls._diagnosticsItemTextBoxDomStrategy._createTextBox$p = function CommandUI_Controls__diagnosticsItemTextBoxDomStrategy$_createTextBox$p$st(id, labelledBy) {
    var textAreaElement = document.createElement('textarea');
    textAreaElement.id = id;
    textAreaElement.rows = 1;
    if (!Common.BrowserUtils.get_isIPad()) {
        textAreaElement.readOnly = true;
    }
    textAreaElement.setAttribute(Common.AccessibilityUtils.ariaLabelledByAttribute, labelledBy);
    textAreaElement.setAttribute(Common.AccessibilityUtils.ariaMultilineAttribute, Common.AccessibilityUtils.ariaFalseValue);
    textAreaElement.setAttribute(Common.AccessibilityUtils.ariaReadOnlyAttribute, Common.AccessibilityUtils.ariaTrueValue);
    textAreaElement.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaTextboxAttribute);
    Sys.UI.DomElement.addCssClass(textAreaElement, Common.ContextMenuInputManager.allowBrowserContextMenu);
    Sys.UI.DomElement.addCssClass(textAreaElement, 'UIFont');
    return textAreaElement;
}
CommandUI.Controls._diagnosticsItemTextBoxDomStrategy.prototype = {
    _focusableElement$1: null,
    
    get_focusableElement: function CommandUI_Controls__diagnosticsItemTextBoxDomStrategy$get_focusableElement$in() {
        return this._focusableElement$1;
    },
    
    buildControlDom: function CommandUI_Controls__diagnosticsItemTextBoxDomStrategy$buildControlDom$in(control, displayMode) {
        var properties = control.get_controlProperties();
        var elmControl = CommandUI.Utility.createElement('span');
        Sys.UI.DomElement.addCssClass(elmControl, 'cui-btn-menu-description');
        Sys.UI.DomElement.addCssClass(elmControl, 'cui-menusection-diagnostics-textbox');
        Sys.UI.DomElement.addCssClass(elmControl, 'UIFont');
        var controlCss = properties.ControlCss;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(controlCss)) {
            elmControl.style.cssText = controlCss;
        }
        var labelElement = CommandUI.Utility.createElement('label');
        Sys.UI.DomElement.addCssClass(labelElement, 'UIFontBold');
        Sys.UI.DomElement.addCssClass(labelElement, 'cui-menusection-diagnostics-textboxlabel');
        labelElement.setAttribute('for', control.get_id());
        labelElement.id = control.get_id() + '-label';
        labelElement.appendChild(document.createTextNode(properties.LabelText || ''));
        var labelledBy = labelElement.id;
        var additionalLabelBy = properties.AdditionalLabelBy;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(additionalLabelBy)) {
            labelledBy += ' ' + additionalLabelBy;
        }
        var textBox = CommandUI.Controls._diagnosticsItemTextBoxDomStrategy._createTextBox$p(control.get_id(), labelledBy);
        elmControl.appendChild(labelElement);
        elmControl.appendChild(textBox);
        this._focusableElement$1 = textBox;
        var $$t_9;
        return $$t_9 = new CommandUI.Controls.TextBoxComponentDom(displayMode, elmControl, this), $$t_9.elmInput = textBox, $$t_9.elmLabel = labelElement, $$t_9.isEditable = false, $$t_9;
    }
}


CommandUI.Controls.IControlDomStrategy = function CommandUI_Controls_IControlDomStrategy() {
}
CommandUI.Controls.IControlDomStrategy.prototype = {
    
    get_focusableElement: function CommandUI_Controls_IControlDomStrategy$get_focusableElement$in() {
        return null;
    },
    
    updateLabel: function CommandUI_Controls_IControlDomStrategy$updateLabel$in(elmLabel, properties) {
        return false;
    }
}


CommandUI.Controls._loadingIndicatorLabelDomStrategy = function CommandUI_Controls__loadingIndicatorLabelDomStrategy() {
    CommandUI.Controls._loadingIndicatorLabelDomStrategy.initializeBase(this);
}
CommandUI.Controls._loadingIndicatorLabelDomStrategy.prototype = {
    
    buildControlDom: function CommandUI_Controls__loadingIndicatorLabelDomStrategy$buildControlDom$in(control, displayMode) {
        var containerElement = CommandUI.Control._createOuterElement$i('cui-menuloading', control, false);
        containerElement.setAttribute('aria-label', control.get_controlProperties().LabelText);
        var indicator = new CommonUI.Progress('');
        containerElement.appendChild(indicator.get_element());
        return new CommandUI.ControlComponentDom(displayMode, containerElement, null);
    }
}


CommandUI.Controls.GalleryButtonComponentDom = function CommandUI_Controls_GalleryButtonComponentDom(displayMode) {
    CommandUI.Controls.GalleryButtonComponentDom.initializeBase(this, [ displayMode, null, null ]);
}
CommandUI.Controls.GalleryButtonComponentDom.prototype = {
    elmA: null
}


CommandUI.Controls._galleryButtonDomStrategy = function CommandUI_Controls__galleryButtonDomStrategy() {
}
CommandUI.Controls._galleryButtonDomStrategy.prototype = {
    
    buildControlDom: function CommandUI_Controls__galleryButtonDomStrategy$buildControlDom$in(control, displayMode) {
        var componentDom = new CommandUI.Controls.GalleryButtonComponentDom(displayMode);
        var $$t_3, $$t_4, $$t_5, $$t_6;
        this.buildGalleryButtonElements(control, displayMode, ($$t_3 = {'val': componentDom.elmControl}), ($$t_4 = {'val': componentDom.elmA}), ($$t_5 = {'val': componentDom.elmImage}), ($$t_6 = {'val': componentDom.elmIconContainer})), componentDom.elmControl = $$t_3.val, componentDom.elmA = $$t_4.val, componentDom.elmImage = $$t_5.val, componentDom.elmIconContainer = $$t_6.val;
        return componentDom;
    },
    
    buildGalleryButtonElements: function CommandUI_Controls__galleryButtonDomStrategy$buildGalleryButtonElements$in(control, displayMode, elmDefault, elmDefaultA, elmDefaultImage, elmDefaultImageCont) {
        var properties = control.get_properties();
        var alt = (CommandUI.ScriptUtility.isNullOrUndefined(properties.Alt)) ? '' : properties.Alt;
        var hasHtml = !CommandUI.ScriptUtility.isNullOrUndefined(properties.InnerHTML);
        elmDefault.val = CommandUI.Utility.createElement((hasHtml) ? 'div' : 'span');
        elmDefault.val.setAttribute('mscui:controltype', control.get_controlType());
        elmDefault.val.className = 'cui-gallerybutton cui-gallerybutton-' + CommandUI.Utility._galleryElementDimensionsToSizeString$i[control.get__elementDimensions$i$1()];
        elmDefault.val.setAttribute('role', 'presentation');
        elmDefaultA.val = CommandUI.Utility.createElement((hasHtml) ? 'div' : 'a');
        if (!control.get_shouldIgnoreTitle()) {
            elmDefaultA.val.title = alt;
        }
        elmDefaultA.val.className = 'cui-gallerybutton-a';
        elmDefaultA.val.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, control.get__ariaRole$i$0());
        elmDefaultImage.val = null;
        elmDefaultImageCont.val = null;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(properties.Alt) && !control.get_shouldIgnoreTitle()) {
            elmDefaultA.val.title = properties.Alt;
        }
        if (!hasHtml) {
            CommandUI.Utility._addToTabLoop$i(elmDefaultA.val);
        }
        else {
            elmDefaultA.val.tabIndex = 0;
        }
        elmDefault.val.appendChild(elmDefaultA.val);
        if (properties.VerticalCenterAlign) {
            this.setAttributeToCenterAlignVertically(elmDefaultA.val);
        }
        if (hasHtml) {
            elmDefaultA.val.innerHTML = properties.InnerHTML;
            CommandUI.Utility._setUnselectable$i(elmDefaultA.val, true, true);
        }
        else {
            if (CommandUI.ScriptUtility.isNullOrUndefined(properties.Image)) {
                throw Error.create('InnerHTML or Image must be defined for this GalleryButton');
            }
            var size = 7;
            switch (control.get__elementDimensions$i$1()) {
                case 1:
                    size = 4;
                    break;
                case 2:
                    size = 6;
                    break;
                case 3:
                    size = 7;
                    break;
                case 5:
                    size = 8;
                    break;
                case 6:
                    size = 9;
                    break;
                case 9:
                    size = 5;
                    break;
                case 10:
                    size = 15;
                    break;
                case 11:
                    size = 13;
                    break;
                case 12:
                    size = 12;
                    break;
                case 13:
                    size = 16;
                    break;
                case 14:
                    size = 17;
                    break;
                case 16:
                    size = 19;
                    break;
                default:
                    Common.Debug.assertNotReachedTag(4534812);
                    break;
            }
            elmDefaultImage.val = CommandUI.Utility.createElement('img');
            elmDefaultImageCont.val = CommandUI.Utility._createClusteredImageContainerNew$i(size, properties.Image, properties.ImageClass, elmDefaultImage.val, true, false);
            elmDefaultImage.val.alt = alt;
            elmDefaultA.val.appendChild(elmDefaultImageCont.val);
        }
    },
    
    setAttributeToCenterAlignVertically: function CommandUI_Controls__galleryButtonDomStrategy$setAttributeToCenterAlignVertically$in(targetElement) {
        targetElement.style.display = 'table';
        if (Common.BrowserUtils.get_isSafari4Up()) {
            targetElement.style.width = '100%';
            targetElement.style.height = '100%';
        }
    }
}


CommandUI.Controls._menuFooterButtonDomStrategy = function CommandUI_Controls__menuFooterButtonDomStrategy() {
    CommandUI.Controls._menuFooterButtonDomStrategy.initializeBase(this);
}
CommandUI.Controls._menuFooterButtonDomStrategy.prototype = {
    
    buildControlDom: function CommandUI_Controls__menuFooterButtonDomStrategy$buildControlDom$in(control, displayMode) {
        var buttonProps = control.get_controlProperties();
        var elm = CommandUI.Control._createOuterElement$i('cui-footerbutton', control, false);
        var elmLabel = CommandUI.Utility.createElement('span');
        elmLabel.appendChild(document.createTextNode(buttonProps.LabelText));
        elm.title = buttonProps.Description;
        elm.appendChild(elmLabel);
        return new CommandUI.ControlComponentDom(displayMode, elm, null);
    }
}


CommandUI.Controls._menuHeaderButtonDomStrategy = function CommandUI_Controls__menuHeaderButtonDomStrategy() {
    CommandUI.Controls._menuHeaderButtonDomStrategy.initializeBase(this);
}
CommandUI.Controls._menuHeaderButtonDomStrategy._createLabelDomElement$p = function CommandUI_Controls__menuHeaderButtonDomStrategy$_createLabelDomElement$p$st(label) {
    var elmLabel = CommandUI.Utility.createElement('span');
    elmLabel.className = 'cui-ctl-mediumlabel';
    elmLabel.appendChild(document.createTextNode(label));
    return elmLabel;
}
CommandUI.Controls._menuHeaderButtonDomStrategy.prototype = {
    
    buildControlDom: function CommandUI_Controls__menuHeaderButtonDomStrategy$buildControlDom$in(control, displayMode) {
        var buttonProps = control.get_controlProperties();
        var elmImage = CommandUI.Utility.createElement('img');
        var elmImageContainer = CommandUI.Utility._createClusteredImageContainerNew$i(5, buttonProps.Image32by32, buttonProps.Image32by32Class, elmImage, true, false);
        CommandUI.Utility.ensureCSSClassOnElement(elmImageContainer, 'cui-img-32by32');
        CommandUI.Utility.ensureCSSClassOnElement(elmImageContainer, 'cui-headerbutton-img');
        var elmTextContainer = CommandUI.Controls._menuHeaderButtonDomStrategy._createLabelDomElement$p(buttonProps.LabelText);
        var elm = CommandUI.Control._createOuterElement$i('cui-ctl-medium cui-headerbutton', control, false);
        elm.title = buttonProps.Description;
        elmImageContainer.appendChild(elmImage);
        elm.appendChild(elmImageContainer);
        elm.appendChild(elmTextContainer);
        return new CommandUI.ControlComponentDom(displayMode, elm, null);
    }
}


CommandUI.Controls._menuSubsectionLabelDomStrategy = function CommandUI_Controls__menuSubsectionLabelDomStrategy() {
    CommandUI.Controls._menuSubsectionLabelDomStrategy.initializeBase(this);
}
CommandUI.Controls._menuSubsectionLabelDomStrategy.prototype = {
    
    get_focusableElement: function CommandUI_Controls__menuSubsectionLabelDomStrategy$get_focusableElement$in() {
        return this._innerLinkElement$1;
    },
    
    _innerLinkElement$1: null,
    _control$1: null,
    
    get__properties$p$1: function CommandUI_Controls__menuSubsectionLabelDomStrategy$get__properties$p$1$in() {
        return this._control$1.get_controlProperties();
    },
    
    buildControlDom: function CommandUI_Controls__menuSubsectionLabelDomStrategy$buildControlDom$in(control, displayMode) {
        this._control$1 = control;
        var subsectionLabelClass = this._getSubsectionLabelClass$p$1(displayMode);
        var elmText = CommandUI.Control._createOuterElement$i(subsectionLabelClass, control, false);
        var labelCss = this.get__properties$p$1().LabelCss;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(labelCss)) {
            elmText.style.cssText = labelCss;
        }
        if (displayMode === 'MenuSaveButton' || displayMode === 'MenuDiagnostics') {
            var elmTitle = CommandUI.Utility.createElement('span');
            elmTitle.appendChild(document.createTextNode(this.get__properties$p$1().LabelText));
            elmTitle.className = String.format('{0} {1}', CommandUI.Controls._menuSubsectionLabelDomStrategy._mediumLabelClass$p, 'cui-btn-title');
            if (!(CommandUI.Jewel.isInstanceOfType(control.get_root()))) {
                elmTitle.className += ' UIFontBold';
            }
            elmTitle.style.display = 'block';
            elmText.appendChild(elmTitle);
            if (this.get__properties$p$1().Description) {
                var elmDescription = CommandUI.Utility.createElement('span');
                elmDescription.appendChild(document.createTextNode(this.get__properties$p$1().Description));
                elmDescription.className = CommandUI.Controls._menuSubsectionLabelDomStrategy._labelDescriptionClass$p;
                elmText.appendChild(elmDescription);
                elmDescription.style.display = 'block';
            }
        }
        else {
            this._updateElementInternal$p$1(elmText, this.get__properties$p$1().LabelText);
        }
        var result = new CommandUI.ControlComponentDom(displayMode, elmText, this);
        result.elmLabel = elmText;
        return result;
    },
    
    _getSubsectionLabelClass$p$1: function CommandUI_Controls__menuSubsectionLabelDomStrategy$_getSubsectionLabelClass$p$1$in(displayMode) {
        var subsectionLabelClass;
        switch (displayMode) {
            case 'MenuFileName':
                subsectionLabelClass = CommandUI.Controls._menuSubsectionLabelDomStrategy._filenameLabelClass$p;
                break;
            case 'MenuDiagnostics':
                subsectionLabelClass = String.format('{0} {1}', CommandUI.Controls._menuSubsectionLabelDomStrategy._diagnosticsLabelClass$p, CommandUI.Controls._menuSubsectionLabelDomStrategy._mediumLabelClass$p);
                break;
            default:
                subsectionLabelClass = String.format('{0} {1}', CommandUI.Controls._menuSubsectionLabelDomStrategy._mediumLabelClass$p, 'cui-menusection-subsectiontitle');
                if (!(CommandUI.Jewel.isInstanceOfType(this._control$1.get_root())) && (displayMode === 'MenuSaveButton')) {
                    subsectionLabelClass += ' cui-ctl-menu';
                }
                break;
        }
        return subsectionLabelClass;
    },
    
    updateLabel: function CommandUI_Controls__menuSubsectionLabelDomStrategy$updateLabel$in(elmLabel, newLabel) {
        this._updateElementInternal$p$1(elmLabel, newLabel);
        return true;
    },
    
    _updateElementInternal$p$1: function CommandUI_Controls__menuSubsectionLabelDomStrategy$_updateElementInternal$p$1$in(elm, labelString) {
        if (!labelString) {
            elm.style.display = 'none';
        }
        else {
            elm.style.display = 'block';
            this._innerLinkElement$1 = this._updateChildDomElements$p$1(elm, labelString);
        }
    },
    
    _updateChildDomElements$p$1: function CommandUI_Controls__menuSubsectionLabelDomStrategy$_updateChildDomElements$p$1$in(elm, labelString) {
        Common.DomUtils.clearElement(elm);
        var innerLinkElement = null;
        var labelSections = labelString.split('{0}');
        this._concateChildNodesWithBr$p$1(elm, labelSections[0]);
        innerLinkElement = this._appendLinkChildNode$p$1(elm);
        if (labelSections.length > 1) {
            this._concateChildNodesWithBr$p$1(elm, labelSections[1]);
        }
        return innerLinkElement;
    },
    
    _concateChildNodesWithBr$p$1: function CommandUI_Controls__menuSubsectionLabelDomStrategy$_concateChildNodesWithBr$p$1$in(elm, labelSection) {
        var sections = labelSection.split('\n');
        for (var $$arr_3 = sections, $$len_4 = $$arr_3.length, $$idx_5 = 0; $$idx_5 < $$len_4; ++$$idx_5) {
            var section = $$arr_3[$$idx_5];
            var spanDomElement = document.createElement('span');
            spanDomElement.innerText = section;
            elm.appendChild(spanDomElement);
            var brDomElement = document.createElement('br');
            elm.appendChild(brDomElement);
        }
        var lastChild = elm.lastChild;
        elm.removeChild(lastChild);
    },
    
    _appendLinkChildNode$p$1: function CommandUI_Controls__menuSubsectionLabelDomStrategy$_appendLinkChildNode$p$1$in(elm) {
        var innerLinkElement = null;
        if (this.get__properties$p$1().InnerLink && this.get__properties$p$1().InnerLinkText) {
            innerLinkElement = CommandUI.Utility.createElement('a');
            innerLinkElement.className = 'cui-subsectionlabellink';
            innerLinkElement.href = this.get__properties$p$1().InnerLink;
            innerLinkElement.target = '_blank';
            var linkTitle = this.get__properties$p$1().InnerLinkTitle;
            if (linkTitle && linkTitle.length > 0) {
                innerLinkElement.title = linkTitle;
            }
            innerLinkElement.appendChild(document.createTextNode(this.get__properties$p$1().InnerLinkText));
            elm.appendChild(innerLinkElement);
        }
        return innerLinkElement;
    }
}


CommandUI.Controls._mruButtonDomStrategy = function CommandUI_Controls__mruButtonDomStrategy() {
    CommandUI.Controls._mruButtonDomStrategy.initializeBase(this);
}
CommandUI.Controls._mruButtonDomStrategy._createDescriptionDomElement$p = function CommandUI_Controls__mruButtonDomStrategy$_createDescriptionDomElement$p$st(description) {
    var elmDescription = CommandUI.Utility.createElement('span');
    elmDescription.className = 'UIFont cui-mrubutton-description';
    elmDescription.appendChild(document.createTextNode(description));
    return elmDescription;
}
CommandUI.Controls._mruButtonDomStrategy._createLabelDomElement$p = function CommandUI_Controls__mruButtonDomStrategy$_createLabelDomElement$p$st(label) {
    var elmLabel = CommandUI.Utility.createElement('span');
    elmLabel.className = 'cui-mrubutton-title';
    elmLabel.appendChild(document.createTextNode(label));
    return elmLabel;
}
CommandUI.Controls._mruButtonDomStrategy.prototype = {
    
    buildControlDom: function CommandUI_Controls__mruButtonDomStrategy$buildControlDom$in(control, displayMode) {
        var buttonProps = control.get_controlProperties();
        var elmImage = CommandUI.Utility.createElement('img');
        var elmImageContainer = CommandUI.Utility._createClusteredImageContainerNew$i(5, buttonProps.Image32by32, buttonProps.Image32by32Class, elmImage, true, false);
        CommandUI.Utility.ensureCSSClassOnElement(elmImageContainer, 'cui-img-32by32');
        var elmTextContainer = null;
        elmTextContainer = CommandUI.Utility.createElement('span');
        elmTextContainer.className = 'cui-ctl-menulabel cui-mrubutton-textcontainer';
        elmTextContainer.appendChild(CommandUI.Controls._mruButtonDomStrategy._createLabelDomElement$p(buttonProps.LabelText));
        elmTextContainer.appendChild(CommandUI.Controls._mruButtonDomStrategy._createDescriptionDomElement$p(buttonProps.Description));
        var elm = CommandUI.Control._createOuterElement$i('cui-ctl-medium cui-mrubutton', control, false);
        elm.title = buttonProps.LabelText;
        elm.appendChild(elmImageContainer);
        elm.appendChild(elmTextContainer);
        return new CommandUI.ControlComponentDom(displayMode, elm, null);
    }
}


CommandUI.Controls.SplitButtonComponentDom = function CommandUI_Controls_SplitButtonComponentDom(displayMode) {
    CommandUI.Controls.SplitButtonComponentDom.initializeBase(this, [ displayMode, null, null ]);
}
CommandUI.Controls.SplitButtonComponentDom.prototype = {
    elmButtonPart: null,
    elmMenuLauncherPart: null,
    
    onImageLoad: function CommandUI_Controls_SplitButtonComponentDom$onImageLoad$in() {
        this.internalImageLoadHandler();
    },
    
    internalImageLoadHandler: function CommandUI_Controls_SplitButtonComponentDom$internalImageLoadHandler$in() {
    }
}


CommandUI.Controls._splitButtonDomStrategy = function CommandUI_Controls__splitButtonDomStrategy() {
}
CommandUI.Controls._splitButtonDomStrategy._createTwoAnchorControlDOMElement$p = function CommandUI_Controls__splitButtonDomStrategy$_createTwoAnchorControlDOMElement$p$st(control, root, displayMode, properties, arrow, buttonElement, menuLauncherElement, buttonImageElement) {
    var labelText = properties.LabelText;
    if (CommandUI.ScriptUtility.isNullOrUndefined(labelText)) {
        labelText = '';
    }
    var elm = CommandUI.Utility.createElement('span');
    if (displayMode === 'Large') {
        elm.className = 'cui-ctl-large';
    }
    else if (displayMode === 'Medium') {
        elm.className = 'cui-ctl cui-ctl-medium';
    }
    else if (displayMode === 'Medium20') {
        elm.className = 'cui-ctl cui-ctl-medium20 cui-ctl-medium';
    }
    else {
        elm.className = 'cui-ctl cui-ctl-small';
    }
    elm.setAttribute('mscui:controltype', control.get_controlType());
    elm.setAttribute('aria-expanded', 'false');
    var elmA1 = CommandUI.Utility._createNoOpLink$i(true);
    var elmA2 = CommandUI.Utility._createNoOpLink$i(true);
    elmA1.className = 'cui-ctl-a1';
    elmA2.className = 'cui-ctl-a2';
    elm.setAttribute('role', control.get__ariaRole$i$0());
    Common.AccessibilityUtils.setAriaAttribute(elm, 'aria-haspopup', 'true');
    elmA1.setAttribute('role', 'button');
    elmA2.setAttribute('role', 'button');
    elmA2.setAttribute('aria-expanded', 'false');
    Common.AccessibilityUtils.setAriaAttribute(elmA2, 'aria-haspopup', 'true');
    var elmA1Internal = CommandUI.Utility.createElement('span');
    elmA1Internal.className = 'cui-ctl-a1Internal';
    buttonImageElement.val = CommandUI.Utility.createElement('img');
    var imageUrl = null;
    var imageClass = null;
    var imgSize = 0;
    buttonImageElement.val.alt = '';
    var alt = properties.Alt;
    if (CommandUI.ScriptUtility.isNullOrUndefined(alt)) {
        alt = labelText;
    }
    elm.title = alt;
    if ((displayMode !== 'Medium' && displayMode !== 'Medium20') || (alt !== labelText)) {
        elmA1.title = alt;
    }
    if ((displayMode !== 'Large') || (alt !== labelText)) {
        elmA2.title = alt;
    }
    if (displayMode === 'Large' || displayMode === 'Menu32') {
        imageUrl = properties.Image32by32;
        imageClass = properties.Image32by32Class;
        imgSize = 5;
    }
    else if (displayMode === 'Medium20') {
        imageUrl = properties.Image20by20;
        imageClass = properties.Image20by20Class;
        imgSize = 13;
    }
    else {
        imageUrl = properties.Image16by16;
        imageClass = properties.Image16by16Class;
        imgSize = 4;
    }
    var elmImageCont = CommandUI.Utility._createClusteredImageContainerNew$i(imgSize, imageUrl, imageClass, buttonImageElement.val, true, false);
    var elmLabel = null;
    if ((displayMode !== 'Small' && displayMode !== 'Small14') || arrow) {
        elmLabel = CommandUI.Utility.createElement('span');
        if (displayMode !== 'Small' && displayMode !== 'Small14') {
            if (displayMode === 'Large') {
                CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'cui-ctl-largelabel');
                CommandUI.Utility._setLargeControlText$i(elmLabel, labelText, arrow);
            }
            else if (displayMode === 'Medium' || displayMode === 'Medium20') {
                CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'cui-ctl-mediumlabel');
                elmLabel.innerText = labelText;
            }
        }
    }
    var elmArrowCont = null;
    if (arrow) {
        var elmArrowImage = CommandUI.Utility.createElement('img');
        elmArrowImage.alt = '';
        if (control.get__isVisualRefreshEnabled$i$0()) {
            elmArrowCont = CommandUI.Utility._createClusteredImageContainerNew$i(2, root.get_properties().ImageDownArrow8by8, root.get_properties().ImageDownArrow8by8Class, elmArrowImage, true, false);
        }
        else {
            elmArrowCont = CommandUI.Utility._createClusteredImageContainerNew$i(1, root.get_properties().ImageDownArrow, root.get_properties().ImageDownArrowClass, elmArrowImage, true, false);
        }
    }
    elm.appendChild(elmA1);
    elm.appendChild(elmA2);
    elmA1.appendChild(elmA1Internal);
    elmA1Internal.appendChild(elmImageCont);
    if (!CommandUI.ScriptUtility.isNullOrUndefined(elmLabel)) {
        if (displayMode === 'Large') {
            elmA2.appendChild(elmLabel);
        }
        else {
            elmA1Internal.appendChild(elmLabel);
        }
    }
    if (!CommandUI.ScriptUtility.isNullOrUndefined(elmArrowCont)) {
        if (displayMode === 'Large') {
            elmLabel.appendChild(elmArrowCont);
        }
        else {
            elmA2.appendChild(elmArrowCont);
        }
    }
    elm.tabIndex = 0;
    elmA1.tabIndex = -1;
    elmA2.tabIndex = -1;
    buttonElement.val = elmA1;
    menuLauncherElement.val = elmA2;
    return elm;
}
CommandUI.Controls._splitButtonDomStrategy.prototype = {
    
    buildControlDom: function CommandUI_Controls__splitButtonDomStrategy$buildControlDom$in(control, displayMode) {
        var splitButtonDom = new CommandUI.Controls.SplitButtonComponentDom(displayMode);
        this.populateControlDom(splitButtonDom, control, displayMode);
        return splitButtonDom;
    },
    
    populateControlDom: function CommandUI_Controls__splitButtonDomStrategy$populateControlDom$in(splitButtonDom, control, displayMode) {
        var buttonElement;
        var menuLauncherElement;
        var buttonImageElement;
        var $$t_7, $$t_8, $$t_9, $$t_A;
        var splitbutton = (($$t_A = CommandUI.Controls._splitButtonDomStrategy._createTwoAnchorControlDOMElement$p(control, control.get_root(), displayMode, control.get_properties(), true, ($$t_7 = {'val': buttonElement}), ($$t_8 = {'val': menuLauncherElement}), ($$t_9 = {'val': buttonImageElement}))), buttonElement = $$t_7.val, menuLauncherElement = $$t_8.val, buttonImageElement = $$t_9.val, $$t_A);
        var $$t_B = this;
        $addHandler(buttonImageElement, 'load', function() {
            splitButtonDom.onImageLoad();
        });
        splitButtonDom.elmControl = splitbutton;
        splitButtonDom.elmImage = buttonImageElement;
        splitButtonDom.elmButtonPart = buttonElement;
        splitButtonDom.elmMenuLauncherPart = menuLauncherElement;
    }
}


CommandUI.Controls._standardControlDomStrategy = function CommandUI_Controls__standardControlDomStrategy(hasArrow) {
    CommandUI.Controls._standardControlDomStrategy.initializeBase(this);
    this._hasArrow$1 = hasArrow;
}
CommandUI.Controls._standardControlDomStrategy.prototype = {
    _hasArrow$1: false,
    
    buildControlDom: function CommandUI_Controls__standardControlDomStrategy$buildControlDom$in(control, displayMode) {
        var controlDom = new CommandUI.ControlComponentDom(displayMode, null, null);
        var $$t_3, $$t_4, $$t_5, $$t_6, $$t_7;
        controlDom.elmControl = (($$t_7 = CommandUI.Control._createStandardControlDOMElement$i(control, control.get_root(), displayMode, control.get_controlProperties(), this._hasArrow$1, ($$t_3 = {'val': controlDom.elmLabel}), ($$t_4 = {'val': controlDom.elmImage}), ($$t_5 = {'val': controlDom.elmDescription}), ($$t_6 = {'val': controlDom.elmIconContainer}))), controlDom.elmLabel = $$t_3.val, controlDom.elmImage = $$t_4.val, controlDom.elmDescription = $$t_5.val, controlDom.elmIconContainer = $$t_6.val, $$t_7);
        return controlDom;
    }
}


CommandUI.Controls._standardLabelDomStrategy = function CommandUI_Controls__standardLabelDomStrategy() {
    CommandUI.Controls._standardLabelDomStrategy.initializeBase(this);
}
CommandUI.Controls._standardLabelDomStrategy.prototype = {
    
    buildControlDom: function CommandUI_Controls__standardLabelDomStrategy$buildControlDom$in(control, displayMode) {
        Common.Debug.assertTag(CommandUI.Controls.Label.isInstanceOfType(control), 4515341);
        var standardDomStrategy = new CommandUI.Controls._standardControlDomStrategy(false);
        var controlComponentDom = standardDomStrategy.buildControlDom(control, displayMode);
        var isMenu = CommandUI.ControlComponent._isDisplayModeMenu$i(displayMode);
        var isCompact = (displayMode === 'MediumCompact');
        this._setCssClasses$p$1(controlComponentDom.elmControl, isMenu, isCompact);
        this._setAccessibilityInfo$p$1(controlComponentDom.elmControl, isMenu);
        this._setImageBackgroundColor$p$1(controlComponentDom.elmImage, (control.get_controlProperties()).ImageBackColor);
        this._setLabelForTarget$p$1(controlComponentDom.elmLabel, (control.get_controlProperties()).For);
        return controlComponentDom;
    },
    
    _setCssClasses$p$1: function CommandUI_Controls__standardLabelDomStrategy$_setCssClasses$p$1$in(elmControl, isMenu, isCompact) {
        elmControl.className = (isCompact) ? 'cui-fslb cui-ctl-compact' : 'cui-fslb';
        if (isMenu) {
            CommandUI.Utility.ensureCSSClassOnElement(elmControl, 'cui-ctl-menu');
            CommandUI.Utility.ensureCSSClassOnElement(elmControl, 'cui-ctl-menu16');
        }
    },
    
    _setAccessibilityInfo$p$1: function CommandUI_Controls__standardLabelDomStrategy$_setAccessibilityInfo$p$1$in(elmControl, isMenu) {
        elmControl.tabIndex = -1;
        if (!isMenu) {
            Common.AccessibilityUtils.setAriaAttribute(elmControl, 'aria-hidden', 'true');
        }
        elmControl.title = '';
    },
    
    _setImageBackgroundColor$p$1: function CommandUI_Controls__standardLabelDomStrategy$_setImageBackgroundColor$p$1$in(image, imageBackColor) {
        if (image && imageBackColor !== '') {
            image.style.backgroundColor = imageBackColor;
        }
    },
    
    _setLabelForTarget$p$1: function CommandUI_Controls__standardLabelDomStrategy$_setLabelForTarget$p$1$in(label, forTarget) {
        if (label && !CommandUI.ScriptUtility.isNullOrEmptyString(forTarget)) {
            label.setAttribute('for', forTarget);
        }
    }
}


CommandUI.Controls.StandardTextBoxDomStrategy = function CommandUI_Controls_StandardTextBoxDomStrategy() {
    CommandUI.Controls.StandardTextBoxDomStrategy.initializeBase(this);
}
CommandUI.Controls.StandardTextBoxDomStrategy._createLabelElement$p = function CommandUI_Controls_StandardTextBoxDomStrategy$_createLabelElement$p$st(control, displayMode) {
    var properties = control.get_controlProperties();
    var elmLabel = CommandUI.Utility.createElement('span');
    var labelText = properties.LabelText || '';
    if (displayMode === 'Small') {
        CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'cui-ctl-smalllabel');
    }
    else if (displayMode === 'Large') {
        CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'cui-ctl-largelabel');
    }
    else {
        CommandUI.Utility.ensureCSSClassOnElement(elmLabel, 'cui-ctl-mediumlabel');
    }
    elmLabel.id = 'lbl' + control.get_id() + '-' + displayMode;
    elmLabel.innerText = labelText;
    var labelCss = properties.LabelCss;
    if (!CommandUI.ScriptUtility.isNullOrEmptyString(labelCss)) {
        elmLabel.style.cssText = labelCss;
    }
    return elmLabel;
}
CommandUI.Controls.StandardTextBoxDomStrategy._createInputElement$p = function CommandUI_Controls_StandardTextBoxDomStrategy$_createInputElement$p$st(control, displayMode) {
    var properties = control.get_controlProperties();
    var elmInput;
    if (CommandUI.Utility.isTrue(properties.IsMultiline)) {
        elmInput = CommandUI.Utility._createSelectableElement$i('textarea');
        elmInput.setAttribute('aria-multiline', 'true');
        elmInput.className = 'cui-txtbx';
        CommandUI.Utility.ensureCSSClassOnElement(elmInput, 'cui-txtbx-multiline');
    }
    else {
        elmInput = CommandUI.Utility._createSelectableElement$i('input');
        elmInput.setAttribute('aria-multiline', 'false');
        elmInput.setAttribute('data-lpignore', 'true');
        elmInput.className = 'cui-txtbx';
    }
    elmInput.id = control.get_id();
    elmInput.setAttribute('type', 'text');
    elmInput.setAttribute('role', 'textbox');
    elmInput.setAttribute('autocomplete', 'off');
    if (CommandUI.Utility.isTrue(properties.IsStretchedHorizontally)) {
        CommandUI.Utility.ensureCSSClassOnElement(elmInput, 'stretchedHorizontally');
    }
    var height = properties.Height;
    if (!CommandUI.ScriptUtility.isNullOrUndefined(height)) {
        elmInput.style.height = height;
    }
    var width = properties.Width;
    if (!CommandUI.ScriptUtility.isNullOrUndefined(width)) {
        elmInput.style.width = width;
    }
    var labelId = 'lbl' + control.get_id() + '-' + displayMode;
    var additionalLabelBy = properties.AdditionalLabelBy;
    if (!CommandUI.ScriptUtility.isNullOrUndefined(additionalLabelBy)) {
        elmInput.setAttribute('aria-labelledby', additionalLabelBy + ' ' + labelId);
    }
    else {
        elmInput.setAttribute('aria-labelledby', labelId);
    }
    var maxlength = properties.MaxLength;
    if (!CommandUI.ScriptUtility.isNullOrUndefined(maxlength)) {
        elmInput.setAttribute('maxlength', maxlength);
    }
    var placeholderText = properties.PlaceholderText;
    if (!CommandUI.ScriptUtility.isNullOrUndefined(placeholderText)) {
        elmInput.setAttribute('placeholder', placeholderText);
    }
    return elmInput;
}
CommandUI.Controls.StandardTextBoxDomStrategy.prototype = {
    _focusableElement$1: null,
    
    get_focusableElement: function CommandUI_Controls_StandardTextBoxDomStrategy$get_focusableElement$in() {
        return this._focusableElement$1;
    },
    
    buildControlDom: function CommandUI_Controls_StandardTextBoxDomStrategy$buildControlDom$in(control, displayMode) {
        var properties = control.get_controlProperties();
        var elmControl = CommandUI.Utility.createElement('span');
        elmControl.className = 'cui-tb';
        elmControl.setAttribute('mscui:controltype', control.get_controlType());
        elmControl.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaPresentationRole);
        if (CommandUI.Utility.isTrue(properties.IsStretchedHorizontally)) {
            CommandUI.Utility.ensureCSSClassOnElement(elmControl, 'stretchedHorizontally');
        }
        var elmLabel = CommandUI.Controls.StandardTextBoxDomStrategy._createLabelElement$p(control, displayMode);
        elmControl.appendChild(elmLabel);
        var elmInput = CommandUI.Controls.StandardTextBoxDomStrategy._createInputElement$p(control, displayMode);
        elmControl.appendChild(elmInput);
        this._focusableElement$1 = elmInput;
        var $$t_6;
        return $$t_6 = new CommandUI.Controls.TextBoxComponentDom(displayMode, elmControl, null), $$t_6.elmInput = elmInput, $$t_6.elmLabel = elmLabel, $$t_6.isEditable = true, $$t_6.isMultiline = (CommandUI.Utility.isTrue(properties.IsMultiline)), $$t_6;
    }
}


CommandUI.Controls.StatefulColorFlyoutAnchorComponentDom = function CommandUI_Controls_StatefulColorFlyoutAnchorComponentDom(displayMode) {
    CommandUI.Controls.StatefulColorFlyoutAnchorComponentDom.initializeBase(this, [ displayMode, null, null ]);
}
CommandUI.Controls.StatefulColorFlyoutAnchorComponentDom.prototype = {
    elmCanvasPart: null
}


CommandUI.Controls._statefulColorFlyoutAnchorDomStrategy = function CommandUI_Controls__statefulColorFlyoutAnchorDomStrategy(hasArrow) {
    this._hasArrow$p$0 = hasArrow;
}
CommandUI.Controls._statefulColorFlyoutAnchorDomStrategy.prototype = {
    _hasArrow$p$0: false,
    
    buildControlDom: function CommandUI_Controls__statefulColorFlyoutAnchorDomStrategy$buildControlDom$in(control, displayMode) {
        var controlDom = new CommandUI.Controls.StatefulColorFlyoutAnchorComponentDom(displayMode);
        var $$t_3, $$t_4, $$t_5, $$t_6, $$t_7;
        controlDom.elmControl = (($$t_7 = CommandUI.Control._createStandardControlDOMElement$i(control, control.get_root(), displayMode, control.get_controlProperties(), this._hasArrow$p$0, ($$t_3 = {'val': controlDom.elmLabel}), ($$t_4 = {'val': controlDom.elmImage}), ($$t_5 = {'val': controlDom.elmDescription}), ($$t_6 = {'val': controlDom.elmIconContainer}))), controlDom.elmLabel = $$t_3.val, controlDom.elmImage = $$t_4.val, controlDom.elmDescription = $$t_5.val, controlDom.elmIconContainer = $$t_6.val, $$t_7);
        this._populateCanvasElement$p$0(controlDom, displayMode);
        return controlDom;
    },
    
    _populateCanvasElement$p$0: function CommandUI_Controls__statefulColorFlyoutAnchorDomStrategy$_populateCanvasElement$p$0$in(controlComponentDom, displayMode) {
        controlComponentDom.elmCanvasPart = null;
        var controlSize = CommandUI.Control._getControlSize$i(displayMode);
        if (controlSize !== CommandUI.ControlSize.control16) {
            Diag.ULS.sendTraceTag(40421406, 207, 15, 'StatefulColorFlyoutAnchorComponentDomStrategy.PopulateCanvasElement: Control.GetControlSize did not return ControlSize of Control16. Bailing out...');
            return;
        }
        if (!controlComponentDom.elmImage) {
            Diag.ULS.sendTraceTag(40421407, 207, 15, 'StatefulColorFlyoutAnchorComponentDomStrategy.PopulateCanvasElement: StatefulColorFlyoutAnchorComponentDom.ElmImage is null. Bailing out...');
            return;
        }
        var imageParentNode = controlComponentDom.elmImage.parentNode;
        var element = CommandUI.Utility.createElement('canvas');
        if (!element) {
            Diag.ULS.sendTraceTag(40421408, 207, 15, 'StatefulColorFlyoutAnchorComponentDomStrategy.PopulateCanvasElement: Utility.CreateElement did not create a CanvasElement. Bailing out...');
            return;
        }
        element.height = CommandUI.Controls._statefulColorFlyoutAnchorDomStrategy._iconHeight$p;
        element.width = CommandUI.Controls._statefulColorFlyoutAnchorDomStrategy._iconWidth$p;
        var context = element.getContext('2d');
        if (!context) {
            Diag.ULS.sendTraceTag(40421409, 207, 15, 'StatefulColorFlyoutAnchorComponentDomStrategy.PopulateCanvasElement: element.GetContext did not return a 2d context. Bailing out...');
            return;
        }
        try {
            context.clearRect(0, 0, element.width, element.height);
            imageParentNode.appendChild(element);
            controlComponentDom.elmCanvasPart = element;
        }
        catch (ex) {
            Diag.ULS.sendTraceTag(40421410, 207, 15, String.format('StatefulColorFlyoutAnchorComponentDomStrategy.PopulateCanvasElement: a 2d context operation of appending the canvas to StatefulColorFlyoutAnchorComponentDom.ElmImage failed. Exception message: {0}', ex.message));
        }
    }
}


CommandUI.Controls.StatefulColorSplitButtonComponentDom = function CommandUI_Controls_StatefulColorSplitButtonComponentDom(displayMode) {
    CommandUI.Controls.StatefulColorSplitButtonComponentDom.initializeBase(this, [ displayMode ]);
}
CommandUI.Controls.StatefulColorSplitButtonComponentDom.prototype = {
    elmCanvasPart: null,
    
    internalImageLoadHandler: function CommandUI_Controls_StatefulColorSplitButtonComponentDom$internalImageLoadHandler$in() {
        var context = this.elmCanvasPart.getContext('2d');
        if (!context) {
            Diag.ULS.sendTraceTag(39986014, 207, 15, 'StatefulColorSplitButtonComponentDom.InternalImageLoadHandler: ElmCanvasPart.GetContext did not return a 2d context. Bailing out...');
            return;
        }
        try {
            context.drawImage(this.elmImage, -this.elmImage.offsetLeft, -this.elmImage.offsetTop, this.elmCanvasPart.width, 12, 0, 0, this.elmCanvasPart.width, 12);
        }
        catch (ex) {
            Diag.ULS.sendTraceTag(39986015, 207, 15, String.format('StatefulColorSplitButtonComponentDom.InternalImageLoadHandler: a 2d context drawImage operation failed. Exception message: {0}', ex.message));
            this._setDefaultImageDisplay$i$2('');
            return;
        }
        this._setDefaultImageDisplay$i$2('none');
    },
    
    _setDefaultImageDisplay$i$2: function CommandUI_Controls_StatefulColorSplitButtonComponentDom$_setDefaultImageDisplay$i$2$in(display) {
        try {
            if (this.elmImage && this.elmImage.style && this.elmImage.style.display !== display) {
                this.elmImage.style.display = display;
            }
        }
        catch (ex) {
            Diag.ULS.sendTraceTag(39986016, 207, 15, String.format('StatefulColorSplitButtonComponentDom.SetDefualtImangeDisplay: ElmImage.Style.Display = {0} failed. Exception message: {1}', display, ex.message));
        }
    }
}


CommandUI.Controls._statefulColorSplitButtonDomStrategy = function CommandUI_Controls__statefulColorSplitButtonDomStrategy() {
    CommandUI.Controls._statefulColorSplitButtonDomStrategy.initializeBase(this);
}
CommandUI.Controls._statefulColorSplitButtonDomStrategy.prototype = {
    
    buildControlDom: function CommandUI_Controls__statefulColorSplitButtonDomStrategy$buildControlDom$in(control, displayMode) {
        var statefulColorSplitButtonComponentDom = new CommandUI.Controls.StatefulColorSplitButtonComponentDom(displayMode);
        this.populateControlDom(statefulColorSplitButtonComponentDom, control, displayMode);
        this._populateCanvasElement$p$1(statefulColorSplitButtonComponentDom, displayMode);
        return statefulColorSplitButtonComponentDom;
    },
    
    _populateCanvasElement$p$1: function CommandUI_Controls__statefulColorSplitButtonDomStrategy$_populateCanvasElement$p$1$in(controlComponentDom, displayMode) {
        controlComponentDom.elmCanvasPart = null;
        var controlSize = CommandUI.Control._getControlSize$i(displayMode);
        Diag.ULS.shipAssertTag(22315809, 207, controlSize === CommandUI.ControlSize.control16, 'Stateful color split button is implemented for 16X16px icons');
        if (controlSize !== CommandUI.ControlSize.control16) {
            return;
        }
        var imageParentNode = controlComponentDom.elmImage.parentNode;
        var element = CommandUI.Utility.createElement('canvas');
        if (!element) {
            Diag.ULS.sendTraceTag(39986017, 207, 15, 'StatefulColorSplitButtonComponentDom.PopulateCanvasElement: failed to create a canvas element. Bailing out...');
            controlComponentDom._setDefaultImageDisplay$i$2('');
            return;
        }
        element.height = CommandUI.Controls._statefulColorSplitButtonDomStrategy._iconHeight$p;
        element.width = CommandUI.Controls._statefulColorSplitButtonDomStrategy._iconWidth$p;
        var context = element.getContext('2d');
        if (!context) {
            Diag.ULS.sendTraceTag(39986018, 207, 15, 'StatefulColorSplitButtonComponentDom.PopulateCanvasElement: element.GetContext did not return a 2d context. Bailing out...');
            controlComponentDom._setDefaultImageDisplay$i$2('');
            return;
        }
        try {
            context.clearRect(0, 0, element.width, element.height);
            imageParentNode.appendChild(element);
            controlComponentDom.elmCanvasPart = element;
        }
        catch (ex) {
            Diag.ULS.sendTraceTag(39986019, 207, 15, String.format('StatefulColorSplitButtonComponentDom.PopulateCanvasElement: a 2d context ClearRect operation failed with element.Width=\'{0}\', element.Height=\'{1}\'. Exception message: {2}', element.width, element.height, ex.message));
            controlComponentDom._setDefaultImageDisplay$i$2('');
        }
    }
}


CommandUI.Controls._templateButtonDomStrategy = function CommandUI_Controls__templateButtonDomStrategy() {
    CommandUI.Controls._templateButtonDomStrategy.initializeBase(this);
}
CommandUI.Controls._templateButtonDomStrategy._createLabelDomElement$p = function CommandUI_Controls__templateButtonDomStrategy$_createLabelDomElement$p$st(label, isPortrait, isSquare) {
    var elmLabel = CommandUI.Utility.createElement('span');
    elmLabel.className = 'UIFont cui-templatebutton-label-' + ((isPortrait) ? 'portrait' : (isSquare) ? 'square' : 'landscape');
    elmLabel.appendChild(document.createTextNode(label));
    return elmLabel;
}
CommandUI.Controls._templateButtonDomStrategy._logThumbnailPerfAndRetryIfNecessary$p = function CommandUI_Controls__templateButtonDomStrategy$_logThumbnailPerfAndRetryIfNecessary$p$st(elmImage, success) {
    var retryAndLogState = elmImage.getAttribute(CommandUI.Controls._templateButtonDomStrategy._retryAndLogAttribute$p);
    if (retryAndLogState === CommandUI.Controls._templateButtonDomStrategy._stopLoggingValue$p) {
        return;
    }
    var isRetry = retryAndLogState === CommandUI.Controls._templateButtonDomStrategy._isRetryValue$p;
    var thumbnailUrl = elmImage.src;
    var loggingParams = { ThumbnailUrl: thumbnailUrl, CompletedSuccessfully: success, IsRetry: isRetry };
    var performance = window.performance;
    if (performance && typeof(performance.getEntriesByName) !== 'undefined') {
        var resourceTimings = performance.getEntriesByName(thumbnailUrl);
        if (resourceTimings && resourceTimings.length > 0) {
            var resourceTiming = resourceTimings[0];
            loggingParams['Duration'] = parseInt(resourceTiming.duration);
            loggingParams['FetchStart'] = parseInt(resourceTiming.fetchStart);
            loggingParams['ResponseEnd'] = parseInt(resourceTiming.responseEnd);
        }
    }
    Diag.ULS.sendTraceTag(4515987, 202, (success) ? 50 : 15, 'Template thumbnail download finished {0}', loggingParams);
    if (!success) {
        if (isRetry) {
            elmImage.setAttribute(CommandUI.Controls._templateButtonDomStrategy._retryAndLogAttribute$p, CommandUI.Controls._templateButtonDomStrategy._stopLoggingValue$p);
        }
        else {
            var filename = elmImage.src;
            elmImage.src = null;
            elmImage.src = filename;
            elmImage.setAttribute(CommandUI.Controls._templateButtonDomStrategy._retryAndLogAttribute$p, CommandUI.Controls._templateButtonDomStrategy._isRetryValue$p);
        }
    }
}
CommandUI.Controls._templateButtonDomStrategy.prototype = {
    
    buildControlDom: function CommandUI_Controls__templateButtonDomStrategy$buildControlDom$in(control, displayMode) {
        var buttonProps = control.get_controlProperties();
        var buttonClass = 'cui-ctl-medium';
        var isPortrait = false;
        var isSquare = false;
        var elmImage = CommandUI.Utility.createElement('img');
        if (!isNullOrUndefined(buttonProps.Image95by123)) {
            elmImage.src = buttonProps.Image95by123;
            elmImage.className = 'cui-img-95by123';
            buttonClass += ' cui-templatebutton-portrait';
            isPortrait = true;
        }
        else if (!isNullOrUndefined(buttonProps.Image123by95)) {
            elmImage.src = buttonProps.Image123by95;
            elmImage.className = 'cui-img-123by95';
            buttonClass += ' cui-templatebutton-landscape';
        }
        else if (!isNullOrUndefined(buttonProps.Image123by69)) {
            elmImage.src = buttonProps.Image123by69;
            elmImage.className = 'cui-img-123by69';
            buttonClass += ' cui-templatebutton-shortlandscape';
        }
        else if (!isNullOrUndefined(buttonProps.Image100by100)) {
            elmImage.src = buttonProps.Image100by100;
            elmImage.className = 'cui-img-100by100';
            buttonClass += ' cui-templatebutton-square';
            isSquare = true;
        }
        var $$t_A = this;
        $addHandler(elmImage, 'load', function() {
            CommandUI.Controls._templateButtonDomStrategy._logThumbnailPerfAndRetryIfNecessary$p(elmImage, true);
        });
        var $$t_B = this;
        $addHandler(elmImage, 'error', function() {
            CommandUI.Controls._templateButtonDomStrategy._logThumbnailPerfAndRetryIfNecessary$p(elmImage, false);
        });
        var elmImageContainer = CommandUI.Utility.createElement('div');
        var elmTextContainer = CommandUI.Controls._templateButtonDomStrategy._createLabelDomElement$p(buttonProps.LabelText, isPortrait, isSquare);
        var elm = CommandUI.Control._createOuterElement$i(buttonClass, control, false);
        elm.title = buttonProps.LabelText;
        elmImageContainer.appendChild(elmImage);
        elm.appendChild(elmImageContainer);
        elm.appendChild(elmTextContainer);
        return new CommandUI.ControlComponentDom(displayMode, elm, null);
    }
}


CommandUI.Controls.DropDownProperties = function CommandUI_Controls_DropDownProperties() {
    CommandUI.Controls.DropDownProperties.initializeBase(this);
}
CommandUI.Controls.DropDownProperties.prototype = {
    QueryCommand: null,
    Width: null,
    SmallWidth: null
}


CommandUI.Controls.DropDownComponentDom = function CommandUI_Controls_DropDownComponentDom(displayMode, elmControl, elmSelectedItem) {
    CommandUI.Controls.DropDownComponentDom.initializeBase(this, [ displayMode, elmControl, null ]);
    this.elmSelectedItem = elmSelectedItem;
}
CommandUI.Controls.DropDownComponentDom.prototype = {
    elmSelectedItem: null
}


CommandUI.Controls.DropDown = function CommandUI_Controls_DropDown(root, id, properties, menu) {
    CommandUI.Controls.DropDown.initializeBase(this, [ root, id, properties, menu ]);
    this.addDisplayMode('Medium');
    this.addDisplayMode('MenuTellMe');
    this.addDisplayMode('Small');
    this.get_stateProperties()[CommandUI.Controls.DropDownCommandProperties.SelectedItemId] = null;
}
CommandUI.Controls.DropDown.prototype = {
    _$$pf_DropDownDom$p$2: null,
    
    get_dropDownDom: function CommandUI_Controls_DropDown$get_dropDownDom$in() {
        return this._$$pf_DropDownDom$p$2;
    },
    
    set_dropDownDom: function CommandUI_Controls_DropDown$set_dropDownDom$in(value) {
        this._$$pf_DropDownDom$p$2 = value;
        return value;
    },
    
    get_additionalMenuCssClass: function CommandUI_Controls_DropDown$get_additionalMenuCssClass$in() {
        return 'cui-dd-menu';
    },
    
    get__propertiesAlt$p$2: function CommandUI_Controls_DropDown$get__propertiesAlt$p$2$in() {
        return (CommandUI.ScriptUtility.isNullOrUndefined(this.get_properties().Alt)) ? CommandUI.ScriptUtility._emptyString$i : this.get_properties().Alt;
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_DropDown$createComponentDomForDisplayMode$in(displayMode) {
        var elmMedium;
        var elmMediumSelectedItem;
        var elmMediumBtnA;
        var elmMediumArwImg;
        var elmMediumArwImgCont;
        elmMedium = CommandUI.Utility.createElement('span');
        elmMedium.className = 'cui-dd';
        elmMedium.setAttribute('mscui:controltype', this.get_controlType());
        CommandUI.Utility._addToTabLoop$i(elmMedium);
        elmMediumSelectedItem = CommandUI.Utility.createElement('span');
        elmMediumSelectedItem.className = 'cui-dd-text';
        elmMediumSelectedItem.style.width = (this.isSmallWidth(displayMode)) ? this.get_properties().SmallWidth : this.get_properties().Width;
        elmMediumSelectedItem.setAttribute(Common.AccessibilityUtils.ariaHiddenAttribute, Common.AccessibilityUtils.ariaTrueValue);
        var itemId = this.get_stateProperties()[CommandUI.Controls.DropDownCommandProperties.SelectedItemId];
        if (!CommandUI.ScriptUtility.isNullOrUndefined(itemId)) {
            var selected = this.selectDropdownItemById(itemId);
            Common.Debug.assertStringTag(selected, 'Initial dropdown selection invalid!', 2098901);
        }
        elmMediumBtnA = CommandUI.Utility.createElement('a');
        elmMediumBtnA.setAttribute(Common.AccessibilityUtils.ariaHiddenAttribute, Common.AccessibilityUtils.ariaTrueValue);
        CommandUI.Utility.ensureCSSClassOnElement(elmMediumBtnA, 'cui-dd-arrow-button');
        elmMediumBtnA.id = this.get_id();
        elmMediumArwImg = CommandUI.Utility.createElement('img');
        if (this.get__isVisualRefreshEnabled$i$0()) {
            elmMediumArwImgCont = CommandUI.Utility._createClusteredImageContainerNew$i(2, this.get_root().get_properties().ImageDownArrow8by8, this.get_root().get_properties().ImageDownArrow8by8Class, elmMediumArwImg, true, false);
        }
        else {
            elmMediumArwImgCont = CommandUI.Utility._createClusteredImageContainerNew$i(1, this.get_root().get_properties().ImageDownArrow, this.get_root().get_properties().ImageDownArrowClass, elmMediumArwImg, true, false);
        }
        elmMediumBtnA.setAttribute('title', this.get__propertiesAlt$p$2());
        elmMediumSelectedItem.title = this.get__propertiesAlt$p$2();
        elmMediumArwImg.alt = this.get__propertiesAlt$p$2();
        elmMedium.appendChild(elmMediumSelectedItem);
        elmMedium.appendChild(elmMediumBtnA);
        elmMediumBtnA.appendChild(elmMediumArwImgCont);
        this.set_dropDownDom(new CommandUI.Controls.DropDownComponentDom(displayMode, elmMedium, elmMediumSelectedItem));
        return this.get_dropDownDom();
    },
    
    setInitialAriaMenuLauncherAttributes: function CommandUI_Controls_DropDown$setInitialAriaMenuLauncherAttributes$in(focusableElement) {
        Common.AccessibilityUtils.setAriaAttribute(focusableElement, Common.AccessibilityUtils.ariaRoleAttribute, this.get__ariaRole$i$0());
        CommandUI.MenuLauncher.prototype.setInitialAriaMenuLauncherAttributes.call(this, focusableElement);
    },
    
    get_controlType: function CommandUI_Controls_DropDown$get_controlType$in() {
        return CommandUI.Control.dropDownControlType;
    },
    
    _selectedControl: null,
    
    get_selectedControl: function CommandUI_Controls_DropDown$get_selectedControl$in() {
        return this._selectedControl;
    },
    
    selectDropdownItem: function CommandUI_Controls_DropDown$selectDropdownItem$in(isc) {
        if (this.get_selectedControl() === isc) {
            return;
        }
        this._selectedControl = isc;
        this.get_stateProperties()[CommandUI.Controls.DropDownCommandProperties.SelectedItemId] = isc.getMenuItemId();
        var text = isc.getTextValue();
        var selectedItem = CommandUI.Utility.createElement('a');
        selectedItem.innerText = text;
        if (this.get_dropDownDom() && this.get_dropDownDom().elmSelectedItem) {
            var elmSelectedItem = this.get_dropDownDom().elmSelectedItem;
            if (elmSelectedItem.hasChildNodes()) {
                var oldSelectedItem = elmSelectedItem.firstChild;
                elmSelectedItem.replaceChild(selectedItem, oldSelectedItem);
            }
            else {
                elmSelectedItem.appendChild(selectedItem);
            }
            Common.AccessibilityUtils.setAriaAttribute(this.get_dropDownDom().elmControl, Common.AccessibilityUtils.ariaLabelAttribute, this.get__propertiesAlt$p$2() + ' ' + text);
        }
    },
    
    _getItemById$p$2: function CommandUI_Controls_DropDown$_getItemById$p$2$in(comp, id) {
        var tmp;
        if (CommandUI.ControlComponent.isInstanceOfType(comp)) {
            var concomp = comp;
            if (CommandUI.ISelectableControl.isInstanceOfType(concomp.get_control())) {
                var isc = concomp.get_control();
                if (isc.getMenuItemId() === id) {
                    return isc;
                }
            }
        }
        var children = comp.get_children();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(children)) {
            var $$enum_7 = children.getEnumerator();
            while ($$enum_7.moveNext()) {
                var c = $$enum_7.get_current();
                tmp = this._getItemById$p$2(c, id);
                if (tmp) {
                    return tmp;
                }
            }
        }
        return null;
    },
    
    executeDropdownItem: function CommandUI_Controls_DropDown$executeDropdownItem$in(isc, controlId, source, inputMethod, elmTarget) {
        return false;
    },
    
    selectDropdownItemById: function CommandUI_Controls_DropDown$selectDropdownItemById$in(itemId) {
        var selected = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(itemId) && !CommandUI.ScriptUtility.isNullOrUndefined(this.get_menu())) {
            var isc = this._getItemById$p$2(this.get_menu(), itemId);
            if (!CommandUI.ScriptUtility.isNullOrUndefined(isc)) {
                this.selectDropdownItem(isc);
                selected = true;
            }
        }
        return selected;
    },
    
    get_properties: function CommandUI_Controls_DropDown$get_properties$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    constructClonedMenuLauncher: function CommandUI_Controls_DropDown$constructClonedMenuLauncher$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.DropDown(root, this.get_id(), properties, clonedMenu);
    },
    
    constructClonedMenuLauncherForMenu: function CommandUI_Controls_DropDown$constructClonedMenuLauncherForMenu$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.FlyoutAnchor(root, this.get_id(), properties, clonedMenu);
    },
    
    isSmallWidth: function CommandUI_Controls_DropDown$isSmallWidth$in(displayMode) {
        return !CommandUI.ScriptUtility.isNullOrUndefined(this.get_properties().SmallWidth) && displayMode.startsWith('Small');
    }
}


CommandUI.Controls.FlyoutAnchorProperties = function CommandUI_Controls_FlyoutAnchorProperties() {
    CommandUI.Controls.FlyoutAnchorProperties.initializeBase(this);
}
CommandUI.Controls.FlyoutAnchorProperties.prototype = {
    QueryCommand: null,
    FloatieContextMenuDropDown: null,
    ShouldRefreshWhenDropped: null,
    RefreshableMenu: null,
    ImageIsVisible: null,
    ImageUsesSpaceWhileInvisible: null,
    ImageBackColor: '',
    HideDefaultArrow: null,
    IsChecked: null,
    UseCheckMark: null
}


CommandUI.Controls.FlyoutAnchor = function CommandUI_Controls_FlyoutAnchor(root, id, properties, menu) {
    CommandUI.Controls.FlyoutAnchor.initializeBase(this, [ root, id, properties, menu ]);
    this.addDisplayMode('Small');
    this.addDisplayMode('Small14');
    this.addDisplayMode('Medium');
    this.addDisplayMode('Medium14');
    this.addDisplayMode('Large');
    this.addDisplayMode('Large16');
    this.addDisplayMode('Thin');
    this.addDisplayMode('Menu');
    this.addDisplayMode('Menu16');
    this.addDisplayMode('Menu32');
    this.addDisplayMode('Menu48');
    this.addDisplayMode('MenuTellMe');
    this.addDisplayMode('FloatieLarge');
    this.addDisplayMode('Small20');
    this.addDisplayMode('Small24');
    this.addDisplayMode('Medium20');
    this.set_isFloatieContextMenuDropDown(CommandUI.Utility.isTrue(this.get__properties$p$2().FloatieContextMenuDropDown));
    this._imageIsVisible$2 = !CommandUI.Utility.isFalse(properties.ImageIsVisible);
    this._imageUsesSpaceWhileInvisible$2 = CommandUI.Utility.isTrue(properties.ImageUsesSpaceWhileInvisible);
    this.get_stateProperties()[CommandUI.Controls.FlyoutAnchorCommandProperties.SourceControlId] = id;
    this.get_stateProperties()[CommandUI.Controls.FlyoutAnchorCommandProperties.LabelText] = this.set_labelText(this.get__properties$p$2().LabelText);
    this.get_stateProperties()[CommandUI.Controls.FlyoutAnchorCommandProperties.LabelTextUserGeneratedPlaceholderReplacements] = this.get__properties$p$2().LabelTextUserGeneratedPlaceholderReplacements;
    this.get_stateProperties()[CommandUI.Controls.FlyoutAnchorCommandProperties.Visible] = this.get_visible();
    this.get_stateProperties()[CommandUI.Controls.FlyoutAnchorCommandProperties.ImageIsVisible] = this.get_imageIsVisible();
    this.get_stateProperties()[CommandUI.Controls.FlyoutAnchorCommandProperties.ImageBackColor] = this.get__properties$p$2().ImageBackColor;
    this.set_useCheckMark(CommandUI.Utility.isTrue(properties.UseCheckMark));
    this.get_stateProperties()[CommandUI.Controls.FlyoutAnchorCommandProperties.On] = CommandUI.Utility.isTrue(properties.IsChecked);
}
CommandUI.Controls.FlyoutAnchor.prototype = {
    _imageIsVisible$2: false,
    _imageUsesSpaceWhileInvisible$2: false,
    _$$pf_UseCheckMark$p$2: false,
    
    get_useCheckMark: function CommandUI_Controls_FlyoutAnchor$get_useCheckMark$in() {
        return this._$$pf_UseCheckMark$p$2;
    },
    
    set_useCheckMark: function CommandUI_Controls_FlyoutAnchor$set_useCheckMark$in(value) {
        this._$$pf_UseCheckMark$p$2 = value;
        return value;
    },
    
    get__ariaRole$i$0: function CommandUI_Controls_FlyoutAnchor$get__ariaRole$i$0$in() {
        if (this.get_inMenu()) {
            return (this.get_useCheckMark()) ? Common.AccessibilityUtils.ariaTreeItemRole : Common.AccessibilityUtils.ariaTabRole;
        }
        return CommandUI.Control.prototype.get__ariaRole$i$0.call(this);
    },
    
    onStateChanged: function CommandUI_Controls_FlyoutAnchor$onStateChanged$in() {
        var on = this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.On];
        if (this.get_useCheckMark()) {
            this.get_stateProperties()[Common.AccessibilityUtils.ariaCheckedAttribute] = (on) ? Common.AccessibilityUtils.ariaTrueValue : Common.AccessibilityUtils.ariaFalseValue;
        }
        var $$t_3 = this;
        this.get_controlComponentDomCache().forEach(function(dom) {
            $$t_3.updateAriaMenuLauncherAttributes(dom.elmControl, on);
        });
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_FlyoutAnchor$createComponentDomForDisplayMode$in(displayMode) {
        var hasArrow = !CommandUI.Utility.isTrue(this.get__properties$p$2().HideDefaultArrow);
        var domCreationStrategy = new CommandUI.Controls._standardControlDomStrategy(hasArrow);
        var controlComponentDom = domCreationStrategy.buildControlDom(this, displayMode);
        this.populateControlDom(controlComponentDom, displayMode);
        return controlComponentDom;
    },
    
    populateControlDom: function CommandUI_Controls_FlyoutAnchor$populateControlDom$in(controlComponentDom, displayMode) {
        var isContextMenuDropDown = CommandUI.Utility.isTrue(this.get__properties$p$2().FloatieContextMenuDropDown);
        if (isContextMenuDropDown) {
            CommandUI.Utility.ensureCSSClassOnElement(controlComponentDom.elmControl, 'context-menu-dd');
        }
        if (CommandUI.ControlComponent._isDisplayModeMenu$i(displayMode)) {
            CommandUI.Utility.ensureCSSClassOnElement(controlComponentDom.elmControl, 'cui-fa-menuitem');
        }
        if (displayMode.startsWith('Small')) {
            CommandUI.Utility.ensureCSSClassOnElement(controlComponentDom.elmControl, 'cui-fa-sm');
        }
        this.setInitialAriaMenuLauncherAttributes(controlComponentDom.elmControl);
    },
    
    setInitialAriaMenuLauncherAttributes: function CommandUI_Controls_FlyoutAnchor$setInitialAriaMenuLauncherAttributes$in(focusableElement) {
        if (this.get_useCheckMark()) {
            Common.AccessibilityUtils.setAriaAttribute(focusableElement, Common.AccessibilityUtils.ariaCheckedAttribute, Common.AccessibilityUtils.ariaFalseValue);
        }
        CommandUI.MenuLauncher.prototype.setInitialAriaMenuLauncherAttributes.call(this, focusableElement);
    },
    
    updateAriaMenuLauncherAttributes: function CommandUI_Controls_FlyoutAnchor$updateAriaMenuLauncherAttributes$in(focusableElement, on) {
        var ariaLaunchedValue = (this.get_menuLaunched()) ? Common.AccessibilityUtils.ariaTrueValue : Common.AccessibilityUtils.ariaFalseValue;
        if (this.get_useCheckMark()) {
            Common.AccessibilityUtils.setAriaAttribute(focusableElement, Common.AccessibilityUtils.ariaCheckedAttribute, (on) ? Common.AccessibilityUtils.ariaTrueValue : Common.AccessibilityUtils.ariaFalseValue);
        }
        else if (this.get_inMenu()) {
            Common.AccessibilityUtils.setAriaAttribute(focusableElement, Common.AccessibilityUtils.ariaSelectedAttribute, ariaLaunchedValue);
        }
        Common.AccessibilityUtils.setAriaAttribute(focusableElement, Common.AccessibilityUtils.ariaExpandedAttribute, ariaLaunchedValue);
    },
    
    get_controlType: function CommandUI_Controls_FlyoutAnchor$get_controlType$in() {
        return CommandUI.Control.flyoutAnchorControlType;
    },
    
    get_imageIsVisible: function CommandUI_Controls_FlyoutAnchor$get_imageIsVisible$in() {
        return this._imageIsVisible$2;
    },
    
    set_imageIsVisible: function CommandUI_Controls_FlyoutAnchor$set_imageIsVisible$in(value) {
        var imageIsVisible = value;
        if (imageIsVisible !== this._imageIsVisible$2) {
            this._imageIsVisible$2 = imageIsVisible;
            this._onImageVisibleChanged$p$2(imageIsVisible);
        }
        return value;
    },
    
    _onImageVisibleChanged$p$2: function CommandUI_Controls_FlyoutAnchor$_onImageVisibleChanged$p$2$in(visible) {
        var $$t_3 = this;
        this.get_controlComponentDomCache().forEach(function(dom) {
            $$t_3._setDisplay$p$2(dom.elmIconContainer, visible);
        });
    },
    
    _setDisplay$p$2: function CommandUI_Controls_FlyoutAnchor$_setDisplay$p$2$in(element, visible) {
        if (element) {
            element.style.display = '';
            element.style.visibility = '';
            if (!visible) {
                if (this._imageUsesSpaceWhileInvisible$2) {
                    element.style.visibility = 'hidden';
                }
                else {
                    element.style.display = 'none';
                }
            }
        }
    },
    
    get_menuDirection: function CommandUI_Controls_FlyoutAnchor$get_menuDirection$in() {
        var flyoutDirectionType = CommandUI.FlyoutDirectionType.vertical;
        if (this.get_displayedComponent().isMenuItem()) {
            flyoutDirectionType = CommandUI.FlyoutDirectionType.horizontal;
        }
        else if (this.get_root().get__launchMenusUp$i$1()) {
            flyoutDirectionType = CommandUI.FlyoutDirectionType.verticalUp;
        }
        return flyoutDirectionType;
    },
    
    get_launcherComponent: function CommandUI_Controls_FlyoutAnchor$get_launcherComponent$in() {
        var launcherComponent = this.get_displayedComponent();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(launcherComponent) && ((launcherComponent).get_displayMode() === 'Thin')) {
            while ((launcherComponent) && !(CommandUI.Section.isInstanceOfType(launcherComponent))) {
                launcherComponent = launcherComponent.get_parent();
            }
            if (!launcherComponent) {
                launcherComponent = this.get_displayedComponent();
            }
        }
        return launcherComponent;
    },
    
    getTextValue: function CommandUI_Controls_FlyoutAnchor$getTextValue$in() {
        return this.get_labelText();
    },
    
    get__properties$p$2: function CommandUI_Controls_FlyoutAnchor$get__properties$p$2$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    constructClonedMenuLauncher: function CommandUI_Controls_FlyoutAnchor$constructClonedMenuLauncher$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.FlyoutAnchor(root, this.get_id(), properties, clonedMenu);
    },
    
    _getControlsInFlyoutAnchorMenu$i$2: function CommandUI_Controls_FlyoutAnchor$_getControlsInFlyoutAnchorMenu$i$2$in() {
        var controls = new Array(0);
        var $$enum_2 = this.get_menu().get_children().getEnumerator();
        while ($$enum_2.moveNext()) {
            var menuSection = $$enum_2.get_current();
            Common.Debug.assertStringTag(CommandUI.MenuSection.isInstanceOfType(menuSection), 'All children of a Menu should be Menu Sections', 6895624);
            var $$enum_4 = menuSection.get_children().getEnumerator();
            while ($$enum_4.moveNext()) {
                var controlComponent = $$enum_4.get_current();
                Common.Debug.assertStringTag(CommandUI.ControlComponent.isInstanceOfType(controlComponent), 'All children of a Menu Section be a Control Component', 6895625);
                controls[controls.length] = (controlComponent).get_control();
            }
        }
        return controls;
    }
}


CommandUI.Controls.GalleryButtonProperties = function CommandUI_Controls_GalleryButtonProperties() {
    CommandUI.Controls.GalleryButtonProperties.initializeBase(this);
}
CommandUI.Controls.GalleryButtonProperties.prototype = {
    Image: null,
    ImageClass: null,
    InnerHTML: null,
    QueryCommand: null,
    VerticalCenterAlign: false
}


CommandUI.Controls.GalleryButton = function CommandUI_Controls_GalleryButton(root, id, properties, dims) {
    CommandUI.Controls.GalleryButton.initializeBase(this, [ root, id, properties ]);
    this.addDisplayMode('Large');
    this.addDisplayMode('Menu');
    this.addDisplayMode('MenuTellMe');
    this.set__elementDimensions$i$1(dims);
}
CommandUI.Controls.GalleryButton.prototype = {
    _$$pf_ComponentDom$p$1: null,
    
    get_componentDom: function CommandUI_Controls_GalleryButton$get_componentDom$in() {
        return this._$$pf_ComponentDom$p$1;
    },
    
    set_componentDom: function CommandUI_Controls_GalleryButton$set_componentDom$in(value) {
        this._$$pf_ComponentDom$p$1 = value;
        return value;
    },
    
    get__ariaRole$i$0: function CommandUI_Controls_GalleryButton$get__ariaRole$i$0$in() {
        return (this.get_inMenu()) ? Common.AccessibilityUtils.ariaGridCellRole : CommandUI.Control.prototype.get__ariaRole$i$0.call(this);
    },
    
    _displayMode$1: null,
    
    createComponentDomForDisplayMode: function CommandUI_Controls_GalleryButton$createComponentDomForDisplayMode$in(displayMode) {
        this.set_inMenu(CommandUI.ControlComponent._isDisplayModeMenu$i(displayMode));
        var domStrategy = new CommandUI.Controls._galleryButtonDomStrategy();
        this.set_componentDom(domStrategy.buildControlDom(this, displayMode));
        this._displayMode$1 = displayMode;
        return this.get_componentDom();
    },
    
    get_controlType: function CommandUI_Controls_GalleryButton$get_controlType$in() {
        return CommandUI.Control.galleryButtonControlType;
    },
    
    get_focusableElement: function CommandUI_Controls_GalleryButton$get_focusableElement$in() {
        return (!this.get_componentDom()) ? null : this.get_componentDom().elmA;
    },
    
    get_activatesOnPress: function CommandUI_Controls_GalleryButton$get_activatesOnPress$in() {
        return true;
    },
    
    getTextValue: function CommandUI_Controls_GalleryButton$getTextValue$in() {
        return this.get_properties().Alt;
    },
    
    onStateChanged: function CommandUI_Controls_GalleryButton$onStateChanged$in() {
        var selected = this.get_stateProperties()[CommandUI.Controls.GalleryButtonCommandProperties.On];
        var isRtl = this.get_stateProperties()[CommandUI.Controls.GalleryButtonCommandProperties.IsRtl];
        CommandUI.Utility.toggleCSSClassOnElement(this.get_componentDom().elmControl, 'cui-gallerybutton-highlighted', selected);
        CommandUI.Utility.toggleCSSClassOnElement(this.get_componentDom().elmA, 'cui-gallerybutton-a-ltr', isRtl === 1);
        CommandUI.Utility.toggleCSSClassOnElement(this.get_componentDom().elmA, 'cui-gallerybutton-a-rtl', isRtl === 2);
        var ariaAttribute = (this.get_inMenu()) ? Common.AccessibilityUtils.ariaSelectedAttribute : Common.AccessibilityUtils.ariaPressedAttribute;
        Common.AccessibilityUtils.setAriaAttribute(this.get_componentDom().elmA, ariaAttribute, (selected) ? Common.AccessibilityUtils.ariaTrueValue : Common.AccessibilityUtils.ariaFalseValue);
    },
    
    _$$pf_ElementDimensions$p$1: 0,
    
    get__elementDimensions$i$1: function CommandUI_Controls_GalleryButton$get__elementDimensions$i$1$in() {
        return this._$$pf_ElementDimensions$p$1;
    },
    
    set__elementDimensions$i$1: function CommandUI_Controls_GalleryButton$set__elementDimensions$i$1$in(value) {
        this._$$pf_ElementDimensions$p$1 = value;
        return value;
    },
    
    get_properties: function CommandUI_Controls_GalleryButton$get_properties$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    constructClonedControl: function CommandUI_Controls_GalleryButton$constructClonedControl$in(root, properties) {
        return new CommandUI.Controls.GalleryButton(root, this.get_id(), properties, this.get__elementDimensions$i$1());
    },
    
    constructClonedControlForMenu: function CommandUI_Controls_GalleryButton$constructClonedControlForMenu$in(root, properties) {
        return new CommandUI.Controls.Button(root, this.get_id(), properties);
    }
}


CommandUI.Controls.IconColorManager = function CommandUI_Controls_IconColorManager() {
}
CommandUI.Controls.IconColorManager.prototype = {
    _$$pf_DisplayColor$p$0: null,
    
    get_displayColor: function CommandUI_Controls_IconColorManager$get_displayColor$in() {
        return this._$$pf_DisplayColor$p$0;
    },
    
    set_displayColor: function CommandUI_Controls_IconColorManager$set_displayColor$in(value) {
        this._$$pf_DisplayColor$p$0 = value;
        return value;
    },
    
    get_automaticDisplayColor: function CommandUI_Controls_IconColorManager$get_automaticDisplayColor$in() {
        return 'Window';
    },
    
    get_noFillStrokeColor: function CommandUI_Controls_IconColorManager$get_noFillStrokeColor$in() {
        return 'WindowFrame';
    },
    
    get_iconHeight: function CommandUI_Controls_IconColorManager$get_iconHeight$in() {
        return 16;
    },
    
    get_colorStripLeft: function CommandUI_Controls_IconColorManager$get_colorStripLeft$in() {
        return 0;
    },
    
    get_colorStripHeight: function CommandUI_Controls_IconColorManager$get_colorStripHeight$in() {
        return this.get_iconHeight() / 4;
    },
    
    get_colorStripTop: function CommandUI_Controls_IconColorManager$get_colorStripTop$in() {
        return this.get_iconHeight() - this.get_colorStripHeight();
    },
    
    get_colorStripAntiBlurStrokeOffset: function CommandUI_Controls_IconColorManager$get_colorStripAntiBlurStrokeOffset$in() {
        return 0.5;
    },
    
    iconColorChanged: function CommandUI_Controls_IconColorManager$iconColorChanged$in(newColor, oldColor) {
        if ((CommandUI.ScriptUtility.isNullOrEmptyString(oldColor) && CommandUI.ScriptUtility.isNullOrEmptyString(newColor)) || (oldColor === newColor)) {
            return false;
        }
        return true;
    },
    
    drawColorStrip: function CommandUI_Controls_IconColorManager$drawColorStrip$in(element, iconColorInt) {
        if (!element) {
            Diag.ULS.sendTraceTag(40421402, 207, 15, 'IconColorManager.DrawColorStrip: CanvasElement is null. Bailing out...');
            return;
        }
        var context = element.getContext('2d');
        if (!context) {
            Diag.ULS.sendTraceTag(40421403, 207, 15, 'IconColorManager.DrawColorStrip: element.GetContext did not return a 2d context. Bailing out...');
            return;
        }
        if (iconColorInt) {
            try {
                context.clearRect(this.get_colorStripLeft(), this.get_colorStripTop(), element.width, this.get_colorStripHeight());
                context.strokeStyle = this.get_noFillStrokeColor();
                context.strokeRect(this.get_colorStripLeft() + this.get_colorStripAntiBlurStrokeOffset(), this.get_colorStripTop() + this.get_colorStripAntiBlurStrokeOffset(), element.width - 2 * this.get_colorStripAntiBlurStrokeOffset(), this.get_colorStripHeight() - 2 * this.get_colorStripAntiBlurStrokeOffset());
            }
            catch (ex) {
                Diag.ULS.sendTraceTag(40421404, 207, 15, String.format('IconColorManager.DrawColorStrip: a 2d context operation failed (clearRect or strokeRect) with element.Width=\'{0}\'. Exception message: {1}', element.width, ex.message));
            }
        }
        else {
            try {
                context.fillStyle = this.get_displayColor();
                context.fillRect(this.get_colorStripLeft(), this.get_colorStripTop(), element.width, this.get_colorStripHeight());
            }
            catch (ex) {
                Diag.ULS.sendTraceTag(40421405, 207, 15, String.format('IconColorManager.DrawColorStrip: a 2d context fillRect operation failed with fillStyle=\'{0}\' and element.Width=\'{1}\'. Exception message: {2}', this.get_displayColor(), element.width, ex.message));
            }
        }
    }
}


CommandUI.Controls.InsertTableProperties = function CommandUI_Controls_InsertTableProperties() {
    CommandUI.Controls.InsertTableProperties.initializeBase(this);
}
CommandUI.Controls.InsertTableProperties.prototype = {
    MenuSectionInitialTitle: null,
    MenuSectionTitle: null
}


CommandUI.Controls.InsertTableComponentDom = function CommandUI_Controls_InsertTableComponentDom(displayMode) {
    CommandUI.Controls.InsertTableComponentDom.initializeBase(this, [ displayMode, null, null ]);
}
CommandUI.Controls.InsertTableComponentDom.prototype = {
    elmTBody: null,
    cellATags: null,
    cells: null,
    innerDivs: null,
    outerDivs: null
}


CommandUI.Controls.InsertTable = function CommandUI_Controls_InsertTable(root, id, properties) {
    CommandUI.Controls.InsertTable.initializeBase(this, [ root, id, properties ]);
    this.addDisplayMode('Menu');
}
CommandUI.Controls.InsertTable.prototype = {
    _$$pf_InsertTableDom$p$1: null,
    
    get_insertTableDom: function CommandUI_Controls_InsertTable$get_insertTableDom$in() {
        return this._$$pf_InsertTableDom$p$1;
    },
    
    set_insertTableDom: function CommandUI_Controls_InsertTable$set_insertTableDom$in(value) {
        this._$$pf_InsertTableDom$p$1 = value;
        return value;
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_InsertTable$createComponentDomForDisplayMode$in(displayMode) {
        this.set_insertTableDom(this._createInsertTableDom$p$1(displayMode));
        return this.get_insertTableDom();
    },
    
    _createInsertTableDom$p$1: function CommandUI_Controls_InsertTable$_createInsertTableDom$p$1$in(displayMode) {
        var elmDefault = CommandUI.Utility.createElement('table');
        elmDefault.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaGridRole);
        elmDefault.setAttribute('mscui:controltype', this.get_controlType());
        var elmDefaultTbody = CommandUI.Utility.createElement('tbody');
        elmDefaultTbody.className = 'cui-it';
        elmDefault.setAttribute('cellspacing', '0');
        elmDefault.setAttribute('cellpadding', '0');
        elmDefaultTbody.setAttribute('cellspacing', '0');
        elmDefaultTbody.setAttribute('cellpadding', '0');
        var elmRow;
        var elmCell;
        var elmCellA;
        var elmDiv;
        var elmDivOuter;
        var cells = new Array(CommandUI.Controls.InsertTable.numCells);
        var innerDivs = new Array(CommandUI.Controls.InsertTable.numCells);
        var outerDivs = new Array(CommandUI.Controls.InsertTable.numCells);
        var innerATags = new Array(CommandUI.Controls.InsertTable.numCells);
        var idx = 0;
        for (var i = 0; i < CommandUI.Controls.InsertTable.numRows; i++) {
            elmRow = CommandUI.Utility.createElement('tr');
            elmRow.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaRowRole);
            elmDefaultTbody.appendChild(elmRow);
            if (!i) {
                CommandUI.Utility.ensureCSSClassOnElement(elmRow, 'cui-it-firstrow');
            }
            if (i >= CommandUI.Controls.InsertTable.numRowsInTouch) {
                CommandUI.Utility.ensureCSSClassOnElement(elmRow, 'cui-hideInTouch');
            }
            for (var j = 0; j < CommandUI.Controls.InsertTable.numCols; j++) {
                elmCell = CommandUI.Utility.createElement('td');
                if (!j) {
                    CommandUI.Utility.ensureCSSClassOnElement(elmCell, 'cui-it-firstcol');
                }
                if (j >= CommandUI.Controls.InsertTable.numColsInTouch && i <= CommandUI.Controls.InsertTable.numRowsInTouch) {
                    CommandUI.Utility.ensureCSSClassOnElement(elmCell, 'cui-hideInTouch');
                }
                elmCell.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaPresentationRole);
                elmRow.appendChild(elmCell);
                elmCellA = CommandUI.Utility.createElement('a');
                elmCellA.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaGridCellRole);
                CommandUI.Utility._addToTabLoop$i(elmCellA);
                elmDiv = CommandUI.Utility.createElement('div');
                elmDiv.className = 'cui-it-inactiveCell';
                elmDivOuter = CommandUI.Utility.createElement('div');
                elmDivOuter.id = this.get_id() + '-' + idx;
                elmDivOuter.className = 'cui-it-inactiveCellOuter';
                elmCell.appendChild(elmDivOuter);
                elmDivOuter.appendChild(elmDiv);
                elmDiv.appendChild(elmCellA);
                cells[idx] = elmCell;
                innerATags[idx] = elmCellA;
                innerDivs[idx] = elmDiv;
                outerDivs[idx] = elmDivOuter;
                idx++;
            }
        }
        elmDefault.appendChild(elmDefaultTbody);
        var insertTableDom = new CommandUI.Controls.InsertTableComponentDom(displayMode);
        insertTableDom.elmControl = elmDefault;
        insertTableDom.elmTBody = elmDefaultTbody;
        insertTableDom.cells = cells;
        insertTableDom.cellATags = innerATags;
        insertTableDom.innerDivs = innerDivs;
        insertTableDom.outerDivs = outerDivs;
        this.set_insertTableDom(insertTableDom);
        return insertTableDom;
    },
    
    get_controlType: function CommandUI_Controls_InsertTable$get_controlType$in() {
        return CommandUI.Control.insertTableControlType;
    },
    
    constructClonedControl: function CommandUI_Controls_InsertTable$constructClonedControl$in(root, properties) {
        return new CommandUI.Controls.InsertTable(root, this.get_id(), properties);
    }
}


CommandUI.Controls.LabelProperties = function CommandUI_Controls_LabelProperties() {
    CommandUI.Controls.LabelProperties.initializeBase(this);
}
CommandUI.Controls.LabelProperties.prototype = {
    QueryCommand: null,
    ImageBackColor: '',
    InnerLink: '',
    InnerLinkText: '',
    InnerLinkTitle: '',
    For: null
}


CommandUI.Controls.Label = function CommandUI_Controls_Label(root, id, properties) {
    CommandUI.Controls.Label.initializeBase(this, [ root, id, properties ]);
    this.addDisplayMode('Medium');
    this.addDisplayMode('Medium14');
    this.addDisplayMode('MediumCompact');
    this.addDisplayMode('Small');
    this.addDisplayMode('Small14');
    this.addDisplayMode('Menu');
    this.addDisplayMode('Menu16');
    this.addDisplayMode('MenuMru');
    this.addDisplayMode('MenuLoading');
    this.addDisplayMode('MenuTemplate');
    this.addDisplayMode('MenuTellMe');
    this.addDisplayMode('MenuSaveAs');
    this.addDisplayMode('MenuFileName');
    this.addDisplayMode('MenuSaveButton');
    this.addDisplayMode('MenuDiagnostics');
    this.get_stateProperties()[CommandUI.Controls.LabelCommandProperties.Visible] = this.get_visible();
}
CommandUI.Controls.Label.prototype = {
    _focusableElement$1: null,
    
    get_focusableElement: function CommandUI_Controls_Label$get_focusableElement$in() {
        return this._focusableElement$1;
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_Label$createComponentDomForDisplayMode$in(displayMode) {
        var dom = null;
        var domStrategy = this._getDomElementCreationStrategy$p$1(displayMode);
        if (domStrategy) {
            dom = domStrategy.buildControlDom(this, displayMode);
            this._focusableElement$1 = domStrategy.get_focusableElement();
        }
        else {
            Common.Debug.assertNotReachedStringTag('Expected a way to create a DOM element for display mode ' + displayMode, 4515340);
        }
        return dom;
    },
    
    _getDomElementCreationStrategy$p$1: function CommandUI_Controls_Label$_getDomElementCreationStrategy$p$1$in(displayMode) {
        switch (displayMode) {
            case 'MenuMru':
            case 'MenuTemplate':
            case 'MenuSaveAs':
            case 'MenuFileName':
            case 'MenuSaveButton':
            case 'MenuDiagnostics':
                return new CommandUI.Controls._menuSubsectionLabelDomStrategy();
            case 'MenuLoading':
                return new CommandUI.Controls._loadingIndicatorLabelDomStrategy();
            default:
                return new CommandUI.Controls._standardLabelDomStrategy();
        }
    },
    
    get_controlType: function CommandUI_Controls_Label$get_controlType$in() {
        return CommandUI.Control.labelControlType;
    },
    
    constructClonedControl: function CommandUI_Controls_Label$constructClonedControl$in(root, properties) {
        return new CommandUI.Controls.Label(root, this.get_id(), properties);
    }
}


CommandUI.Controls.PlaceholderProperties = function CommandUI_Controls_PlaceholderProperties() {
    CommandUI.Controls.PlaceholderProperties.initializeBase(this);
}
CommandUI.Controls.PlaceholderProperties.prototype = {
    Image: null,
    ImageClass: null
}


CommandUI.Controls.Placeholder = function CommandUI_Controls_Placeholder(root, id, properties) {
    CommandUI.Controls.Placeholder.initializeBase(this, [ root, id, properties ]);
}
CommandUI.Controls.Placeholder.prototype = {
    _element$1: null,
    
    ensureValidDisplayMode: function CommandUI_Controls_Placeholder$ensureValidDisplayMode$in(displayMode) {
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_Placeholder$createComponentDomForDisplayMode$in(displayMode) {
        this._element$1 = CommandUI.Utility.createElement('span');
        this._element$1.className = 'cui-ctl cui-placeholder';
        return new CommandUI.ControlComponentDom(displayMode, this._element$1, null);
    },
    
    get_controlType: function CommandUI_Controls_Placeholder$get_controlType$in() {
        return CommandUI.Control.placeholderControlType;
    },
    
    _pollForStateAndUpdate$i$0: function CommandUI_Controls_Placeholder$_pollForStateAndUpdate$i$0$in() {
    },
    
    dispose: function CommandUI_Controls_Placeholder$dispose$in() {
        CommandUI.Control.prototype.dispose.call(this);
        this._element$1 = null;
    },
    
    get__properties$p$1: function CommandUI_Controls_Placeholder$get__properties$p$1$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    constructClonedControl: function CommandUI_Controls_Placeholder$constructClonedControl$in(root, properties) {
        return new CommandUI.Controls.Placeholder(root, this.get_id(), properties);
    }
}


CommandUI.Controls.SearchBoxProperties = function CommandUI_Controls_SearchBoxProperties() {
    CommandUI.Controls.SearchBoxProperties.initializeBase(this);
}
CommandUI.Controls.SearchBoxProperties.prototype = {
    AccessibilityTextCommand: null,
    InteractionBeginCommand: null,
    RestoreFocusCommand: null,
    InputBoxBlurCommand: null,
    InputBoxFocusCommand: null,
    SearchContainerMouseOverCommand: null,
    SearchContainerMouseOutCommand: null,
    PlaceholderText: null,
    DarkImage16by16Class: null,
    LightImage16by16Class: null,
    Width: null
}


CommandUI.Controls.SearchBox = function CommandUI_Controls_SearchBox(root, id, properties, menu) {
    this.$$d_onButtonClick = Function.createDelegate(this, this.onButtonClick);
    this.$$d_onSearchContainerMouseOut = Function.createDelegate(this, this.onSearchContainerMouseOut);
    this.$$d_onSearchContainerMouseOver = Function.createDelegate(this, this.onSearchContainerMouseOver);
    this.$$d_onInputBoxBlur = Function.createDelegate(this, this.onInputBoxBlur);
    this.$$d_onInputBoxFocus = Function.createDelegate(this, this.onInputBoxFocus);
    this.$$d__onMenuChangedAriaNotification$p$2 = Function.createDelegate(this, this._onMenuChangedAriaNotification$p$2);
    CommandUI.Controls.SearchBox.initializeBase(this, [ root, id, properties, menu ]);
    this.addDisplayMode('Medium');
    this.set_sendFocusToMenuDrop(false);
    if (id === Common.CuiHelper.tellMeSearchBoxId) {
        this.get_stateProperties()['TakeFocusOnMenuNavigationEnd'] = true;
    }
    this._eventSource$2 = new CommandUI.Controls.SearchBoxComponents._searchBoxEventSource();
}
CommandUI.Controls.SearchBox._actionToEventDelegate$p = function CommandUI_Controls_SearchBox$_actionToEventDelegate$p$st(f) {
    return function(sender, args) {
        f();
        return false;
    };
}
CommandUI.Controls.SearchBox.prototype = {
    _$$pf_TopLevelElement$p$2: null,
    
    get_topLevelElement: function CommandUI_Controls_SearchBox$get_topLevelElement$in() {
        return this._$$pf_TopLevelElement$p$2;
    },
    
    set_topLevelElement: function CommandUI_Controls_SearchBox$set_topLevelElement$in(value) {
        this._$$pf_TopLevelElement$p$2 = value;
        return value;
    },
    
    _$$pf_InputField$p$2: null,
    
    get_inputField: function CommandUI_Controls_SearchBox$get_inputField$in() {
        return this._$$pf_InputField$p$2;
    },
    
    set_inputField: function CommandUI_Controls_SearchBox$set_inputField$in(value) {
        this._$$pf_InputField$p$2 = value;
        return value;
    },
    
    _imageMask$2: null,
    _searchButton$2: null,
    searchIcon: null,
    _ariaNotifier$2: null,
    _currentImageClass$2: null,
    _$$pf_InputHasFocus$p$2: false,
    
    get_inputHasFocus: function CommandUI_Controls_SearchBox$get_inputHasFocus$in() {
        return this._$$pf_InputHasFocus$p$2;
    },
    
    set_inputHasFocus: function CommandUI_Controls_SearchBox$set_inputHasFocus$in(value) {
        this._$$pf_InputHasFocus$p$2 = value;
        return value;
    },
    
    _$$pf_MouseIsOver$p$2: false,
    
    get_mouseIsOver: function CommandUI_Controls_SearchBox$get_mouseIsOver$in() {
        return this._$$pf_MouseIsOver$p$2;
    },
    
    set_mouseIsOver: function CommandUI_Controls_SearchBox$set_mouseIsOver$in(value) {
        this._$$pf_MouseIsOver$p$2 = value;
        return value;
    },
    
    _eventSource$2: null,
    
    get_searchBoxBehavior: function CommandUI_Controls_SearchBox$get_searchBoxBehavior$in() {
        return this.get_behavior();
    },
    
    get_additionalMenuCssClass: function CommandUI_Controls_SearchBox$get_additionalMenuCssClass$in() {
        return 'cui-sb-menu';
    },
    
    get_controlType: function CommandUI_Controls_SearchBox$get_controlType$in() {
        return CommandUI.Control.searchBoxControlType;
    },
    
    get__ariaRole$i$0: function CommandUI_Controls_SearchBox$get__ariaRole$i$0$in() {
        return 'SearchBox';
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_SearchBox$createComponentDomForDisplayMode$in(displayMode) {
        this.set_topLevelElement(CommandUI.Utility.createElement('span'));
        CommandUI.Utility.ensureCSSClassOnElement(this.get_topLevelElement(), 'cui-sb');
        var redesignIsEnabled = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('TellMeRedesignIsEnabled');
        if (redesignIsEnabled) {
            CommandUI.Utility.ensureCSSClassOnElement(this.get_topLevelElement(), 'tellme-flight');
        }
        this.get_topLevelElement().setAttribute('mscui:controltype', this.get_controlType());
        CommandUI.Utility._addToTabLoop$i(this.get_topLevelElement());
        this.get_topLevelElement().tabIndex = -1;
        this.set_inputField(CommandUI.Utility._createSelectableElement$i('input'));
        CommandUI.Utility.ensureCSSClassOnElement(this.get_inputField(), 'cui-sb-input');
        this.get_inputField().setAttribute('data-lpignore', 'true');
        if (redesignIsEnabled) {
            CommandUI.Utility.ensureCSSClassOnElement(this.get_inputField(), 'tellme-flight');
        }
        this.get_inputField().type = 'text';
        this.get_inputField().setAttribute('Autocomplete', 'off');
        this.get_inputField().style.width = this.get_sbProperties().Width;
        this.get_inputField().id = this.get_sbProperties().Id;
        this.get_inputField().title = this.get_sbProperties().Alt;
        this.get_inputField().setAttribute('maxlength', '256');
        this.get_inputField().setAttribute('tabindex', '0');
        this._searchButton$2 = CommandUI.Utility.createElement('a');
        this._searchButton$2.setAttribute(Common.AccessibilityUtils.ariaHiddenAttribute, Common.AccessibilityUtils.ariaTrueValue);
        this._searchButton$2.id = this.get_id() + '-icon';
        this._searchButton$2.tabIndex = -1;
        this.searchIcon = CommandUI.Utility.createElement('img');
        this._ariaNotifier$2 = new Common.Utils.AriaNotifier(this.get_topLevelElement());
        CommandUI.Utility.ensureCSSClassOnElement(this._searchButton$2, 'cui-sb-image-button');
        if (redesignIsEnabled) {
            CommandUI.Utility.ensureCSSClassOnElement(this._searchButton$2, 'tellme-flight');
        }
        this._currentImageClass$2 = (redesignIsEnabled) ? this.get_sbProperties().DarkImage16by16Class : this.get_sbProperties().Image16by16Class;
        this._imageMask$2 = CommandUI.Utility._createClusteredImageContainerNew$i(4, this.get_sbProperties().Image16by16, this._currentImageClass$2, this.searchIcon, true, false);
        CommandUI.Utility.ensureCSSClassOnElement(this._imageMask$2, 'sb-img');
        if (redesignIsEnabled) {
            this.get_topLevelElement().appendChild(this._searchButton$2);
        }
        this._searchButton$2.appendChild(this._imageMask$2);
        this.get_topLevelElement().appendChild(this.get_inputField());
        if (!redesignIsEnabled) {
            this.get_topLevelElement().appendChild(this._searchButton$2);
        }
        this.attachEvents();
        this.attachModules();
        return new CommandUI.ControlComponentDom(displayMode, this.get_topLevelElement(), null);
    },
    
    ensureKeytipForControl: function CommandUI_Controls_SearchBox$ensureKeytipForControl$in(controlComponent, keytipParentElement) {
        controlComponent._ensureKeytip$i$0(keytipParentElement, this.get_inputField(), this.get_parentKeytipsIds(), this.get_parentKeytipsKeys());
    },
    
    attachModules: function CommandUI_Controls_SearchBox$attachModules$in() {
        var menuUpdateModule = new CommandUI.Controls.SearchBoxComponents._menuUpdateModule(new CommandUI.Controls.SearchBoxComponents._seachBoxToUpdateableMenu(this));
        this.add_onInputKeyUp(menuUpdateModule.$$d_onInputKeyUp);
        this.add_onSearchButtonClick(menuUpdateModule.$$d_onSearchButtonClick);
        var $$t_B = this;
        var adapter = new CommandUI.Controls.SearchBoxComponents._focusBlurEventsToCommandsAdapter(this.get_root(), this.get_sbProperties(), function() {
            return $$t_B.get_displayedComponent();
        }, new CommandUI.Controls.SearchBoxComponents._keyboardState(this));
        this.add_onInputBlur(adapter.$$d_onInputBlur);
        this.add_onInputFocus(adapter.$$d_onInputFocus);
        this.add_onInteractionBegin(adapter.$$d_onInteractionBegin);
        this.add_onInteractionEnd(adapter.$$d_onRestoreFocus);
        var keyboardNavigationModule = new CommandUI.Controls.SearchBoxComponents._keyboardNavigationModule(new CommandUI.Controls.SearchBoxComponents._focusableMenu(this));
        this.add_onInputKeyDown(keyboardNavigationModule.$$d_onKeyDown);
        var clearInputModule = new CommandUI.Controls.SearchBoxComponents._clearInputOnInteractionEndModule(this.get_inputField());
        this.add_onInteractionEnd(CommandUI.Controls.SearchBox._actionToEventDelegate$p(clearInputModule.$$d_interactionEnd));
        this.add_onInteractionEnd(CommandUI.Controls.SearchBox._actionToEventDelegate$p(menuUpdateModule.$$d_onInteractionEnd));
        this.add_onInteractionBegin(CommandUI.Controls.SearchBox._actionToEventDelegate$p(menuUpdateModule.$$d_onInteractionBegin));
        if ('placeholder' in this.get_inputField()) {
            this.get_inputField().setAttribute('placeholder', this.get_sbProperties().PlaceholderText);
        }
        else {
            var placeholder = new CommandUI.Controls.SearchBoxComponents._placeholderTextModule(this.get_inputField(), this.get_sbProperties().PlaceholderText, 'cui-sb-placeholder');
            this.add_onInputBlur(placeholder.$$d_onInputBlur);
            this.add_onInputFocus(placeholder.$$d_onInputFocus);
        }
        this.add_onMenuChange(this.$$d__onMenuChangedAriaNotification$p$2);
        var $$t_C = this;
        this.add_onInputKeyDown(function(sender, args) {
            return CommandUI.Utility.preventDefaultKeyAction(args, Common.KeyCode.vK_Esc);
        });
        var $$t_D = this;
        this.add_onInputKeyDown(function(sender, args) {
            return CommandUI.MenuLauncher.prototype.onKeyDown.call($$t_D, args);
        });
        var $$t_E = this;
        this.add_onInputKeyUp(function(sender, args) {
            return CommandUI.Control.prototype.onKeyUp.call($$t_E, args);
        });
    },
    
    attachEvents: function CommandUI_Controls_SearchBox$attachEvents$in() {
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, this.get_inputField(), this.$$d_onInputBoxFocus);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.blur, this.get_inputField(), this.$$d_onInputBoxBlur);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, this.get_inputField(), this.$$d_onKeyDown);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, this.get_inputField(), this.$$d_onKeyUp);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOver, this.get_topLevelElement(), this.$$d_onSearchContainerMouseOver);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOut, this.get_topLevelElement(), this.$$d_onSearchContainerMouseOut);
        Common.ClickInputManager.get_instance().registerHandler(Common.EventNames.click, this._searchButton$2, this.$$d_onButtonClick);
    },
    
    raiseEvent: function CommandUI_Controls_SearchBox$raiseEvent$in(id, e) {
        this._eventSource$2.raiseEvent(id, e);
    },
    
    _addHandler$p$2: function CommandUI_Controls_SearchBox$_addHandler$p$2$in(eventKey, handler) {
        this._eventSource$2.addHandler(eventKey, handler);
    },
    
    _removeHandler$p$2: function CommandUI_Controls_SearchBox$_removeHandler$p$2$in(eventKey, handler) {
        this._eventSource$2.removeHandler(eventKey, handler);
    },
    
    add_onInputBlur: function CommandUI_Controls_SearchBox$add_onInputBlur$in(value) {
        this._addHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.blur, value);
    },
    
    remove_onInputBlur: function CommandUI_Controls_SearchBox$remove_onInputBlur$in(value) {
        this._removeHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.blur, value);
    },
    
    add_onInputFocus: function CommandUI_Controls_SearchBox$add_onInputFocus$in(value) {
        this._addHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.focus, value);
    },
    
    remove_onInputFocus: function CommandUI_Controls_SearchBox$remove_onInputFocus$in(value) {
        this._removeHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.focus, value);
    },
    
    add_onInputKeyUp: function CommandUI_Controls_SearchBox$add_onInputKeyUp$in(value) {
        this._addHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.keyUp, value);
    },
    
    remove_onInputKeyUp: function CommandUI_Controls_SearchBox$remove_onInputKeyUp$in(value) {
        this._removeHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.keyUp, value);
    },
    
    add_onInputKeyDown: function CommandUI_Controls_SearchBox$add_onInputKeyDown$in(value) {
        this._addHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.keyDown, value);
    },
    
    remove_onInputKeyDown: function CommandUI_Controls_SearchBox$remove_onInputKeyDown$in(value) {
        this._removeHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.keyDown, value);
    },
    
    add_onSearchButtonClick: function CommandUI_Controls_SearchBox$add_onSearchButtonClick$in(value) {
        this._addHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.click, value);
    },
    
    remove_onSearchButtonClick: function CommandUI_Controls_SearchBox$remove_onSearchButtonClick$in(value) {
        this._removeHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.click, value);
    },
    
    add_onMenuChange: function CommandUI_Controls_SearchBox$add_onMenuChange$in(value) {
        this._addHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.menuChanged, value);
    },
    
    remove_onMenuChange: function CommandUI_Controls_SearchBox$remove_onMenuChange$in(value) {
        this._removeHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.menuChanged, value);
    },
    
    add_onInteractionBegin: function CommandUI_Controls_SearchBox$add_onInteractionBegin$in(value) {
        this._addHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.interactionBegin, value);
    },
    
    remove_onInteractionBegin: function CommandUI_Controls_SearchBox$remove_onInteractionBegin$in(value) {
        this._removeHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.interactionBegin, value);
    },
    
    add_onInteractionEnd: function CommandUI_Controls_SearchBox$add_onInteractionEnd$in(value) {
        this._addHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.interactionEnd, value);
    },
    
    remove_onInteractionEnd: function CommandUI_Controls_SearchBox$remove_onInteractionEnd$in(value) {
        this._removeHandler$p$2(CommandUI.Controls.SearchBox.EventKeys.interactionEnd, value);
    },
    
    onSearchContainerMouseOver: function CommandUI_Controls_SearchBox$onSearchContainerMouseOver$in(args) {
        this.set_mouseIsOver(true);
        if (this.get_searchBoxBehavior()) {
            this.get_searchBoxBehavior().onSearchContainerMouseOver(args);
        }
        return false;
    },
    
    onSearchContainerMouseOut: function CommandUI_Controls_SearchBox$onSearchContainerMouseOut$in(args) {
        this.set_mouseIsOver(false);
        if (this.get_searchBoxBehavior()) {
            this.get_searchBoxBehavior().onSearchContainerMouseOut(args);
        }
        return false;
    },
    
    onInputBoxBlur: function CommandUI_Controls_SearchBox$onInputBoxBlur$in(args) {
        this.set_inputHasFocus(false);
        if (this.get_searchBoxBehavior()) {
            this.get_searchBoxBehavior().onInputBoxBlur(args);
        }
        return false;
    },
    
    onInputBoxFocus: function CommandUI_Controls_SearchBox$onInputBoxFocus$in(args) {
        this.set_inputHasFocus(true);
        this.set_escaping(false);
        this.set_processingKeystroke(false);
        this._ariaNotifier$2.sendNotification('', false);
        if (this.get_searchBoxBehavior()) {
            this.get_searchBoxBehavior().onInputBoxFocus(args);
        }
        return false;
    },
    
    onKeyUp: function CommandUI_Controls_SearchBox$onKeyUp$in(args) {
        if (this.get_searchBoxBehavior()) {
            this.get_searchBoxBehavior().raiseInteractionBegin();
        }
        return this._eventSource$2.raiseEvent(CommandUI.Controls.SearchBox.EventKeys.keyUp, args);
    },
    
    onKeyDown: function CommandUI_Controls_SearchBox$onKeyDown$in(args) {
        if (this.get_searchBoxBehavior()) {
            this.get_searchBoxBehavior().raiseInteractionBegin();
        }
        return this._eventSource$2.raiseEvent(CommandUI.Controls.SearchBox.EventKeys.keyDown, args);
    },
    
    onButtonClick: function CommandUI_Controls_SearchBox$onButtonClick$in(args) {
        if (this.get_searchBoxBehavior()) {
            this.get_searchBoxBehavior().raiseInteractionBegin();
        }
        return this._eventSource$2.raiseEvent(CommandUI.Controls.SearchBox.EventKeys.click, args);
    },
    
    onMenuChanged: function CommandUI_Controls_SearchBox$onMenuChanged$in() {
        this._eventSource$2.raiseEvent(CommandUI.Controls.SearchBox.EventKeys.menuChanged, null);
    },
    
    launchMenu: function CommandUI_Controls_SearchBox$launchMenu$in(inputMethod) {
        CommandUI.MenuLauncher.prototype.launchMenu.call(this, inputMethod);
    },
    
    _closeMenu$i$1: function CommandUI_Controls_SearchBox$_closeMenu$i$1$in(exitKeytips) {
        if (this.get_searchBoxBehavior()) {
            this.get_searchBoxBehavior().closeMenu();
        }
    },
    
    _closeMenuStack$i$2: function CommandUI_Controls_SearchBox$_closeMenuStack$i$2$in() {
        if (this.get_menuLaunched()) {
            this.get_root()._closeMenuStack$i$1(this);
        }
        if (this.get_searchBoxBehavior()) {
            this.get_searchBoxBehavior().raiseInteractionEnd();
        }
    },
    
    _onMenuChangedAriaNotification$p$2: function CommandUI_Controls_SearchBox$_onMenuChangedAriaNotification$p$2$in(sender, args) {
        this._ariaNotifier$2.sendNotification(this._getAccessibiltyText$i$2(), false);
        return false;
    },
    
    _pollForResults$i$2: function CommandUI_Controls_SearchBox$_pollForResults$i$2$in(inputMethod) {
        this.sendNotifyAsyncMenuTrigger();
        this.pollForDynamicMenu(inputMethod);
    },
    
    refreshMenu: function CommandUI_Controls_SearchBox$refreshMenu$in() {
        if (this.get_menuLaunched()) {
            CommandUI.MenuLauncher.prototype.refreshMenu.call(this);
            return;
        }
        if (this.get_inputHasFocus()) {
            this.launchMenu(0);
        }
    },
    
    getCommandPopulateProperties: function CommandUI_Controls_SearchBox$getCommandPopulateProperties$in() {
        var properties = {};
        properties.Value = this.get_inputField().value;
        return properties;
    },
    
    get__inputText$i$2: function CommandUI_Controls_SearchBox$get__inputText$i$2$in() {
        return this.get_inputField().value;
    },
    
    set__inputText$i$2: function CommandUI_Controls_SearchBox$set__inputText$i$2$in(value) {
        this.get_inputField().value = value;
        return value;
    },
    
    _$$pf_ProcessingKeystroke$p$2: false,
    
    get_processingKeystroke: function CommandUI_Controls_SearchBox$get_processingKeystroke$in() {
        return this._$$pf_ProcessingKeystroke$p$2;
    },
    
    set_processingKeystroke: function CommandUI_Controls_SearchBox$set_processingKeystroke$in(value) {
        this._$$pf_ProcessingKeystroke$p$2 = value;
        return value;
    },
    
    _$$pf_Escaping$p$2: false,
    
    get_escaping: function CommandUI_Controls_SearchBox$get_escaping$in() {
        return this._$$pf_Escaping$p$2;
    },
    
    set_escaping: function CommandUI_Controls_SearchBox$set_escaping$in(value) {
        this._$$pf_Escaping$p$2 = value;
        return value;
    },
    
    get_sbProperties: function CommandUI_Controls_SearchBox$get_sbProperties$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    _getAccessibiltyText$i$2: function CommandUI_Controls_SearchBox$_getAccessibiltyText$i$2$in() {
        var parameters = {};
        this.get_root().executeCommand(this.get_sbProperties().AccessibilityTextCommand, parameters, this.get_displayedComponent(), 0, false, null, null);
        return (parameters).Value;
    },
    
    doDefaultAction: function CommandUI_Controls_SearchBox$doDefaultAction$in(elmTarget, inputMethod, e) {
        var parameters = {};
        parameters.Value = this.get_inputField().value;
        this.get_root().executeCommand(this.get_sbProperties().Command, parameters, this.get_displayedComponent(), inputMethod, false, null, null);
    },
    
    get_focusableElement: function CommandUI_Controls_SearchBox$get_focusableElement$in() {
        return this.get_inputField();
    },
    
    notifyCommandExecuted: function CommandUI_Controls_SearchBox$notifyCommandExecuted$in(source, closeAllMenus) {
        if (this.get_searchBoxBehavior()) {
            var commandName = this.get_sbProperties().MenuControlExecutedCommand;
            this.get_searchBoxBehavior().notifyCommandExecuted(source, closeAllMenus, this.get_topLevelElement(), commandName);
        }
    },
    
    constructClonedMenuLauncher: function CommandUI_Controls_SearchBox$constructClonedMenuLauncher$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.SearchBox(root, this.get_id(), properties, clonedMenu);
    },
    
    get__isEditable$i$0: function CommandUI_Controls_SearchBox$get__isEditable$i$0$in() {
        return true;
    }
}












CommandUI.Controls.SearchBox.EventKeys = function CommandUI_Controls_SearchBox_EventKeys() {
}


CommandUI.Controls.SeparatorProperties = function CommandUI_Controls_SeparatorProperties() {
    CommandUI.Controls.SeparatorProperties.initializeBase(this);
}
CommandUI.Controls.SeparatorProperties.prototype = {
    Image: null,
    ImageClass: null
}


CommandUI.Controls.Separator = function CommandUI_Controls_Separator(root, id, properties) {
    CommandUI.Controls.Separator.initializeBase(this, [ root, id, properties ]);
    this.addDisplayMode('Small');
}
CommandUI.Controls.Separator.prototype = {
    _elmSmall$1: null,
    
    createComponentDomForDisplayMode: function CommandUI_Controls_Separator$createComponentDomForDisplayMode$in(displayMode) {
        this._elmSmall$1 = CommandUI.Utility.createElement('span');
        this._elmSmall$1.className = 'cui-separator';
        return new CommandUI.ControlComponentDom(displayMode, this._elmSmall$1, null);
    },
    
    get_controlType: function CommandUI_Controls_Separator$get_controlType$in() {
        return CommandUI.Control.separatorControlType;
    },
    
    _pollForStateAndUpdate$i$0: function CommandUI_Controls_Separator$_pollForStateAndUpdate$i$0$in() {
        this.set_enabled(true);
    },
    
    dispose: function CommandUI_Controls_Separator$dispose$in() {
        CommandUI.Control.prototype.dispose.call(this);
        this._elmSmall$1 = null;
    },
    
    get__properties$p$1: function CommandUI_Controls_Separator$get__properties$p$1$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    constructClonedControl: function CommandUI_Controls_Separator$constructClonedControl$in(root, properties) {
        return new CommandUI.Controls.Separator(root, this.get_id(), properties);
    }
}


CommandUI.Controls.SliderProperties = function CommandUI_Controls_SliderProperties() {
    CommandUI.Controls.SliderProperties.initializeBase(this);
}
CommandUI.Controls.SliderProperties.prototype = {
    QueryCommand: null,
    SlideCommand: null,
    LabelId: null,
    Value: null
}


CommandUI.Controls.SliderComponentDom = function CommandUI_Controls_SliderComponentDom(displayMode) {
    CommandUI.Controls.SliderComponentDom.initializeBase(this, [ displayMode, null, null ]);
}
CommandUI.Controls.SliderComponentDom.prototype = {
    elmInput: null
}


CommandUI.Controls.Slider = function CommandUI_Controls_Slider(root, id, properties) {
    CommandUI.Controls.Slider.initializeBase(this, [ root, id, properties ]);
    this.addDisplayMode('Large');
}
CommandUI.Controls.Slider.prototype = {
    _$$pf_SliderDom$p$1: null,
    
    get_sliderDom: function CommandUI_Controls_Slider$get_sliderDom$in() {
        return this._$$pf_SliderDom$p$1;
    },
    
    set_sliderDom: function CommandUI_Controls_Slider$set_sliderDom$in(value) {
        this._$$pf_SliderDom$p$1 = value;
        return value;
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_Slider$createComponentDomForDisplayMode$in(displayMode) {
        this.set_sliderDom(this._buildSliderDom$p$1(displayMode));
        return this.get_sliderDom();
    },
    
    _buildSliderDom$p$1: function CommandUI_Controls_Slider$_buildSliderDom$p$1$in(displayMode) {
        var elmSlider;
        var elmInput;
        var elmLabel;
        elmSlider = CommandUI.Utility.createElement('span');
        elmSlider.className = 'cui-sldr';
        elmSlider.setAttribute('mscui:controltype', this.get_controlType());
        elmInput = CommandUI.Utility._createSelectableElement$i('input');
        elmInput.type = 'range';
        elmInput.className = 'cui-sldr-input';
        elmInput.id = (CommandUI.Control.prototype.get_controlProperties.call(this)).Id;
        elmInput.value = (CommandUI.Control.prototype.get_controlProperties.call(this)).Value;
        elmLabel = CommandUI.Utility.createElement('span');
        elmLabel.className = 'cui-ctl-largelabel';
        CommandUI.Utility._setLargeControlText$i(elmLabel, (CommandUI.Control.prototype.get_controlProperties.call(this)).LabelText, false);
        elmLabel.id = (CommandUI.Control.prototype.get_controlProperties.call(this)).LabelId;
        elmSlider.appendChild(elmInput);
        elmSlider.appendChild(elmLabel);
        var sliderDom = new CommandUI.Controls.SliderComponentDom(displayMode);
        sliderDom.elmControl = elmSlider;
        sliderDom.elmInput = elmInput;
        sliderDom.elmLabel = elmLabel;
        return sliderDom;
    },
    
    get_controlType: function CommandUI_Controls_Slider$get_controlType$in() {
        return CommandUI.Control.sliderControlType;
    },
    
    constructClonedControl: function CommandUI_Controls_Slider$constructClonedControl$in(root, properties) {
        return new CommandUI.Controls.Slider(root, this.get_id(), properties);
    }
}


CommandUI.Controls.SpinnerProperties = function CommandUI_Controls_SpinnerProperties() {
    CommandUI.Controls.SpinnerProperties.initializeBase(this);
}
CommandUI.Controls.SpinnerProperties.prototype = {
    QueryCommand: null,
    SpinCommand: null,
    Width: null,
    LabelledBy: null
}


CommandUI.Controls.SpinnerComponentDom = function CommandUI_Controls_SpinnerComponentDom(displayMode) {
    CommandUI.Controls.SpinnerComponentDom.initializeBase(this, [ displayMode, null, null ]);
}
CommandUI.Controls.SpinnerComponentDom.prototype = {
    elmInput: null,
    elmUpArrow: null,
    elmDownArrow: null,
    elmUpArrowImageContainer: null,
    elmDownArrowImageContainer: null,
    elmUpArrowImage: null,
    elmDownArrowImage: null
}


CommandUI.Controls.Spinner = function CommandUI_Controls_Spinner(root, id, properties, validUnits, validSpecialStrings) {
    CommandUI.Controls.Spinner.initializeBase(this, [ root, id, properties ]);
    this.addDisplayMode('Medium');
    this.set_validUnits(validUnits);
    this.set_validSpecialStrings(validSpecialStrings);
    Common.Debug.assertTag((!!validUnits) && (validUnits.length > 0), 2131149);
    if (this.get_behavior()) {
        this.get_behavior().initialize();
    }
}
CommandUI.Controls.Spinner.createUnit = function CommandUI_Controls_Spinner$createUnit$st(unitType, min, max, step) {
    return new CommandUI.Unit(unitType, min, max, step);
}
CommandUI.Controls.Spinner.prototype = {
    _$$pf_SpinnerDom$p$1: null,
    
    get_spinnerDom: function CommandUI_Controls_Spinner$get_spinnerDom$in() {
        return this._$$pf_SpinnerDom$p$1;
    },
    
    set_spinnerDom: function CommandUI_Controls_Spinner$set_spinnerDom$in(value) {
        this._$$pf_SpinnerDom$p$1 = value;
        return value;
    },
    
    _$$pf_ValidUnits$p$1: null,
    
    get_validUnits: function CommandUI_Controls_Spinner$get_validUnits$in() {
        return this._$$pf_ValidUnits$p$1;
    },
    
    set_validUnits: function CommandUI_Controls_Spinner$set_validUnits$in(value) {
        this._$$pf_ValidUnits$p$1 = value;
        return value;
    },
    
    _$$pf_ValidSpecialStrings$p$1: null,
    
    get_validSpecialStrings: function CommandUI_Controls_Spinner$get_validSpecialStrings$in() {
        return this._$$pf_ValidSpecialStrings$p$1;
    },
    
    set_validSpecialStrings: function CommandUI_Controls_Spinner$set_validSpecialStrings$in(value) {
        this._$$pf_ValidSpecialStrings$p$1 = value;
        return value;
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_Spinner$createComponentDomForDisplayMode$in(displayMode) {
        this.set_spinnerDom(this._buildSpinnerDom$p$1(displayMode));
        return this.get_spinnerDom();
    },
    
    ensureKeytipForControl: function CommandUI_Controls_Spinner$ensureKeytipForControl$in(controlComponent, keytipParentElement) {
        controlComponent._ensureKeytip$i$0(keytipParentElement, this.get_spinnerDom().elmInput, this.get_parentKeytipsIds(), this.get_parentKeytipsKeys());
    },
    
    _buildSpinnerDom$p$1: function CommandUI_Controls_Spinner$_buildSpinnerDom$p$1$in(displayMode) {
        var elmControl;
        var elmInput;
        var elmUpArrow;
        var elmDownArrow;
        var elmUpArrowImage;
        var elmDownArrowImage;
        var elmUpArrowImageContainer;
        var elmDownArrowImageContainer;
        elmControl = CommandUI.Utility.createElement('span');
        elmControl.className = 'cui-spn';
        elmControl.setAttribute('mscui:controltype', this.get_controlType());
        elmControl.setAttribute(Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaPresentationRole);
        elmInput = CommandUI.Utility._createSelectableElement$i('input');
        elmInput.className = 'cui-spn-txtbx';
        elmInput.id = this.get_id();
        elmInput.setAttribute('role', 'spinbutton');
        elmInput.setAttribute('type', 'text');
        elmInput.setAttribute('autocomplete', 'off');
        elmInput.setAttribute('data-lpignore', 'true');
        elmControl.appendChild(elmInput);
        var elmArrowContainer = CommandUI.Utility.createElement('span');
        elmArrowContainer.className = 'cui-spn-arwbx';
        elmControl.appendChild(elmArrowContainer);
        elmUpArrow = CommandUI.Utility.createElement('span');
        elmUpArrow.className = 'cui-spn-btnup';
        elmUpArrow.setAttribute(Common.AccessibilityUtils.ariaHiddenAttribute, 'true');
        elmArrowContainer.appendChild(elmUpArrow);
        elmDownArrow = CommandUI.Utility.createElement('span');
        elmDownArrow.className = 'cui-spn-btndown';
        elmDownArrow.setAttribute(Common.AccessibilityUtils.ariaHiddenAttribute, 'true');
        elmArrowContainer.appendChild(elmDownArrow);
        elmUpArrowImage = CommandUI.Utility.createElement('img');
        elmUpArrowImage.alt = '';
        var dir = this.get_root().get_textDirection();
        if (dir === 1) {
            elmInput.style.direction = 'rtl';
        }
        if (this.get__isVisualRefreshEnabled$i$0()) {
            elmUpArrowImageContainer = CommandUI.Utility._createClusteredImageContainerNew$i(2, this.get_root().get_properties().ImageUpArrow8by8, this.get_root().get_properties().ImageUpArrow8by8Class, elmUpArrowImage, true, false);
        }
        else {
            elmUpArrowImageContainer = CommandUI.Utility._createClusteredImageContainerNew$i(1, this.get_root().get_properties().ImageUpArrow, this.get_root().get_properties().ImageUpArrowClass, elmUpArrowImage, true, false);
        }
        CommandUI.Utility.ensureCSSClassOnElement(elmUpArrowImageContainer, 'cui-spn-imgcnt');
        elmUpArrow.appendChild(elmUpArrowImageContainer);
        elmDownArrowImage = CommandUI.Utility.createElement('img');
        elmDownArrowImage.alt = '';
        if (this.get__isVisualRefreshEnabled$i$0()) {
            elmDownArrowImageContainer = CommandUI.Utility._createClusteredImageContainerNew$i(2, this.get_root().get_properties().ImageDownArrow8by8, this.get_root().get_properties().ImageDownArrow8by8Class, elmDownArrowImage, true, false);
        }
        else {
            elmDownArrowImageContainer = CommandUI.Utility._createClusteredImageContainerNew$i(1, this.get_root().get_properties().ImageDownArrow, this.get_root().get_properties().ImageDownArrowClass, elmDownArrowImage, true, false);
        }
        CommandUI.Utility.ensureCSSClassOnElement(elmDownArrowImageContainer, 'cui-spn-imgcnt');
        elmDownArrow.appendChild(elmDownArrowImageContainer);
        var alt = this.get__properties$p$1().Alt;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(alt)) {
            elmInput.title = alt;
        }
        var width = this.get__properties$p$1().Width;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(width)) {
            elmInput.style.width = width;
        }
        var spinnerDom = new CommandUI.Controls.SpinnerComponentDom(displayMode);
        spinnerDom.elmControl = elmControl;
        spinnerDom.elmInput = elmInput;
        spinnerDom.elmUpArrow = elmUpArrow;
        spinnerDom.elmDownArrow = elmDownArrow;
        spinnerDom.elmUpArrowImage = elmUpArrowImage;
        spinnerDom.elmDownArrowImage = elmDownArrowImage;
        spinnerDom.elmUpArrowImageContainer = elmUpArrowImageContainer;
        spinnerDom.elmDownArrowImageContainer = elmDownArrowImageContainer;
        var LabelledBy = this.get__properties$p$1().LabelledBy;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(LabelledBy)) {
            elmInput.setAttribute('aria-labelledby', LabelledBy);
        }
        return spinnerDom;
    },
    
    get_controlType: function CommandUI_Controls_Spinner$get_controlType$in() {
        return CommandUI.Control.spinnerControlType;
    },
    
    get__needsAKeytip$i$0: function CommandUI_Controls_Spinner$get__needsAKeytip$i$0$in() {
        return true;
    },
    
    get_focusableElement: function CommandUI_Controls_Spinner$get_focusableElement$in() {
        return (!this.get_spinnerDom()) ? null : this.get_spinnerDom().elmInput;
    },
    
    get__properties$p$1: function CommandUI_Controls_Spinner$get__properties$p$1$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    _commitPendingChange$i$0: function CommandUI_Controls_Spinner$_commitPendingChange$i$0$in() {
        if (this.get_behavior()) {
            (this.get_behavior()).commitPendingChange();
        }
    },
    
    constructClonedControl: function CommandUI_Controls_Spinner$constructClonedControl$in(root, properties) {
        return new CommandUI.Controls.Spinner(root, this.get_id(), properties, this.get_validUnits(), this.get_validSpecialStrings());
    },
    
    get__isEditable$i$0: function CommandUI_Controls_Spinner$get__isEditable$i$0$in() {
        return true;
    }
}


CommandUI.Controls.SplitButtonProperties = function CommandUI_Controls_SplitButtonProperties() {
    CommandUI.Controls.SplitButtonProperties.initializeBase(this);
}
CommandUI.Controls.SplitButtonProperties.prototype = {
    IsToggleSplit: null,
    QueryCommand: null
}


CommandUI.Controls.SplitButton = function CommandUI_Controls_SplitButton(root, id, properties, menu) {
    CommandUI.Controls.SplitButton.initializeBase(this, [ root, id, properties, menu ]);
    this.addDisplayMode('Large');
    this.addDisplayMode('Medium');
    this.addDisplayMode('Medium20');
    this.addDisplayMode('Small');
    this.addDisplayMode('Menu32');
    this.addDisplayMode('Menu16');
    this.addDisplayMode('Menu');
    this.addDisplayMode('MenuTellMe');
    this.set_on(false);
}
CommandUI.Controls.SplitButton.prototype = {
    
    createComponentDomForDisplayMode: function CommandUI_Controls_SplitButton$createComponentDomForDisplayMode$in(displayMode) {
        var domStrategy = new CommandUI.Controls._splitButtonDomStrategy();
        return domStrategy.buildControlDom(this, displayMode);
    },
    
    forEachSplitButtonComponentDom: function CommandUI_Controls_SplitButton$forEachSplitButtonComponentDom$in(callback) {
        var $$t_3 = this;
        this.get_controlComponentDomCache().forEach(function(dom) {
            callback(dom);
        });
    },
    
    onStateChanged: function CommandUI_Controls_SplitButton$onStateChanged$in() {
        this.setState(this.get_on() && this.get_enabled());
    },
    
    get_displayedButtonElement: function CommandUI_Controls_SplitButton$get_displayedButtonElement$in() {
        var displayedControlDom = this.getDisplayedControlDom();
        return (!displayedControlDom) ? null : displayedControlDom.elmButtonPart;
    },
    
    get_displayedButtonImageElement: function CommandUI_Controls_SplitButton$get_displayedButtonImageElement$in() {
        var displayedControlDom = this.getDisplayedControlDom();
        return (!displayedControlDom) ? null : displayedControlDom.elmImage;
    },
    
    get_controlType: function CommandUI_Controls_SplitButton$get_controlType$in() {
        return CommandUI.Control.splitButtonControlType;
    },
    
    get_on: function CommandUI_Controls_SplitButton$get_on$in() {
        return (CommandUI.Utility.isTrue(this.get_properties().IsToggleSplit)) ? this.get_stateProperties()[CommandUI.Controls.SplitButtonCommandProperties.On] : false;
    },
    
    set_on: function CommandUI_Controls_SplitButton$set_on$in(value) {
        if (CommandUI.Utility.isTrue(this.get_properties().IsToggleSplit)) {
            this.get_stateProperties()[CommandUI.Controls.SplitButtonCommandProperties.On] = value;
            this.setState(value && this.get_enabled());
        }
        return value;
    },
    
    setState: function CommandUI_Controls_SplitButton$setState$in(on) {
        if (CommandUI.Utility.isTrue(this.get_properties().IsToggleSplit)) {
            var $$t_3 = this;
            this.forEachSplitButtonComponentDom(function(dom) {
                $$t_3._toggleCssClass$p$2(dom, CommandUI.Controls.SplitButton._toggledClass$p, on);
            });
        }
    },
    
    _toggleCssClass$p$2: function CommandUI_Controls_SplitButton$_toggleCssClass$p$2$in(componentDom, toggledClass, on) {
        CommandUI.Utility.toggleCSSClassOnElement(componentDom.elmControl, toggledClass, on);
        CommandUI.Utility.toggleCSSClassOnElement(componentDom.elmButtonPart, toggledClass, on);
        CommandUI.Utility.toggleCSSClassOnElement(componentDom.elmMenuLauncherPart, toggledClass, on);
        this._updateAriaMenuLauncherPressedAttribute$p$2(componentDom.elmControl, on);
        this._updateAriaMenuLauncherPressedAttribute$p$2(componentDom.elmButtonPart, on);
    },
    
    get_properties: function CommandUI_Controls_SplitButton$get_properties$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    _updateAriaMenuLauncherPressedAttribute$p$2: function CommandUI_Controls_SplitButton$_updateAriaMenuLauncherPressedAttribute$p$2$in(focusableElement, on) {
        Common.AccessibilityUtils.setAriaAttribute(focusableElement, Common.AccessibilityUtils.ariaPressedAttribute, (on) ? Common.AccessibilityUtils.ariaTrueValue : Common.AccessibilityUtils.ariaFalseValue);
    },
    
    constructClonedMenuLauncher: function CommandUI_Controls_SplitButton$constructClonedMenuLauncher$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.SplitButton(root, this.get_id(), properties, clonedMenu);
    },
    
    constructClonedMenuLauncherForMenu: function CommandUI_Controls_SplitButton$constructClonedMenuLauncherForMenu$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.FlyoutAnchor(root, this.get_id(), properties, clonedMenu);
    },
    
    getDisplayedControlDom: function CommandUI_Controls_SplitButton$getDisplayedControlDom$in() {
        var displayedComponent = this.get_displayedComponent();
        if (!displayedComponent) {
            return null;
        }
        var displayedControlDom = this.get_controlComponentDomCache().get_item(displayedComponent.get_displayMode());
        if (!displayedControlDom) {
            Common.Debug.assertNotReachedTag(1859740);
        }
        return displayedControlDom;
    }
}




CommandUI.Controls.StatefulColorFlyoutAnchorProperties = function CommandUI_Controls_StatefulColorFlyoutAnchorProperties() {
    CommandUI.Controls.StatefulColorFlyoutAnchorProperties.initializeBase(this);
}
CommandUI.Controls.StatefulColorFlyoutAnchorProperties.prototype = {
    InitializationColor: '',
    DefaultColor: ''
}


CommandUI.Controls.StatefulColorFlyoutAnchor = function CommandUI_Controls_StatefulColorFlyoutAnchor(root, id, properties, menu) {
    this._iconColorManager$p$3 = new CommandUI.Controls.IconColorManager();
    CommandUI.Controls.StatefulColorFlyoutAnchor.initializeBase(this, [ root, id, properties, menu ]);
    this.set_currentIconColor(this.get__properties$p$3().InitializationColor);
}
CommandUI.Controls.StatefulColorFlyoutAnchor.prototype = {
    _displayedButtonCanvasElement$p$3: null,
    
    get__properties$p$3: function CommandUI_Controls_StatefulColorFlyoutAnchor$get__properties$p$3$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    get_currentIconColor: function CommandUI_Controls_StatefulColorFlyoutAnchor$get_currentIconColor$in() {
        return this.get_stateProperties()[CommandUI.Controls.IconColorCommandProperties.Color];
    },
    
    set_currentIconColor: function CommandUI_Controls_StatefulColorFlyoutAnchor$set_currentIconColor$in(value) {
        this.get_stateProperties()[CommandUI.Controls.IconColorCommandProperties.Color] = value;
        var noColor = new RegExp('^-1$').test(value);
        this.set_iconColorInt(noColor);
        if (noColor) {
            this._iconColorManager$p$3.set_displayColor(this._iconColorManager$p$3.get_automaticDisplayColor());
        }
        else {
            this._iconColorManager$p$3.set_displayColor(Common.StringUtils.getRGBFromBGR(value));
        }
        return value;
    },
    
    get_iconColorInt: function CommandUI_Controls_StatefulColorFlyoutAnchor$get_iconColorInt$in() {
        return this.get_stateProperties()[CommandUI.Controls.IconColorCommandProperties.IntColor];
    },
    
    set_iconColorInt: function CommandUI_Controls_StatefulColorFlyoutAnchor$set_iconColorInt$in(value) {
        this.get_stateProperties()[CommandUI.Controls.IconColorCommandProperties.IntColor] = value;
        return value;
    },
    
    get_controlType: function CommandUI_Controls_StatefulColorFlyoutAnchor$get_controlType$in() {
        return CommandUI.Control.statefulColorFlyoutAnchorControlType;
    },
    
    selectDropdownItem: function CommandUI_Controls_StatefulColorFlyoutAnchor$selectDropdownItem$in(isc) {
        var control = $$as(CommandUI.Control, isc);
        if (control) {
            if (this._iconColorManager$p$3.iconColorChanged(control.get_stateProperties()['Color'], this.get_currentIconColor())) {
                if (CommandUI.ScriptUtility.isNullOrEmptyString(control.get_stateProperties()['Color'])) {
                    this.set_currentIconColor(this.get__properties$p$3().DefaultColor);
                }
                else {
                    this.set_currentIconColor(control.get_stateProperties()['Color']);
                }
                this._iconColorManager$p$3.drawColorStrip(this._displayedButtonCanvasElement$p$3, this.get_iconColorInt());
            }
        }
    },
    
    constructClonedMenuLauncher: function CommandUI_Controls_StatefulColorFlyoutAnchor$constructClonedMenuLauncher$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.StatefulColorFlyoutAnchor(root, this.get_id(), properties, clonedMenu);
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_StatefulColorFlyoutAnchor$createComponentDomForDisplayMode$in(displayMode) {
        var domStrategy = new CommandUI.Controls._statefulColorFlyoutAnchorDomStrategy(true);
        var controlComponentDom = domStrategy.buildControlDom(this, displayMode);
        this.populateControlDom(controlComponentDom, displayMode);
        this._displayedButtonCanvasElement$p$3 = controlComponentDom.elmCanvasPart;
        this._iconColorManager$p$3.drawColorStrip(this._displayedButtonCanvasElement$p$3, this.get_iconColorInt());
        return controlComponentDom;
    }
}


CommandUI.Controls.StatefulColorSplitButton = function CommandUI_Controls_StatefulColorSplitButton(root, id, properties, menu) {
    this._iconColorManager$p$3 = new CommandUI.Controls.IconColorManager();
    CommandUI.Controls.StatefulColorSplitButton.initializeBase(this, [ root, id, properties, menu ]);
    this.set_currentIconColor(this.get_statefulColorSplitButtonProperties().InitializationColor);
}
CommandUI.Controls.StatefulColorSplitButton.prototype = {
    
    get_statefulColorSplitButtonProperties: function CommandUI_Controls_StatefulColorSplitButton$get_statefulColorSplitButtonProperties$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    get_currentIconColor: function CommandUI_Controls_StatefulColorSplitButton$get_currentIconColor$in() {
        return this.get_stateProperties()[CommandUI.Controls.IconColorCommandProperties.Color];
    },
    
    set_currentIconColor: function CommandUI_Controls_StatefulColorSplitButton$set_currentIconColor$in(value) {
        this.get_stateProperties()[CommandUI.Controls.IconColorCommandProperties.Color] = value;
        var noColor = new RegExp('^-1$').test(value);
        this.set_iconColorInt(noColor);
        if (noColor) {
            this._iconColorManager$p$3.set_displayColor(this._iconColorManager$p$3.get_automaticDisplayColor());
        }
        else {
            this._iconColorManager$p$3.set_displayColor(Common.StringUtils.getRGBFromBGR(value));
        }
        return value;
    },
    
    get_iconColorInt: function CommandUI_Controls_StatefulColorSplitButton$get_iconColorInt$in() {
        return this.get_stateProperties()[CommandUI.Controls.IconColorCommandProperties.IntColor];
    },
    
    set_iconColorInt: function CommandUI_Controls_StatefulColorSplitButton$set_iconColorInt$in(value) {
        this.get_stateProperties()[CommandUI.Controls.IconColorCommandProperties.IntColor] = value;
        return value;
    },
    
    get__displayedButtonCanvasElement$p$3: function CommandUI_Controls_StatefulColorSplitButton$get__displayedButtonCanvasElement$p$3$in() {
        var displayedControlDom = this.getDisplayedControlDom();
        return (!displayedControlDom) ? null : displayedControlDom.elmCanvasPart;
    },
    
    get_controlType: function CommandUI_Controls_StatefulColorSplitButton$get_controlType$in() {
        return CommandUI.Control.statefulColorSplitButtonControlType;
    },
    
    selectDropdownItem: function CommandUI_Controls_StatefulColorSplitButton$selectDropdownItem$in(isc) {
        var control = $$as(CommandUI.Control, isc);
        if (control) {
            if (this._iconColorManager$p$3.iconColorChanged(control.get_stateProperties()['Color'], this.get_currentIconColor())) {
                if (CommandUI.ScriptUtility.isNullOrEmptyString(control.get_stateProperties()['Color'])) {
                    this.set_currentIconColor(this.get_statefulColorSplitButtonProperties().DefaultColor);
                }
                else {
                    this.set_currentIconColor(control.get_stateProperties()['Color']);
                }
                this._iconColorManager$p$3.drawColorStrip(this.get__displayedButtonCanvasElement$p$3(), this.get_iconColorInt());
            }
        }
    },
    
    constructClonedMenuLauncher: function CommandUI_Controls_StatefulColorSplitButton$constructClonedMenuLauncher$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.StatefulColorSplitButton(root, this.get_id(), properties, clonedMenu);
    },
    
    constructClonedMenuLauncherForMenu: function CommandUI_Controls_StatefulColorSplitButton$constructClonedMenuLauncherForMenu$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.FlyoutAnchor(root, this.get_id(), properties, clonedMenu);
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_StatefulColorSplitButton$createComponentDomForDisplayMode$in(displayMode) {
        var domStrategy = new CommandUI.Controls._statefulColorSplitButtonDomStrategy();
        var controlComponentDom = domStrategy.buildControlDom(this, displayMode);
        this._iconColorManager$p$3.drawColorStrip(controlComponentDom.elmCanvasPart, this.get_iconColorInt());
        return controlComponentDom;
    }
}


CommandUI.Controls.StatefulImageSplitButton = function CommandUI_Controls_StatefulImageSplitButton(root, id, properties, menu) {
    CommandUI.Controls.StatefulImageSplitButton.initializeBase(this, [ root, id, properties, menu ]);
    this.set__recentMenuItemId$p$3(this.get_statefulImageSplitButtonProperties().DefaultMenuItemId);
    this.set__recentImageClass$p$3(this.get_statefulImageSplitButtonProperties().DefaultImageClass);
}
CommandUI.Controls.StatefulImageSplitButton._getCssClassName$p = function CommandUI_Controls_StatefulImageSplitButton$_getCssClassName$p$st(isc) {
    var control = $$as(CommandUI.Control, isc);
    if (!control) {
        return '';
    }
    var controlSize = CommandUI.Control._getControlSize$i(control.get_displayMode());
    Diag.ULS.shipAssertTag(34961356, 207, controlSize === CommandUI.ControlSize.control16, 'Stateful button is implemented for 16X16px icons');
    if (controlSize !== CommandUI.ControlSize.control16) {
        return '';
    }
    return control.get_controlProperties().Image16by16Class;
}
CommandUI.Controls.StatefulImageSplitButton.prototype = {
    
    get_statefulImageSplitButtonProperties: function CommandUI_Controls_StatefulImageSplitButton$get_statefulImageSplitButtonProperties$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    get__recentMenuItemId$p$3: function CommandUI_Controls_StatefulImageSplitButton$get__recentMenuItemId$p$3$in() {
        return this.get_stateProperties()[CommandUI.Controls.StatefulImageSplitButtonCommandProperties.MenuItemIdKey];
    },
    
    set__recentMenuItemId$p$3: function CommandUI_Controls_StatefulImageSplitButton$set__recentMenuItemId$p$3$in(value) {
        this.get_stateProperties()[CommandUI.Controls.StatefulImageSplitButtonCommandProperties.MenuItemIdKey] = value;
        return value;
    },
    
    get__recentImageClass$p$3: function CommandUI_Controls_StatefulImageSplitButton$get__recentImageClass$p$3$in() {
        return this.get_stateProperties()[CommandUI.Controls.StatefulImageSplitButtonCommandProperties.ImageClassKey];
    },
    
    set__recentImageClass$p$3: function CommandUI_Controls_StatefulImageSplitButton$set__recentImageClass$p$3$in(value) {
        this.get_stateProperties()[CommandUI.Controls.StatefulImageSplitButtonCommandProperties.ImageClassKey] = value;
        return value;
    },
    
    get_controlType: function CommandUI_Controls_StatefulImageSplitButton$get_controlType$in() {
        return CommandUI.Control.statefulImageSplitButtonControlType;
    },
    
    selectDropdownItem: function CommandUI_Controls_StatefulImageSplitButton$selectDropdownItem$in(isc) {
        this.set__recentMenuItemId$p$3(isc.getMenuItemId());
        if (this._setRecentRecentImageClass$p$3(CommandUI.Controls.StatefulImageSplitButton._getCssClassName$p(isc))) {
            this._updateDOM$p$3();
        }
    },
    
    constructClonedMenuLauncher: function CommandUI_Controls_StatefulImageSplitButton$constructClonedMenuLauncher$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.StatefulImageSplitButton(root, this.get_id(), properties, clonedMenu);
    },
    
    constructClonedMenuLauncherForMenu: function CommandUI_Controls_StatefulImageSplitButton$constructClonedMenuLauncherForMenu$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.FlyoutAnchor(root, this.get_id(), properties, clonedMenu);
    },
    
    _setRecentRecentImageClass$p$3: function CommandUI_Controls_StatefulImageSplitButton$_setRecentRecentImageClass$p$3$in(newValue) {
        var oldValue = this.get__recentImageClass$p$3();
        if (CommandUI.ScriptUtility.isNullOrEmptyString(oldValue) && CommandUI.ScriptUtility.isNullOrEmptyString(newValue)) {
            return false;
        }
        if (oldValue === newValue) {
            return false;
        }
        if (CommandUI.ScriptUtility.isNullOrEmptyString(newValue)) {
            newValue = this.get_statefulImageSplitButtonProperties().DefaultImageClass;
        }
        this.set__recentImageClass$p$3(newValue);
        return true;
    },
    
    _updateDOM$p$3: function CommandUI_Controls_StatefulImageSplitButton$_updateDOM$p$3$in() {
        var displayedButtonImageElement = this.get_displayedButtonImageElement();
        if (displayedButtonImageElement) {
            displayedButtonImageElement.className = this.get__recentImageClass$p$3();
        }
    }
}


CommandUI.Controls.TextBoxProperties = function CommandUI_Controls_TextBoxProperties() {
    CommandUI.Controls.TextBoxProperties.initializeBase(this);
}
CommandUI.Controls.TextBoxProperties.prototype = {
    QueryCommand: null,
    ControlCss: null,
    Width: null,
    Height: null,
    MaxLength: null,
    AdditionalLabelBy: null,
    PlaceholderText: null,
    IsMultiline: null,
    IsStretchedHorizontally: null
}


CommandUI.Controls.TextBoxComponentDom = function CommandUI_Controls_TextBoxComponentDom(displayMode, elmControl, domStrategy) {
    CommandUI.Controls.TextBoxComponentDom.initializeBase(this, [ displayMode, elmControl, domStrategy ]);
}
CommandUI.Controls.TextBoxComponentDom.prototype = {
    elmInput: null,
    isEditable: true,
    isMultiline: false
}


CommandUI.Controls.TextBox = function CommandUI_Controls_TextBox(root, id, properties) {
    CommandUI.Controls.TextBox.initializeBase(this, [ root, id, properties ]);
    this.addDisplayMode('Medium');
    this.addDisplayMode('MenuDiagnostics');
    if (this.get_behavior()) {
        this.get_behavior().initialize();
    }
}
CommandUI.Controls.TextBox._getDomElementCreationStrategy$p = function CommandUI_Controls_TextBox$_getDomElementCreationStrategy$p$st(displayMode) {
    switch (displayMode) {
        case 'MenuDiagnostics':
            return new CommandUI.Controls._diagnosticsItemTextBoxDomStrategy();
        default:
            return new CommandUI.Controls.StandardTextBoxDomStrategy();
    }
}
CommandUI.Controls.TextBox.prototype = {
    _$$pf_TextBoxDom$p$1: null,
    
    get_textBoxDom: function CommandUI_Controls_TextBox$get_textBoxDom$in() {
        return this._$$pf_TextBoxDom$p$1;
    },
    
    set_textBoxDom: function CommandUI_Controls_TextBox$set_textBoxDom$in(value) {
        this._$$pf_TextBoxDom$p$1 = value;
        return value;
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_TextBox$createComponentDomForDisplayMode$in(displayMode) {
        var strategy = CommandUI.Controls.TextBox._getDomElementCreationStrategy$p(displayMode);
        this.set_textBoxDom(strategy.buildControlDom(this, displayMode));
        this._focusableElement$1 = strategy.get_focusableElement();
        return this.get_textBoxDom();
    },
    
    ensureKeytipForControl: function CommandUI_Controls_TextBox$ensureKeytipForControl$in(controlComponent, keytipParentElement) {
        controlComponent._ensureKeytip$i$0(keytipParentElement, this.get_textBoxDom().elmInput, this.get_parentKeytipsIds(), this.get_parentKeytipsKeys());
    },
    
    get_controlType: function CommandUI_Controls_TextBox$get_controlType$in() {
        return CommandUI.Control.textBoxControlType;
    },
    
    _focusableElement$1: null,
    
    get_focusableElement: function CommandUI_Controls_TextBox$get_focusableElement$in() {
        return this._focusableElement$1;
    },
    
    _commitPendingChange$i$0: function CommandUI_Controls_TextBox$_commitPendingChange$i$0$in() {
        if (this.get_behavior()) {
            (this.get_behavior()).commitPendingChange();
        }
    },
    
    constructClonedControl: function CommandUI_Controls_TextBox$constructClonedControl$in(root, properties) {
        return new CommandUI.Controls.TextBox(root, this.get_id(), properties);
    },
    
    get__isEditable$i$0: function CommandUI_Controls_TextBox$get__isEditable$i$0$in() {
        return !!this.get_textBoxDom() && this.get_textBoxDom().isEditable;
    }
}


CommandUI.Controls.ToggleButtonProperties = function CommandUI_Controls_ToggleButtonProperties() {
    CommandUI.Controls.ToggleButtonProperties.initializeBase(this);
}
CommandUI.Controls.ToggleButtonProperties.prototype = {
    QueryCommand: null,
    TogglesWhenExecuted: null,
    UpdateHtmlPostToggle: null,
    CloseMenuWhenExecuted: null,
    UseCheckMark: null,
    UsePseudoCheckMark: null,
    UseUncheckedImage: null,
    CheckedImage: null,
    CheckedImageClass: null,
    UncheckedImage: null,
    UncheckedImageClass: null,
    IsChecked: null
}


CommandUI.Controls.ToggleButton = function CommandUI_Controls_ToggleButton(root, id, properties) {
    CommandUI.Controls.ToggleButton.initializeBase(this, [ root, id, properties ]);
    this._id = id;
    this._initializeCheckMarkProperties$p$1(root, properties);
    this.addDisplayModes();
    this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.On] = CommandUI.Utility.isTrue(properties.IsChecked);
    this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.Visible] = this.get_visible();
    this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.SourceControlId] = id;
    this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.LabelText] = this.set_labelText(this.get__properties$p$1().LabelText);
}
CommandUI.Controls.ToggleButton.prototype = {
    _id: null,
    _displayMode$1: null,
    _$$pf_UseCheckMark$p$1: false,
    
    get_useCheckMark: function CommandUI_Controls_ToggleButton$get_useCheckMark$in() {
        return this._$$pf_UseCheckMark$p$1;
    },
    
    set_useCheckMark: function CommandUI_Controls_ToggleButton$set_useCheckMark$in(value) {
        this._$$pf_UseCheckMark$p$1 = value;
        return value;
    },
    
    _$$pf_UsePseudoCheckMark$p$1: false,
    
    get_usePseudoCheckMark: function CommandUI_Controls_ToggleButton$get_usePseudoCheckMark$in() {
        return this._$$pf_UsePseudoCheckMark$p$1;
    },
    
    set_usePseudoCheckMark: function CommandUI_Controls_ToggleButton$set_usePseudoCheckMark$in(value) {
        this._$$pf_UsePseudoCheckMark$p$1 = value;
        return value;
    },
    
    _$$pf_UseUncheckedImage$p$1: false,
    
    get_useUncheckedImage: function CommandUI_Controls_ToggleButton$get_useUncheckedImage$in() {
        return this._$$pf_UseUncheckedImage$p$1;
    },
    
    set_useUncheckedImage: function CommandUI_Controls_ToggleButton$set_useUncheckedImage$in(value) {
        this._$$pf_UseUncheckedImage$p$1 = value;
        return value;
    },
    
    _$$pf_CheckMarkImage$p$1: null,
    
    get_checkMarkImage: function CommandUI_Controls_ToggleButton$get_checkMarkImage$in() {
        return this._$$pf_CheckMarkImage$p$1;
    },
    
    set_checkMarkImage: function CommandUI_Controls_ToggleButton$set_checkMarkImage$in(value) {
        this._$$pf_CheckMarkImage$p$1 = value;
        return value;
    },
    
    _$$pf_UncheckMarkImage$p$1: null,
    
    get_uncheckMarkImage: function CommandUI_Controls_ToggleButton$get_uncheckMarkImage$in() {
        return this._$$pf_UncheckMarkImage$p$1;
    },
    
    set_uncheckMarkImage: function CommandUI_Controls_ToggleButton$set_uncheckMarkImage$in(value) {
        this._$$pf_UncheckMarkImage$p$1 = value;
        return value;
    },
    
    _$$pf_CheckMarkImageClass$p$1: null,
    
    get_checkMarkImageClass: function CommandUI_Controls_ToggleButton$get_checkMarkImageClass$in() {
        return this._$$pf_CheckMarkImageClass$p$1;
    },
    
    set_checkMarkImageClass: function CommandUI_Controls_ToggleButton$set_checkMarkImageClass$in(value) {
        this._$$pf_CheckMarkImageClass$p$1 = value;
        return value;
    },
    
    _$$pf_UncheckMarkImageClass$p$1: null,
    
    get_uncheckMarkImageClass: function CommandUI_Controls_ToggleButton$get_uncheckMarkImageClass$in() {
        return this._$$pf_UncheckMarkImageClass$p$1;
    },
    
    set_uncheckMarkImageClass: function CommandUI_Controls_ToggleButton$set_uncheckMarkImageClass$in(value) {
        this._$$pf_UncheckMarkImageClass$p$1 = value;
        return value;
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_ToggleButton$createComponentDomForDisplayMode$in(displayMode) {
        this._displayMode$1 = displayMode;
        var domCreationStrategy = new CommandUI.Controls._standardControlDomStrategy(false);
        return domCreationStrategy.buildControlDom(this, displayMode);
    },
    
    get_controlType: function CommandUI_Controls_ToggleButton$get_controlType$in() {
        return CommandUI.Control.toggleButtonControlType;
    },
    
    get__needsAKeytip$i$0: function CommandUI_Controls_ToggleButton$get__needsAKeytip$i$0$in() {
        return true;
    },
    
    get__ariaRole$i$0: function CommandUI_Controls_ToggleButton$get__ariaRole$i$0$in() {
        var ariaRole;
        if (this.get_inMenu()) {
            ariaRole = (this.get_useCheckMark() || this.get_usePseudoCheckMark()) ? Common.AccessibilityUtils.ariaMenuItemCheckBoxRole : Common.AccessibilityUtils.ariaMenuItemRadioRole;
        }
        else {
            ariaRole = (this.get_useCheckMark()) ? Common.AccessibilityUtils.ariaCheckBoxRole : CommandUI.Control.prototype.get__ariaRole$i$0.call(this);
        }
        return ariaRole;
    },
    
    onStateChanged: function CommandUI_Controls_ToggleButton$onStateChanged$in() {
        this.setState(this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.On]);
    },
    
    getTextValue: function CommandUI_Controls_ToggleButton$getTextValue$in() {
        return this.get_labelText();
    },
    
    setState: function CommandUI_Controls_ToggleButton$setState$in(on) {
        if (this.get_useCheckMark() && this.get_useUncheckedImage()) {
            this._setCheckUncheckImageProperties$p$1(on);
        }
        var $$t_3 = this;
        this.get_controlComponentDomCache().forEach(function(dom) {
            $$t_3._setStateOnElement$p$1(dom.elmControl, on);
        });
    },
    
    _initializeCheckMarkProperties$p$1: function CommandUI_Controls_ToggleButton$_initializeCheckMarkProperties$p$1$in(root, properties) {
        this.set_useCheckMark(CommandUI.Utility.isTrue(properties.UseCheckMark));
        this.set_usePseudoCheckMark(CommandUI.Utility.isTrue(properties.UsePseudoCheckMark));
        this.set_useUncheckedImage(CommandUI.Utility.isTrue(properties.UseUncheckedImage));
        Common.Debug.assertTag(!(this.get_useCheckMark() && this.get_usePseudoCheckMark()), 22153221);
        Common.Debug.assertTag(!this.get_useUncheckedImage() || this.get_useCheckMark(), 4534300);
        if (this.get_useUncheckedImage()) {
            this.set_uncheckMarkImage((CommandUI.ScriptUtility.isNullOrUndefined(properties.UncheckedImage)) ? root.get_properties().ImageUncheckMark : properties.UncheckedImage);
            this.set_uncheckMarkImageClass((CommandUI.ScriptUtility.isNullOrUndefined(properties.UncheckedImageClass)) ? root.get_properties().ImageUncheckMarkClass : properties.UncheckedImageClass);
        }
        if (this.get_useCheckMark()) {
            this.set_checkMarkImage((CommandUI.ScriptUtility.isNullOrUndefined(properties.CheckedImage)) ? root.get_properties().ImageCheckMark : properties.CheckedImage);
            this.set_checkMarkImageClass((CommandUI.ScriptUtility.isNullOrUndefined(properties.CheckedImageClass)) ? root.get_properties().ImageCheckMarkClass : properties.CheckedImageClass);
            properties.Image16by16 = this.get_checkMarkImage();
            properties.Image16by16Class = this.get_checkMarkImageClass();
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(properties.IsChecked)) {
            this._setCheckUncheckImageProperties$p$1(CommandUI.Utility.isTrue(properties.IsChecked));
        }
    },
    
    _setCheckUncheckImageProperties$p$1: function CommandUI_Controls_ToggleButton$_setCheckUncheckImageProperties$p$1$in(state) {
        this.get__properties$p$1().Image16by16 = (state) ? this.get_checkMarkImage() : this.get_uncheckMarkImage();
        this.get__properties$p$1().Image16by16Class = (state) ? this.get_checkMarkImageClass() : this.get_uncheckMarkImageClass();
    },
    
    _setStateOnElement$p$1: function CommandUI_Controls_ToggleButton$_setStateOnElement$p$1$in(element, on) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(element)) {
            var ariaAttribute;
            if (this.get_useCheckMark()) {
                if (!this.get_useUncheckedImage()) {
                    CommandUI.Utility.toggleCSSClassOnElement(element, 'cui-ctl-unchkd', !on);
                }
                ariaAttribute = Common.AccessibilityUtils.ariaCheckedAttribute;
            }
            else {
                CommandUI.Utility.toggleCSSClassOnElement(element, 'cui-ctl-on', on);
                ariaAttribute = (this._displayMode$1 && CommandUI.ControlComponent._isDisplayModeMenu$i(this._displayMode$1)) ? Common.AccessibilityUtils.ariaCheckedAttribute : Common.AccessibilityUtils.ariaPressedAttribute;
            }
            Common.AccessibilityUtils.setAriaAttribute(element, ariaAttribute, (on) ? Common.AccessibilityUtils.ariaTrueValue : Common.AccessibilityUtils.ariaFalseValue);
        }
    },
    
    addDisplayModes: function CommandUI_Controls_ToggleButton$addDisplayModes$in() {
        this.addDisplayMode('Small');
        this.addDisplayMode('Small14');
        this.addDisplayMode('Small24');
        this.addDisplayMode('Medium');
        this.addDisplayMode('Medium14');
        this.addDisplayMode('Medium20');
        this.addDisplayMode('Large');
        this.addDisplayMode('Large16');
        this.addDisplayMode('Large30');
        this.addDisplayMode('LargeNoText');
        this.addDisplayMode('Menu');
        this.addDisplayMode('Menu16');
        this.addDisplayMode('Menu20');
        this.addDisplayMode('Menu32');
        this.addDisplayMode('Menu48');
        this.addDisplayMode('MenuTellMe');
    },
    
    get_focusableElement: function CommandUI_Controls_ToggleButton$get_focusableElement$in() {
        return this.getDisplayedComponentElement();
    },
    
    get_activatesOnPress: function CommandUI_Controls_ToggleButton$get_activatesOnPress$in() {
        return !this.isStandardMenuItem();
    },
    
    get__properties$p$1: function CommandUI_Controls_ToggleButton$get__properties$p$1$in() {
        return this.get_controlProperties();
    },
    
    constructClonedControl: function CommandUI_Controls_ToggleButton$constructClonedControl$in(root, properties) {
        return new CommandUI.Controls.ToggleButton(root, this.get_id(), properties);
    }
}


CommandUI.Controls.JewelMenuLauncherProperties = function CommandUI_Controls_JewelMenuLauncherProperties() {
    CommandUI.Controls.JewelMenuLauncherProperties.initializeBase(this);
}


CommandUI.Controls.JewelMenuLauncher = function CommandUI_Controls_JewelMenuLauncher(jewel, id, properties, menu, parentRoot) {
    this.$$d__launchFileMenu$p$2 = Function.createDelegate(this, this._launchFileMenu$p$2);
    CommandUI.Controls.JewelMenuLauncher.initializeBase(this, [ jewel, id, properties, menu ]);
    this._parentRoot$2 = parentRoot;
    this.addDisplayMode('Default');
    Common.AFrameworkApplication.get_theActionManager().addAction(Common.CommonCommands.launchFileMenu, Common.CommonContextIds.frame, this.$$d__launchFileMenu$p$2);
}
CommandUI.Controls.JewelMenuLauncher.prototype = {
    _elmJewel$2: null,
    _parentRoot$2: null,
    
    get_parentRoot: function CommandUI_Controls_JewelMenuLauncher$get_parentRoot$in() {
        return this._parentRoot$2;
    },
    
    get_controlType: function CommandUI_Controls_JewelMenuLauncher$get_controlType$in() {
        return CommandUI.Control.jewelMenuLauncherControlType;
    },
    
    createComponentDomForDisplayMode: function CommandUI_Controls_JewelMenuLauncher$createComponentDomForDisplayMode$in(displayMode) {
        var elmLabel;
        var elmImage;
        var elmDescription;
        var elmIconContainer;
        var $$t_5, $$t_6, $$t_7, $$t_8, $$t_9;
        this._elmJewel$2 = (($$t_9 = CommandUI.Control._createStandardControlDOMElement$i(this, this.get_root(), displayMode, this.get_properties(), false, ($$t_5 = {'val': elmLabel}), ($$t_6 = {'val': elmImage}), ($$t_7 = {'val': elmDescription}), ($$t_8 = {'val': elmIconContainer}))), elmLabel = $$t_5.val, elmImage = $$t_6.val, elmDescription = $$t_7.val, elmIconContainer = $$t_8.val, $$t_9);
        this._elmJewel$2.className = 'cui-jewel-jewelMenuLauncher';
        if (!(Common.AFrameworkApplication.get_activeFrame() && Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isRibbonVisualRefreshEnabled())) {
            this._elmJewel$2.className += ' UITextTranformUpperCase';
        }
        this._elmJewel$2.id = this.get_properties().Id + '-Default';
        elmLabel.className = 'cui-jewel-label';
        elmLabel.innerText = this.get_properties().LabelText;
        this.setInitialAriaMenuLauncherAttributes(this._elmJewel$2);
        this._attachEvents$p$2();
        return new CommandUI.ControlComponentDom(displayMode, this._elmJewel$2, null);
    },
    
    _attachEvents$p$2: function CommandUI_Controls_JewelMenuLauncher$_attachEvents$p$2$in() {
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, this._elmJewel$2, this.$$d_onPointerDown);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, this._elmJewel$2, this.$$d_onKeyDown);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, this._elmJewel$2, this.$$d_onKeyUp);
    },
    
    _launchFileMenu$p$2: function CommandUI_Controls_JewelMenuLauncher$_launchFileMenu$p$2$in(actionId, context, behavior, reportingData, actionData) {
        if (behavior === 1) {
            return 32;
        }
        var inputMethod = 0;
        if (Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactRibbonEnvironmentEnabled() && actionData.hasOwnProperty('InputMethod')) {
            inputMethod = (actionData)['InputMethod'];
        }
        else {
            inputMethod = actionData;
        }
        if (!Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactFileMenuUxEnabled()) {
            this.launchMenu(inputMethod);
        }
        Common.AFrameworkApplication.logFlightedSettingUsage('Microsoft.Office.Web.SessionSettings.IWacWordTransformToWebPageSettings');
        Common.AFrameworkApplication.logUniqueFlightedSettingUsage('Microsoft.Office.Web.SessionSettings.IWordReadOnlyRecommendedSettings');
        return 32;
    },
    
    launchMenu: function CommandUI_Controls_JewelMenuLauncher$launchMenu$in(inputMethod) {
        this.launchMenuWithSubmenu(inputMethod, null);
    },
    
    launchMenuWithSubmenu: function CommandUI_Controls_JewelMenuLauncher$launchMenuWithSubmenu$in(inputMethod, submenuId) {
        if (!this.get_enabled() || this.get_menuLaunched()) {
            return;
        }
        if (Common.BrowserUtils.get_isInternetExplorer8()) {
            Common.WacAirSpace.temporarilyDisableAnimation(1000);
        }
        Common.AFrameworkApplication.dismissSplashScreenImmediately();
        if (!Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactFileMenuUxEnabled()) {
            CommandUI.MenuLauncher.prototype.launchMenu.call(this, inputMethod);
            if (this.get_menu().get_elementInternal()) {
                this.get_menu().get_elementInternal().style.position = 'fixed';
            }
            else {
                Common.Debug.log('Failed to launch jewel menu. Enabled? ' + this.get_enabled(), 'Ribbon', Common.LogLevel.warning);
            }
            if (inputMethod !== Common.InputManager.InputMethod.keyboard || submenuId) {
                (this.get_root())._launchSubMenu$i$2(inputMethod, submenuId);
            }
        }
        else {
            appChrome.api.dispatch(appChrome.actions.updateFileMenuExpandedValue(true));
        }
    },
    
    updateAriaMenuLauncherAttributes: function CommandUI_Controls_JewelMenuLauncher$updateAriaMenuLauncherAttributes$in(focusableElement, on) {
        if (Common.AFrameworkApplication.get_activeFrame().get_applicationInstance().get_isReactRibbonEnvironmentEnabled()) {
            appChrome.api.dispatch(appChrome.actions.updateFileMenuExpandedValue(on));
        }
        else {
            CommandUI.MenuLauncher.prototype.updateAriaMenuLauncherAttributes.call(this, focusableElement, on);
        }
    },
    
    doDefaultAction: function CommandUI_Controls_JewelMenuLauncher$doDefaultAction$in(elmTarget, inputMethod, e) {
        var parentRoot = this.get_parentRoot();
        var isInRibbon = CommandUI.Ribbon.isInstanceOfType(parentRoot);
        if (isInRibbon) {
            var ribbon = parentRoot;
            ribbon.dismissTabPopup(true, true);
        }
        CommandUI.Control.prototype.doDefaultAction.call(this, elmTarget, inputMethod, e);
    },
    
    onKeyDown: function CommandUI_Controls_JewelMenuLauncher$onKeyDown$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            if (args.innerEvent.keyCode === Sys.UI.Key.down) {
                this.doDefaultAction(args.get_sourceElement(), Common.InputManager.InputMethod.keyboard, args.innerEvent);
                handled = true;
            }
            if (!handled) {
                handled = CommandUI.MenuLauncher.prototype.onKeyDown.call(this, args);
            }
        }
        return handled;
    },
    
    get_properties: function CommandUI_Controls_JewelMenuLauncher$get_properties$in() {
        return CommandUI.Control.prototype.get_controlProperties.call(this);
    },
    
    dispose: function CommandUI_Controls_JewelMenuLauncher$dispose$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._elmJewel$2)) {
            CommandUI.Utility.unregisterAllHandlers(this._elmJewel$2);
        }
        Common.AFrameworkApplication.get_theActionManager().removeAction(Common.CommonCommands.launchFileMenu, Common.CommonContextIds.frame, this.$$d__launchFileMenu$p$2);
        CommandUI.MenuLauncher.prototype.dispose.call(this);
        this._elmJewel$2 = null;
    },
    
    constructClonedMenuLauncher: function CommandUI_Controls_JewelMenuLauncher$constructClonedMenuLauncher$in(root, properties, clonedMenu) {
        return new CommandUI.Controls.JewelMenuLauncher(root, this.get_id(), properties, clonedMenu, root);
    }
}


Type.registerNamespace('CommandUI.Controls.SearchBoxComponents');

CommandUI.Controls.SearchBoxComponents._iKeyboardingState = function() {}
CommandUI.Controls.SearchBoxComponents._iKeyboardingState.registerInterface('CommandUI.Controls.SearchBoxComponents._iKeyboardingState');


CommandUI.Controls.SearchBoxComponents._iFocusableMenu = function() {}
CommandUI.Controls.SearchBoxComponents._iFocusableMenu.registerInterface('CommandUI.Controls.SearchBoxComponents._iFocusableMenu');


CommandUI.Controls.SearchBoxComponents._iUpdateableMenu = function() {}
CommandUI.Controls.SearchBoxComponents._iUpdateableMenu.registerInterface('CommandUI.Controls.SearchBoxComponents._iUpdateableMenu');


CommandUI.Controls.SearchBoxComponents._clearInputOnInteractionEndModule = function CommandUI_Controls_SearchBoxComponents__clearInputOnInteractionEndModule(input) {
    this.$$d_interactionEnd = Function.createDelegate(this, this.interactionEnd);
    this._input$0 = input;
}
CommandUI.Controls.SearchBoxComponents._clearInputOnInteractionEndModule.prototype = {
    _input$0: null,
    
    interactionEnd: function CommandUI_Controls_SearchBoxComponents__clearInputOnInteractionEndModule$interactionEnd$in() {
        this._input$0.value = '';
    }
}


CommandUI.Controls.SearchBoxComponents._keyboardState = function CommandUI_Controls_SearchBoxComponents__keyboardState(searchBox) {
    Common.Debug.assertTag(!!searchBox, 16922715);
    this._searchBox$0 = searchBox;
}
CommandUI.Controls.SearchBoxComponents._keyboardState.prototype = {
    _searchBox$0: null,
    
    get_escaping: function CommandUI_Controls_SearchBoxComponents__keyboardState$get_escaping$in() {
        return this._searchBox$0.get_escaping();
    },
    
    set_escaping: function CommandUI_Controls_SearchBoxComponents__keyboardState$set_escaping$in(value) {
        this._searchBox$0.set_escaping(value);
        return value;
    }
}


CommandUI.Controls.SearchBoxComponents._focusBlurEventsToCommandsAdapter = function CommandUI_Controls_SearchBoxComponents__focusBlurEventsToCommandsAdapter(root, properties, getter, keyboardingState) {
    this.$$d_onRestoreFocus = Function.createDelegate(this, this.onRestoreFocus);
    this.$$d_onInteractionBegin = Function.createDelegate(this, this.onInteractionBegin);
    this.$$d_onInputFocus = Function.createDelegate(this, this.onInputFocus);
    this.$$d_onInputBlur = Function.createDelegate(this, this.onInputBlur);
    this._root$0 = root;
    this._properties$0 = properties;
    this._getControlComponent$0 = getter;
    this._keyboardingState = keyboardingState;
}
CommandUI.Controls.SearchBoxComponents._focusBlurEventsToCommandsAdapter.prototype = {
    _getControlComponent$0: null,
    _root$0: null,
    _properties$0: null,
    _keyboardingState: null,
    
    onInputBlur: function CommandUI_Controls_SearchBoxComponents__focusBlurEventsToCommandsAdapter$onInputBlur$in(sender, args) {
        this.executeCommand(this._properties$0.InputBoxBlurCommand, args);
        return false;
    },
    
    onInputFocus: function CommandUI_Controls_SearchBoxComponents__focusBlurEventsToCommandsAdapter$onInputFocus$in(sender, args) {
        this.executeCommand(this._properties$0.InputBoxFocusCommand, args);
        return false;
    },
    
    onInteractionBegin: function CommandUI_Controls_SearchBoxComponents__focusBlurEventsToCommandsAdapter$onInteractionBegin$in(sender, args) {
        if (this._properties$0.InteractionBeginCommand) {
            this.executeCommand(this._properties$0.InteractionBeginCommand, null);
        }
        return false;
    },
    
    onRestoreFocus: function CommandUI_Controls_SearchBoxComponents__focusBlurEventsToCommandsAdapter$onRestoreFocus$in(sender, args) {
        if (this._keyboardingState.get_escaping()) {
            this.executeCommand(this._properties$0.RestoreFocusCommand, null);
        }
        return false;
    },
    
    executeCommand: function CommandUI_Controls_SearchBoxComponents__focusBlurEventsToCommandsAdapter$executeCommand$in(command, args) {
        var source = (args) ? args.get_inputSource() : 0;
        this._root$0.executeCommand(command, {}, this._getControlComponent$0(), source, false, null, null);
    }
}




CommandUI.Controls.SearchBoxComponents._focusableMenu = function CommandUI_Controls_SearchBoxComponents__focusableMenu(searchBox) {
    Common.Debug.assertTag(!!searchBox, 16922716);
    this._searchBox$0 = searchBox;
}
CommandUI.Controls.SearchBoxComponents._focusableMenu.prototype = {
    _searchBox$0: null,
    
    setFocus: function CommandUI_Controls_SearchBoxComponents__focusableMenu$setFocus$in(inputMethod) {
        if (this._searchBox$0.get_menuLaunched() && this._searchBox$0.get_menu()) {
            this._searchBox$0.get_menu().setFocus(inputMethod);
            return true;
        }
        return false;
    },
    
    closeMenuStack: function CommandUI_Controls_SearchBoxComponents__focusableMenu$closeMenuStack$in() {
        this._searchBox$0._closeMenuStack$i$2();
    },
    
    blurInputField: function CommandUI_Controls_SearchBoxComponents__focusableMenu$blurInputField$in() {
        return Common.FocusManager.tryBlur(this._searchBox$0.get_inputField());
    },
    
    get_escaping: function CommandUI_Controls_SearchBoxComponents__focusableMenu$get_escaping$in() {
        return this._searchBox$0.get_escaping();
    },
    
    set_escaping: function CommandUI_Controls_SearchBoxComponents__focusableMenu$set_escaping$in(value) {
        this._searchBox$0.set_escaping(value);
        return value;
    },
    
    get_processingKeystroke: function CommandUI_Controls_SearchBoxComponents__focusableMenu$get_processingKeystroke$in() {
        return this._searchBox$0.get_processingKeystroke();
    },
    
    set_processingKeystroke: function CommandUI_Controls_SearchBoxComponents__focusableMenu$set_processingKeystroke$in(value) {
        this._searchBox$0.set_processingKeystroke(value);
        return value;
    }
}


CommandUI.Controls.SearchBoxComponents._keyboardNavigationModule = function CommandUI_Controls_SearchBoxComponents__keyboardNavigationModule(target) {
    this.$$d_onKeyDown = Function.createDelegate(this, this.onKeyDown);
    this._target$0 = target;
}
CommandUI.Controls.SearchBoxComponents._keyboardNavigationModule.prototype = {
    _target$0: null,
    
    onKeyDown: function CommandUI_Controls_SearchBoxComponents__keyboardNavigationModule$onKeyDown$in(sender, args) {
        if (!args || !args.innerEvent) {
            Common.Debug.assertTag(!!args && !!args.innerEvent, 4522373);
            return false;
        }
        var keyCode = args.innerEvent.keyCode;
        if (this.shouldMoveFocusToMenu(keyCode)) {
            return this._target$0.setFocus(args.get_inputSource());
        }
        else if (keyCode === Common.KeyCode.vK_Escape) {
            this._target$0.set_escaping(true);
            this._target$0.closeMenuStack();
            return this._target$0.blurInputField();
        }
        else if (keyCode === Common.KeyCode.vK_Tab) {
            this._target$0.set_processingKeystroke(true);
            this._target$0.closeMenuStack();
        }
        return false;
    },
    
    shouldMoveFocusToMenu: function CommandUI_Controls_SearchBoxComponents__keyboardNavigationModule$shouldMoveFocusToMenu$in(keyCode) {
        return keyCode === Common.KeyCode.vK_Enter || keyCode === Common.KeyCode.vK_Down;
    }
}


CommandUI.Controls.SearchBoxComponents._seachBoxToUpdateableMenu = function CommandUI_Controls_SearchBoxComponents__seachBoxToUpdateableMenu(searchBox) {
    this._searchBox$0 = searchBox;
}
CommandUI.Controls.SearchBoxComponents._seachBoxToUpdateableMenu.prototype = {
    _searchBox$0: null,
    
    closeMenuStack: function CommandUI_Controls_SearchBoxComponents__seachBoxToUpdateableMenu$closeMenuStack$in() {
        this._searchBox$0._closeMenuStack$i$2();
    },
    
    pollForResults: function CommandUI_Controls_SearchBoxComponents__seachBoxToUpdateableMenu$pollForResults$in(inputMethod) {
        this._searchBox$0._pollForResults$i$2(inputMethod);
    },
    
    focusSearchbox: function CommandUI_Controls_SearchBoxComponents__seachBoxToUpdateableMenu$focusSearchbox$in() {
        return Common.FocusManager.tryFocus(this._searchBox$0.get_inputField());
    },
    
    get_inputText: function CommandUI_Controls_SearchBoxComponents__seachBoxToUpdateableMenu$get_inputText$in() {
        return this._searchBox$0.get__inputText$i$2();
    },
    
    get_processingKeystroke: function CommandUI_Controls_SearchBoxComponents__seachBoxToUpdateableMenu$get_processingKeystroke$in() {
        return this._searchBox$0.get_processingKeystroke();
    },
    
    set_processingKeystroke: function CommandUI_Controls_SearchBoxComponents__seachBoxToUpdateableMenu$set_processingKeystroke$in(value) {
        this._searchBox$0.set_processingKeystroke(value);
        return value;
    }
}


CommandUI.Controls.SearchBoxComponents._menuUpdateModule = function CommandUI_Controls_SearchBoxComponents__menuUpdateModule(adapter) {
    this.$$d_onInteractionBegin = Function.createDelegate(this, this.onInteractionBegin);
    this.$$d_onInteractionEnd = Function.createDelegate(this, this.onInteractionEnd);
    this.$$d_onSearchButtonClick = Function.createDelegate(this, this.onSearchButtonClick);
    this.$$d_onInputKeyUp = Function.createDelegate(this, this.onInputKeyUp);
    this._oldInputText$0 = CommandUI.Controls.SearchBoxComponents._menuUpdateModule.defaultValue;
    this._adapter$0 = adapter;
}
CommandUI.Controls.SearchBoxComponents._menuUpdateModule.prototype = {
    _adapter$0: null,
    _oldInputText$0: null,
    
    onInputKeyUp: function CommandUI_Controls_SearchBoxComponents__menuUpdateModule$onInputKeyUp$in(sender, args) {
        var handled = false;
        this._adapter$0.set_processingKeystroke(true);
        if (this._textChanged$p$0()) {
            if (this._adapter$0.get_inputText().trim() === CommandUI.Controls.SearchBoxComponents._menuUpdateModule.defaultValue) {
                this._adapter$0.closeMenuStack();
            }
            this._updateMenu$p$0(args.get_inputSource());
            handled = true;
        }
        this._adapter$0.set_processingKeystroke(false);
        return handled;
    },
    
    _updateMenu$p$0: function CommandUI_Controls_SearchBoxComponents__menuUpdateModule$_updateMenu$p$0$in(method) {
        this._oldInputText$0 = this._adapter$0.get_inputText();
        this._adapter$0.pollForResults(method);
    },
    
    onSearchButtonClick: function CommandUI_Controls_SearchBoxComponents__menuUpdateModule$onSearchButtonClick$in(sender, args) {
        return this._adapter$0.focusSearchbox();
    },
    
    onInteractionBegin: function CommandUI_Controls_SearchBoxComponents__menuUpdateModule$onInteractionBegin$in() {
        this._updateMenu$p$0(0);
    },
    
    onInteractionEnd: function CommandUI_Controls_SearchBoxComponents__menuUpdateModule$onInteractionEnd$in() {
        this._updateMenu$p$0(0);
    },
    
    _textChanged$p$0: function CommandUI_Controls_SearchBoxComponents__menuUpdateModule$_textChanged$p$0$in() {
        return this._oldInputText$0 !== this._adapter$0.get_inputText();
    }
}


CommandUI.Controls.SearchBoxComponents._placeholderTextModule = function CommandUI_Controls_SearchBoxComponents__placeholderTextModule(input, placeholderText, cssClass) {
    this.$$d_onInputFocus = Function.createDelegate(this, this.onInputFocus);
    this.$$d_onInputBlur = Function.createDelegate(this, this.onInputBlur);
    this._input$0 = input;
    this._placeHolderText$0 = placeholderText;
    this._cssClass$0 = cssClass;
    this.onInputBlur(null, null);
}
CommandUI.Controls.SearchBoxComponents._placeholderTextModule.prototype = {
    _input$0: null,
    _placeHolderText$0: null,
    _cssClass$0: null,
    _placeholderTextActive$0: false,
    
    onInputBlur: function CommandUI_Controls_SearchBoxComponents__placeholderTextModule$onInputBlur$in(sender, args) {
        if (this._input$0.value === '') {
            this._input$0.value = this._placeHolderText$0;
            this._placeholderTextActive$0 = true;
            CommandUI.Utility.ensureCSSClassOnElement(this._input$0, this._cssClass$0);
        }
        return false;
    },
    
    onInputFocus: function CommandUI_Controls_SearchBoxComponents__placeholderTextModule$onInputFocus$in(sender, args) {
        if (this._placeholderTextActive$0) {
            this._input$0.value = '';
            this._placeholderTextActive$0 = false;
            CommandUI.Utility.removeCSSClassFromElement(this._input$0, this._cssClass$0);
        }
        return false;
    }
}


CommandUI.Controls.SearchBoxComponents._eventChain = function CommandUI_Controls_SearchBoxComponents__eventChain() {
    this._handlers$0 = [];
}
CommandUI.Controls.SearchBoxComponents._eventChain.prototype = {
    
    addHandler: function CommandUI_Controls_SearchBoxComponents__eventChain$addHandler$in(handler) {
        Array.add(this._handlers$0, handler);
    },
    
    removeHandler: function CommandUI_Controls_SearchBoxComponents__eventChain$removeHandler$in(handler) {
        Array.remove(this._handlers$0, handler);
    },
    
    raiseEvent: function CommandUI_Controls_SearchBoxComponents__eventChain$raiseEvent$in(e, sender) {
        for (var $$arr_2 = this._handlers$0, $$len_3 = $$arr_2.length, $$idx_4 = 0; $$idx_4 < $$len_3; ++$$idx_4) {
            var handler = $$arr_2[$$idx_4];
            if (handler && handler(sender, e)) {
                return true;
            }
        }
        return false;
    }
}




CommandUI.Controls.SearchBoxComponents._searchBoxEventSource = function CommandUI_Controls_SearchBoxComponents__searchBoxEventSource() {
    this._eventMap$0 = {};
}
CommandUI.Controls.SearchBoxComponents._searchBoxEventSource.prototype = {
    _eventMap$0: null,
    
    addHandler: function CommandUI_Controls_SearchBoxComponents__searchBoxEventSource$addHandler$in(id, handler) {
        if (!this._eventMap$0[id]) {
            this._eventMap$0[id] = new CommandUI.Controls.SearchBoxComponents._eventChain();
        }
        (this._eventMap$0[id]).addHandler(handler);
    },
    
    removeHandler: function CommandUI_Controls_SearchBoxComponents__searchBoxEventSource$removeHandler$in(id, handler) {
        if (!this._eventMap$0[id]) {
            return;
        }
        (this._eventMap$0[id]).removeHandler(handler);
    },
    
    raiseEvent: function CommandUI_Controls_SearchBoxComponents__searchBoxEventSource$raiseEvent$in(id, e, sender) {
        var chain = this._eventMap$0[id];
        if (chain) {
            return chain.raiseEvent(e, sender);
        }
        else {
            return false;
        }
    },
    
    dispose: function CommandUI_Controls_SearchBoxComponents__searchBoxEventSource$dispose$in() {
        this._eventMap$0 = null;
    }
}


CommandUI.BuildOptions.registerClass('CommandUI.BuildOptions');
CommandUI.BuildContext.registerClass('CommandUI.BuildContext');
CommandUI.DataNodeWrapper.registerClass('CommandUI.DataNodeWrapper');
CommandUI.Builder.registerClass('CommandUI.Builder', null, Sys.IDisposable);
CommandUI.Builder._spinnerChildren.registerClass('CommandUI.Builder._spinnerChildren');
CommandUI.XmlDOMElement.registerClass('CommandUI.XmlDOMElement', Object);
CommandUI.Component.registerClass('CommandUI.Component', null, CommandUI.IMenuItem, Sys.IDisposable);
CommandUI.Control.registerClass('CommandUI.Control', null, Sys.IDisposable, CommandUI.IMenuItem, Common.IModalController, Common.IControl);
CommandUI.MenuLauncher.registerClass('CommandUI.MenuLauncher', CommandUI.Control);
CommandUI.ContextMenuLauncher.registerClass('CommandUI.ContextMenuLauncher', CommandUI.MenuLauncher);
CommandUI.RootProperties.registerClass('CommandUI.RootProperties');
CommandUI.StandaloneRootProperties.registerClass('CommandUI.StandaloneRootProperties', CommandUI.RootProperties);
CommandUI.ContextMenuRootProperties.registerClass('CommandUI.ContextMenuRootProperties', CommandUI.StandaloneRootProperties);
CommandUI.Root.registerClass('CommandUI.Root', CommandUI.Component, Sys.IDisposable, Common.ICUIRoot, Common.IRoot);
CommandUI.StandaloneRoot.registerClass('CommandUI.StandaloneRoot', CommandUI.Root, Common.ICuiControlManager, Common.IStandaloneRoot, Common.ICUIRoot, Common.IRoot);
CommandUI.ContextMenuRoot.registerClass('CommandUI.ContextMenuRoot', CommandUI.StandaloneRoot);
CommandUI.ControlProperties.registerClass('CommandUI.ControlProperties');
CommandUI.SharedControlCommandProperties.registerClass('CommandUI.SharedControlCommandProperties');
CommandUI.ControlComponentDomCache.registerClass('CommandUI.ControlComponentDomCache');
CommandUI.ControlComponentDom.registerClass('CommandUI.ControlComponentDom');
CommandUI.ControlComponent.registerClass('CommandUI.ControlComponent', CommandUI.Component);
CommandUI.DataQueryResult.registerClass('CommandUI.DataQueryResult');
CommandUI.DataQuery.registerClass('CommandUI.DataQuery');
CommandUI.MenuLauncherControlProperties.registerClass('CommandUI.MenuLauncherControlProperties', CommandUI.ControlProperties);
CommandUI.DialogMenuLauncherProperties.registerClass('CommandUI.DialogMenuLauncherProperties', CommandUI.MenuLauncherControlProperties);
CommandUI.DialogMenuLauncher.registerClass('CommandUI.DialogMenuLauncher', CommandUI.MenuLauncher);
CommandUI.DialogMenuRootProperties.registerClass('CommandUI.DialogMenuRootProperties', CommandUI.StandaloneRootProperties);
CommandUI.DialogMenuRoot.registerClass('CommandUI.DialogMenuRoot', CommandUI.StandaloneRoot);
CommandUI.FloatieProperties.registerClass('CommandUI.FloatieProperties', CommandUI.RootProperties);
CommandUI.Floatie.registerClass('CommandUI.Floatie', CommandUI.Root, Common.IModalController, CommandUI.IFloatie, Common.IFloatieBase);
CommandUI.FloatieBuildOptions.registerClass('CommandUI.FloatieBuildOptions', CommandUI.BuildOptions);
CommandUI.FloatieBuilder.registerClass('CommandUI.FloatieBuilder', CommandUI.Builder);
CommandUI.FloatieBuilder._floatieBuildContext.registerClass('CommandUI.FloatieBuilder._floatieBuildContext', CommandUI.BuildContext);
CommandUI.ReactFloatie.registerClass('CommandUI.ReactFloatie', null, CommandUI.IFloatie, Common.IFloatieBase);
CommandUI.GalleryProperties.registerClass('CommandUI.GalleryProperties', CommandUI.ControlProperties);
CommandUI._gallery.registerClass('CommandUI._gallery', CommandUI.Component);
CommandUI._heroDockProperties.registerClass('CommandUI._heroDockProperties', CommandUI.ControlProperties);
CommandUI._heroDock.registerClass('CommandUI._heroDock', CommandUI.Component);
CommandUI.Jewel.registerClass('CommandUI.Jewel', CommandUI.Root);
CommandUI._jewelBuildContext.registerClass('CommandUI._jewelBuildContext', CommandUI.BuildContext);
CommandUI.JewelBuildOptions.registerClass('CommandUI.JewelBuildOptions', CommandUI.BuildOptions);
CommandUI.JewelBuilder.registerClass('CommandUI.JewelBuilder', CommandUI.Builder);
CommandUI.Menu.registerClass('CommandUI.Menu', CommandUI.Component, CommandUI.IMenuContext);
CommandUI.JewelMenu.registerClass('CommandUI.JewelMenu', CommandUI.Menu);
CommandUI.JewelSubMenu.registerClass('CommandUI.JewelSubMenu', CommandUI.Menu);
CommandUI.JsonDataSource.registerClass('CommandUI.JsonDataSource', null, CommandUI.IDataSource);
CommandUI.Keytip.registerClass('CommandUI.Keytip');
CommandUI.KeytipManager.registerClass('CommandUI.KeytipManager', null, CommandUI.IKeytipManager);
CommandUI.ComponentStack.registerClass('CommandUI.ComponentStack');
CommandUI.ComponentStackNode.registerClass('CommandUI.ComponentStackNode');
CommandUI.MenuItemControlProperties.registerClass('CommandUI.MenuItemControlProperties', CommandUI.ControlProperties);
CommandUI.MenuItem.registerClass('CommandUI.MenuItem', CommandUI.ControlComponent);
CommandUI.MenuBuildContext.registerClass('CommandUI.MenuBuildContext', CommandUI.BuildContext);
CommandUI.MenuSection.registerClass('CommandUI.MenuSection', CommandUI.Component);
CommandUI._standaloneDock.registerClass('CommandUI._standaloneDock', CommandUI.Component);
CommandUI.StandaloneRootController.registerClass('CommandUI.StandaloneRootController', null, Common.IStandaloneRootController, Sys.IDisposable);
CommandUI.DictationFloatieController.registerClass('CommandUI.DictationFloatieController', null, Common.IDictationFloatieController);
CommandUI.HeaderSkeleton.registerClass('CommandUI.HeaderSkeleton');
CommandUI.ReactAsyncDispatcher.registerClass('CommandUI.ReactAsyncDispatcher');
CommandUI.ReactContextualUILauncher.registerClass('CommandUI.ReactContextualUILauncher', null, Common.IReactContextualUILauncher);
CommandUI.ReactExecuteCommandHandler.registerClass('CommandUI.ReactExecuteCommandHandler');
CommandUI.ReactGalleryPoller.registerClass('CommandUI.ReactGalleryPoller');
CommandUI.ReactPollHelper.registerClass('CommandUI.ReactPollHelper');
CommandUI.PopulateActions.registerClass('CommandUI.PopulateActions');
CommandUI.ReactPopulateQueryCommandPoller.registerClass('CommandUI.ReactPopulateQueryCommandPoller');
CommandUI.ReactQueryCommandPoller.registerClass('CommandUI.ReactQueryCommandPoller');
CommandUI.ReactRibbonExternal.registerClass('CommandUI.ReactRibbonExternal', null, Common.IRibbonExternal, Common.ICUIRoot, Common.IRoot);
CommandUI.ReactRibbonFocusManager.registerClass('CommandUI.ReactRibbonFocusManager', null, Sys.IDisposable);
CommandUI.ReactRibbonJewelProperties.registerClass('CommandUI.ReactRibbonJewelProperties');
CommandUI.ReactRibbonRoot.registerClass('CommandUI.ReactRibbonRoot', null, Common.IRoot, Common.IRootCommandHandler);
CommandUI.ReactRibbonRootPoller.registerClass('CommandUI.ReactRibbonRootPoller', null, CommandUI.IReactRibbonRootPoller);
CommandUI.ReactRibbonUser.registerClass('CommandUI.ReactRibbonUser', null, Common.IRibbonUser, Common.IRootBuildClient, Sys.IDisposable);
CommandUI.ReactStatePropsSelector.registerClass('CommandUI.ReactStatePropsSelector');
CommandUI.CollapsibleSection.registerClass('CommandUI.CollapsibleSection', CommandUI.Component);
CommandUI._contextualGroup.registerClass('CommandUI._contextualGroup', null, Sys.IDisposable);
CommandUI._declarativeTemplateBuildContext.registerClass('CommandUI._declarativeTemplateBuildContext');
CommandUI._template.registerClass('CommandUI._template');
CommandUI._declarativeTemplate.registerClass('CommandUI._declarativeTemplate', CommandUI._template);
CommandUI.Group.registerClass('CommandUI.Group', CommandUI.Component);
CommandUI._ribbonComponent.registerClass('CommandUI._ribbonComponent', CommandUI.Component);
CommandUI._layout.registerClass('CommandUI._layout', CommandUI._ribbonComponent);
CommandUI.CommandContextSwitchCommandProperties.registerClass('CommandUI.CommandContextSwitchCommandProperties', Sys.EventArgs);
CommandUI.ScalableRoot.registerClass('CommandUI.ScalableRoot', CommandUI.Root);
CommandUI.Ribbon.registerClass('CommandUI.Ribbon', CommandUI.ScalableRoot, CommandUI.IRibbon, Common.IRibbonExternal, Common.ICUIRoot, Common.IRoot, Common.IModalController);
CommandUI.RibbonAnimator.registerClass('CommandUI.RibbonAnimator');
CommandUI._ribbonBuildContext.registerClass('CommandUI._ribbonBuildContext', CommandUI.BuildContext);
CommandUI.RibbonBuildOptions.registerClass('CommandUI.RibbonBuildOptions', CommandUI.BuildOptions);
CommandUI.RibbonBuilder.registerClass('CommandUI.RibbonBuilder', CommandUI.Builder);
CommandUI.RibbonExtensibilityBuilder.registerClass('CommandUI.RibbonExtensibilityBuilder');
CommandUI.RowProperties.registerClass('CommandUI.RowProperties', CommandUI.ControlProperties);
CommandUI.Row.registerClass('CommandUI.Row', CommandUI.Component);
CommandUI._scalingStep.registerClass('CommandUI._scalingStep');
CommandUI._scaling.registerClass('CommandUI._scaling');
CommandUI.Section.registerClass('CommandUI.Section', CommandUI.Component);
CommandUI._tab.registerClass('CommandUI._tab', CommandUI._ribbonComponent);
CommandUI._templateManager.registerClass('CommandUI._templateManager');
CommandUI.MenuPositioningInfo.registerClass('CommandUI.MenuPositioningInfo');
CommandUI.ControlBehaviorFactoryProvider.registerClass('CommandUI.ControlBehaviorFactoryProvider');
CommandUI.Root.SQMEventArgs.registerClass('CommandUI.Root.SQMEventArgs', Sys.EventArgs);
CommandUI.RootManager.registerClass('CommandUI.RootManager', null, Common.IRootManager, Sys.IDisposable);
CommandUI._rootPoller.registerClass('CommandUI._rootPoller');
CommandUI._buttonDockProperties.registerClass('CommandUI._buttonDockProperties', CommandUI.ControlProperties);
CommandUI._buttonDock.registerClass('CommandUI._buttonDock', CommandUI.Component);
CommandUI.Toolbar.registerClass('CommandUI.Toolbar', CommandUI.ScalableRoot, Common.IToolbar);
CommandUI.StatusBar.registerClass('CommandUI.StatusBar', CommandUI.Toolbar);
CommandUI.ToolbarProperties.registerClass('CommandUI.ToolbarProperties', CommandUI.RootProperties);
CommandUI._toolbarBuildContext.registerClass('CommandUI._toolbarBuildContext', CommandUI.BuildContext);
CommandUI.ToolbarBuildOptions.registerClass('CommandUI.ToolbarBuildOptions', CommandUI.BuildOptions);
CommandUI.ToolbarBuilder.registerClass('CommandUI.ToolbarBuilder', CommandUI.Builder);
CommandUI.Unit.registerClass('CommandUI.Unit');
CommandUI.Utility.registerClass('CommandUI.Utility');
CommandUI.ScriptUtility.registerClass('CommandUI.ScriptUtility');
CommandUI._listNode.registerClass('CommandUI._listNode');
CommandUI.List.registerClass('CommandUI.List', null, IEnumerable);
CommandUI.ListEnumerator.registerClass('CommandUI.ListEnumerator', null, IEnumerator);
CommandUI.Controls.ColorCellInfo.registerClass('CommandUI.Controls.ColorCellInfo');
CommandUI.Controls.ContextMenuControlProperties.registerClass('CommandUI.Controls.ContextMenuControlProperties', CommandUI.MenuLauncherControlProperties);
CommandUI.Controls.ContextMenuControl.registerClass('CommandUI.Controls.ContextMenuControl', CommandUI.ContextMenuLauncher);
CommandUI.Controls.ButtonProperties.registerClass('CommandUI.Controls.ButtonProperties', CommandUI.MenuItemControlProperties);
CommandUI.Controls.Button.registerClass('CommandUI.Controls.Button', CommandUI.Control, CommandUI.IMenuItem, CommandUI.ISelectableControl);
CommandUI.Controls.ColorPickerProperties.registerClass('CommandUI.Controls.ColorPickerProperties', CommandUI.ControlProperties);
CommandUI.Controls.ColorPickerComponentDom.registerClass('CommandUI.Controls.ColorPickerComponentDom', CommandUI.ControlComponentDom);
CommandUI.Controls.ColorPicker.registerClass('CommandUI.Controls.ColorPicker', CommandUI.Control, CommandUI.IMenuItem, CommandUI.ISelectableControl);
CommandUI.Controls.DropDownProperties.registerClass('CommandUI.Controls.DropDownProperties', CommandUI.MenuLauncherControlProperties);
CommandUI.Controls.ComboBoxProperties.registerClass('CommandUI.Controls.ComboBoxProperties', CommandUI.Controls.DropDownProperties);
CommandUI.Controls.ComboBoxComponentDom.registerClass('CommandUI.Controls.ComboBoxComponentDom', CommandUI.ControlComponentDom);
CommandUI.Controls.DropDown.registerClass('CommandUI.Controls.DropDown', CommandUI.MenuLauncher);
CommandUI.Controls.ComboBox.registerClass('CommandUI.Controls.ComboBox', CommandUI.Controls.DropDown);
CommandUI.Controls.ButtonCommandProperties.registerClass('CommandUI.Controls.ButtonCommandProperties');
CommandUI.Controls.ColorPickerCommandProperties.registerClass('CommandUI.Controls.ColorPickerCommandProperties');
CommandUI.Controls.ComboBoxCommandProperties.registerClass('CommandUI.Controls.ComboBoxCommandProperties');
CommandUI.Controls.DropDownCommandProperties.registerClass('CommandUI.Controls.DropDownCommandProperties');
CommandUI.Controls.FlyoutAnchorCommandProperties.registerClass('CommandUI.Controls.FlyoutAnchorCommandProperties');
CommandUI.Controls.GalleryButtonCommandProperties.registerClass('CommandUI.Controls.GalleryButtonCommandProperties');
CommandUI.Controls.IconColorCommandProperties.registerClass('CommandUI.Controls.IconColorCommandProperties');
CommandUI.Controls.InsertTableCommandProperties.registerClass('CommandUI.Controls.InsertTableCommandProperties');
CommandUI.Controls.LabelCommandProperties.registerClass('CommandUI.Controls.LabelCommandProperties');
CommandUI.Controls.SliderCommandProperties.registerClass('CommandUI.Controls.SliderCommandProperties');
CommandUI.Controls.SpinnerCommandProperties.registerClass('CommandUI.Controls.SpinnerCommandProperties');
CommandUI.Controls.SplitButtonCommandProperties.registerClass('CommandUI.Controls.SplitButtonCommandProperties');
CommandUI.Controls.StatefulImageSplitButtonCommandProperties.registerClass('CommandUI.Controls.StatefulImageSplitButtonCommandProperties');
CommandUI.Controls.TextBoxCommandProperties.registerClass('CommandUI.Controls.TextBoxCommandProperties');
CommandUI.Controls.ToggleButtonCommandProperties.registerClass('CommandUI.Controls.ToggleButtonCommandProperties');
CommandUI.Controls.IControlDomStrategy.registerClass('CommandUI.Controls.IControlDomStrategy');
CommandUI.Controls._diagnosticsItemTextBoxDomStrategy.registerClass('CommandUI.Controls._diagnosticsItemTextBoxDomStrategy', CommandUI.Controls.IControlDomStrategy);
CommandUI.Controls._loadingIndicatorLabelDomStrategy.registerClass('CommandUI.Controls._loadingIndicatorLabelDomStrategy', CommandUI.Controls.IControlDomStrategy);
CommandUI.Controls.GalleryButtonComponentDom.registerClass('CommandUI.Controls.GalleryButtonComponentDom', CommandUI.ControlComponentDom);
CommandUI.Controls._galleryButtonDomStrategy.registerClass('CommandUI.Controls._galleryButtonDomStrategy');
CommandUI.Controls._menuFooterButtonDomStrategy.registerClass('CommandUI.Controls._menuFooterButtonDomStrategy', CommandUI.Controls.IControlDomStrategy);
CommandUI.Controls._menuHeaderButtonDomStrategy.registerClass('CommandUI.Controls._menuHeaderButtonDomStrategy', CommandUI.Controls.IControlDomStrategy);
CommandUI.Controls._menuSubsectionLabelDomStrategy.registerClass('CommandUI.Controls._menuSubsectionLabelDomStrategy', CommandUI.Controls.IControlDomStrategy);
CommandUI.Controls._mruButtonDomStrategy.registerClass('CommandUI.Controls._mruButtonDomStrategy', CommandUI.Controls.IControlDomStrategy);
CommandUI.Controls.SplitButtonComponentDom.registerClass('CommandUI.Controls.SplitButtonComponentDom', CommandUI.ControlComponentDom);
CommandUI.Controls._splitButtonDomStrategy.registerClass('CommandUI.Controls._splitButtonDomStrategy');
CommandUI.Controls._standardControlDomStrategy.registerClass('CommandUI.Controls._standardControlDomStrategy', CommandUI.Controls.IControlDomStrategy);
CommandUI.Controls._standardLabelDomStrategy.registerClass('CommandUI.Controls._standardLabelDomStrategy', CommandUI.Controls.IControlDomStrategy);
CommandUI.Controls.StandardTextBoxDomStrategy.registerClass('CommandUI.Controls.StandardTextBoxDomStrategy', CommandUI.Controls.IControlDomStrategy);
CommandUI.Controls.StatefulColorFlyoutAnchorComponentDom.registerClass('CommandUI.Controls.StatefulColorFlyoutAnchorComponentDom', CommandUI.ControlComponentDom);
CommandUI.Controls._statefulColorFlyoutAnchorDomStrategy.registerClass('CommandUI.Controls._statefulColorFlyoutAnchorDomStrategy');
CommandUI.Controls.StatefulColorSplitButtonComponentDom.registerClass('CommandUI.Controls.StatefulColorSplitButtonComponentDom', CommandUI.Controls.SplitButtonComponentDom);
CommandUI.Controls._statefulColorSplitButtonDomStrategy.registerClass('CommandUI.Controls._statefulColorSplitButtonDomStrategy', CommandUI.Controls._splitButtonDomStrategy);
CommandUI.Controls._templateButtonDomStrategy.registerClass('CommandUI.Controls._templateButtonDomStrategy', CommandUI.Controls.IControlDomStrategy);
CommandUI.Controls.DropDownComponentDom.registerClass('CommandUI.Controls.DropDownComponentDom', CommandUI.ControlComponentDom);
CommandUI.Controls.FlyoutAnchorProperties.registerClass('CommandUI.Controls.FlyoutAnchorProperties', CommandUI.MenuLauncherControlProperties);
CommandUI.Controls.FlyoutAnchor.registerClass('CommandUI.Controls.FlyoutAnchor', CommandUI.MenuLauncher, CommandUI.ISelectableControl);
CommandUI.Controls.GalleryButtonProperties.registerClass('CommandUI.Controls.GalleryButtonProperties', CommandUI.MenuItemControlProperties);
CommandUI.Controls.GalleryButton.registerClass('CommandUI.Controls.GalleryButton', CommandUI.Control, CommandUI.ISelectableControl);
CommandUI.Controls.IconColorManager.registerClass('CommandUI.Controls.IconColorManager', null, CommandUI.Controls.IIconColorManager);
CommandUI.Controls.InsertTableProperties.registerClass('CommandUI.Controls.InsertTableProperties', CommandUI.ControlProperties);
CommandUI.Controls.InsertTableComponentDom.registerClass('CommandUI.Controls.InsertTableComponentDom', CommandUI.ControlComponentDom);
CommandUI.Controls.InsertTable.registerClass('CommandUI.Controls.InsertTable', CommandUI.Control, CommandUI.Controls._iInsertTable);
CommandUI.Controls.LabelProperties.registerClass('CommandUI.Controls.LabelProperties', CommandUI.ControlProperties);
CommandUI.Controls.Label.registerClass('CommandUI.Controls.Label', CommandUI.Control);
CommandUI.Controls.PlaceholderProperties.registerClass('CommandUI.Controls.PlaceholderProperties', CommandUI.ControlProperties);
CommandUI.Controls.Placeholder.registerClass('CommandUI.Controls.Placeholder', CommandUI.Control);
CommandUI.Controls.SearchBoxProperties.registerClass('CommandUI.Controls.SearchBoxProperties', CommandUI.MenuLauncherControlProperties);
CommandUI.Controls.SearchBox.registerClass('CommandUI.Controls.SearchBox', CommandUI.MenuLauncher);
CommandUI.Controls.SearchBox.EventKeys.registerClass('CommandUI.Controls.SearchBox.EventKeys');
CommandUI.Controls.SeparatorProperties.registerClass('CommandUI.Controls.SeparatorProperties', CommandUI.ControlProperties);
CommandUI.Controls.Separator.registerClass('CommandUI.Controls.Separator', CommandUI.Control);
CommandUI.Controls.SliderProperties.registerClass('CommandUI.Controls.SliderProperties', CommandUI.MenuItemControlProperties);
CommandUI.Controls.SliderComponentDom.registerClass('CommandUI.Controls.SliderComponentDom', CommandUI.ControlComponentDom);
CommandUI.Controls.Slider.registerClass('CommandUI.Controls.Slider', CommandUI.Control);
CommandUI.Controls.SpinnerProperties.registerClass('CommandUI.Controls.SpinnerProperties', CommandUI.ControlProperties);
CommandUI.Controls.SpinnerComponentDom.registerClass('CommandUI.Controls.SpinnerComponentDom', CommandUI.ControlComponentDom);
CommandUI.Controls.Spinner.registerClass('CommandUI.Controls.Spinner', CommandUI.Control);
CommandUI.Controls.SplitButtonProperties.registerClass('CommandUI.Controls.SplitButtonProperties', CommandUI.MenuLauncherControlProperties);
CommandUI.Controls.SplitButton.registerClass('CommandUI.Controls.SplitButton', CommandUI.MenuLauncher);
CommandUI.Controls.StatefulColorFlyoutAnchorProperties.registerClass('CommandUI.Controls.StatefulColorFlyoutAnchorProperties', CommandUI.Controls.FlyoutAnchorProperties);
CommandUI.Controls.StatefulColorFlyoutAnchor.registerClass('CommandUI.Controls.StatefulColorFlyoutAnchor', CommandUI.Controls.FlyoutAnchor, CommandUI.Controls.IIconColorFormatManager);
CommandUI.Controls.StatefulColorSplitButton.registerClass('CommandUI.Controls.StatefulColorSplitButton', CommandUI.Controls.SplitButton, CommandUI.Controls.IIconColorFormatManager);
CommandUI.Controls.StatefulImageSplitButton.registerClass('CommandUI.Controls.StatefulImageSplitButton', CommandUI.Controls.SplitButton);
CommandUI.Controls.TextBoxProperties.registerClass('CommandUI.Controls.TextBoxProperties', CommandUI.ControlProperties);
CommandUI.Controls.TextBoxComponentDom.registerClass('CommandUI.Controls.TextBoxComponentDom', CommandUI.ControlComponentDom);
CommandUI.Controls.TextBox.registerClass('CommandUI.Controls.TextBox', CommandUI.Control, CommandUI.ISelectableControl);
CommandUI.Controls.ToggleButtonProperties.registerClass('CommandUI.Controls.ToggleButtonProperties', CommandUI.MenuItemControlProperties);
CommandUI.Controls.ToggleButton.registerClass('CommandUI.Controls.ToggleButton', CommandUI.Control, CommandUI.ISelectableControl);
CommandUI.Controls.JewelMenuLauncherProperties.registerClass('CommandUI.Controls.JewelMenuLauncherProperties', CommandUI.MenuLauncherControlProperties);
CommandUI.Controls.JewelMenuLauncher.registerClass('CommandUI.Controls.JewelMenuLauncher', CommandUI.MenuLauncher);
CommandUI.Controls.SearchBoxComponents._clearInputOnInteractionEndModule.registerClass('CommandUI.Controls.SearchBoxComponents._clearInputOnInteractionEndModule');
CommandUI.Controls.SearchBoxComponents._keyboardState.registerClass('CommandUI.Controls.SearchBoxComponents._keyboardState', null, CommandUI.Controls.SearchBoxComponents._iKeyboardingState);
CommandUI.Controls.SearchBoxComponents._focusBlurEventsToCommandsAdapter.registerClass('CommandUI.Controls.SearchBoxComponents._focusBlurEventsToCommandsAdapter');
CommandUI.Controls.SearchBoxComponents._focusableMenu.registerClass('CommandUI.Controls.SearchBoxComponents._focusableMenu', null, CommandUI.Controls.SearchBoxComponents._iFocusableMenu);
CommandUI.Controls.SearchBoxComponents._keyboardNavigationModule.registerClass('CommandUI.Controls.SearchBoxComponents._keyboardNavigationModule');
CommandUI.Controls.SearchBoxComponents._seachBoxToUpdateableMenu.registerClass('CommandUI.Controls.SearchBoxComponents._seachBoxToUpdateableMenu', null, CommandUI.Controls.SearchBoxComponents._iUpdateableMenu);
CommandUI.Controls.SearchBoxComponents._menuUpdateModule.registerClass('CommandUI.Controls.SearchBoxComponents._menuUpdateModule');
CommandUI.Controls.SearchBoxComponents._placeholderTextModule.registerClass('CommandUI.Controls.SearchBoxComponents._placeholderTextModule');
CommandUI.Controls.SearchBoxComponents._eventChain.registerClass('CommandUI.Controls.SearchBoxComponents._eventChain');
CommandUI.Controls.SearchBoxComponents._searchBoxEventSource.registerClass('CommandUI.Controls.SearchBoxComponents._searchBoxEventSource', null, Sys.IDisposable);
CommandUI.DataNodeWrapper.ATTRIBUTES = 'attrs';
CommandUI.DataNodeWrapper.CHILDREN = 'children';
CommandUI.DataNodeWrapper.NAME = 'name';
CommandUI.DataNodeWrapper.ALIGNMENT = 'Alignment';
CommandUI.DataNodeWrapper.ALT = 'Alt';
CommandUI.DataNodeWrapper.ARIALABELLEDBYID = 'ariaLabelledById';
CommandUI.DataNodeWrapper.ARRANGEMENT = 'Arrangement';
CommandUI.DataNodeWrapper.ARRANGEMENTVERTICAL = 'Vertical';
CommandUI.DataNodeWrapper.CLASSNAME = 'Classname';
CommandUI.DataNodeWrapper.COLOR = 'Color';
CommandUI.DataNodeWrapper.COMMAND = 'Command';
CommandUI.DataNodeWrapper.CONTEXTUALGROUPID = 'ContextualGroupId';
CommandUI.DataNodeWrapper.CSSCLASS = 'CssClass';
CommandUI.DataNodeWrapper.DESCRIPTION = 'Description';
CommandUI.DataNodeWrapper.DISPLAYCOLOR = 'DisplayColor';
CommandUI.DataNodeWrapper.DISPLAYMODE = 'DisplayMode';
CommandUI.DataNodeWrapper.DIVIDER = 'Divider';
CommandUI.DataNodeWrapper.ELEMENTDIMENSIONS = 'ElementDimensions';
CommandUI.DataNodeWrapper.GREEN = 'Green';
CommandUI.DataNodeWrapper.GROUPID = 'GroupId';
CommandUI.DataNodeWrapper.HEIGHT = 'Height';
CommandUI.DataNodeWrapper.HORIZONTALALIGNMENT = 'HorizontalAlignment';
CommandUI.DataNodeWrapper.id = 'Id';
CommandUI.DataNodeWrapper.IMAGE = 'Image';
CommandUI.DataNodeWrapper.IMAGECLASS = 'ImageClass';
CommandUI.DataNodeWrapper.imagE16BY16 = 'Image16by16';
CommandUI.DataNodeWrapper.imagE32BY32 = 'Image32by32';
CommandUI.DataNodeWrapper.INDEX = 'Index';
CommandUI.DataNodeWrapper.ISSTRETCHED = 'IsStretched';
CommandUI.DataNodeWrapper.KEYTIP = 'Keytip';
CommandUI.DataNodeWrapper.LABELTEXT = 'LabelText';
CommandUI.DataNodeWrapper.LANGUAGE = 'Language';
CommandUI.DataNodeWrapper.LAYOUTTITLE = 'LayoutTitle';
CommandUI.DataNodeWrapper.LOADING = 'Loading';
CommandUI.DataNodeWrapper.LOWSCALEWARNING = 'LowScaleWarning';
CommandUI.DataNodeWrapper.MAGENTA = 'Magenta';
CommandUI.DataNodeWrapper.MAXHEIGHT = 'MaxHeight';
CommandUI.DataNodeWrapper.MAXIMUMVALUE = 'MaximumValue';
CommandUI.DataNodeWrapper.MAXWIDTH = 'MaxWidth';
CommandUI.DataNodeWrapper.MENUITEMID = 'MenuItemId';
CommandUI.DataNodeWrapper.MESSAGE = 'Message';
CommandUI.DataNodeWrapper.MINHEIGHT = 'MinHeight';
CommandUI.DataNodeWrapper.MINIMUMVALUE = 'MinimumValue';
CommandUI.DataNodeWrapper.ONEROW = 'OneRow';
CommandUI.DataNodeWrapper.ORANGE = 'Orange';
CommandUI.DataNodeWrapper.OVERFLOW = 'Overflow';
CommandUI.DataNodeWrapper.PURPLE = 'Purple';
CommandUI.DataNodeWrapper.SCROLLABLE = 'Scrollable';
CommandUI.DataNodeWrapper.SEQUENCE = 'Sequence';
CommandUI.DataNodeWrapper.SHOWMENUSECTIONSEPERATOR = 'ShowMenuSectionSeparator';
CommandUI.DataNodeWrapper.SHOWMENUSECTIONTITLEICON = 'ShowMenuSectionTitleIcon';
CommandUI.DataNodeWrapper.SHOWMENUSECTIONTITLEBACKGROUND = 'ShowMenuSectionTitleBackground';
CommandUI.DataNodeWrapper.MENUSECTIONTITLEFOCUSABLE = 'MenuSectionTitleFocusable';
CommandUI.DataNodeWrapper.SHOWECTIONSEPERATOR = 'ShowSectionSeparator';
CommandUI.DataNodeWrapper.SINGLEDOCK = 'SingleDock';
CommandUI.DataNodeWrapper.SIZE = 'Size';
CommandUI.DataNodeWrapper.STEP = 'Step';
CommandUI.DataNodeWrapper.STYLE = 'Style';
CommandUI.DataNodeWrapper.TEMPLATEALIAS = 'TemplateAlias';
CommandUI.DataNodeWrapper.TEXTALIGN = 'TextAlign';
CommandUI.DataNodeWrapper.THEME = 'Theme';
CommandUI.DataNodeWrapper.THREEROW = 'ThreeRow';
CommandUI.DataNodeWrapper.TITLE = 'Title';
CommandUI.DataNodeWrapper.TITLEID = 'TitleId';
CommandUI.DataNodeWrapper.TWOROW = 'TwoRow';
CommandUI.DataNodeWrapper.TYPE = 'Type';
CommandUI.DataNodeWrapper.UNITTYPE = 'UnitType';
CommandUI.DataNodeWrapper.VALUE = 'Value';
CommandUI.DataNodeWrapper.WIDTH = 'Width';
CommandUI.DataNodeWrapper.YELLOW = 'Yellow';
CommandUI.DataNodeWrapper.RIBBON = 'Ribbon';
CommandUI.DataNodeWrapper.JEWEL = 'Jewel';
CommandUI.DataNodeWrapper.TABS = 'Tabs';
CommandUI.DataNodeWrapper.CONTEXTUALTABS = 'ContextualTabs';
CommandUI.DataNodeWrapper.CONTEXTUALGROUP = 'ContextualGroup';
CommandUI.DataNodeWrapper.TAB = 'Tab';
CommandUI.DataNodeWrapper.SCALING = 'Scaling';
CommandUI.DataNodeWrapper.MAXSIZE = 'MaxSize';
CommandUI.DataNodeWrapper.SCALE = 'Scale';
CommandUI.DataNodeWrapper.GROUP = 'Group';
CommandUI.DataNodeWrapper.GROUPS = 'Groups';
CommandUI.DataNodeWrapper.LAYOUT = 'Layout';
CommandUI.DataNodeWrapper.COLLAPSIBLESECTION = 'CollapsibleSection';
CommandUI.DataNodeWrapper.SECTION = 'Section';
CommandUI.DataNodeWrapper.OVERFLOWSECTION = 'OverflowSection';
CommandUI.DataNodeWrapper.ROW = 'Row';
CommandUI.DataNodeWrapper.CONTROL = 'ControlRef';
CommandUI.DataNodeWrapper.CONTROLS = 'Controls';
CommandUI.DataNodeWrapper.MENU = 'Menu';
CommandUI.DataNodeWrapper.MENUSECTION = 'MenuSection';
CommandUI.DataNodeWrapper.TEMPLATE = 'Template';
CommandUI.DataNodeWrapper.TEMPLATES = 'Templates';
CommandUI.DataNodeWrapper.RIBBONTEMPLATES = 'RibbonTemplates';
CommandUI.DataNodeWrapper.GROUPTEMPLATE = 'GroupTemplate';
CommandUI.DataNodeWrapper.GALLERY = 'Gallery';
CommandUI.DataNodeWrapper.SPECIALTEXTSTRINGS = 'SpecialTextStrings';
CommandUI.DataNodeWrapper.UNIT = 'Unit';
CommandUI.DataNodeWrapper.FLOATIE = 'Floatie';
CommandUI.DataNodeWrapper.TOUCHGROUP = 'TouchGroup';
CommandUI.DataNodeWrapper.TASKPANE = 'TaskPane';
CommandUI.DataNodeWrapper.colors = 'Colors';
CommandUI.DataNodeWrapper.color = 'Color';
CommandUI.DataNodeWrapper.toggleButton = 'ToggleButton';
CommandUI.DataNodeWrapper.comboBox = 'ComboBox';
CommandUI.DataNodeWrapper.dropDown = 'DropDown';
CommandUI.DataNodeWrapper.button = 'Button';
CommandUI.DataNodeWrapper.splitButton = 'SplitButton';
CommandUI.DataNodeWrapper.statefulColorSplitButton = 'StatefulColorSplitButton';
CommandUI.DataNodeWrapper.statefulImageSplitButton = 'StatefulImageSplitButton';
CommandUI.DataNodeWrapper.flyoutAnchor = 'FlyoutAnchor';
CommandUI.DataNodeWrapper.statefulColorFlyoutAnchor = 'StatefulColorFlyoutAnchor';
CommandUI.DataNodeWrapper.galleryButton = 'GalleryButton';
CommandUI.DataNodeWrapper.insertTable = 'InsertTable';
CommandUI.DataNodeWrapper.label = 'Label';
CommandUI.DataNodeWrapper.searchBox = 'SearchBox';
CommandUI.DataNodeWrapper.slider = 'Slider';
CommandUI.DataNodeWrapper.spinner = 'Spinner';
CommandUI.DataNodeWrapper.textBox = 'TextBox';
CommandUI.DataNodeWrapper.colorPicker = 'ColorPicker';
CommandUI.DataNodeWrapper.separator = 'Separator';
CommandUI.DataNodeWrapper.placeholder = 'Placeholder';
CommandUI.DataNodeWrapper.clonedControl = 'ClonedControl';
CommandUI.DataNodeWrapper.jewelMenuLauncher = 'JewelMenuLauncher';
CommandUI.DataNodeWrapper.BUTTONDOCK = 'ButtonDock';
CommandUI.DataNodeWrapper.CENTERALIGN = 'Center';
CommandUI.DataNodeWrapper.DOCKS = 'Docks';
CommandUI.DataNodeWrapper.HERODOCK = 'HeroDock';
CommandUI.DataNodeWrapper.LEFTALIGN = 'Left';
CommandUI.DataNodeWrapper.RIGHTALIGN = 'Right';
CommandUI.DataNodeWrapper.FIRSTTOLAST = 'Begin';
CommandUI.DataNodeWrapper.LASTTOFIRST = 'End';
CommandUI.DataNodeWrapper.TOOLBAR = 'Toolbar';
CommandUI.DataNodeWrapper.STATUSBAR = 'StatusBar';
CommandUI.DataNodeWrapper.LARGE = 'Large';
CommandUI.DataNodeWrapper.MEDIUM = 'Medium';
CommandUI.DataNodeWrapper.SMALL = 'Small';
CommandUI.DataNodeWrapper.DIVIDERAFTER = 'DividerAfter';
CommandUI.DataNodeWrapper.DIVIDERBEFORE = 'DividerBefore';
CommandUI.DataNodeWrapper._s_emptyArray$p = null;
CommandUI.Builder._sliderBuilder = null;
CommandUI.Builder._spinnerBuilder = null;
CommandUI.Builder._insertTableBuilder = null;
CommandUI.Component._addChildAlreadyAddedExcpetionMessage$i = 'Child with id \'{0}\' cannot be added to component id \'{1}\', already been added to component id \'{2}\'.';
CommandUI.SharedControlCommandProperties.alt = 'Alt';
CommandUI.SharedControlCommandProperties.iconColor = 'IconColor';
CommandUI.SharedControlCommandProperties.image16by16Class = 'Image16by16Class';
CommandUI.SharedControlCommandProperties.image30by30Class = 'Image30by30Class';
CommandUI.SharedControlCommandProperties.image32by32Class = 'Image32by32Class';
CommandUI.SharedControlCommandProperties.image48by48Class = 'Image48by48Class';
CommandUI.SharedControlCommandProperties.labelText = 'LabelText';
CommandUI.SharedControlCommandProperties.labelTextUserGeneratedPlaceholderReplacements = 'LabelTextUserGeneratedPlaceholderReplacements';
CommandUI.SharedControlCommandProperties.visible = 'Visible';
CommandUI.SharedControlCommandProperties.customTooltip = 'CustomTooltip';
CommandUI.SharedControlCommandProperties.Icon = 'Icon';
CommandUI.SharedControlCommandProperties.IconSet = 'IconSet';
CommandUI.SharedControlCommandProperties.reduxActions = 'ReduxActions';
CommandUI.Control.buttonControlType = 'Button';
CommandUI.Control.colorPickerControlType = 'ColorPicker';
CommandUI.Control.comboBoxControlType = 'ComboBox';
CommandUI.Control.contextMenuControlType = 'ContextMenuControl';
CommandUI.Control.contextMenuLauncherControlType = 'ContextMenuLauncher';
CommandUI.Control.dialogMenuLauncherControlType = 'DialogMenuLauncher';
CommandUI.Control.fileMenuButtonControlType = 'FileMenuButton';
CommandUI.Control.flyoutAnchorControlType = 'FlyoutAnchor';
CommandUI.Control.galleryButtonControlType = 'GalleryButton';
CommandUI.Control.insertTableControlType = 'InsertTable';
CommandUI.Control.jewelMenuLauncherControlType = 'JewelMenuLauncher';
CommandUI.Control.labelControlType = 'Label';
CommandUI.Control.placeholderControlType = 'Placeholder';
CommandUI.Control.searchBoxControlType = 'SearchBox';
CommandUI.Control.separatorControlType = 'Separator';
CommandUI.Control.splitButtonControlType = 'SplitButton';
CommandUI.Control.statefulColorFlyoutAnchorControlType = 'StatefulColorFlyoutAnchor';
CommandUI.Control.statefulColorSplitButtonControlType = 'StatefulColorSplitButton';
CommandUI.Control.statefulImageSplitButtonControlType = 'StatefulImageSplitButton';
CommandUI.Control.sliderControlType = 'Slider';
CommandUI.Control.spinnerControlType = 'Spinner';
CommandUI.Control.textBoxControlType = 'TextBox';
CommandUI.Control.toggleButtonControlType = 'ToggleButton';
CommandUI.Control.dropDownControlType = 'DropDown';
CommandUI.Control.elmDescriptionPreText = 'elmDescriptionPreText';
CommandUI.Control.elmDescriptionText = 'elmDescriptionText';
CommandUI.Control.elmLabelText = 'LabelText';
CommandUI.Control.activeClassName = 'cui-ctl-active';
CommandUI.Floatie._registeredShowFloatieAction = false;
CommandUI._heroDock.defaultHeroControlCount = 4;
CommandUI.JewelMenu.jewelMenuClass = 'cui-jewelmenu';
CommandUI.JewelMenu.jewelMenuBackArrowRefreshClass = 'cui-jewelmenu-backarrowrefresh';
CommandUI.JewelSubMenu.jewelSubmenuClass = 'cui-jewelsubmenu';
CommandUI.Keytip.ribbonShortcutId = 'RibbonShortcut';
CommandUI.Keytip.keytipId = '-Keytip';
CommandUI.Menu.menuBorderPx = 1;
CommandUI.MenuLauncher.menuDroppedClassName = 'cui-fa-dropped';
CommandUI.StandaloneRootController._standaloneRootName$p = 'TheStandaloneRoot';
CommandUI.ReactAsyncDispatcher._numberOfReactUpdateChunks = 2;
CommandUI.ReactAsyncDispatcher._minGroupsToProcess = 2;
CommandUI.ReactAsyncDispatcher._asyncDispatchTimeout = 100;
CommandUI.ReactContextualUILauncher._contextMenuExternalId$p = 'ContextMenu';
CommandUI.ReactRibbonUser._commonJSFile = 'common';
CommandUI.ReactRibbonUser._appChromeJSFile = 'appChrome';
CommandUI.Group._dialogLauncherButtonId$p = 'DialogLauncherButton';
CommandUI.Group._dialogLauncherButtonCssClass$p = 'cui-dialogLauncherButton';
CommandUI.Ribbon._pinButtonId$p = 'RibbonPinButton';
CommandUI.Ribbon._pinButtonCssClass$p = 'cui-pinButton';
CommandUI.Ribbon._tabContainerOverflowId$i = 'TabContainerOverflow';
CommandUI.Ribbon._defaultTopBarsZIndex = 1;
CommandUI.Ribbon._ribbonTabSwitchedEventName$p = 'RTSE';
CommandUI.Ribbon._ribbonTabSwitchedEventSource = new Common.EventSource();
CommandUI.Ribbon._maxScaleTries = 25;
CommandUI.RibbonAnimator._ribbonAnimationClass$p = 'Wac_RibbonClass';
CommandUI.RibbonAnimator._contextualGroupUpperAnimationClass$p = 'UEX_UpperContextualTabDramatic';
CommandUI.RibbonAnimator._contextualGroupLowerAnimationClass$p = 'UEX_ContextualTabMovement';
CommandUI.RibbonAnimator._contextualGroupCollapsedYValue$p = 24;
CommandUI.RibbonAnimator._contextualGroupExpandedYValue$p = 0;
CommandUI.RibbonAnimator._animatingContextualGroups = [];
CommandUI.RibbonAnimator._animatingContextualGroupsAfterRibbonCollapse = [];
CommandUI.RibbonAnimator._ribbonExpandedTop$p = 0;
CommandUI._tab._activeTabClickDelay$p = 500;
CommandUI._tab.tabBodyCssClassName = 'cui-tabBody';
CommandUI._templateManager._instance = null;
CommandUI.ControlBehaviorFactoryProvider._instance = null;
CommandUI.Root.unifiedHeaderHeightPx = 48;
CommandUI.Root.tabRowHeightPx = 30;
CommandUI.Root.singleRowLayoutTabRowHeightPx = 24;
CommandUI.Root._closeMenuStackDelay$p = 300;
CommandUI.Root._completeConstructionInterval$i = 200;
CommandUI.Root._sqmEventName$p = 'SQMEvent';
CommandUI.Root._SQMEventSource = new Common.EventSource();
CommandUI.Root._modalDivId$p = 'ModalDiv';
CommandUI.RootManager._instance = null;
CommandUI.Toolbar.oneRowToolbarHeightPx = 26;
CommandUI.Utility._encodedStringArrayToken = 'STRARRY@';
CommandUI.Utility._imageSizeToClass$i = [ '', 'cui-img-5by3', 'cui-img-8by8', 'cui-img-13by13', 'cui-img-16by16', 'cui-img-32by32', 'cui-img-40by40', 'cui-img-48by48', 'cui-img-64by48', 'cui-img-85by48', 'cui-img-1by16', 'cui-img-14by14', 'cui-img-24by24', 'cui-img-20by20', 'cui-img-30by30', 'cui-img-120by20', 'cui-img-84by21', 'cui-img-90by21', 'cui-img-200by200', 'cui-img-70by48' ];
CommandUI.Utility._galleryElementDimensionsToSizeString$i = [ '', 'Size16by16', 'Size40by40', 'Size48by48', 'Size61by75', 'Size64by48', 'Size85by48', 'Size110by75', 'Size85by16', 'Size32by32', 'Size120by20', 'Size20by20', 'Size24by24', 'Size84by21', 'Size90by21', 'Size200by200', 'Size70by48' ];
CommandUI.ScriptUtility._emptyString$i = '';
CommandUI.Controls.ColorPicker.colorInformation = 'ColorInformation';
CommandUI.Controls.ColorPicker._colorTableClassName$p = 'cui-smenu-inner cui-colorpicker-table';
CommandUI.Controls.ColorPicker._firstRowClassName$p = 'cui-colorpicker-firstrow';
CommandUI.Controls.ColorPicker._firstColClassName$p = 'cui-colorpicker-firstcol';
CommandUI.Controls.ColorPicker._mcuRowClassName$p = 'cui-colorpicker-mcurow';
CommandUI.Controls.ColorPicker._compactRowClassName$p = 'cui-colorpicker-compactrow';
CommandUI.Controls.ColorPicker._firstCompactRowClassName$p = 'cui-colorpicker-firstcompactrow';
CommandUI.Controls.ColorPicker._lastCompactRowClassName$p = 'cui-colorpicker-lastcompactrow';
CommandUI.Controls.ColorPicker._spacedRowClassName$p = 'cui-colorpicker-spacedrow';
CommandUI.Controls.ColorPicker._normalCellClassName$p = 'cui-colorpicker-cell';
CommandUI.Controls.ColorPicker._largeCellClassName$p = 'cui-colorpicker-cell-large';
CommandUI.Controls.ColorPicker._cellAnchorClassName$p = 'cui-colorpicker-cell-a';
CommandUI.Controls.ColorPicker._cellDivClassName$p = 'cui-colorpicker-celldiv';
CommandUI.Controls.ColorPicker._cellInternalDivClassName$p = 'cui-colorpicker-cellinternaldiv';
CommandUI.Controls.ColorPicker._minSmallCellColumnWidth$p = 6;
CommandUI.Controls.ComboBox._defaulT_AUTOCOMPLETE_DELAY$p = 100;
CommandUI.Controls.ButtonCommandProperties.LabelText = CommandUI.SharedControlCommandProperties.labelText;
CommandUI.Controls.ButtonCommandProperties.Alt = CommandUI.SharedControlCommandProperties.alt;
CommandUI.Controls.ButtonCommandProperties.Image16by16Class = CommandUI.SharedControlCommandProperties.image16by16Class;
CommandUI.Controls.ButtonCommandProperties.Image32by32Class = CommandUI.SharedControlCommandProperties.image32by32Class;
CommandUI.Controls.ButtonCommandProperties.Image48by48Class = CommandUI.SharedControlCommandProperties.image48by48Class;
CommandUI.Controls.ButtonCommandProperties.Visible = CommandUI.SharedControlCommandProperties.visible;
CommandUI.Controls.ButtonCommandProperties.HasPopup = 'HasPopup';
CommandUI.Controls.ColorPickerCommandProperties.Color = 'Color';
CommandUI.Controls.ColorPickerCommandProperties.IndexColorSelected = 'ColorSelected';
CommandUI.Controls.ComboBoxCommandProperties.IsFreeForm = 'IsFreeForm';
CommandUI.Controls.ComboBoxCommandProperties.Value = 'Value';
CommandUI.Controls.ComboBoxCommandProperties.Key = 'Key';
CommandUI.Controls.ComboBoxCommandProperties.FontStyle = 'FontStyle';
CommandUI.Controls.DropDownCommandProperties.SelectedItemId = 'SelectedItemId';
CommandUI.Controls.FlyoutAnchorCommandProperties.LabelText = CommandUI.SharedControlCommandProperties.labelText;
CommandUI.Controls.FlyoutAnchorCommandProperties.LabelTextUserGeneratedPlaceholderReplacements = CommandUI.SharedControlCommandProperties.labelTextUserGeneratedPlaceholderReplacements;
CommandUI.Controls.FlyoutAnchorCommandProperties.Visible = CommandUI.SharedControlCommandProperties.visible;
CommandUI.Controls.FlyoutAnchorCommandProperties.ImageIsVisible = 'ImageIsVisible';
CommandUI.Controls.FlyoutAnchorCommandProperties.ImageUsesSpaceWhileInvisible = 'ImageUsesSpaceWhileInvisible';
CommandUI.Controls.FlyoutAnchorCommandProperties.Image16by16Class = CommandUI.SharedControlCommandProperties.image16by16Class;
CommandUI.Controls.FlyoutAnchorCommandProperties.Image32by32Class = CommandUI.SharedControlCommandProperties.image32by32Class;
CommandUI.Controls.FlyoutAnchorCommandProperties.Image48by48Class = CommandUI.SharedControlCommandProperties.image48by48Class;
CommandUI.Controls.FlyoutAnchorCommandProperties.ImageBackColor = 'ImageBackColor';
CommandUI.Controls.FlyoutAnchorCommandProperties.On = 'On';
CommandUI.Controls.FlyoutAnchorCommandProperties.SourceControlId = 'SourceControlId';
CommandUI.Controls.GalleryButtonCommandProperties.Alt = 'Alt';
CommandUI.Controls.GalleryButtonCommandProperties.CommandValueId = 'CommandValueId';
CommandUI.Controls.GalleryButtonCommandProperties.InnerHTML = 'InnerHTML';
CommandUI.Controls.GalleryButtonCommandProperties.On = 'On';
CommandUI.Controls.GalleryButtonCommandProperties.IsRtl = 'IsRtl';
CommandUI.Controls.GalleryButtonCommandProperties.GalleryButtonProps = 'GalleryButtonProps';
CommandUI.Controls.GalleryButtonCommandProperties.Text = 'Text';
CommandUI.Controls.GalleryButtonCommandProperties.HighlightOn = 'HighlightOn';
CommandUI.Controls.IconColorCommandProperties.Color = 'Color';
CommandUI.Controls.IconColorCommandProperties.IntColor = 'IntColor';
CommandUI.Controls.InsertTableCommandProperties.Rows = 'Rows';
CommandUI.Controls.InsertTableCommandProperties.Columns = 'Columns';
CommandUI.Controls.LabelCommandProperties.Value = 'Value';
CommandUI.Controls.LabelCommandProperties.Image16by16Class = 'Image16by16Class';
CommandUI.Controls.LabelCommandProperties.Alt = 'Alt';
CommandUI.Controls.LabelCommandProperties.Visible = CommandUI.SharedControlCommandProperties.visible;
CommandUI.Controls.SliderCommandProperties.Value = 'value';
CommandUI.Controls.SliderCommandProperties.MaxValue = 'MaxValue';
CommandUI.Controls.SliderCommandProperties.Text = 'Text';
CommandUI.Controls.SpinnerCommandProperties.Alt = 'Alt';
CommandUI.Controls.SpinnerCommandProperties.Number = 'Number';
CommandUI.Controls.SpinnerCommandProperties.UnitType = 'UnitType';
CommandUI.Controls.SpinnerCommandProperties.Text = 'Text';
CommandUI.Controls.SpinnerCommandProperties.MaxValue = 'MaxValue';
CommandUI.Controls.SplitButtonCommandProperties.Image16by16Class = 'Image16by16Class';
CommandUI.Controls.SplitButtonCommandProperties.Image32by32Class = 'Image32by32Class';
CommandUI.Controls.SplitButtonCommandProperties.On = 'On';
CommandUI.Controls.SplitButtonCommandProperties.LabelText = 'LabelText';
CommandUI.Controls.SplitButtonCommandProperties.ApplyLabelTextToControlOnly = 'ApplyLabelTextToControlOnly';
CommandUI.Controls.SplitButtonCommandProperties.EnsureControlRoleIsButton = 'EnsureControlRoleIsButton';
CommandUI.Controls.SplitButtonCommandProperties.Visible = 'Visible';
CommandUI.Controls.StatefulImageSplitButtonCommandProperties.MenuItemIdKey = 'MenuItemId';
CommandUI.Controls.StatefulImageSplitButtonCommandProperties.ImageClassKey = 'ImageClass';
CommandUI.Controls.TextBoxCommandProperties.Text = 'Text';
CommandUI.Controls.ToggleButtonCommandProperties.CommandValueId = 'CommandValueId';
CommandUI.Controls.ToggleButtonCommandProperties.Description = 'Description';
CommandUI.Controls.ToggleButtonCommandProperties.Image16by16Class = CommandUI.SharedControlCommandProperties.image16by16Class;
CommandUI.Controls.ToggleButtonCommandProperties.Image30by30Class = CommandUI.SharedControlCommandProperties.image30by30Class;
CommandUI.Controls.ToggleButtonCommandProperties.Image32by32Class = CommandUI.SharedControlCommandProperties.image32by32Class;
CommandUI.Controls.ToggleButtonCommandProperties.Image48by48Class = CommandUI.SharedControlCommandProperties.image48by48Class;
CommandUI.Controls.ToggleButtonCommandProperties.On = 'On';
CommandUI.Controls.ToggleButtonCommandProperties.LabelText = CommandUI.SharedControlCommandProperties.labelText;
CommandUI.Controls.ToggleButtonCommandProperties.Visible = CommandUI.SharedControlCommandProperties.visible;
CommandUI.Controls.ToggleButtonCommandProperties.SourceControlId = 'SourceControlId';
CommandUI.Controls.ToggleButtonCommandProperties.DisplayMode = 'DisplayMode';
CommandUI.Controls.ToggleButtonCommandProperties.Alt = CommandUI.SharedControlCommandProperties.alt;
CommandUI.Controls._menuSubsectionLabelDomStrategy._diagnosticsLabelClass$p = 'cui-menusection-diagnostics-label';
CommandUI.Controls._menuSubsectionLabelDomStrategy._mediumLabelClass$p = 'cui-ctl-mediumlabel';
CommandUI.Controls._menuSubsectionLabelDomStrategy._labelDescriptionClass$p = 'cui-btn-menu-description UIFont';
CommandUI.Controls._menuSubsectionLabelDomStrategy._filenameLabelClass$p = 'cui-ctl-filenamelabel cui-menusection-filenametitle';
CommandUI.Controls._statefulColorFlyoutAnchorDomStrategy._iconHeight$p = 16;
CommandUI.Controls._statefulColorFlyoutAnchorDomStrategy._iconWidth$p = 16;
CommandUI.Controls._statefulColorSplitButtonDomStrategy._iconHeight$p = 16;
CommandUI.Controls._statefulColorSplitButtonDomStrategy._iconWidth$p = 16;
CommandUI.Controls._templateButtonDomStrategy._retryAndLogAttribute$p = 'retry';
CommandUI.Controls._templateButtonDomStrategy._isRetryValue$p = 'r';
CommandUI.Controls._templateButtonDomStrategy._stopLoggingValue$p = 'l';
CommandUI.Controls.InsertTable.numCols = 10;
CommandUI.Controls.InsertTable.numRows = 8;
CommandUI.Controls.InsertTable.numCells = 80;
CommandUI.Controls.InsertTable.maxIdx = 79;
CommandUI.Controls.InsertTable.numColsInTouch = 8;
CommandUI.Controls.InsertTable.numRowsInTouch = 6;
CommandUI.Controls.SearchBox._maxCharacterLimit$p = 256;
CommandUI.Controls.SearchBox.EventKeys.blur = 'Blur';
CommandUI.Controls.SearchBox.EventKeys.click = 'Click';
CommandUI.Controls.SearchBox.EventKeys.focus = 'Focus';
CommandUI.Controls.SearchBox.EventKeys.keyUp = 'KeyUp';
CommandUI.Controls.SearchBox.EventKeys.keyDown = 'KeyDown';
CommandUI.Controls.SearchBox.EventKeys.menuChanged = 'MenuChanged';
CommandUI.Controls.SearchBox.EventKeys.interactionBegin = 'InteractionBegin';
CommandUI.Controls.SearchBox.EventKeys.interactionEnd = 'InteractionEnd';
CommandUI.Controls.SearchBox.EventKeys.mouseOver = 'MouseOver';
CommandUI.Controls.SearchBox.EventKeys.mouseOut = 'MouseOut';
CommandUI.Controls.SplitButton._toggledClass$p = 'cui-ctl-on';
CommandUI.Controls.SearchBoxComponents._menuUpdateModule.defaultValue = '';
Type.registerNamespace('_Ewa');

_Ewa.ExcelTopRowPeripheralControlCreator = function _Ewa_ExcelTopRowPeripheralControlCreator(standaloneRoot, ewaControl) {
    this._isTeamsSession$p$1 = _Ewa.UiEmbedHelperMethods.isHostedInTeams();
    _Ewa.ExcelTopRowPeripheralControlCreator.initializeBase(this, [ standaloneRoot, 'SharingSet_Start_Glyph_Excel_16x16x32', '869186573' ]);
    this._ewaControl$p$1 = ewaControl;
}
_Ewa.ExcelTopRowPeripheralControlCreator.prototype = {
    _ewaControl$p$1: null,
    
    getTopRightActionButtonInfo: function _Ewa_ExcelTopRowPeripheralControlCreator$getTopRightActionButtonInfo$in() {
        if ((Common.AFrameworkApplication.isReplyWithChangesWorkFlow && this._ewaControl$p$1.get_workbookContext().FullDocumentInfo.ReplyWithChangesUrl) || Common.AFrameworkApplication.useReplyWithChangesPostMessage) {
            var $$t_0;
            return $$t_0 = new Common.HeaderButtonInfo(), $$t_0.command = '1197060601', $$t_0.label = _Ewa.ClientStringManager.get_instance().getString(1003), $$t_0.id = 'btnReplyWithChanges', $$t_0;
        }
        if (this._ewaControl$p$1.get_modeCapabilities() & 33554432) {
            var $$t_1;
            return $$t_1 = new Common.HeaderButtonInfo(), $$t_1.command = '869186573', $$t_1.label = _Ewa.ClientStringManager.get_instance().getString(1149), $$t_1.image = 'ShareServerWhite_20x20x32', $$t_1.id = 'btnFileSharing', $$t_1;
        }
        return null;
    },
    
    getPeopleWellControlSettings: function _Ewa_ExcelTopRowPeripheralControlCreator$getPeopleWellControlSettings$in() {
        return Common.CuiHelper.getPeoplesWellDefaultControlSettings(_Ewa.ClientHostingPlatform.getClusterUri(3), 'ewaboot_presenceheads', _Ewa.ClientHostingPlatform.getClusterUri(3), 'ewaboot_presenceheads32', _Ewa.ClientHostingPlatform.getClusterUri(3), 'ewaboot_presenceheadswhite', '', '');
    },
    
    shouldShowActionButtonInRibbon: function _Ewa_ExcelTopRowPeripheralControlCreator$shouldShowActionButtonInRibbon$in() {
        if (this._isTeamsSession$p$1) {
            return false;
        }
        var actionButtonInfo = this.getActionButtonInfo();
        if (!actionButtonInfo || actionButtonInfo.command !== '869186573') {
            return false;
        }
        return true;
    },
    
    shouldShowCopyLinkButtonInRibbon: function _Ewa_ExcelTopRowPeripheralControlCreator$shouldShowCopyLinkButtonInRibbon$in() {
        return (this._ewaControl$p$1.isServerFeatureEnabled(967) && this.shouldShowActionButtonInRibbon() && !this._isTeamsSession$p$1) || (!!(this._ewaControl$p$1.get_modeCapabilities() & 33554432) && this._ewaControl$p$1.isServerFeatureEnabled(951) && this._isTeamsSession$p$1);
    },
    
    shouldShowRibbonToggleButtonInHeader: function _Ewa_ExcelTopRowPeripheralControlCreator$shouldShowRibbonToggleButtonInHeader$in() {
        var actionButtonInfo = this.getActionButtonInfo();
        return (!actionButtonInfo || this.shouldShowActionButtonInRibbon()) && _Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isSimplifiedReactRibbonUxFlightEnabled();
    },
    
    get_topRowControls: function _Ewa_ExcelTopRowPeripheralControlCreator$get_topRowControls$in() {
        return this._topRowControls;
    },
    
    getTopRightCommentsButtonInfo: function _Ewa_ExcelTopRowPeripheralControlCreator$getTopRightCommentsButtonInfo$in() {
        var commentsButtonInfo = Common.TopRowPeripheralControlCreator.prototype.getTopRightCommentsButtonInfo.call(this);
        commentsButtonInfo.command = '600686207';
        commentsButtonInfo.image = 'CommentGlyph16';
        return commentsButtonInfo;
    },
    
    getTopRightChangesButtonInfo: function _Ewa_ExcelTopRowPeripheralControlCreator$getTopRightChangesButtonInfo$in() {
        var changesButtonInfo = Common.TopRowPeripheralControlCreator.prototype.getTopRightChangesButtonInfo.call(this);
        if (this._ewaControl$p$1.isServerFeatureEnabled(657)) {
            changesButtonInfo.command = '-876699925';
        }
        changesButtonInfo.image = 'ActivityGlyph16';
        return changesButtonInfo;
    }
}


_Ewa.ReactEnvironmentManager = function _Ewa_ReactEnvironmentManager(ewaControl) {
    this.$$d__initializeLazyResources$p$0 = Function.createDelegate(this, this._initializeLazyResources$p$0);
    this._ewaControl$p$0 = ewaControl;
    this._appchromeConfigured$p$0 = false;
    this._commandDefinitionMapping$p$0 = Common.Utils.Container.get_instance().tryResolve(Common.IExternalUICommandDefinitionMapping, '') || new _Ewa.ExcelReactCommandDefinitionMapping(ewaControl.get_namingContainerIdPrefix(), ewaControl);
}
_Ewa.ReactEnvironmentManager.prototype = {
    _root$p$0: null,
    _commandDefinitionMapping$p$0: null,
    _ewaControl$p$0: null,
    _notificationFocusManager$p$0: null,
    _unregisterBindCommandHandlerAction$p$0: null,
    _appChromeProvider$p$0: null,
    _reactEnvironmentInited$p$0: false,
    _appchromeConfigured$p$0: false,
    
    dispose: function _Ewa_ReactEnvironmentManager$dispose$in() {
        if (this._unregisterBindCommandHandlerAction$p$0) {
            this._unregisterBindCommandHandlerAction$p$0();
            this._unregisterBindCommandHandlerAction$p$0 = null;
        }
        if (this._notificationFocusManager$p$0) {
            this._notificationFocusManager$p$0.dispose();
        }
    },
    
    getAppChromePromise: function _Ewa_ReactEnvironmentManager$getAppChromePromise$in() {
        var $$t_B = this;
        return this._appChromeProvider$p$0 || (this._appChromeProvider$p$0 = new Promise(function(resolve, reject) {
            _Ewa.TaskExtensions.cw(_Ewa.GetServiceTaskFactory.getOrCreateAsync(Common.IDynamicScriptLoaderProvider, $$t_B._ewaControl$p$0.get_serviceRegistry(), 283, 284, -2), function(dynamicScriptLoaderProvider) {
                var loadAppChromePromise = (dynamicScriptLoaderProvider).get_result().getScriptLoader().loadScript('appChrome');
                loadAppChromePromise.then((function(unused) {
                    $$t_B._configureAppChrome$p$0(dynamicScriptLoaderProvider);
                    resolve(true);
                    return null;
                }));
            }, $$t_B._ewaControl$p$0.get_serviceRegistry().get_cancelOnDisposeToken(), 3);
        }));
    },
    
    loadDialogControls: function _Ewa_ReactEnvironmentManager$loadDialogControls$in() {
        var loadScriptTaskCompletionSource = new ($$sc.TaskCompletionSource$1.$$(Boolean))();
        var $$t_C = this;
        _Ewa.TaskExtensions.cw(_Ewa.GetServiceTaskFactory.getOrCreateAsync(Common.IDynamicScriptLoaderProvider, this._ewaControl$p$0.get_serviceRegistry(), 283, 284, -2), function(dynamicScriptLoaderProvider) {
            (dynamicScriptLoaderProvider).get_result().getScriptLoader().loadScript('dialogControls').then(function(unused) {
                dialogControls.setWebpackPublicPath(Common.AFrameworkApplication.get_staticContentScriptNameBase());
                dialogControls.initializeLogger(new UlsExternalLogger());
                loadScriptTaskCompletionSource.setResult(true);
            }, function(error) {
                Diag.ULS.sendTraceTag(51504002, 0, 10, 'DialogHelperMethods.LoadDialogControls: Failed to load dialogControls script.');
                loadScriptTaskCompletionSource.SX(error);
            });
        }, this._ewaControl$p$0.get_serviceRegistry().get_cancelOnDisposeToken(), 3);
        return loadScriptTaskCompletionSource.get_task();
    },
    
    initReactCommandingEnvironmentWithoutReactRibbon: function _Ewa_ReactEnvironmentManager$initReactCommandingEnvironmentWithoutReactRibbon$in() {
        if (this._ewaControl$p$0.isChangeGateEnabled('OfficeVSO:4270559_InitReactEnvironmentForLegacyOnce') && this._reactEnvironmentInited$p$0) {
            return;
        }
        Diag.ULS.shipAssertTag(51504003, 0, !_Ewa.IsFeatureEnabledExtensions.isReactRibbonDisplayed(this._ewaControl$p$0), 'ReactEnvironmentManager.InitReactCommandingEnvironment: This function should not be called in React Ribbon.');
        this._root$p$0 = new CommandUI.ReactRibbonRoot(CommandUI.RootManager.get_instance(), this._commandDefinitionMapping$p$0, null);
        var rootUser;
        if (this._ewaControl$p$0.isChangeGateEnabled('OfficeVSO:4269801_ExcelReactRootUserEnabled')) {
            rootUser = new _Ewa.ExcelReactRootUser(this._ewaControl$p$0, new _Ewa.ContextMenuRootUser(this._ewaControl$p$0));
        }
        else {
            rootUser = new _Ewa.ContextMenuRootUser(this._ewaControl$p$0);
        }
        this._root$p$0.set_rootUser(rootUser);
        this._ewaControl$p$0.get_serviceRegistry().registerService(CommandUI.ReactRibbonRoot, 337, this._root$p$0);
        var $$t_7 = this;
        this.getAppChromePromise().then(function() {
            appChrome.getLazyRibbonInitializationActions().then($$t_7.$$d__initializeLazyResources$p$0).catch(function(e) {
                Diag.ULS.sendTraceTag(592737811, 0, 10, 'ReactEnvironmentManager.InitReactCommandingEnvironment: failed to load lazy ribbon slice. error: {0}', e);
            });
        });
        this._reactEnvironmentInited$p$0 = true;
    },
    
    populateControlMenu: function _Ewa_ReactEnvironmentManager$populateControlMenu$in(menuId) {
        return this._root$p$0.get_reactRibbonRootPoller().populateControlMenu(this._commandDefinitionMapping$p$0.getCommandByExternalUxId(menuId), appChrome.selectors.getModelType(menuId), null);
    },
    
    _initializeLazyResources$p$0: function _Ewa_ReactEnvironmentManager$_initializeLazyResources$p$0$in(lazyInitializationActions) {
        appChrome.initializeRibbonStore(false);
        if (this._ewaControl$p$0.isChangeGateEnabled('OfficeVSO:3965332_BindCommandHandlerAfterInitializeRibbonStore')) {
            this._bindCommandHandler$p$0();
        }
        appChrome.api.dispatch(lazyInitializationActions);
        appChrome.api.dispatch(appChrome.actions.setControlBehaviorAttached(true));
    },
    
    _bindCommandHandler$p$0: function _Ewa_ReactEnvironmentManager$_bindCommandHandler$p$0$in() {
        var commandHandler = new CommandUI.ReactExecuteCommandHandler(this._root$p$0, this._root$p$0.get_reactRibbonRootPoller(), this._commandDefinitionMapping$p$0, Common.AFrameworkApplication.get_activeFrame().get_theFocusManager(), null, null, null, Common.AFrameworkApplication.get_theActionManager(), null, null, null);
        var $$t_5 = this;
        this._unregisterBindCommandHandlerAction$p$0 = appChrome.api.bindCommandHandler(function(id, commandExecutionData) {
            commandHandler.executeCommand(id, commandExecutionData);
        });
    },
    
    _configureAppChrome$p$0: function _Ewa_ReactEnvironmentManager$_configureAppChrome$p$0$in(dynamicScriptLoaderProvider) {
        if (this._appchromeConfigured$p$0) {
            return;
        }
        this._appchromeConfigured$p$0 = true;
        if (this._ewaControl$p$0.isChangeGateEnabled('OfficeVSO:4146223_ReorderAppChromeInit')) {
            var $$t_8 = this;
            appChrome.setIsFeatureEnabledCallback(function(feature) {
                return _Ewa.IsFeatureEnabledReactHelper.isFeatureEnabled($$t_8._ewaControl$p$0, feature);
            });
        }
        appChrome.api.initializeLogger(new UlsExternalLogger());
        appChrome.api.setWebpackPublicPath(Common.AFrameworkApplication.get_staticContentScriptNameBase());
        var $$t_7 = dynamicScriptLoaderProvider.get_result().getScriptLoader();
        appChrome.setScriptLoader(($$t_7.$$d_loadScript || ($$t_7.$$d_loadScript = Function.createDelegate($$t_7, $$t_7.loadScript))));
        var $$t_9 = this;
        _Ewa.TaskExtensions.cw(_Ewa.GetServiceTaskFactory.getOrCreateAsync(_Ewa.IEwaNotificationFocusManager, this._ewaControl$p$0.get_serviceRegistry(), 357, 358, -2), function(task) {
            Common.ReactNotificationsManagerUtils.initialize();
            $$t_9._notificationFocusManager$p$0 = (task).get_result();
            $$t_9._notificationFocusManager$p$0.initializeFocusActions();
        }, this._ewaControl$p$0.get_cancelOnDisposeToken(), 3);
        if (!this._ewaControl$p$0.isChangeGateEnabled('OfficeVSO:4146223_ReorderAppChromeInit')) {
            var $$t_A = this;
            appChrome.setIsFeatureEnabledCallback(function(feature) {
                return _Ewa.IsFeatureEnabledReactHelper.isFeatureEnabled($$t_A._ewaControl$p$0, feature);
            });
        }
    }
}


_Ewa.EwaActionManager = function _Ewa_EwaActionManager(ewaCtrl) {
    this._ewaControl$p$0 = ewaCtrl;
}
_Ewa.EwaActionManager.prototype = {
    _ewaControl$p$0: null,
    _$$pf_CommandLocation$p$0: 0,
    
    get_commandLocation: function _Ewa_EwaActionManager$get_commandLocation$in() {
        return this._$$pf_CommandLocation$p$0;
    },
    
    set_commandLocation: function _Ewa_EwaActionManager$set_commandLocation$in(value) {
        this._$$pf_CommandLocation$p$0 = value;
        return value;
    },
    
    processAction: function _Ewa_EwaActionManager$processAction$in(actionId, actionBehavior, telemetryData) {
        return 8;
    },
    
    processActionWithData: function _Ewa_EwaActionManager$processActionWithData$in(actionId, actionBehavior, actionData, telemetryData) {
        var handled = false;
        switch (actionId) {
            case 2758000563:
                handled = this._handleCommand$p$0(1631556630, actionData);
                break;
        }
        return (handled) ? 32 : 8;
    },
    
    _handleCommand$p$0: function _Ewa_EwaActionManager$_handleCommand$p$0$in(command, actionData) {
        var commandInfo = new _Ewa.RibbonCommandInfo(command, (actionData || 0), this._ewaControl$p$0.get_frameMode(), this._$$pf_CommandLocation$p$0, null);
        var t;
        return !_Ewa.BaseTaskExtensions.isFaultedOrCanceled((t = this._ewaControl$p$0.get_commandHandlerManager().handleRibbonCommand(commandInfo, {}, null))) && (t.get_status() !== 6 || t.get_result());
    }
}


_Ewa.IRibbonUserFactory = function() {}
_Ewa.IRibbonUserFactory.registerInterface('_Ewa.IRibbonUserFactory');


_Ewa.ContextMenuRootUser = function _Ewa_ContextMenuRootUser(ewaControl) {
    this._ewaControl$p$0 = ewaControl;
    this._commandHandlerManager$p$0 = ewaControl.get_commandHandlerManager();
    this._sessionStateManager$p$0 = ewaControl.get_sessionStateManager();
}
_Ewa.ContextMenuRootUser.prototype = {
    _commandHandlerManager$p$0: null,
    _sessionStateManager$p$0: null,
    _ewaControl$p$0: null,
    
    isRootCommandEnabled: function _Ewa_ContextMenuRootUser$isRootCommandEnabled$in(commandName, properties) {
        return (!commandName) || _Ewa.CoreStaticMethods.isPopulateCommand(commandName) || !this._commandHandlerManager$p$0.isValid(_Ewa.CommandUIManager.ribbonCommandFromId(commandName), null, null);
    },
    
    executeRootCommand: function _Ewa_ContextMenuRootUser$executeRootCommand$in(commandName, commandParams, commandSqmInfo, actionResultCallback, telemetryParams) {
        _Ewa.HelperMethods.verifyStringArgument(commandName, 'commandName');
        if (commandParams && commandSqmInfo && commandSqmInfo.InvocationMethod !== -1 && commandSqmInfo.InvocationMethod) {
            var controlId = commandParams['SourceControlId'];
            if (!isNullOrUndefined(controlId)) {
                CommandUI.Root.raiseSQMEvent(new CommandUI.Root.SQMEventArgs(controlId, '', '', commandName, Date.now(), commandSqmInfo));
            }
        }
        if (this._ewaControl$p$0.isChangeGateEnabled('OfficeVSO:4185435_SendUILocationInContextMenuRootUser') && commandParams) {
            if (!commandParams['UILocation']) {
                commandParams['UILocation'] = 'Contextual';
            }
            else {
                Diag.ULS.sendTraceTag(592048153, 0, 15, 'ContextMenuRootUser.ExecuteRootCommand: UILocation already exists in commandParams with value: {0}', commandParams['UILocation']);
            }
        }
        if (_Ewa.CoreStaticMethods.isPopulateCommand(commandName)) {
            return this._commandHandlerManager$p$0.handlePopulateCommand(commandName, commandParams);
        }
        else if (_Ewa.CoreStaticMethods.isQueryCommand(commandName)) {
            return this._handleQueryCommand$p$0(commandName, commandParams);
        }
        else {
            var handleRibbonCommandTask = this._commandHandlerManager$p$0.handleRibbonCommand(new _Ewa.RibbonCommandInfo(_Ewa.CommandUIManager.ribbonCommandFromId(commandName), commandSqmInfo.InvocationMethod, (this._sessionStateManager$p$0.get_isEditMode()) ? 2 : 1, commandSqmInfo.CommandLocation, commandSqmInfo.CommandTabName), commandParams, null);
            return !_Ewa.BaseTaskExtensions.isFaultedOrCanceled(handleRibbonCommandTask) && (handleRibbonCommandTask.get_status() !== 6 || handleRibbonCommandTask.get_result());
        }
    },
    
    _handleQueryCommand$p$0: function _Ewa_ContextMenuRootUser$_handleQueryCommand$p$0$in(queryCommand, commandParams) {
        if (queryCommand === 'QueryAdvancedPasteContextMenuGalleryIcon') {
            commandParams[CommandUI.Controls.GalleryButtonCommandProperties.On] = false;
            return true;
        }
        return false;
    }
}


_Ewa.ExcelEditorRibbonSQMInformation = function _Ewa_ExcelEditorRibbonSQMInformation(actionManager, namingIdPrefix) {
    _Ewa.ExcelEditorRibbonSQMInformation.initializeBase(this, [ actionManager ]);
    this.registerRibbonSQMActions();
    this._namingIdPrefix$p$1 = namingIdPrefix;
}
_Ewa.ExcelEditorRibbonSQMInformation.prototype = {
    _namingIdPrefix$p$1: null,
    
    registerRibbonSQMActions: function _Ewa_ExcelEditorRibbonSQMInformation$registerRibbonSQMActions$in() {
        this._actionManager.addAction(4191810468, 2147483648, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(3328108543, 2147483648, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(469886678, 2147483648, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(2652577546, 2147483648, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(1449630229, 2147483648, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(1120156565, 2147483648, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(491924414, 2147483648, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(3696531680, 2147483648, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(3221800135, 2147483648, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(903886994, 2147483648, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(3099434941, 2147483648, Common.ActionManager.doNothingButReportHandler);
        this._actionManager.addAction(2625726220, 2147483648, Common.ActionManager.doNothingButReportHandler);
    },
    
    getRibbonTabSQMCommandId: function _Ewa_ExcelEditorRibbonSQMInformation$getRibbonTabSQMCommandId$in(tabName) {
        if (tabName.startsWith(this._namingIdPrefix$p$1)) {
            tabName = tabName.substring(this._namingIdPrefix$p$1.length, tabName.length);
        }
        switch (tabName) {
            case 'Ribbon.Home':
            case 'Home':
                return 4191810468;
            case 'Ribbon.Insert':
            case 'Insert':
                return 469886678;
            case 'Ribbon.Data':
            case 'Data':
                return 1449630229;
            case 'Ribbon.Review':
            case 'Review':
                return 3328108543;
            case 'Ribbon.View':
            case 'View':
                return 2652577546;
            case 'Ribbon.Charts.Design':
            case 'Chart':
                return 1120156565;
            case 'Ribbon.PageLayout':
            case 'PageLayout':
                return 491924414;
            case 'Ribbon.Formulas':
            case 'Formulas':
                return 3696531680;
            case 'Ribbon.Developer':
            case 'Developer':
                return 3221800135;
            case 'Ribbon.AddIns':
            case 'AddIns':
                return 903886994;
            case 'Ribbon.Drawing.Format':
            case 'Drawing':
                return 3099434941;
            case 'Ribbon.Help':
            case 'Help':
                return 2625726220;
        }
        return 3841439565;
    }
}


_Ewa.ReactEnvironmentManagerFactory = function _Ewa_ReactEnvironmentManagerFactory(ewaControl) {
    _Ewa.ReactEnvironmentManagerFactory.initializeBase(this);
    this._$$pf_EwaControl$p$4 = ewaControl;
}
_Ewa.ReactEnvironmentManagerFactory.attach = function _Ewa_ReactEnvironmentManagerFactory$attach$st(ewaControl) {
    ewaControl.get_serviceRegistry().registerService(_Ewa.IReactEnvironmentManager, 355, new _Ewa.ReactEnvironmentManager(ewaControl));
}
_Ewa.ReactEnvironmentManagerFactory.prototype = {
    _$$pf_EwaControl$p$4: null,
    
    create: function _Ewa_ReactEnvironmentManagerFactory$create$in() {
        this.raiseServiceCreatedEvent(this._$$pf_EwaControl$p$4.get_serviceRegistry().getService(_Ewa.IReactEnvironmentManager, 355, false) || new _Ewa.ReactEnvironmentManager(this._$$pf_EwaControl$p$4));
    }
}


_Ewa.RibbonFactory = function _Ewa_RibbonFactory(ewaControl) {
    _Ewa.RibbonFactory.initializeBase(this);
    this._$$pf_EwaControl$p$4 = ewaControl;
}
_Ewa.RibbonFactory.prototype = {
    _$$pf_EwaControl$p$4: null,
    
    create: function _Ewa_RibbonFactory$create$in() {
        var ewa = this._$$pf_EwaControl$p$4;
        var ribbonUserFactory = new _Ewa.RibbonUserFactory(ewa);
        var loadRibbonResources = ribbonUserFactory.loadRibbonResources();
        var $$t_5 = this;
        _Ewa.TaskExtensions.cw(loadRibbonResources, function(task) {
            $$t_5.raiseServiceCreatedEvent(new _Ewa.RibbonManager(ewa, _Ewa.ProgressUIManagerExtensions.progressUIManager(ewa), window.ewaEditRibbonJSON, ribbonUserFactory));
        }, this.get_cancelOnDisposeToken(), 3);
    }
}


_Ewa._ribbonVisibilityStateManager = function _Ewa__ribbonVisibilityStateManager(eventManager, getRibbonManager) {
    this.$$d__triggerVisibilityChangedEvent$p$3 = Function.createDelegate(this, this._triggerVisibilityChangedEvent$p$3);
    this.$$d__onCommandUiAttachCompleted$p$3 = Function.createDelegate(this, this._onCommandUiAttachCompleted$p$3);
    _Ewa._ribbonVisibilityStateManager.initializeBase(this, [ false ]);
    this._$$pf_EventManager$p$3 = eventManager;
    this._$$pf_EventManager$p$3.add_onCommandUIAttachCompleted(this.$$d__onCommandUiAttachCompleted$p$3);
    this._$$pf_GetRibbonManager$p$3 = getRibbonManager;
    this._attachToRibbonManagerEvents$p$3();
}
_Ewa._ribbonVisibilityStateManager.prototype = {
    
    add_visibilityChanged: function _Ewa__ribbonVisibilityStateManager$add_visibilityChanged$in(value) {
        this.addHandler('VC', value);
    },
    
    remove_visibilityChanged: function _Ewa__ribbonVisibilityStateManager$remove_visibilityChanged$in(value) {
        this.removeHandler('VC', value);
    },
    
    get_minimized: function _Ewa__ribbonVisibilityStateManager$get_minimized$in() {
        if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            return false;
        }
        return !!this._$$pf_GetRibbonManager$p$3() && !!this._$$pf_GetRibbonManager$p$3()._ribbonUser$p$3 && this._$$pf_GetRibbonManager$p$3()._ribbonUser$p$3.get_ribbonExternal().get_minimized();
    },
    
    get_poppedUp: function _Ewa__ribbonVisibilityStateManager$get_poppedUp$in() {
        if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            return false;
        }
        return !!this._$$pf_GetRibbonManager$p$3() && !!this._$$pf_GetRibbonManager$p$3()._ribbonUser$p$3 && this._$$pf_GetRibbonManager$p$3()._ribbonUser$p$3.get_ribbonExternal().get_tabPoppedUp();
    },
    
    _$$pf_EventManager$p$3: null,
    _$$pf_GetRibbonManager$p$3: null,
    
    dispose: function _Ewa__ribbonVisibilityStateManager$dispose$in() {
        this._dettachFromRibbonManagerEvents$p$3();
        this._$$pf_EventManager$p$3.remove_onCommandUIAttachCompleted(this.$$d__onCommandUiAttachCompleted$p$3);
        this._$$pf_EventManager$p$3 = null;
        this._$$pf_GetRibbonManager$p$3 = null;
        _Ewa.BaseEventSource.prototype.dispose.call(this);
    },
    
    _attachToRibbonManagerEvents$p$3: function _Ewa__ribbonVisibilityStateManager$_attachToRibbonManagerEvents$p$3$in() {
        var manager = this._$$pf_GetRibbonManager$p$3();
        if (manager) {
            manager.add_ribbonStateChanged(this.$$d__triggerVisibilityChangedEvent$p$3);
        }
    },
    
    _dettachFromRibbonManagerEvents$p$3: function _Ewa__ribbonVisibilityStateManager$_dettachFromRibbonManagerEvents$p$3$in() {
        var manager = this._$$pf_GetRibbonManager$p$3();
        if (manager) {
            manager.remove_ribbonStateChanged(this.$$d__triggerVisibilityChangedEvent$p$3);
        }
    },
    
    _triggerVisibilityChangedEvent$p$3: function _Ewa__ribbonVisibilityStateManager$_triggerVisibilityChangedEvent$p$3$in(sender, e) {
        this.raiseEvent('VC', Sys.EventArgs.Empty, this);
    },
    
    _onCommandUiAttachCompleted$p$3: function _Ewa__ribbonVisibilityStateManager$_onCommandUiAttachCompleted$p$3$in(sender, args) {
        this._attachToRibbonManagerEvents$p$3();
        this._triggerVisibilityChangedEvent$p$3(null, null);
    }
}


_Ewa.RibbonVisibilityStateManagerFactory = function _Ewa_RibbonVisibilityStateManagerFactory(commandUIEventManagerLazy, getRibbonManager) {
    _Ewa.RibbonVisibilityStateManagerFactory.initializeBase(this);
    this._$$pf_CommandUiEventManagerLazy$p$4 = commandUIEventManagerLazy;
    this._$$pf_GetRibbonManager$p$4 = getRibbonManager;
}
_Ewa.RibbonVisibilityStateManagerFactory.prototype = {
    _$$pf_CommandUiEventManagerLazy$p$4: null,
    _$$pf_GetRibbonManager$p$4: null,
    
    create: function _Ewa_RibbonVisibilityStateManagerFactory$create$in() {
        var $$t_2 = this;
        _Ewa.TaskExtensions.c(this._$$pf_CommandUiEventManagerLazy$p$4.get_value(), function(t) {
            $$t_2.raiseServiceCreatedEvent(new _Ewa._ribbonVisibilityStateManager((t).get_result(), $$t_2._$$pf_GetRibbonManager$p$4));
        }, this.get_cancelOnDisposeToken());
    }
}


_Ewa.ToolbarFactory = function _Ewa_ToolbarFactory(ewaControl) {
    _Ewa.ToolbarFactory.initializeBase(this);
    this._$$pf_EwaControl$p$4 = ewaControl;
}
_Ewa.ToolbarFactory.prototype = {
    _$$pf_EwaControl$p$4: null,
    
    create: function _Ewa_ToolbarFactory$create$in() {
        var ewa = this._$$pf_EwaControl$p$4;
        var serviceRegistry = ewa.get_serviceRegistry();
        var toolbarJsToLoad;
        var toolbarJsToLoadName;
        if (ewa.get_isMobileMode()) {
            toolbarJsToLoad = 62;
            toolbarJsToLoadName = 'ewaMobileToolbarJSON';
        }
        else {
            toolbarJsToLoad = 61;
            toolbarJsToLoadName = 'ewaReadToolbarJSON';
        }
        var commonStringsTask = _Ewa.GetServiceTaskFactory.create(Object, serviceRegistry, 155, this.get_cancelOnDisposeToken(), this.get_scriptLoadFlavor());
        var jsonLoadTask = _Ewa.ClientHostingPlatform.loadScript(toolbarJsToLoad, 4, false, false, 195, this.get_scriptLoadFlavor());
        var $$t_8 = this;
        _Ewa.TaskExtensions.cw(_Ewa.TaskExtensions.ws([ commonStringsTask, jsonLoadTask ], ewa.get_cancelOnDisposeToken(), 3), function(task) {
            $$t_8.raiseServiceCreatedEvent(new _Ewa._toolbarManager(ewa, window[toolbarJsToLoadName]));
        }, this.get_cancelOnDisposeToken(), 3);
    }
}


_Ewa.CommandUIEventManager = function _Ewa_CommandUIEventManager(ewa) {
    this.$$d__updateContainersPageLoadStyles$p$3 = Function.createDelegate(this, this._updateContainersPageLoadStyles$p$3);
    _Ewa.CommandUIEventManager.initializeBase(this, [ false ]);
    this._$$pf_EwaControl$p$3 = ewa;
    this.add_onCommandUIAttachCompleted(this.$$d__updateContainersPageLoadStyles$p$3);
}
_Ewa.CommandUIEventManager.prototype = {
    
    add_onCommandUIAttachCompleted: function _Ewa_CommandUIEventManager$add_onCommandUIAttachCompleted$in(value) {
        this.addHandler('CommandUIAttachCompleted', value);
    },
    
    remove_onCommandUIAttachCompleted: function _Ewa_CommandUIEventManager$remove_onCommandUIAttachCompleted$in(value) {
        this.removeHandler('CommandUIAttachCompleted', value);
    },
    
    add_disposing: function _Ewa_CommandUIEventManager$add_disposing$in(value) {
        this.addHandler('CommandUIEventManagerDisposing', value);
    },
    
    remove_disposing: function _Ewa_CommandUIEventManager$remove_disposing$in(value) {
        this.removeHandler('CommandUIEventManagerDisposing', value);
    },
    
    add_onContextMenuRootUserCreated: function _Ewa_CommandUIEventManager$add_onContextMenuRootUserCreated$in(value) {
        this.addHandler('ContextMenuRootUserCreated', value);
    },
    
    remove_onContextMenuRootUserCreated: function _Ewa_CommandUIEventManager$remove_onContextMenuRootUserCreated$in(value) {
        this.removeHandler('ContextMenuRootUserCreated', value);
    },
    
    add_onNonCuiHeaderCreated: function _Ewa_CommandUIEventManager$add_onNonCuiHeaderCreated$in(value) {
        this.addHandler('NonCuiHeaderCreated', value);
    },
    
    remove_onNonCuiHeaderCreated: function _Ewa_CommandUIEventManager$remove_onNonCuiHeaderCreated$in(value) {
        this.removeHandler('NonCuiHeaderCreated', value);
    },
    
    _$$pf_EwaControl$p$3: null,
    
    dispose: function _Ewa_CommandUIEventManager$dispose$in() {
        this.raiseEvent('CommandUIEventManagerDisposing', null, null);
        this._$$pf_EwaControl$p$3 = null;
        _Ewa.BaseEventSource.prototype.dispose.call(this);
    },
    
    commandUIAttachCompleted: function _Ewa_CommandUIEventManager$commandUIAttachCompleted$in() {
        this.raiseEvent('CommandUIAttachCompleted', null, null);
    },
    
    createContextMenuRootUser: function _Ewa_CommandUIEventManager$createContextMenuRootUser$in() {
        var eventArgs = new _Ewa.ContextMenuRootUserCreatedEventArgs();
        eventArgs.set_contextMenuRootUser(new _Ewa.ContextMenuRootUser(this._$$pf_EwaControl$p$3));
        this.raiseEvent('ContextMenuRootUserCreated', eventArgs, null);
    },
    
    createNonCuiHeader: function _Ewa_CommandUIEventManager$createNonCuiHeader$in(headerId, headerContainer) {
        var topbar1 = document.createElement('div');
        topbar1.className = 'cui-topBar1';
        headerContainer.appendChild(topbar1);
        var eventArgs = new _Ewa.NonCuiHeaderCreatedEventArgs();
        eventArgs.set_topRowControls(_Ewa.CommandUIManager._createCuiHelper$i(this._$$pf_EwaControl$p$3).createTopRowControls(headerId, topbar1, null, null, false, true, false));
        this.raiseEvent('NonCuiHeaderCreated', eventArgs, null);
    },
    
    scaleNonCuiHeaders: function _Ewa_CommandUIEventManager$scaleNonCuiHeaders$in(headerContainer, isRtl) {
        Common.RibbonTabScalingActor.scaleNonCuiHeaders(headerContainer, isRtl);
    },
    
    scaleHeader: function _Ewa_CommandUIEventManager$scaleHeader$in(isRtl) {
        Common.RibbonTabScalingActor.scaleHeader(isRtl);
    },
    
    disposeNonCuiHeader: function _Ewa_CommandUIEventManager$disposeNonCuiHeader$in(topRowControls) {
        Common.CuiHelper.disposeTopRowControls(topRowControls);
    },
    
    _updateContainersPageLoadStyles$p$3: function _Ewa_CommandUIEventManager$_updateContainersPageLoadStyles$p$3$in(sender, e) {
        this._$$pf_EwaControl$p$3.removeContainersPageLoadStyles();
        Common.AFrame.reflowCookieBannerIfNecessary(true);
    }
}


_Ewa.CommandUIManager = function _Ewa_CommandUIManager(ewaControl, commandUIRootSuffix, commandUIJSON) {
    this.$$d__onKeyUp$p$2 = Function.createDelegate(this, this._onKeyUp$p$2);
    this.$$d__onKeyDown$p$2 = Function.createDelegate(this, this._onKeyDown$p$2);
    this.$$d_pollForStateAndUpdate = Function.createDelegate(this, this.pollForStateAndUpdate);
    this.$$d_onActiveCellChanged = Function.createDelegate(this, this.onActiveCellChanged);
    this.$$d_pollForStateAndUpdateInternalAsync = Function.createDelegate(this, this.pollForStateAndUpdateInternalAsync);
    this.$$d__commandUIScopeSetFocus$p$2 = Function.createDelegate(this, this._commandUIScopeSetFocus$p$2);
    _Ewa.CommandUIManager.initializeBase(this, [ false ]);
    this._$$pf_EwaControl$p$2 = ewaControl;
    this._$$pf_NamingIdPrefix$p$2 = ewaControl.get_namingContainerIdPrefix();
    this._$$pf_CommandUIJSON$p$2 = commandUIJSON;
    this.set_rootCommandUIElement(document.getElementById(this.getNamingIdConcatString(commandUIRootSuffix)));
    if (this.get_rootCommandUIElement()) {
        this._$$pf_BrowserBehaviorSuppressor$p$2 = new _Ewa.BrowserDefaultBehaviorSuppressor(this.get_rootCommandUIElement(), 1, null);
    }
    if (!_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
        Common.CuiHeaderDomReference.initializeCuiScope(this.get_sectionName(), this.$$d__commandUIScopeSetFocus$p$2, null, false, true, true, true);
    }
    this._$$pf_LastKeyboardClickedElement$p$2 = null;
}
_Ewa.CommandUIManager.ribbonCommandFromId = function _Ewa_CommandUIManager$ribbonCommandFromId$st(commandId) {
    return parseInt(commandId);
}
_Ewa.CommandUIManager._createCuiHelper$i = function _Ewa_CommandUIManager$_createCuiHelper$i$st(ewaControl) {
    var strings = { SignoutLink: _Ewa.ClientStringManager.get_instance().getStringUnencoded(266), SignInLink: _Ewa.ClientStringManager.get_instance().getStringUnencoded(267), SwitcherTooltip: _Ewa.ClientStringManager.get_instance().getStringUnencoded(268) };
    return new Common.CuiHelper('', _Ewa.StringExtensions, new _Ewa.EwaActionManager(ewaControl), strings, null);
}
_Ewa.CommandUIManager.belongsToCommandUIElement = function _Ewa_CommandUIManager$belongsToCommandUIElement$st(root, candidate) {
    return _Ewa.DOMElementExtensions.isDescendentElementOrSelf(root, candidate);
}
_Ewa.CommandUIManager.getDictionaryMismatch = function _Ewa_CommandUIManager$getDictionaryMismatch$st(trimmedBefore, trimmedAfter, prefix) {
    var exceedingBefore = _Ewa.CommandUIManager._getDictionaryMismatchInternal$p(trimmedBefore, trimmedAfter, prefix);
    var exceedingAfter = _Ewa.CommandUIManager._getDictionaryMismatchInternal$p(trimmedAfter, trimmedBefore, prefix);
    return _Ewa.CommandUIManager._getMismatchString$p(exceedingBefore, exceedingAfter);
}
_Ewa.CommandUIManager.getGalleryMismatch = function _Ewa_CommandUIManager$getGalleryMismatch$st(trimmedGalleriesBefore, trimmedGalleriesAfter) {
    var exceedingBefore = _Ewa.CommandUIManager._getGalleryMismatchInternal$p(trimmedGalleriesBefore, trimmedGalleriesAfter);
    var exceedingAfter = _Ewa.CommandUIManager._getGalleryMismatchInternal$p(trimmedGalleriesAfter, trimmedGalleriesBefore);
    return _Ewa.CommandUIManager._getMismatchString$p(exceedingBefore, exceedingAfter);
}
_Ewa.CommandUIManager._getMismatchString$p = function _Ewa_CommandUIManager$_getMismatchString$p$st(exceedingBefore, exceedingAfter) {
    if (exceedingBefore.length > 0 || exceedingAfter.length > 0) {
        return String.format('Before: [{0}], After: [{1}]', exceedingBefore.join(','), exceedingAfter.join(','));
    }
    return '';
}
_Ewa.CommandUIManager._getDictionaryMismatchInternal$p = function _Ewa_CommandUIManager$_getDictionaryMismatchInternal$p$st(dictionaryToCheck, dictionaryReference, prefix) {
    var exceeding = [];
    var $$dict_6 = dictionaryToCheck;
    for (var $$key_7 in $$dict_6) {
        var entry = { key: $$key_7, value: $$dict_6[$$key_7] };
        var entryKey = entry.key;
        if (!((entryKey) in dictionaryReference)) {
            Array.add(exceeding, entryKey.replace(prefix, ''));
        }
    }
    return exceeding;
}
_Ewa.CommandUIManager._getGalleryMismatchInternal$p = function _Ewa_CommandUIManager$_getGalleryMismatchInternal$p$st(galleriesToCheck, galleriesReference) {
    var exceeding = [];
    for (var $$arr_3 = galleriesToCheck, $$len_4 = $$arr_3.length, $$idx_5 = 0; $$idx_5 < $$len_4; ++$$idx_5) {
        var gallerySectionDataToCheck = $$arr_3[$$idx_5];
        var galleryFound = false;
        for (var $$arr_8 = galleriesReference, $$len_9 = $$arr_8.length, $$idx_A = 0; $$idx_A < $$len_9; ++$$idx_A) {
            var gallerySectionDataReference = $$arr_8[$$idx_A];
            if (gallerySectionDataToCheck.galleryId === gallerySectionDataReference.galleryId && gallerySectionDataToCheck.sectionId === gallerySectionDataReference.sectionId) {
                galleryFound = true;
                break;
            }
        }
        if (!galleryFound) {
            Array.add(exceeding, gallerySectionDataToCheck.galleryId);
        }
    }
    return exceeding;
}
_Ewa.CommandUIManager.prototype = {
    _theStandaloneRoot$p$2: null,
    _asyncMethodUpdateContext$p$2: null,
    
    get_theStandaloneRoot: function _Ewa_CommandUIManager$get_theStandaloneRoot$in() {
        return this._getTheStandaloneRoot$p$2();
    },
    
    get_cuiControlManager: function _Ewa_CommandUIManager$get_cuiControlManager$in() {
        return this._getTheStandaloneRoot$p$2();
    },
    
    _$$pf_CommandUIElement$p$2: null,
    
    get_commandUIElement: function _Ewa_CommandUIManager$get_commandUIElement$in() {
        return this._$$pf_CommandUIElement$p$2;
    },
    
    set_commandUIElement: function _Ewa_CommandUIManager$set_commandUIElement$in(value) {
        this._$$pf_CommandUIElement$p$2 = value;
        return value;
    },
    
    _$$pf_TopRowControls$p$2: null,
    
    get_topRowControls: function _Ewa_CommandUIManager$get_topRowControls$in() {
        return this._$$pf_TopRowControls$p$2;
    },
    
    set_topRowControls: function _Ewa_CommandUIManager$set_topRowControls$in(value) {
        this._$$pf_TopRowControls$p$2 = value;
        return value;
    },
    
    _$$pf_RootCommandUIElement$p$2: null,
    
    get_rootCommandUIElement: function _Ewa_CommandUIManager$get_rootCommandUIElement$in() {
        return this._$$pf_RootCommandUIElement$p$2;
    },
    
    set_rootCommandUIElement: function _Ewa_CommandUIManager$set_rootCommandUIElement$in(value) {
        this._$$pf_RootCommandUIElement$p$2 = value;
        return value;
    },
    
    get_rootElement: function _Ewa_CommandUIManager$get_rootElement$in() {
        return this.get_rootCommandUIElement();
    },
    
    get_canReceiveFocus: function _Ewa_CommandUIManager$get_canReceiveFocus$in() {
        return true;
    },
    
    _$$pf_IsGenerated$p$2: false,
    
    get_isGenerated: function _Ewa_CommandUIManager$get_isGenerated$in() {
        return this._$$pf_IsGenerated$p$2;
    },
    
    getNamingIdConcatString: function _Ewa_CommandUIManager$getNamingIdConcatString$in(elementSuffix) {
        return this._$$pf_NamingIdPrefix$p$2 + elementSuffix;
    },
    
    _$$pf_NamingIdPrefix$p$2: null,
    
    get_namingIdPrefix: function _Ewa_CommandUIManager$get_namingIdPrefix$in() {
        return this._$$pf_NamingIdPrefix$p$2;
    },
    
    _$$pf_EwaControl$p$2: null,
    
    get_ewaControl: function _Ewa_CommandUIManager$get_ewaControl$in() {
        return this._$$pf_EwaControl$p$2;
    },
    
    _$$pf_FileMenuManager$p$2: null,
    
    get_fileMenuManager: function _Ewa_CommandUIManager$get_fileMenuManager$in() {
        return this._$$pf_FileMenuManager$p$2;
    },
    
    set_fileMenuManager: function _Ewa_CommandUIManager$set_fileMenuManager$in(value) {
        this._$$pf_FileMenuManager$p$2 = value;
        return value;
    },
    
    _$$pf_CommandUIJSON$p$2: null,
    
    get_commandUIJSON: function _Ewa_CommandUIManager$get_commandUIJSON$in() {
        return this._$$pf_CommandUIJSON$p$2;
    },
    
    _$$pf_PreviousFocusSetOnCommandUI$p$2: false,
    
    get_previousFocusSetOnCommandUI: function _Ewa_CommandUIManager$get_previousFocusSetOnCommandUI$in() {
        return this._$$pf_PreviousFocusSetOnCommandUI$p$2;
    },
    
    set_previousFocusSetOnCommandUI: function _Ewa_CommandUIManager$set_previousFocusSetOnCommandUI$in(value) {
        this._$$pf_PreviousFocusSetOnCommandUI$p$2 = value;
        return value;
    },
    
    _$$pf_CommandUIFeatureRootUsers$p$2: null,
    
    get_commandUIFeatureRootUsers: function _Ewa_CommandUIManager$get_commandUIFeatureRootUsers$in() {
        return this._$$pf_CommandUIFeatureRootUsers$p$2;
    },
    
    set_commandUIFeatureRootUsers: function _Ewa_CommandUIManager$set_commandUIFeatureRootUsers$in(value) {
        this._$$pf_CommandUIFeatureRootUsers$p$2 = value;
        return value;
    },
    
    _$$pf_LastKeyboardClickedElement$p$2: null,
    
    get_lastKeyboardClickedElement: function _Ewa_CommandUIManager$get_lastKeyboardClickedElement$in() {
        return this._$$pf_LastKeyboardClickedElement$p$2;
    },
    
    set_lastKeyboardClickedElement: function _Ewa_CommandUIManager$set_lastKeyboardClickedElement$in(value) {
        this._$$pf_LastKeyboardClickedElement$p$2 = value;
        return value;
    },
    
    _$$pf_BrowserBehaviorSuppressor$p$2: null,
    
    dispose: function _Ewa_CommandUIManager$dispose$in() {
        Diag.ULS.sendTraceTag(42501061, 0, 50, 'CommandUIManager::Dispose is called');
        if (this._$$pf_EwaControl$p$2) {
            _Ewa.KeyboardAccessibleSectionRegistryExtensions.keyboardAccessibleSectionRegistry(this._$$pf_EwaControl$p$2).removeSection(this);
        }
        System.IDisposableExtensions.safeDisposeArray([ this._asyncMethodUpdateContext$p$2, this._$$pf_BrowserBehaviorSuppressor$p$2 ]);
        if (this._$$pf_TopRowControls$p$2) {
            Common.CuiHelper.disposeTopRowControls(this._$$pf_TopRowControls$p$2);
        }
        this._theStandaloneRoot$p$2 = null;
        this._$$pf_TopRowControls$p$2 = null;
        this._$$pf_EwaControl$p$2 = null;
        if (this.get_rootCommandUIElement()) {
            _Ewa.DOMElementExtensions.removeElementFromParentNode(this.get_rootCommandUIElement().firstChild);
            this.set_rootCommandUIElement(null);
        }
        var focusManager = Common.AFrameworkApplication.get_activeFrame().get_theFocusManager();
        if (focusManager) {
            focusManager.removeScope(this.get_sectionName());
        }
        _Ewa.ExplicitDisposable.prototype.dispose.call(this);
    },
    
    addFeatureRootUser: function _Ewa_CommandUIManager$addFeatureRootUser$in(featureRootUser) {
    },
    
    removeFeatureRootUser: function _Ewa_CommandUIManager$removeFeatureRootUser$in(featureRootUser) {
    },
    
    _getCommandIdWithoutPrefix$p$2: function _Ewa_CommandUIManager$_getCommandIdWithoutPrefix$p$2$in(controlId) {
        if (!isNullOrUndefined(controlId) && controlId.startsWith(this._$$pf_NamingIdPrefix$p$2)) {
            return controlId.substr(this._$$pf_NamingIdPrefix$p$2.length, controlId.length);
        }
        return controlId;
    },
    
    executeRootCommand: function _Ewa_CommandUIManager$executeRootCommand$in(commandName, commandParams, commandSqmInfo, actionResultCallback, telemetryParams) {
        _Ewa.HelperMethods.verifyStringArgument(commandName, 'commandName');
        if (!this._$$pf_EwaControl$p$2) {
            Diag.ULS.sendTraceTag(40186015, 0, 15, 'EwaControl == null - dispose might have been already called');
            return false;
        }
        var commandHandlerManager = this._$$pf_EwaControl$p$2.get_commandHandlerManager();
        if (commandParams && commandSqmInfo && commandSqmInfo.InvocationMethod !== -1 && commandSqmInfo.InvocationMethod) {
            var legacyId = this._getCommandIdWithoutPrefix$p$2(commandParams['LegacyId']);
            var parentMenuId = commandParams['ParentMenuId'];
            if (isNullOrUndefined(parentMenuId)) {
                parentMenuId = this._getCommandIdWithoutPrefix$p$2(commandParams['MenuId']);
            }
            var controlId = commandParams['SqmControlId'];
            if (isNullOrUndefined(controlId)) {
                controlId = this._getCommandIdWithoutPrefix$p$2(commandParams['SourceControlId']);
            }
            if (!isNullOrUndefined(controlId) || !isNullOrUndefined(parentMenuId)) {
                CommandUI.Root.raiseSQMEvent(new CommandUI.Root.SQMEventArgs(controlId, legacyId, parentMenuId, commandName, Date.now(), commandSqmInfo));
            }
        }
        var res;
        if (_Ewa.CoreStaticMethods.isPopulateCommand(commandName)) {
            res = this._handlePopulateCommand$p$2(commandName, commandParams);
        }
        else if (_Ewa.CoreStaticMethods.isQueryCommand(commandName)) {
            res = this.handleQueryCommand(commandName, commandParams);
        }
        else {
            var t;
            t = commandHandlerManager.handleRibbonCommand(new _Ewa.RibbonCommandInfo(_Ewa.CommandUIManager.ribbonCommandFromId(commandName), commandSqmInfo.InvocationMethod, this._$$pf_EwaControl$p$2.get_frameMode(), commandSqmInfo.CommandLocation, commandSqmInfo.CommandTabName), commandParams, null);
            res = !_Ewa.BaseTaskExtensions.isFaultedOrCanceled(t) && (t.get_status() !== 6 || t.get_result());
        }
        if (actionResultCallback) {
            actionResultCallback((res) ? 32 : 8);
        }
        return res;
    },
    
    isRootCommandEnabled: function _Ewa_CommandUIManager$isRootCommandEnabled$in(commandName, properties) {
        if (!this._$$pf_EwaControl$p$2) {
            Diag.ULS.sendTraceTag(42501062, 0, 15, 'EwaControl == null - dispose might have been already called. Command name: ({0})', (!commandName) ? 'null' : commandName);
            return false;
        }
        if (!commandName) {
            return true;
        }
        var commandHandlerManager = this._$$pf_EwaControl$p$2.get_commandHandlerManager();
        var command = _Ewa.CommandUIManager.ribbonCommandFromId(commandName);
        var enabled = _Ewa.CoreStaticMethods.isPopulateCommand(commandName) || !commandHandlerManager.isValid(command, null, null);
        var isCommandEnabled = this.isCommandEnabled(command, enabled);
        if (this._$$pf_EwaControl$p$2.isServerFeatureEnabled(619) && commandName === '1402209562') {
            if (isCommandEnabled && !isNullOrUndefined(properties)) {
                return !commandHandlerManager.isValid(command, null, properties);
            }
        }
        return isCommandEnabled;
    },
    
    updateOpenMenu: function _Ewa_CommandUIManager$updateOpenMenu$in(menuId) {
        return false;
    },
    
    updateControlView: function _Ewa_CommandUIManager$updateControlView$in(controlId, resizeHeaders) {
    },
    
    setFocusOnSection: function _Ewa_CommandUIManager$setFocusOnSection$in(forward, alreadyFocused) {
        if (alreadyFocused && !(!!(forward ^ this._$$pf_PreviousFocusSetOnCommandUI$p$2))) {
            return false;
        }
        var setRibbon = true;
        if (!!(alreadyFocused ^ forward)) {
            setRibbon = !this.trySetFocus($get('sw_bar', this.get_rootCommandUIElement()), false);
            if (!forward && this._$$pf_PreviousFocusSetOnCommandUI$p$2) {
                return this._$$pf_PreviousFocusSetOnCommandUI$p$2 = false;
            }
        }
        if (this._$$pf_PreviousFocusSetOnCommandUI$p$2 = setRibbon) {
            return this.setFocusOnCommandUIBar();
        }
        return true;
    },
    
    belongsToSection: function _Ewa_CommandUIManager$belongsToSection$in(candidate) {
        return _Ewa.CommandUIManager.belongsToCommandUIElement((this).get_rootElement(), candidate);
    },
    
    getPeoplesWellDefaultControlSettings: function _Ewa_CommandUIManager$getPeoplesWellDefaultControlSettings$in(imageSingleUserCollabGlyph_16x16x32_ClusterPath, imageSingleUserCollabGlyph_16x16x32_CssName, imageSingleUserCollabGlyph_32x32x32_ClusterPath, imageSingleUserCollabGlyph_32x32x32_CssName, imageMultipleUserCollabGlyph_16x16x32_ClusterPath, imageMultipleUserCollabGlyph_16x16x32_CssName) {
        return Common.CuiHelper.getPeoplesWellDefaultControlSettings(imageSingleUserCollabGlyph_16x16x32_ClusterPath, imageSingleUserCollabGlyph_16x16x32_CssName, imageSingleUserCollabGlyph_32x32x32_ClusterPath, imageSingleUserCollabGlyph_32x32x32_CssName, imageMultipleUserCollabGlyph_16x16x32_ClusterPath, imageMultipleUserCollabGlyph_16x16x32_CssName, '', '');
    },
    
    handleFocusLost: function _Ewa_CommandUIManager$handleFocusLost$in() {
    },
    
    handleFocusGained: function _Ewa_CommandUIManager$handleFocusGained$in() {
    },
    
    logVisibilityMismatch: function _Ewa_CommandUIManager$logVisibilityMismatch$in() {
    },
    
    handleQueryCommand: function _Ewa_CommandUIManager$handleQueryCommand$in(commandName, commandParams) {
        return false;
    },
    
    isCommandEnabled: function _Ewa_CommandUIManager$isCommandEnabled$in(command, enabled) {
        return enabled;
    },
    
    trySetFocus: function _Ewa_CommandUIManager$trySetFocus$in(element, alreadyFocused) {
        if (!alreadyFocused && element) {
            _Ewa.DOMElementExtensions.setFocus(element, false);
            return true;
        }
        return false;
    },
    
    subscribeToSelectionEvents: function _Ewa_CommandUIManager$subscribeToSelectionEvents$in() {
        var grid = _Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2);
        if (grid) {
            grid.add_currentSelectionModeChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            grid.get_selectionManager().add_activeCellChanged(this.$$d_onActiveCellChanged);
        }
    },
    
    unsubscribeToSelectionEvents: function _Ewa_CommandUIManager$unsubscribeToSelectionEvents$in() {
        var grid = _Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2);
        if (grid) {
            grid.remove_currentSelectionModeChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            grid.get_selectionManager().remove_activeCellChanged(this.$$d_onActiveCellChanged);
        }
    },
    
    attachCommandUIControlInternal: function _Ewa_CommandUIManager$attachCommandUIControlInternal$in() {
        var elementSuffix = this.get_commandUISuffix();
        if (this._$$pf_CommandUIElement$p$2 = document.getElementById(this.getNamingIdConcatString(elementSuffix))) {
            _Ewa.ULS.debugSendTraceTag(3242191, 0, 50, 'CommandUIManager.AttachCommandUIControlInternal: CommandUI Generation Begin. SectionName: {0}', this.get_sectionName());
            this._$$pf_IsGenerated$p$2 = this.generateAndAttachCommandUIControl();
            if (this._$$pf_IsGenerated$p$2) {
                _Ewa.KeyboardAccessibleSectionRegistryExtensions.keyboardAccessibleSectionRegistry(this._$$pf_EwaControl$p$2).registerSection(this);
            }
        }
    },
    
    updateFromSelectionHighlight: function _Ewa_CommandUIManager$updateFromSelectionHighlight$in() {
    },
    
    onActiveCellChanged: function _Ewa_CommandUIManager$onActiveCellChanged$in(sender, e) {
        this.updateFromSelectionHighlight();
        this.pollForStateAndUpdateInternalAsync();
    },
    
    pollForStateAndUpdateInternalAsync: function _Ewa_CommandUIManager$pollForStateAndUpdateInternalAsync$in(sender, args) {
        var throttleTimeForPollforStateAndUpdateInMs = this._$$pf_EwaControl$p$2.get_bootstrapContext().ThrottleTimeForPollforStateAndUpdateInMs;
        _Ewa.ULS.debugSendTraceTag(3242187, 0, 50, 'CommandUIManager.PollForStateAndUpdateInternal: Scheduled/restarted PollForStateAndUpdateAsync');
        this._asyncMethodUpdateContext$p$2 = _Ewa.AsyncMethodContext.createOrRestart(this.$$d_pollForStateAndUpdate, throttleTimeForPollforStateAndUpdateInMs, _Ewa.AsyncMethodName.commandUIManagerPollForStateAndUpdate, this._asyncMethodUpdateContext$p$2);
    },
    
    setFocusOnCommandUIBar: function _Ewa_CommandUIManager$setFocusOnCommandUIBar$in() {
        return true;
    },
    
    attachCommandUIKeyEvents: function _Ewa_CommandUIManager$attachCommandUIKeyEvents$in() {
        Common.KeyInputManager.get_instance().registerHandler('keydown', this._$$pf_CommandUIElement$p$2, this.$$d__onKeyDown$p$2);
        Common.KeyInputManager.get_instance().registerHandler('keyup', this._$$pf_CommandUIElement$p$2, this.$$d__onKeyUp$p$2);
    },
    
    _handlePopulateCommand$p$2: function _Ewa_CommandUIManager$_handlePopulateCommand$p$2$in(commandName, commandParams) {
        return this._$$pf_EwaControl$p$2.get_commandHandlerManager().handlePopulateCommand(commandName, commandParams);
    },
    
    _getTheStandaloneRoot$p$2: function _Ewa_CommandUIManager$_getTheStandaloneRoot$p$2$in() {
        return this._theStandaloneRoot$p$2 || (this._theStandaloneRoot$p$2 = this._createStandaloneRoot$p$2());
    },
    
    _createStandaloneRoot$p$2: function _Ewa_CommandUIManager$_createStandaloneRoot$p$2$in() {
        var $$t_2;
        var props = ($$t_2 = new CommandUI.StandaloneRootProperties(), $$t_2.TextDirection = (Common.AFrameworkApplication.get_isRtl()) ? 'rtl' : 'ltr', $$t_2.ImageDownArrow = _Ewa.ClientHostingPlatform.getClusterUri(0), $$t_2.ImageSideArrow = _Ewa.ClientHostingPlatform.getClusterUri(1), $$t_2.ImageCheckMark = _Ewa.ClientHostingPlatform.getClusterUri(0), $$t_2.ImageUncheckMark = _Ewa.ClientHostingPlatform.getClusterUri(0), $$t_2.ImageDownArrow8by8 = _Ewa.ClientHostingPlatform.getClusterUri(0), $$t_2.ImageDownArrowClass = 'ewaboot_SplitButtonArrow', $$t_2.ImageSideArrowClass = 'ewaboot_SubmenuFlyoutArrow', $$t_2.ImageCheckMarkClass = 'ewaboot_CheckboxCheckedGrey16', $$t_2.ImageUncheckMarkClass = 'ewaboot_CheckboxUncheckedGrey16', $$t_2.ImageDownArrow8by8Class = 'ewaboot_SplitButtonArrow_8X8X32', $$t_2);
        var $$t_3;
        var standaloneRoot = ($$t_3 = new CommandUI.StandaloneRoot('TheStandaloneRoot', props), $$t_3.set_rootUser(this), $$t_3);
        standaloneRoot.refresh();
        return standaloneRoot;
    },
    
    _commandUIScopeSetFocus$p$2: function _Ewa_CommandUIManager$_commandUIScopeSetFocus$p$2$in(previousScope, nextScope) {
        this.setFocusOnCommandUIBar();
    },
    
    _onKeyDown$p$2: function _Ewa_CommandUIManager$_onKeyDown$p$2$in(ev) {
        this._$$pf_LastKeyboardClickedElement$p$2 = null;
        switch (ev.innerEvent.keyCode) {
            case 9:
                var focusableElements = this._$$pf_CommandUIElement$p$2.querySelectorAll('input,button,select,submit,a,textarea');
                var firstFocusableElement = _Ewa.DOMElementExtensions.getFirstFocusableElement(focusableElements);
                var lastFocusableElement = _Ewa.DOMElementExtensions.getLastFocusableElement(focusableElements);
                return _Ewa.DOMElementExtensions.setFocusCyclicTabOrder(ev.innerEvent, firstFocusableElement, lastFocusableElement);
            case 32:
                this._$$pf_LastKeyboardClickedElement$p$2 = ev.innerEvent.target;
                break;
        }
        return false;
    },
    
    _onKeyUp$p$2: function _Ewa_CommandUIManager$_onKeyUp$p$2$in(ev) {
        switch (ev.innerEvent.keyCode) {
            case 9:
                this._$$pf_LastKeyboardClickedElement$p$2 = ev.innerEvent.target;
                break;
        }
        return false;
    }
}


_Ewa._contextualRibbonGroup = function _Ewa__contextualRibbonGroup(ewaControl, ribbonManager, contextualGroupId, homeTabId, selectionModesToShowContextualGroup, ribbonTab, tabsIds) {
    this.$$d__shouldActivateContextualTab$p$0 = Function.createDelegate(this, this._shouldActivateContextualTab$p$0);
    this.ewaControl = ewaControl;
    this._ribbonManager$p$0 = ribbonManager;
    this._contextualGroupId$p$0 = contextualGroupId;
    this._homeTabId$p$0 = homeTabId;
    this._selectionModes$p$0 = selectionModesToShowContextualGroup;
    this._tabsIds$p$0 = tabsIds;
    this._contextualGroupVisible$p$0 = false;
    this._ribbonContextualTab$p$0 = ribbonTab;
    this._ribbonManager$p$0.add_activateContextualTabOnObjectCreation(this.$$d__shouldActivateContextualTab$p$0);
    if (ewaControl.isServerFeatureEnabled(434)) {
        this._contextualGroupVisible$p$0 = true;
    }
}
_Ewa._contextualRibbonGroup.createContextualRibbonGroup = function _Ewa__contextualRibbonGroup$createContextualRibbonGroup$st(ewaControl, ribbonManager, contextualGroupId, homeTabId, selectionModesToShowContextualGroup, ribbonTab) {
    var tabsIds = [];
    for (var $$pai_7 = 6; $$pai_7 < arguments.length; ++$$pai_7) {
        tabsIds[$$pai_7 - 6] = arguments[$$pai_7];
    }
    return new _Ewa._contextualRibbonGroup(ewaControl, ribbonManager, contextualGroupId, homeTabId, selectionModesToShowContextualGroup, ribbonTab, tabsIds);
}
_Ewa._contextualRibbonGroup.prototype = {
    activateCurrentRibbonTab: false,
    ewaControl: null,
    _ribbonManager$p$0: null,
    _contextualGroupId$p$0: null,
    _homeTabId$p$0: null,
    _selectionModes$p$0: null,
    _tabsIds$p$0: null,
    _contextualGroupElement$p$0: null,
    _contextualGroupVisible$p$0: false,
    _ribbonContextualTab$p$0: 0,
    
    get_visible: function _Ewa__contextualRibbonGroup$get_visible$in() {
        if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            Common.Debug.assertNotReachedStringTag('ContextualRibbonGroup.Visible shouldn\'t be used for React Ribbon', 0);
            return false;
        }
        return this._contextualGroupVisible$p$0;
    },
    
    set_visible: function _Ewa__contextualRibbonGroup$set_visible$in(value) {
        if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            Common.Debug.assertNotReachedStringTag('ContextualRibbonGroup.Visible shouldn\'t be used for React Ribbon', 0);
            return value;
        }
        if (value !== this._contextualGroupVisible$p$0 && this._ribbonManager$p$0._ribbonUser$p$3) {
            _Ewa.ULS.debugSendTraceTag(24974549, 0, 100, 'ContextualRibbonGroup.contextualGroupVisible: setting {0} group visibility to {1}', this._contextualGroupId$p$0, value);
            if (!value && this.isContextualTabSelected()) {
                this._ribbonManager$p$0._ribbonUser$p$3.activateRibbonTab(this._homeTabId$p$0);
            }
            if (!this.get__contextualGroupElement$p$0()) {
                return value;
            }
            this._contextualGroupVisible$p$0 = value;
            _Ewa.DOMElementExtensions.setVisible(this._contextualGroupElement$p$0, value, true);
            if (this._contextualGroupVisible$p$0) {
                this.selectDefaultTab();
            }
            if (value && this._contextualGroupId$p$0.endsWith('Ribbon.TableToolsGroup')) {
                Diag.ULS.sendTraceTag(41461399, 0, 50, 'Setting Contextual group {0} visibility to {1}', this._contextualGroupId$p$0, value);
            }
        }
        return value;
    },
    
    get__contextualGroupElement$p$0: function _Ewa__contextualRibbonGroup$get__contextualGroupElement$p$0$in() {
        if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            Common.Debug.assertNotReachedStringTag('ContextualRibbonGroup.ContextualGroupElement shouldn\'t be used for React Ribbon', 0);
            return null;
        }
        return this._contextualGroupElement$p$0 || (this._contextualGroupElement$p$0 = document.getElementById(this._contextualGroupId$p$0));
    },
    
    showIfNeeded: function _Ewa__contextualRibbonGroup$showIfNeeded$in() {
        var shouldShowContextualTab = this.shouldShowContextualDefaultTab();
        if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            if (shouldShowContextualTab && shouldShowContextualTab !== this._contextualGroupVisible$p$0) {
                this.selectDefaultTab();
            }
            this._contextualGroupVisible$p$0 = shouldShowContextualTab;
        }
        else {
            this.set_visible(shouldShowContextualTab);
        }
    },
    
    selectDefaultTab: function _Ewa__contextualRibbonGroup$selectDefaultTab$in() {
        if ((!this._ribbonContextualTab$p$0) || this.activateCurrentRibbonTab) {
            this._triggerTabSelection$p$0();
            this.activateCurrentRibbonTab = false;
        }
    },
    
    shouldShowContextualDefaultTab: function _Ewa__contextualRibbonGroup$shouldShowContextualDefaultTab$in() {
        var commandSelectionMode = this.ewaControl.get_commandHandlerManager().getCurrentSelectionMode();
        return Array.indexOf(this._selectionModes$p$0, commandSelectionMode) >= 0;
    },
    
    isContextualTabSelected: function _Ewa__contextualRibbonGroup$isContextualTabSelected$in() {
        return Array.indexOf(this._tabsIds$p$0, this._ribbonManager$p$0._ribbonUser$p$3.get_selectedTabId()) >= 0;
    },
    
    dispose: function _Ewa__contextualRibbonGroup$dispose$in() {
        this._ribbonManager$p$0.remove_activateContextualTabOnObjectCreation(this.$$d__shouldActivateContextualTab$p$0);
    },
    
    _shouldActivateContextualTab$p$0: function _Ewa__contextualRibbonGroup$_shouldActivateContextualTab$p$0$in(sender, e) {
        this.activateCurrentRibbonTab = (this._ribbonContextualTab$p$0 === e.get_ribbonContextualTab());
    },
    
    _triggerTabSelection$p$0: function _Ewa__contextualRibbonGroup$_triggerTabSelection$p$0$in() {
        if (this._ribbonManager$p$0._ribbonUser$p$3) {
            this._ribbonManager$p$0._ribbonUser$p$3.activateRibbonTab(this._tabsIds$p$0[0]);
        }
    }
}


_Ewa.EwaCuiDataSource = function _Ewa_EwaCuiDataSource(jsonData, namingContainerIdPrefix) {
    var ewaControlSpecificJSON = jsonData.replace(new RegExp('NamingContainerPrefix_', 'g'), namingContainerIdPrefix);
    this._$$pf_JSONData$p$0 = Sys.Serialization.JavaScriptSerializer.deserialize(_Ewa.EwaCuiDataSource._applyImageClusterSubstitutions$p(ewaControlSpecificJSON));
}
_Ewa.EwaCuiDataSource._applyImageClusterSubstitutions$p = function _Ewa_EwaCuiDataSource$_applyImageClusterSubstitutions$p$st(jsonData) {
    if (!_Ewa.StringExtensions.isNullOrEmpty(jsonData)) {
        var clusters = _Ewa.ClientHostingPlatform.get_current().get_imageClusters();
        for (var i = 0, length = clusters.length; i < length; i++) {
            if (!_Ewa.StringExtensions.isNullOrEmpty(clusters[i].SubstitutionToken)) {
                var regEx = _Ewa.EwaDictionary.tryGetValue(_Ewa.EwaCuiDataSource._clusterRegularExpressions$p, clusters[i].ImageName, null);
                if (!regEx) {
                    regEx = new RegExp(clusters[i].SubstitutionToken, 'g');
                    _Ewa.EwaCuiDataSource._clusterRegularExpressions$p[clusters[i].ImageName] = regEx;
                }
                jsonData = jsonData.replace(regEx, clusters[i].ImagePath);
            }
        }
    }
    return jsonData;
}
_Ewa.EwaCuiDataSource.prototype = {
    _$$pf_JSONData$p$0: null,
    
    get_jsonData: function _Ewa_EwaCuiDataSource$get_jsonData$in() {
        return this._$$pf_JSONData$p$0;
    },
    
    runQuery: function _Ewa_EwaCuiDataSource$runQuery$in(query) {
        switch (query.queryType) {
            case 1:
            case 4:
            case 2:
                var dqr = new CommandUI.DataQueryResult();
                dqr.success = true;
                dqr.id = query.id;
                dqr.contextData = query.data;
                dqr.queryData = this._$$pf_JSONData$p$0;
                query.handler(dqr);
                break;
            default:
                Diag.ULS.debugAssertTag(1635150647, 0, false, 'EwaCuiDataSource.RunQuery: DataQueryType {0} is NYI', query.queryType);
                break;
        }
    }
}


_Ewa.ExcelReactRootUser = function _Ewa_ExcelReactRootUser(ewaControl, defaultManager) {
    this._ewaControl$p$0 = ewaControl;
    this._commandUiManagers$p$0 = {};
    this._setDefaultCommandManager$p$0(defaultManager);
    if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
        this.setCommandUiManager(2, ewaControl.get_serviceRegistry().getService(_Ewa.RibbonManager, 391, false), false);
    }
    this.setCommandUiManager(19, new _Ewa.ContextMenuRootUser(this._ewaControl$p$0), false);
}
_Ewa.ExcelReactRootUser._getUILocationFromCommmandParams$p = function _Ewa_ExcelReactRootUser$_getUILocationFromCommmandParams$p$st(commandParams) {
    if (!commandParams) {
        return null;
    }
    return commandParams['UILocation'];
}
_Ewa.ExcelReactRootUser.prototype = {
    _ewaControl$p$0: null,
    _commandUiManagers$p$0: null,
    
    setCommandUiManager: function _Ewa_ExcelReactRootUser$setCommandUiManager$in(uiLocation, commandManager, setAsDefault) {
        Diag.ULS.debugAssertTag(590436430, 0, !!uiLocation, 'ExcelReactRootUser.SetCommandUiManager: UILocation.Unkown is not expected to be given a command manager.');
        this._commandUiManagers$p$0[(uiLocation).toString()] = commandManager;
        if (setAsDefault) {
            Diag.ULS.debugAssertTag(590436429, 0, !this._commandUiManagers$p$0[(0).toString()], 'ExcelReactRootUser.SetCommandUiManager: overriding an existing default command handler is unexpcted.');
            this._commandUiManagers$p$0[(0).toString()] = commandManager;
        }
    },
    
    isRootCommandEnabled: function _Ewa_ExcelReactRootUser$isRootCommandEnabled$in(commandName, commandParams) {
        var commandUiManager = this._getCommandManagerForUiLocation$p$0(_Ewa.ExcelReactRootUser._getUILocationFromCommmandParams$p(commandParams));
        if (!commandUiManager) {
            return false;
        }
        return commandUiManager.isRootCommandEnabled(commandName, commandParams);
    },
    
    executeRootCommand: function _Ewa_ExcelReactRootUser$executeRootCommand$in(commandName, commandParams, commandSqmInfo, actionResultCallback, telemetryParams) {
        var commandUiManager = this._getCommandManagerForUiLocation$p$0(_Ewa.ExcelReactRootUser._getUILocationFromCommmandParams$p(commandParams));
        if (!commandUiManager) {
            return false;
        }
        return commandUiManager.executeRootCommand(commandName, commandParams, commandSqmInfo, actionResultCallback, telemetryParams);
    },
    
    _getCommandManagerForUiLocation$p$0: function _Ewa_ExcelReactRootUser$_getCommandManagerForUiLocation$p$0$in(uiLocation) {
        if (!isNullOrUndefined(uiLocation)) {
            if (this._commandUiManagers$p$0[uiLocation]) {
                return this._commandUiManagers$p$0[uiLocation];
            }
            else {
                Diag.ULS.sendTraceTag(590436428, 0, 15, 'ExcelReactRootUser.GetCommandManagerForUiLocation: No command manager was set for UIlocation: {0}', uiLocation);
            }
        }
        var defaultCommandManager = this._getDefaultCommandManager$p$0();
        Diag.ULS.debugAssertTag(590436427, 0, !!defaultCommandManager, 'ExcelReactRootUser.GetCommandManagerForUiLocation: No default command manager was set, resulting in un processed command.');
        return defaultCommandManager;
    },
    
    _getDefaultCommandManager$p$0: function _Ewa_ExcelReactRootUser$_getDefaultCommandManager$p$0$in() {
        return this._commandUiManagers$p$0[(0).toString()];
    },
    
    _setDefaultCommandManager$p$0: function _Ewa_ExcelReactRootUser$_setDefaultCommandManager$p$0$in(commandManager) {
        this._commandUiManagers$p$0[(0).toString()] = commandManager;
    }
}


_Ewa.NamedObjectDropdownList = function _Ewa_NamedObjectDropdownList(dropdownList, ewaControl, isItemSortedByName, namedRangesOnly) {
    this.$$d_onNamedObjectsAdded = Function.createDelegate(this, this.onNamedObjectsAdded);
    this.$$d__onCleared$p$2 = Function.createDelegate(this, this._onCleared$p$2);
    this.$$d__onActiveNamedObjectChanged$p$2 = Function.createDelegate(this, this._onActiveNamedObjectChanged$p$2);
    _Ewa.NamedObjectDropdownList.initializeBase(this, [ dropdownList, true ]);
    _Ewa.HelperMethods.verifyArgumentNotNull(ewaControl, 'ewaControl');
    this._ewaControl$p$2 = ewaControl;
    this._isItemSortedByName$p$2 = isItemSortedByName;
    this._namedRangesOnly$p$2 = namedRangesOnly;
    this._ewaControl$p$2.get_namedObjects().add_activeItemChanged(this.$$d__onActiveNamedObjectChanged$p$2);
    this._ewaControl$p$2.get_namedObjects().add_cleared(this.$$d__onCleared$p$2);
    this._ewaControl$p$2.get_namedObjects().add_itemsAdded(this.$$d_onNamedObjectsAdded);
    this.populateList(this._ewaControl$p$2.get_namedObjects().get_items());
}
_Ewa.NamedObjectDropdownList.attach = function _Ewa_NamedObjectDropdownList$attach$st(ewaControl) {
    var list = null;
    var namingIdPrefix = ewaControl.get_namingContainerIdPrefix();
    var elementID = namingIdPrefix + 'novSelect';
    var novDropDownElement = document.createElement('span');
    novDropDownElement.id = namingIdPrefix + 'm_novDropDown';
    novDropDownElement.className = 'rmt-nov-cntr';
    novDropDownElement.innerHTML = String.format('\r\n<span class=\"rmt-nov-sel-lbl\" style=\"display:none\">{0}</span>\r\n<span><select ID={1} runat=\"server\" class=\"rmt-nov-sel\" style=\"display:none\"></select></span>\r\n', _Ewa.ClientStringManager.get_instance().getString(1050), elementID);
    var novDropDownContainer = document.getElementById(namingIdPrefix + 'ExcelWebPartHeroDock');
    novDropDownContainer.insertBefore(novDropDownElement, novDropDownContainer.firstChild);
    var dropDownSelect = _Ewa.DOMElementExtensions.getElementById(ewaControl.get_domElement(), elementID);
    Diag.ULS.debugAssertTag(1832019050, 9, !!dropDownSelect, 'NamedObjectDropdownList.Attach: The NOV drop-down is null in view mode.');
    if (ewaControl.get_namedObjects().get_count() > 0) {
        list = new _Ewa.NamedObjectDropdownList(dropDownSelect, ewaControl, false, false);
        dropDownSelect = list.get_selectElement();
    }
    _Ewa.NamedObjectDropdownList._setVisibility$p(dropDownSelect, ewaControl);
    return list;
}
_Ewa.NamedObjectDropdownList._setVisibility$p = function _Ewa_NamedObjectDropdownList$_setVisibility$p$st(dropDownSelect, ewaControl) {
    if (!dropDownSelect || !ewaControl) {
        return;
    }
    var associatedLabelElement = dropDownSelect.parentNode.previousSibling.previousSibling;
    Diag.ULS.debugAssertTag(1832019051, 9, !!associatedLabelElement, 'NamedObjectDropdownList.Attach: Could not find the associated label control.');
    var visible = ewaControl.get_sessionStateManager().get_isNamedObjectViewMode();
    if (!ewaControl.get_permissionSet().get_showVisibleItemButton()) {
        visible = false;
    }
    _Ewa.DOMElementExtensions.setVisible(dropDownSelect, visible, true);
    _Ewa.DOMElementExtensions.setVisible(associatedLabelElement, visible, true);
}
_Ewa.NamedObjectDropdownList._sortNamedObjects$p = function _Ewa_NamedObjectDropdownList$_sortNamedObjects$p$st(namedObjects) {
    namedObjects.sort(function(item1, item2) {
        return _Ewa.StringExtensions.compare((item1).get_name(), (item2).get_name(), true);
    });
    return namedObjects;
}
_Ewa.NamedObjectDropdownList._getNamedRanges$p = function _Ewa_NamedObjectDropdownList$_getNamedRanges$p$st(namedObjects) {
    var namedRanges = $$sc.Enumerable.toArray(_Ewa.ActiveItem, $$sc.Enumerable.where(_Ewa.ActiveItem, $$sc.Enumerable.asEnumerable(_Ewa.ActiveItem, namedObjects), function(namedObject) {
        return _Ewa.ActiveItemExtensions.isDisplayedInEditableNamedObjectDropdownList(namedObject);
    }));
    return namedRanges;
}
_Ewa.NamedObjectDropdownList._getFilteredNamedObjects$p = function _Ewa_NamedObjectDropdownList$_getFilteredNamedObjects$p$st(namedObjects) {
    var namedRanges = $$sc.Enumerable.toArray(_Ewa.ActiveItem, $$sc.Enumerable.where(_Ewa.ActiveItem, $$sc.Enumerable.asEnumerable(_Ewa.ActiveItem, namedObjects), function(namedObject) {
        return !_Ewa.ActiveItemExtensions.isNamedStringType(namedObject);
    }));
    return namedRanges;
}
_Ewa.NamedObjectDropdownList.prototype = {
    _ewaControl$p$2: null,
    _isItemSortedByName$p$2: false,
    _namedRangesOnly$p$2: false,
    _filteredNamedObjectItems$p$2: null,
    
    get_sheets: function _Ewa_NamedObjectDropdownList$get_sheets$in() {
        return this._ewaControl$p$2.get_sheets();
    },
    
    get_ewaControl: function _Ewa_NamedObjectDropdownList$get_ewaControl$in() {
        return this._ewaControl$p$2;
    },
    
    dispose: function _Ewa_NamedObjectDropdownList$dispose$in() {
        if (this._ewaControl$p$2.get_namedObjects()) {
            this._ewaControl$p$2.get_namedObjects().remove_activeItemChanged(this.$$d__onActiveNamedObjectChanged$p$2);
            this._ewaControl$p$2.get_namedObjects().remove_cleared(this.$$d__onCleared$p$2);
            this._ewaControl$p$2.get_namedObjects().remove_itemsAdded(this.$$d_onNamedObjectsAdded);
        }
        this._ewaControl$p$2 = null;
        _Ewa.ComboBox.prototype.dispose.call(this);
    },
    
    onClick: function _Ewa_NamedObjectDropdownList$onClick$in(e) {
        _Ewa.DomEventExtensions.stopBubbling(e, true);
        _Ewa.ComboBox.prototype.onClick.call(this, e);
    },
    
    onSelectionChanged: function _Ewa_NamedObjectDropdownList$onSelectionChanged$in(domEvent) {
        Diag.ULS.debugAssertTag(1832019052, 9, this.get_selectedIndex() >= 0, 'NamedObjectDropdownList.OnSelectionChanged: There is no selected element in the dropdown list.');
        if (this._filteredNamedObjectItems$p$2 && this.get_selectedIndex() >= 0 && this.get_selectedIndex() < this._filteredNamedObjectItems$p$2.length) {
            var selectedItem = this.get_selectedItem();
            if (selectedItem) {
                var onSelectionChangedGetItemByNameStopwatch = this._ewaControl$p$2.get_stopwatchBuilder().makeAndStartStopwatch('LoadResource', 'OnSelectionChangedGetItemByName');
                var namedObject = this._ewaControl$p$2.get_namedObjects().getItemByName(selectedItem.value);
                onSelectionChangedGetItemByNameStopwatch.stop();
                Diag.ULS.debugAssertTag(1832019053, 9, !!namedObject && namedObject.get_name() === this.get_selectedItem().value, 'NamedObjectDropdownList.OnSelectionChanged: The selected item in the list is not the same as the item with the same index in the NamedObjects collection.');
                if (namedObject) {
                    namedObject.activate(false);
                    _Ewa.InteractivityLoggerExtensions.interactivityLogger(this._ewaControl$p$2).reportOperation(_Ewa.OperationName.namedObjectDropdownListSelectionChanged, {}, null);
                }
            }
        }
        _Ewa.ComboBox.prototype.onSelectionChanged.call(this, domEvent);
    },
    
    _onActiveNamedObjectChanged$p$2: function _Ewa_NamedObjectDropdownList$_onActiveNamedObjectChanged$p$2$in(sender, e) {
        var selectElement = this.get_selectElement();
        if (!e.get_activeItem()) {
            selectElement.selectedIndex = -1;
        }
        else {
            var option = this.getItemByKey(e.get_activeItem().get_name());
            Diag.ULS.debugAssertTag(1832019054, 9, !!option, 'NamedObjectDropdownList.OnActiveNamedObjectChanged: Could not find a named object in the list with the name \'{0}\'.', e.get_activeItem().get_name());
            if (option) {
                option.selected = true;
            }
        }
    },
    
    _onCleared$p$2: function _Ewa_NamedObjectDropdownList$_onCleared$p$2$in(sender, e) {
        this.clear();
    },
    
    onNamedObjectsAdded: function _Ewa_NamedObjectDropdownList$onNamedObjectsAdded$in(sender, e) {
        this._clearExistingItemsFromList$p$2(e);
        if (e.get_items().length === 1) {
            var item = e.get_items()[0];
            this.addOption(Common.StringUtils.htmlEncode(item.get_name()), item.get_name(), item.get_active(), '');
        }
        else {
            this.populateList(e.get_items());
        }
    },
    
    _clearExistingItemsFromList$p$2: function _Ewa_NamedObjectDropdownList$_clearExistingItemsFromList$p$2$in(e) {
        var items = e.get_items();
        if (items && items.length > 0) {
            for (var $$arr_2 = items, $$len_3 = $$arr_2.length, $$idx_4 = 0; $$idx_4 < $$len_3; ++$$idx_4) {
                var activeItem = $$arr_2[$$idx_4];
                var item = this.getItemByKey(activeItem.get_name());
                if (item) {
                    this.removeItemInternal(item);
                }
            }
        }
    },
    
    populateList: function _Ewa_NamedObjectDropdownList$populateList$in(namedObjectItems) {
        this.startBatchAdd();
        try {
            this._filteredNamedObjectItems$p$2 = _Ewa.NamedObjectDropdownList._getFilteredNamedObjects$p(namedObjectItems);
            if (this._namedRangesOnly$p$2) {
                this._filteredNamedObjectItems$p$2 = _Ewa.NamedObjectDropdownList._getNamedRanges$p(this._filteredNamedObjectItems$p$2);
            }
            if (this._isItemSortedByName$p$2) {
                this._filteredNamedObjectItems$p$2 = _Ewa.NamedObjectDropdownList._sortNamedObjects$p(this._filteredNamedObjectItems$p$2);
            }
            for (var i = 0, length = this._filteredNamedObjectItems$p$2.length; i < length; i++) {
                var namedObject = this._filteredNamedObjectItems$p$2[i];
                this._addBatchedNamedObjectToComboBox$p$2(namedObject);
            }
        }
        finally {
            this.endBatchAdd();
        }
    },
    
    _addBatchedNamedObjectToComboBox$p$2: function _Ewa_NamedObjectDropdownList$_addBatchedNamedObjectToComboBox$p$2$in(namedObject) {
        var displayName = namedObject.get_name();
        var fullName = displayName;
        var title = null;
        if (displayName.length > 30) {
            displayName = displayName.substr(0, 30) + '...';
            title = fullName;
        }
        this.addBatchedItem(displayName, fullName, namedObject.get_active(), title);
    }
}


_Ewa.FileMenuManager = function _Ewa_FileMenuManager(ewaControl) {
    this._ewaControl$p$0 = ewaControl;
}
_Ewa.FileMenuManager.prototype = {
    _ewaControl$p$0: null,
    
    dispose: function _Ewa_FileMenuManager$dispose$in() {
        this._ewaControl$p$0 = null;
    },
    
    manageVisibilityForViewModeJewelButtons: function _Ewa_FileMenuManager$manageVisibilityForViewModeJewelButtons$in(trimmedIds) {
        var fileMenuControl = this._ewaControl$p$0.get_fileMenuOptions();
        var namingPrefix = this._ewaControl$p$0.get_namingContainerIdPrefix();
        if (this._ewaControl$p$0.get_sessionStateManager().get_permissionSet().get_inWebPart()) {
            trimmedIds[namingPrefix + 'JewelPrimary'] = true;
            trimmedIds[namingPrefix + 'JewelSecondary'] = true;
            this.manageVisibilityForWebPartJewelButtons(trimmedIds);
            return;
        }
        trimmedIds[namingPrefix + 'WebPartJewelMenu'] = true;
        var openInClient = !!(this._ewaControl$p$0.get_modeCapabilities() & 2) && !this._ewaControl$p$0.get_basicDocumentOptions().get(8);
        if (!openInClient) {
            trimmedIds[namingPrefix + 'Jewel.OpenInExcel'] = true;
        }
        if (!(this._ewaControl$p$0.get_modeCapabilities() & 64)) {
            trimmedIds[namingPrefix + 'Jewel.OpenInExcel'] = true;
            trimmedIds[namingPrefix + 'Jewel.Edit'] = true;
            Diag.ULS.sendTraceTag(39688224, 0, 50, 'FileMenuManager.ManageVisibilityForViewModeJewelButtons: ModeCapabilitied.Edit were trimmed.');
        }
        if (!(fileMenuControl & 16)) {
            trimmedIds[namingPrefix + 'Jewel.SaveACopy'] = true;
        }
        this._manageVisibilityForSharedJewelButtons$p$0(trimmedIds);
    },
    
    manageVisibilityForWebPartJewelButtons: function _Ewa_FileMenuManager$manageVisibilityForWebPartJewelButtons$in(trimmedIds) {
        var fileMenuControl = this._ewaControl$p$0.get_fileMenuOptions();
        var namingPrefix = this._ewaControl$p$0.get_namingContainerIdPrefix();
        if (!(fileMenuControl & 64)) {
            trimmedIds[namingPrefix + 'Jewel.WPDownloadCopy'] = true;
        }
        if (!this._ewaControl$p$0.get_printingEnabled()) {
            trimmedIds[namingPrefix + 'Jewel.WPPrint'] = true;
        }
        if (!(fileMenuControl & 65536)) {
            trimmedIds[namingPrefix + 'Jewel.WPReloadWorkbook'] = true;
        }
    },
    
    manageVisibilityForEditModeJewelButtons: function _Ewa_FileMenuManager$manageVisibilityForEditModeJewelButtons$in(trimmedIds) {
        var fileMenuControl = this._ewaControl$p$0.get_fileMenuOptions();
        var namingPrefix = this._ewaControl$p$0.get_namingContainerIdPrefix();
        var fullDocumentOptions = this._ewaControl$p$0.get_sessionStateManager().get_fullDocumentOptions();
        if (!(this._ewaControl$p$0.get_modeCapabilities() & 2)) {
            trimmedIds[namingPrefix + 'Jewel.ContinueInExcel'] = true;
        }
        if (this._ewaControl$p$0.isServerFeatureEnabled(33) || _Ewa.WorkbookContextExtensions.getFileNameExtension(this._ewaControl$p$0.get_workbookContext()).toLowerCase() === '.ods' || !(fileMenuControl & 64)) {
            trimmedIds[namingPrefix + 'Jewel.DownloadAsOds'] = true;
        }
        if (Common.AFrameworkApplication.get_isSkyDrive()) {
            if (this._ewaControl$p$0.isServerFeatureEnabled(766) && this._ewaControl$p$0.isServerFeatureEnabled(440)) {
                trimmedIds[namingPrefix + 'Jewel.PreviousVersions'] = true;
                Common.AFrameworkApplication.logFlightedSettingUsage('Microsoft.Office.Excel.Server.Flighting.OneDriveConsumerSharedVersionHistory');
                Diag.ULS.sendTraceTag(594399376, 0, 15, 'Excel external version history menu item for OneDriveConsummer trimmed.');
            }
            else {
                trimmedIds[namingPrefix + 'Jewel.VersionHistory'] = true;
                Diag.ULS.sendTraceTag(594399375, 0, 15, 'Excel shared version history menu item for OneDriveConsumer trimmed.');
            }
        }
        else if (!this._ewaControl$p$0.isVersionHistoryEnabled()) {
            trimmedIds[namingPrefix + 'Jewel.VersionHistory'] = true;
            Diag.ULS.sendTraceTag(594399374, 0, 15, 'Excel shared version history menu item trimmed.');
        }
        if (!Common.AFrameworkApplication.isRenameSupported() || !this._ewaControl$p$0.get_basicDocumentOptions().get(57) || !fullDocumentOptions.get(30)) {
            trimmedIds[namingPrefix + 'Jewel.RenameFileDialog'] = true;
        }
        this._trimAlternateControls$p$0(!(fileMenuControl & 8), 'Jewel.SaveAs', 'Jewel.SaveAsToOneDrive', 50, trimmedIds);
        this._trimAlternateControls$p$0(!(fileMenuControl & 8), 'Jewel.SaveAs', 'Jewel.SaveToSharePoint', 49, trimmedIds);
        this._manageVisibilityForSharedJewelButtons$p$0(trimmedIds);
        this._hideEditModeMenuSections$p$0(trimmedIds);
    },
    
    _manageVisibilityForSharedJewelButtons$p$0: function _Ewa_FileMenuManager$_manageVisibilityForSharedJewelButtons$p$0$in(trimmedIds) {
        var fileMenuControl = this._ewaControl$p$0.get_fileMenuOptions();
        var docHostInfo = this._ewaControl$p$0.get_workbookContext().FullDocumentInfo;
        var namingPrefix = this._ewaControl$p$0.get_namingContainerIdPrefix();
        if (!(fileMenuControl & 131072)) {
            trimmedIds[namingPrefix + 'Jewel.Embed'] = true;
        }
        if (!(fileMenuControl & 4)) {
            trimmedIds[namingPrefix + 'Jewel.Share'] = true;
        }
        if (!(fileMenuControl & 64)) {
            trimmedIds[namingPrefix + 'Jewel.DownloadCopy'] = true;
        }
        if (_Ewa.StringExtensions.isNullOrEmpty(docHostInfo.FileVersionUrl) && !Common.AFrameworkApplication.useFileVersionPostMessage) {
            trimmedIds[namingPrefix + 'Jewel.PreviousVersions'] = true;
        }
        if (!(fileMenuControl & 128)) {
            trimmedIds[namingPrefix + 'Jewel.GiveFeedback'] = true;
        }
        if (_Ewa.StringExtensions.isNullOrEmpty(docHostInfo.PrivacyUrl)) {
            trimmedIds[namingPrefix + 'Jewel.PrivacyStatement'] = true;
        }
        if (_Ewa.StringExtensions.isNullOrEmpty(docHostInfo.TermsOfUseUrl)) {
            trimmedIds[namingPrefix + 'Jewel.TermsOfUse'] = true;
        }
        if (!(fileMenuControl & 4194304)) {
            trimmedIds[namingPrefix + 'Jewel.Diagnostics'] = true;
        }
        if (!(fileMenuControl & 8388608)) {
            trimmedIds[namingPrefix + 'Jewel.TrustCenter'] = true;
        }
        if (!(fileMenuControl & 2097152)) {
            trimmedIds[namingPrefix + 'Jewel.TryO14'] = true;
            trimmedIds[namingPrefix + 'Jewel.TryOfficeFromViewer'] = true;
        }
        if (!(fileMenuControl & 8192)) {
            trimmedIds[namingPrefix + 'Jewel.TryOfficeForMacTrial'] = true;
            trimmedIds[namingPrefix + 'Jewel.TryOfficeForMacTrialFromViewer'] = true;
        }
        if (!(fileMenuControl & 2048)) {
            trimmedIds[namingPrefix + 'Jewel.Close'] = true;
        }
        if (!this._ewaControl$p$0.get_printingEnabled()) {
            trimmedIds[namingPrefix + 'faPrint'] = true;
        }
        if (!docHostInfo.ReportAbuseUrl) {
            trimmedIds[namingPrefix + 'Jewel.ReportAbuse'] = true;
        }
        if (!this._ewaControl$p$0.get_bootstrapContext().DocumentHostInfo.NewDocumentDestinationHost) {
            trimmedIds[namingPrefix + 'faNew'] = true;
        }
        if (!this._ewaControl$p$0.get_basicDocumentOptions().get(13)) {
            trimmedIds[namingPrefix + 'faOpen'] = true;
        }
        if (!this._ewaControl$p$0.get_bootstrapContext().DocumentHostInfo.NewDocumentDestinationHost && !this._ewaControl$p$0.get_basicDocumentOptions().get(13)) {
            trimmedIds[namingPrefix + 'faHome'] = true;
        }
        if (!docHostInfo.ReplyWithChangesUrl) {
            trimmedIds[namingPrefix + 'Jewel.ShareReplyWithChanges'] = true;
        }
        if (!this._ewaControl$p$0.isServerFeatureEnabled(589) || !_Ewa.BootstrapContextExtensions.isSet(this._ewaControl$p$0.get_bootstrapContext(), 31)) {
            trimmedIds[namingPrefix + 'Jewel.ChangeLocale'] = true;
        }
        if ((namingPrefix + 'Jewel.ChangeLocale') in trimmedIds) {
            trimmedIds[namingPrefix + 'faOptions'] = true;
        }
        this._hideSharedMenuSections$p$0(trimmedIds);
    },
    
    _hideEditModeMenuSections$p$0: function _Ewa_FileMenuManager$_hideEditModeMenuSections$p$0$in(trimmedIds) {
        var namingPrefix = this._ewaControl$p$0.get_namingContainerIdPrefix();
        if (((namingPrefix + 'Jewel.ContinueInExcel') in trimmedIds) && ((namingPrefix + 'Jewel.PreviousVersions') in trimmedIds) && ((namingPrefix + 'Jewel.SetReadOnlyRecommended') in trimmedIds)) {
            trimmedIds[namingPrefix + 'faInfo'] = true;
        }
        if (((namingPrefix + 'Jewel.SaveAs') in trimmedIds) && ((namingPrefix + 'Jewel.SaveAsToOneDrive') in trimmedIds) && ((namingPrefix + 'Jewel.RenameFileDialog') in trimmedIds) && ((namingPrefix + 'Jewel.DownloadCopy') in trimmedIds) && ((namingPrefix + 'Jewel.DownloadAsOds') in trimmedIds)) {
            trimmedIds[namingPrefix + 'faSaveAs'] = true;
        }
        if (((namingPrefix + 'Jewel.Share') in trimmedIds) && ((namingPrefix + 'Jewel.Embed') in trimmedIds) && ((namingPrefix + 'Jewel.ShareReplyWithChanges') in trimmedIds)) {
            trimmedIds[namingPrefix + 'faShare'] = true;
        }
    },
    
    _hideSharedMenuSections$p$0: function _Ewa_FileMenuManager$_hideSharedMenuSections$p$0$in(trimmedIds) {
        var namingPrefix = this._ewaControl$p$0.get_namingContainerIdPrefix();
        if (((namingPrefix + 'Jewel.Help') in trimmedIds) && ((namingPrefix + 'Jewel.AccessibilityHelp') in trimmedIds) && ((namingPrefix + 'Jewel.GiveFeedback') in trimmedIds) && ((namingPrefix + 'Jewel.ReportAbuse') in trimmedIds)) {
            trimmedIds[namingPrefix + 'faHelp'] = true;
        }
        if (((namingPrefix + 'Jewel.TryO14') in trimmedIds) && ((namingPrefix + 'Jewel.TryOfficeForMacTrial') in trimmedIds) && ((namingPrefix + 'Jewel.PrivacyStatement') in trimmedIds) && ((namingPrefix + 'Jewel.TrustCenter') in trimmedIds) && ((namingPrefix + 'Jewel.TermsOfUse') in trimmedIds) && ((namingPrefix + 'Jewel.Diagnostics') in trimmedIds)) {
            trimmedIds[namingPrefix + 'faAboutOffice'] = true;
        }
        if ((namingPrefix + 'Jewel.Close') in trimmedIds) {
            trimmedIds[namingPrefix + 'JewelSecondary'] = true;
        }
    },
    
    _trimAlternateControls$p$0: function _Ewa_FileMenuManager$_trimAlternateControls$p$0$in(controlShouldNotBeEnabled, firstControl, secondControl, docHostInfoOption, trimmedIds) {
        var namingPrefix = this._ewaControl$p$0.get_namingContainerIdPrefix();
        if (controlShouldNotBeEnabled) {
            trimmedIds[namingPrefix + firstControl] = true;
            trimmedIds[namingPrefix + secondControl] = true;
        }
        else {
            var basicDocumentOptions = this._ewaControl$p$0.get_basicDocumentOptions();
            trimmedIds[namingPrefix + ((basicDocumentOptions.get(docHostInfoOption)) ? firstControl : secondControl)] = true;
        }
    }
}


_Ewa.FloatieCommandHandlerFactory = function _Ewa_FloatieCommandHandlerFactory(ewa) {
    _Ewa.FloatieCommandHandlerFactory.initializeBase(this);
    this._$$pf_EwaControl$p$4 = ewa;
}
_Ewa.FloatieCommandHandlerFactory.prototype = {
    _$$pf_EwaControl$p$4: null,
    
    create: function _Ewa_FloatieCommandHandlerFactory$create$in() {
        var $$t_2 = this;
        _Ewa.TaskExtensions.cw(_Ewa.ClientHostingPlatform.loadScript(65, 4, false, false, 93, this.get_scriptLoadFlavor()), function(task) {
            $$t_2.raiseServiceCreatedEvent([ _Ewa._floatieManager.create($$t_2._$$pf_EwaControl$p$4) ]);
        }, this.get_cancelOnDisposeToken(), 3);
    }
}


_Ewa._floatieManager = function _Ewa__floatieManager(ewaControl, commandUIJSON) {
    this.$$d_getHiddenFloatieGroupsForSelection = Function.createDelegate(this, this.getHiddenFloatieGroupsForSelection);
    this.$$d_onFloatieDismissed = Function.createDelegate(this, this.onFloatieDismissed);
    _Ewa._floatieManager.initializeBase(this, [ ewaControl, 'floatieContainerDiv', commandUIJSON ]);
    ewaControl.get_commandHandlerManager().addCommandHandler(this, null);
    this.attachCommandUIControlInternal();
}
_Ewa._floatieManager.create = function _Ewa__floatieManager$create$st(ewa) {
    var floatieDiv = ewa.get_appFrameContainerElement().appendChild(document.createElement('div'));
    floatieDiv.id = ewa.get_namingContainerIdPrefix() + 'floatieContainerDiv';
    return new _Ewa._floatieManager(ewa, window.ewaFloatieJSON);
}
_Ewa._floatieManager.prototype = {
    _floatie$p$3: null,
    _showGroups$p$3: null,
    _registeredElementSelectionChangedEvent$p$3: false,
    _$$pf_IsFloatieActive$p$3: false,
    
    get_isFloatieActive: function _Ewa__floatieManager$get_isFloatieActive$in() {
        return this._$$pf_IsFloatieActive$p$3;
    },
    
    get_canReceiveFocus: function _Ewa__floatieManager$get_canReceiveFocus$in() {
        return true;
    },
    
    get_sectionName: function _Ewa__floatieManager$get_sectionName$in() {
        return 'Floatie';
    },
    
    get_commandUISuffix: function _Ewa__floatieManager$get_commandUISuffix$in() {
        return 'floatieContainerDiv';
    },
    
    shouldDisable: function _Ewa__floatieManager$shouldDisable$in(selectionMode, command) {
        return false;
    },
    
    executeCommand: function _Ewa__floatieManager$executeCommand$in(selectionMode, commandInfo, properties, data) {
        var commandData = $$as(_Ewa.ShowFloatieCommandData, properties['ShowFloatieCommandData']);
        Diag.ULS.debugAssertTag(18219398, 5, !!commandData, 'commandData shouldn\'t be null');
        if (commandData) {
            var clientPoint = commandData.get_eventArgs().get_clientPoint();
            var contextMenuRoot = null;
            if (commandData.get_contextMenuType() !== 'sheetOps') {
                var manager = _Ewa.ContextMenuExtensions.contextMenuManager(this._$$pf_EwaControl$p$2);
                if (manager) {
                    var cmt = commandData.get_contextMenuType();
                    contextMenuRoot = $$as(CommandUI.ContextMenuRoot, manager.getContextMenu(cmt).get_contextMenuRoot());
                }
            }
            this._showGroups$p$3 = commandData.get_showGroups();
            this.subscribeToSelectionEvents();
            if (commandData.get_elementSelectionChangedEvent() && !this._registeredElementSelectionChangedEvent$p$3) {
                _Ewa.OArtExtensions.chartElementManager(this._$$pf_EwaControl$p$2).registerListenerForImageElementSelectionChanged(this.$$d_pollForStateAndUpdateInternalAsync);
                this._registeredElementSelectionChangedEvent$p$3 = true;
            }
            if (!contextMenuRoot) {
                this._showFloatie$p$3(clientPoint, (this._$$pf_EwaControl$p$2.get_isChromeRtl()) ? 3 : 1, commandInfo.get_method());
            }
            else {
                this._showFloatieWithContextMenu$p$3(commandInfo.get_method(), contextMenuRoot);
            }
        }
        return $$sc.Task.fromResult(Boolean, true);
    },
    
    canExecuteCommand: function _Ewa__floatieManager$canExecuteCommand$in(selectionMode, commandInfo, properties, data) {
        return commandInfo.get_command() === 459047735 && commandInfo.get_method() !== 3 && !!properties;
    },
    
    populateMenu: function _Ewa__floatieManager$populateMenu$in(selectionMode, populateCommand, menuProperties) {
        return false;
    },
    
    onFloatieDismissed: function _Ewa__floatieManager$onFloatieDismissed$in(eventArgs) {
        this._$$pf_IsFloatieActive$p$3 = false;
        this._floatie$p$3.set_contextMenuRoot(null);
        this.unsubscribeToSelectionEvents();
        if (this._registeredElementSelectionChangedEvent$p$3) {
            _Ewa.OArtExtensions.chartElementManager(this._$$pf_EwaControl$p$2).unregisterListenerForImageElementSelectionChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            this._registeredElementSelectionChangedEvent$p$3 = false;
        }
        return;
    },
    
    getHiddenFloatieGroupsForSelection: function _Ewa__floatieManager$getHiddenFloatieGroupsForSelection$in(inputMethod) {
        var allGroups = [ 'ChartsDrawing', 'ChartsText', 'ChartsTextEdit' ];
        var allGroupLength = allGroups.length;
        var hiddenGroups = new Array(allGroupLength - this._showGroups$p$3.length);
        for (var i = 0, j = 0, len = allGroupLength; i < len; i++) {
            if (!Array.contains(this._showGroups$p$3, allGroups[i])) {
                hiddenGroups[j++] = allGroups[i];
            }
        }
        return hiddenGroups;
    },
    
    dismissFloatie: function _Ewa__floatieManager$dismissFloatie$in() {
        if (this._floatie$p$3 && this._$$pf_IsFloatieActive$p$3) {
            this._floatie$p$3.dismissFloatie(null);
        }
    },
    
    onComponentBuilt: function _Ewa__floatieManager$onComponentBuilt$in(root, componentId) {
        root.set_rootUser(this);
        root.pollForStateAndUpdate();
    },
    
    setFocusOnSection: function _Ewa__floatieManager$setFocusOnSection$in(forward, alreadyFocused) {
        return true;
    },
    
    dispose: function _Ewa__floatieManager$dispose$in() {
        if (this._$$pf_EwaControl$p$2) {
            this._$$pf_EwaControl$p$2.get_commandHandlerManager().removeCommandHandler(this);
        }
        System.IDisposableExtensions.safeDispose(this._floatie$p$3);
        this._floatie$p$3 = null;
        _Ewa.DOMElementExtensions.removeElementFromParentNode(this.get_rootCommandUIElement());
        this._showGroups$p$3 = null;
        _Ewa.CommandUIManager.prototype.dispose.call(this);
    },
    
    handleQueryCommand: function _Ewa__floatieManager$handleQueryCommand$in(commandName, commandParams) {
        var queryCommandHandled = false;
        switch (commandName) {
            case 'QuerySelectedChartElement':
            case 'QueryFontName':
            case 'QueryFontSize':
            case 'QueryBold':
            case 'QueryItalics':
            case 'QueryUnderline':
                _Ewa.OArtExtensions.chartElementManager(this._$$pf_EwaControl$p$2).handleChartElementQueryCommands(commandName, commandParams);
                queryCommandHandled = true;
                break;
        }
        return queryCommandHandled;
    },
    
    pollForStateAndUpdate: function _Ewa__floatieManager$pollForStateAndUpdate$in() {
        if (this._floatie$p$3 && this._floatie$p$3.get_rootUser() && this._$$pf_IsFloatieActive$p$3) {
            this._floatie$p$3.pollForStateAndUpdate();
        }
    },
    
    generateAndAttachCommandUIControl: function _Ewa__floatieManager$generateAndAttachCommandUIControl$in() {
        if (!this._floatie$p$3) {
            var options = new CommandUI.FloatieBuildOptions();
            var $$t_2;
            var builder = ($$t_2 = new CommandUI.FloatieBuilder(options, this._$$pf_CommandUIElement$p$2, $$sc.Task.fromResult(Common.IRootBuildClient, $$as(Common.IRootBuildClient, this))), $$t_2.set_dataSource(new _Ewa.EwaCuiDataSource(this._$$pf_CommandUIJSON$p$2, '')), $$t_2);
            builder.buildFloatie();
            builder.get_floatie().set_rootUser(this);
            builder.get_floatie().registerOnFloatieDismissed(this.$$d_onFloatieDismissed);
            builder.get_floatie().registerHiddenFloatieGroupsGetter(this.$$d_getHiddenFloatieGroupsForSelection);
            this._floatie$p$3 = builder.get_floatie();
        }
        return true;
    },
    
    updateFromSelectionHighlight: function _Ewa__floatieManager$updateFromSelectionHighlight$in() {
        this.dismissFloatie();
    },
    
    _showFloatie$p$3: function _Ewa__floatieManager$_showFloatie$p$3$in(point, reference, inputMethod) {
        this._floatie$p$3.showFloatieAt(point, reference, inputMethod, false);
        this._floatie$p$3.set_hasShynessBehavior(false);
        this._$$pf_IsFloatieActive$p$3 = true;
    },
    
    _showFloatieWithContextMenu$p$3: function _Ewa__floatieManager$_showFloatieWithContextMenu$p$3$in(inputMethod, contextMenuRoot) {
        contextMenuRoot.set_activeFloatie(this._floatie$p$3);
        this._floatie$p$3.positionFloatieWithContextMenu(contextMenuRoot, inputMethod);
        this._floatie$p$3.set_contextMenuRoot(contextMenuRoot);
        this._$$pf_IsFloatieActive$p$3 = true;
    }
}


_Ewa.HeaderUI = function _Ewa_HeaderUI(ewaControl, domElement) {
    _Ewa.HeaderUI.initializeBase(this, [ domElement, null ]);
    _Ewa.HelperMethods.verifyArgumentNotNull(ewaControl, 'ewaControl');
    this._ewaControl$p$3 = ewaControl;
    _Ewa.KeyboardAccessibleSectionRegistryExtensions.keyboardAccessibleSectionRegistry(this._ewaControl$p$3).registerSection(this);
    var isSharedHeader = _Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isReactSharedHeaderUxEnabled();
    var headerScope = Common.CuiHeaderDomReference.initializeCuiScope(this.get_sectionName(), null, domElement, isSharedHeader, true, true, true);
    if (isSharedHeader) {
        headerScope.set_keyDownHandledExternally(true);
        this._rebindTabHandlers$p$3(headerScope, 2187030096, 1254348094);
        headerScope.bindAction(Common.KeyInputManager.hashKey(27, 0), 4169072475);
    }
}
_Ewa.HeaderUI.prototype = {
    _ewaControl$p$3: null,
    _headerUIEventList$p$3: null,
    
    get_rootElement: function _Ewa_HeaderUI$get_rootElement$in() {
        return this.get_domElement();
    },
    
    get_canReceiveFocus: function _Ewa_HeaderUI$get_canReceiveFocus$in() {
        return this.get_isVisible();
    },
    
    get_sectionName: function _Ewa_HeaderUI$get_sectionName$in() {
        return 'HUI';
    },
    
    _rebindTabHandlers$p$3: function _Ewa_HeaderUI$_rebindTabHandlers$p$3$in(scope, tabActionId, tabShiftActionId) {
        var tabInput = Common.KeyInputManager.hashKey(9, 0);
        var tabShiftInput = Common.KeyInputManager.hashKey(9, 4);
        scope.unBindAction(tabInput);
        scope.unBindAction(tabShiftInput);
        scope.bindAction(tabInput, tabActionId);
        scope.bindAction(tabShiftInput, tabShiftActionId);
    },
    
    dispose: function _Ewa_HeaderUI$dispose$in() {
        if (this._ewaControl$p$3) {
            _Ewa.KeyboardAccessibleSectionRegistryExtensions.keyboardAccessibleSectionRegistry(this._ewaControl$p$3).removeSection(this);
        }
        this._ewaControl$p$3 = null;
        System.IDisposableExtensions.safeDisposeArray([ this._headerUIEventList$p$3 ]);
        var focusManager = (Common.AFrameworkApplication.get_activeFrame()) ? Common.AFrameworkApplication.get_activeFrame().get_theFocusManager() : null;
        if (focusManager) {
            focusManager.removeScope(this.get_sectionName());
        }
        _Ewa.BaseControl.prototype.dispose.call(this);
    },
    
    setFocusOnSection: function _Ewa_HeaderUI$setFocusOnSection$in(forward, alreadyFocused) {
        if (alreadyFocused) {
            return false;
        }
        Common.AFrameworkApplication.get_activeFrame().get_theFocusManager().setScope(this.get_sectionName());
        Common.AFrameworkApplication.get_activeFrame().get_theFocusManager().getRegion(this.get_sectionName()).moveIntoFromTop();
        return true;
    },
    
    belongsToSection: function _Ewa_HeaderUI$belongsToSection$in(candidate) {
        return _Ewa.DOMElementExtensions.isDescendentElementOrSelf(this.get_domElement(), candidate);
    },
    
    handleFocusGained: function _Ewa_HeaderUI$handleFocusGained$in() {
    },
    
    handleFocusLost: function _Ewa_HeaderUI$handleFocusLost$in() {
    }
}


_Ewa.LegacyRibbonUser = function _Ewa_LegacyRibbonUser(ewaControl, commandUIElement, standaloneRoot, cuiControlManager, rootUser, trimmedIds, commandUIJSON, namingIdPrefix, ribbonClientId, minimized, topRowPeripheralControlCreator, jewelContainerId, resizableContainer, ribbonFocusId) {
    this.$$d__checkFloodgateSurveyInfo$p$2 = Function.createDelegate(this, this._checkFloodgateSurveyInfo$p$2);
    this.$$d__onCommandUIGeneratedAndGridConsistentAfterWorkbookLoadedFromServer$p$2 = Function.createDelegate(this, this._onCommandUIGeneratedAndGridConsistentAfterWorkbookLoadedFromServer$p$2);
    _Ewa.LegacyRibbonUser.initializeBase(this, [ false ]);
    this._ewaControl$p$2 = ewaControl;
    this._commandUIElement$p$2 = commandUIElement;
    this._cuiControlManager$p$2 = cuiControlManager;
    this._standaloneRoot$p$2 = standaloneRoot;
    this._rootUser$p$2 = rootUser;
    this._namingIdPrefix$p$2 = namingIdPrefix;
    this._topRowPeripheralControlCreator$p$2 = topRowPeripheralControlCreator;
    this._resizableContainer$p$2 = resizableContainer;
    this._ribbonFocusId$p$2 = ribbonFocusId;
    _Ewa.PageLoadTrackingInfo.get_instance().startMetric('RibbonDisplay');
    this._createPeripheralSections$p$2(commandUIElement, _Ewa.CommandUIManager._createCuiHelper$i(ewaControl), ribbonClientId);
    var options = new CommandUI.RibbonBuildOptions();
    options.showJewelId = jewelContainerId;
    options.trimmedIds = trimmedIds;
    options.clientID = ribbonClientId;
    options.displayMinimized = minimized;
    options.staticUiTouchMode = ewaControl.get_frame().get_isStaticUiTouchMode();
    this._updateJewelDefaultSelection$p$2(options);
    options.jewelBuildOptions.trimmedIds = options.trimmedIds;
    this._ribbonBuilder$p$2 = new CommandUI.RibbonBuilder(options, this._commandUIElement$p$2, this, this._resizableContainer$p$2);
    this._ribbonBuilder$p$2.set_dataSource(new _Ewa.EwaCuiDataSource(commandUIJSON, this._namingIdPrefix$p$2));
    this._ribbonBuilder$p$2.buildRibbonAndInitialTab(namingIdPrefix + 'Ribbon.Home');
    _Ewa.PageLoadTrackingInfo.get_instance().addTag('MLR');
    _Ewa.PageLoadTrackingInfo.get_instance().endMetric('RibbonDisplay');
    ewaControl.hidePageLoadSkeletonElement('skeletonRibbonPlaceHolder', true, '');
    ewaControl.get_sessionStateManager().add_commandUIGeneratedAndGridConsistentAfterWorkbookLoadedFromServer(this.$$d__onCommandUIGeneratedAndGridConsistentAfterWorkbookLoadedFromServer$p$2);
    this._ribbon$p$2 = this._ribbonBuilder$p$2.get_ribbon();
    this._ribbon$p$2.attachStandaloneRoot(this._standaloneRoot$p$2);
    _Ewa.PageLoadTrackingInfo.get_instance().startMetric('RibbonInteractive');
    this.pollForStateUpdate();
    this._ribbon$p$2.scaleHeader();
    Diag.ULS.sendTraceTag(23634397, 0, 50, 'LegacyRibbonUser.c\'tor: Ribbon Generation Completed.');
    Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(5);
    Common.App.AppLifecycleManager.get_instance().executeWhen(4, this.$$d__checkFloodgateSurveyInfo$p$2, 3);
}
_Ewa.LegacyRibbonUser._systemInitiatedFeedbackFutureCallback$p = function _Ewa_LegacyRibbonUser$_systemInitiatedFeedbackFutureCallback$p$st(sif) {
    var activity = 'SLROptOut';
    if (sif) {
        if (sif.getCampaignTriggerData(activity) === 'true') {
            sif.removeCampaignTriggerData(activity);
            sif.logActivity(activity, 'ExcelFGSLROptOutEnabled');
        }
    }
    else {
        Diag.ULS.sendTraceTag(39965658, 0, 50, 'ISystemInitiatedFeedback was null');
    }
}
_Ewa.LegacyRibbonUser.prototype = {
    _ewaControl$p$2: null,
    _standaloneRoot$p$2: null,
    _cuiControlManager$p$2: null,
    _rootUser$p$2: null,
    _namingIdPrefix$p$2: null,
    _commandUIElement$p$2: null,
    _ribbon$p$2: null,
    _topRowPeripheralControlCreator$p$2: null,
    _ribbonBuilder$p$2: null,
    _resizableContainer$p$2: null,
    _ribbonFocusId$p$2: null,
    
    get_inKeyTipMode: function _Ewa_LegacyRibbonUser$get_inKeyTipMode$in() {
        return this._ribbon$p$2.get_inKeytipMode();
    },
    
    get_ribbonMode: function _Ewa_LegacyRibbonUser$get_ribbonMode$in() {
        return 0;
    },
    
    exitKeytipModeCallback: function _Ewa_LegacyRibbonUser$exitKeytipModeCallback$in() {
        _Ewa.GridViewExtensions.grid(this._ewaControl$p$2).focus();
    },
    
    enterKeytipMode: function _Ewa_LegacyRibbonUser$enterKeytipMode$in(onExitAction) {
        var $$t_2 = this;
        var onExitCallback = function() {
            onExitAction(null);
        };
        this._ribbon$p$2.enterKeytipMode(onExitCallback);
    },
    
    exitKeytipMode: function _Ewa_LegacyRibbonUser$exitKeytipMode$in(preserveRibbonFocus, dismissTabPopup) {
        this._ribbon$p$2.exitKeytipMode(preserveRibbonFocus, dismissTabPopup);
    },
    
    toggleRibbonMode: function _Ewa_LegacyRibbonUser$toggleRibbonMode$in(toggledToSLR) {
        Diag.ULS.shipAssertTag(592840071, 0, false, 'LegacyRibbonUser.ToggleRibbonMode: ToggleRibbonMode should not be called for legacy ribbon user.');
        throw Error.notImplemented();
    },
    
    _updateJewelDefaultSelection$p$2: function _Ewa_LegacyRibbonUser$_updateJewelDefaultSelection$p$2$in(options) {
        if (options) {
            if (!options.jewelBuildOptions) {
                options.jewelBuildOptions = new CommandUI.JewelBuildOptions();
            }
            if ((Common.AFrameworkApplication.isReplyWithChangesWorkFlow && this._ewaControl$p$2.get_workbookContext().FullDocumentInfo.ReplyWithChangesUrl) || Common.AFrameworkApplication.useReplyWithChangesPostMessage) {
                options.jewelBuildOptions.defaultSelectionOverride = this._ewaControl$p$2.get_namingContainerIdPrefix() + 'faShare';
            }
        }
    },
    
    dispose: function _Ewa_LegacyRibbonUser$dispose$in() {
        if (this._topRowPeripheralControlCreator$p$2) {
            this._topRowPeripheralControlCreator$p$2.disposeTopRowControls();
            this._topRowPeripheralControlCreator$p$2 = null;
        }
        System.IDisposableExtensions.safeDisposeArray([ this._ribbon$p$2 ]);
        this._ribbon$p$2 = null;
        this._ribbonBuilder$p$2.clearGlobalAppState();
        Common.App.AppLifecycleManager.get_instance().clearAppInitializationStatus(7);
        Common.App.AppLifecycleManager.get_instance().clearAppInitializationStatus(5);
        Common.App.AppLifecycleManager.get_instance().clearAppInitializationStatus(4);
        if (this._ewaControl$p$2) {
            this._ewaControl$p$2.get_sessionStateManager().remove_commandUIGeneratedAndGridConsistentAfterWorkbookLoadedFromServer(this.$$d__onCommandUIGeneratedAndGridConsistentAfterWorkbookLoadedFromServer$p$2);
        }
        _Ewa.ExplicitDisposable.prototype.dispose.call(this);
        Diag.ULS.sendTraceTag(40380382, 0, 50, 'LegacyRibbonUser disposed');
    },
    
    onComponentBuilt: function _Ewa_LegacyRibbonUser$onComponentBuilt$in(root, componentId) {
        if (Object.getType(root) === CommandUI.Ribbon || Object.getType(root) === CommandUI.Jewel) {
            root.set_rootUser(this._rootUser$p$2);
        }
        var cuiRoot = $$as(Common.ICUIRoot, root);
        if (cuiRoot) {
            cuiRoot.set_controlIdPrefix(this._namingIdPrefix$p$2);
        }
    },
    
    pollForStateUpdate: function _Ewa_LegacyRibbonUser$pollForStateUpdate$in() {
        if (!this._ribbon$p$2 || !this._ribbon$p$2.get_rootUser()) {
            return;
        }
        var operationStart = Common.WindowUtils.getTickCount();
        this._ribbon$p$2.pollForStateAndUpdate();
        var executionTime = Common.WindowUtils.getTickCount() - operationStart;
        var $$t_8 = this;
        window.requestAnimationFrame(function(_) {
            var executionTimeWithRaf = Common.WindowUtils.getTickCount() - operationStart;
            window.setTimeout(function() {
                var executionTimeTotal = Common.WindowUtils.getTickCount() - operationStart;
                Diag.ULS.sendTraceTag(42267864, 0, 50, 'LegacyPollForStateUpdate, ExecutionTime: {0}, ExecutionTimeRaf: {1}, ExecutionTimeTotal: {2}, ExecutionTimeForGetActions: 0.0, ExecutionTimeForDispatchActions: 0.0', executionTime, executionTimeWithRaf, executionTimeTotal);
            }, 0);
        });
        if (!Common.App.AppLifecycleManager.get_instance().isCompleted(7)) {
            Diag.ULS.shipAssertTag(37787661, 0, Common.App.AppLifecycleManager.get_instance().isCompleted(10), 'MLR is initialized synchroniously and must be displayed at this point');
            _Ewa.PageLoadTrackingInfo.get_instance().endMetric('RibbonInteractive');
            Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(7);
            Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(4);
        }
    },
    
    showRibbonTab: function _Ewa_LegacyRibbonUser$showRibbonTab$in(tabId) {
        Diag.ULS.debugAssertTag(593774168, 0, false, 'ShowRibbonTab the method is not implemented for legacy ribbon and should not be called.');
        throw Error.notImplemented();
    },
    
    setRibbonControlsHiddenState: function _Ewa_LegacyRibbonUser$setRibbonControlsHiddenState$in(controlIds, isHidden) {
        Diag.ULS.debugAssertTag(593774167, 0, false, 'SetRibbonControlsHiddenState the method is not implemented for legacy ribbon and should not be called.');
        throw Error.notImplemented();
    },
    
    _createPeripheralSections$p$2: function _Ewa_LegacyRibbonUser$_createPeripheralSections$p$2$in(containerElement, cuiHelper, ribbonClientId) {
        if (_Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isReactSharedHeaderUxEnabled()) {
            if (!_Ewa.ReactHeaderRenderer._$$pf_HeaderWasRendered$p) {
                var headerRenderer = this._ewaControl$p$2.get_serviceRegistry().registerService(_Ewa.IReactHeaderRenderer, 360, new _Ewa.ReactHeaderRenderer(this._ewaControl$p$2, false, this._ribbonFocusId$p$2));
                headerRenderer.createReactHeader(ribbonClientId, this._resizableContainer$p$2);
            }
        }
        else {
            this._topRowPeripheralControlCreator$p$2.createTopRowControls(containerElement, cuiHelper, ribbonClientId);
        }
        Common.CuiHelper.initializeRenameUIHandler();
        this._createBottomRowCenterControls$p$2(cuiHelper, containerElement, ribbonClientId);
        this._createBottomRowRightControls$p$2(cuiHelper, containerElement, ribbonClientId);
        if (!_Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isReactSharedHeaderUxEnabled()) {
            this._ewaControl$p$2.hidePageLoadSkeletonElement('skeletonAppHeaderPlaceHolder', true, '');
        }
    },
    
    _createBottomRowCenterControls$p$2: function _Ewa_LegacyRibbonUser$_createBottomRowCenterControls$p$2$in(cuiHelper, containerElement, ribbonClientId) {
        var openInClientButtonInfo = null;
        if (this._ewaControl$p$2.get_modeCapabilities() & 2) {
            var $$t_5;
            openInClientButtonInfo = ($$t_5 = new Common.HeaderButtonInfo(), $$t_5.command = '1455037301', $$t_5.label = _Ewa.ClientStringManager.get_instance().getString((Common.BrowserUtils.get_isMobile()) ? 1138 : 1137), $$t_5);
        }
        var tellMeSearchBoxInfo = null;
        if (!this._ewaControl$p$2.isServerFeatureEnabled(33)) {
            var $$t_6;
            tellMeSearchBoxInfo = ($$t_6 = new Common.TellMeSearchBoxInfo(), $$t_6.accessibilityTextCommand = '-240091811', $$t_6.command = '-1642491107', $$t_6.commandMenuClose = '-28797232', $$t_6.commandMenuOpen = '-1814078912', $$t_6.menuControlExecutedCommand = '878547493', $$t_6.onInteractionBegin = '586156566', $$t_6.onRestoreFocus = '-1051173363', $$t_6.onInputBoxFocus = '-1991747669', $$t_6.onInputBoxBlur = '1024534176', $$t_6.populateQueryCommand = 'PopulateTellMe', $$t_6.populateAsyncTriggerCommand = '-1543335331', $$t_6.altText = String.format(_Ewa.ClientStringManager.get_instance().getStringUnencoded(353), _Ewa.ClientStringManager.get_instance().getStringUnencoded(352)), $$t_6.placeHolderText = _Ewa.ClientStringManager.get_instance().getStringUnencoded(352), $$t_6.keytip = _Ewa.ClientStringManager.get_instance().getString(1369), $$t_6);
        }
        cuiHelper.createBottomRowCenterControls(ribbonClientId, containerElement, null, tellMeSearchBoxInfo, openInClientButtonInfo, null, this._cuiControlManager$p$2);
    },
    
    _createBottomRowRightControls$p$2: function _Ewa_LegacyRibbonUser$_createBottomRowRightControls$p$2$in(cuiHelper, containerElement, ribbonClientId) {
        this._topRowPeripheralControlCreator$p$2.createRibbonPeripheralControls(containerElement, cuiHelper, ribbonClientId);
    },
    
    _checkFloodgateSurveyInfo$p$2: function _Ewa_LegacyRibbonUser$_checkFloodgateSurveyInfo$p$2$in() {
        var sif = Common.Utils.Container.get_instance().resolveFuture(Common.ISystemInitiatedFeedback, '');
        sif.execute(_Ewa.LegacyRibbonUser._systemInitiatedFeedbackFutureCallback$p);
    },
    
    activateRibbonTab: function _Ewa_LegacyRibbonUser$activateRibbonTab$in(tabId) {
        if (this._ribbon$p$2) {
            this._ribbon$p$2.selectTabById(tabId, false);
        }
    },
    
    get_selectedTabId: function _Ewa_LegacyRibbonUser$get_selectedTabId$in() {
        return this._ribbon$p$2.get_selectedTabId();
    },
    
    get_topRowControls: function _Ewa_LegacyRibbonUser$get_topRowControls$in() {
        return this._topRowPeripheralControlCreator$p$2._topRowControls;
    },
    
    updatePeopleWellControl: function _Ewa_LegacyRibbonUser$updatePeopleWellControl$in() {
        Common.Debug.assertNotReachedStringTag('Three line ribbon doesn\'t contain People Well control and shouldn\'t be updated', 25264730);
    },
    
    updateControls: function _Ewa_LegacyRibbonUser$updateControls$in(controls) {
        Common.Debug.assertNotReachedStringTag('UpdateControls should not be called from the three line ribbon.', 24995155);
    },
    
    updateDocChatControl: function _Ewa_LegacyRibbonUser$updateDocChatControl$in() {
        Common.Debug.assertNotReachedStringTag('Three line ribbon doesn\'t contain DocChat control and shouldn\'t be updated', 0);
    },
    
    launchJewelMenu: function _Ewa_LegacyRibbonUser$launchJewelMenu$in(inputMethod, submenuId) {
        this._ribbon$p$2.launchJewel(inputMethod, submenuId);
    },
    
    get_ribbonExternal: function _Ewa_LegacyRibbonUser$get_ribbonExternal$in() {
        return this._ribbon$p$2;
    },
    
    updateOpenMenu: function _Ewa_LegacyRibbonUser$updateOpenMenu$in(menuId) {
        var shouldMenuBeHandledByReact = this._ewaControl$p$2.isServerFeatureEnabled(557) && (menuId === 'FontColor' || menuId === 'FillColor');
        if (this._ribbon$p$2 && !shouldMenuBeHandledByReact) {
            return this._ribbon$p$2.updateOpenMenu(menuId);
        }
        if (shouldMenuBeHandledByReact) {
            var $$t_4 = this;
            this._ewaControl$p$2.getReactEnvironmentManagerAsync(function(envManger) {
                envManger.populateControlMenu(menuId);
            });
            return true;
        }
        return false;
    },
    
    setFocus: function _Ewa_LegacyRibbonUser$setFocus$in() {
        this._ribbon$p$2.setFocusOnCurrentTabTitle();
    },
    
    get_upperRibbonHeight: function _Ewa_LegacyRibbonUser$get_upperRibbonHeight$in() {
        return this._ribbon$p$2.get_upperRibbonHeight();
    },
    
    get_lowerRibbonHeight: function _Ewa_LegacyRibbonUser$get_lowerRibbonHeight$in() {
        return this._ribbon$p$2.get_lowerRibbonHeight();
    },
    
    _onCommandUIGeneratedAndGridConsistentAfterWorkbookLoadedFromServer$p$2: function _Ewa_LegacyRibbonUser$_onCommandUIGeneratedAndGridConsistentAfterWorkbookLoadedFromServer$p$2$in(sender, e) {
        if (this._ewaControl$p$2.get_isRibbonInViewModeEnabled() && !this._ewaControl$p$2.get_isEditMode()) {
            var properties = { EditAttemptInReadingViewCanEdit: !!_Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_editMode(), PromptEditAttemptInReadingOnlyIfCanEdit: true };
            this._ewaControl$p$2.handleNewRibbonCommand(214430355, -1, 0, properties);
        }
    }
}


_Ewa._pivotTableContextualRibbonGroup = function _Ewa__pivotTableContextualRibbonGroup(ewaControl, ribbonManager, contextualGroupId, homeTabId, selectionModesToShowContextualGroup, tabsIds) {
    _Ewa._pivotTableContextualRibbonGroup.initializeBase(this, [ ewaControl, ribbonManager, contextualGroupId, homeTabId, selectionModesToShowContextualGroup, 2, tabsIds ]);
}
_Ewa._pivotTableContextualRibbonGroup.createContextualRibbonGroup = function _Ewa__pivotTableContextualRibbonGroup$createContextualRibbonGroup$st(ewaControl, ribbonManager, contextualGroupId, homeTabId, selectionModesToShowContextualGroup) {
    var tabsIds = [];
    for (var $$pai_6 = 5; $$pai_6 < arguments.length; ++$$pai_6) {
        tabsIds[$$pai_6 - 5] = arguments[$$pai_6];
    }
    return new _Ewa._pivotTableContextualRibbonGroup(ewaControl, ribbonManager, contextualGroupId, homeTabId, selectionModesToShowContextualGroup, tabsIds);
}
_Ewa._pivotTableContextualRibbonGroup.prototype = {
    
    shouldShowContextualDefaultTab: function _Ewa__pivotTableContextualRibbonGroup$shouldShowContextualDefaultTab$in() {
        var grid = _Ewa.GridViewExtensions.grid(this.ewaControl);
        return _Ewa._contextualRibbonGroup.prototype.shouldShowContextualDefaultTab.call(this) && !!grid.get_gridContentQueries().getPivotTableRangeFromRange(grid.get_selectionManager().get_activeCell());
    }
}


_Ewa.ReactRibbonUser = function _Ewa_ReactRibbonUser(ewaControl, ribbonPanel, focusManager, actionManager, externalUICommandDefinitionMapping, rootUser, RibbonClientId, ribbonFocusId, topRowPeripheralControlCreator, jewelPropertiesBuilder, trimmedIds, legacyNamingPrefix, dynamicScriptLoader, resizableContainer) {
    this.$$d__bindLoggingCommandHandler$p$1 = Function.createDelegate(this, this._bindLoggingCommandHandler$p$1);
    this.$$d_logTheTimeTakenByPollForStateUpdate = Function.createDelegate(this, this.logTheTimeTakenByPollForStateUpdate);
    this.$$d__initializeFullRibbon$p$1 = Function.createDelegate(this, this._initializeFullRibbon$p$1);
    this.$$d__onModeChanged$p$1 = Function.createDelegate(this, this._onModeChanged$p$1);
    _Ewa.ReactRibbonUser.initializeBase(this, [ ribbonPanel, ewaControl.get_clientAreaDiv(), ribbonFocusId, focusManager, actionManager, externalUICommandDefinitionMapping, null, trimmedIds, false, null ]);
    this._ribbonRoot.set_rootUser(rootUser);
    this._ribbonSectionName$p$1 = ribbonFocusId;
    this._topRowPeripheralControlCreator$p$1 = topRowPeripheralControlCreator;
    this._legacyNamingPrefix$p$1 = legacyNamingPrefix;
    this._ewaControl$p$1 = ewaControl;
    this._jewelPropertiesBuilder$p$1 = jewelPropertiesBuilder;
    this._resizableContainer$p$1 = resizableContainer;
    this._dynamicScriptLoader$p$1 = dynamicScriptLoader;
    this._ribbonMode$p$1 = (_Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isSimplifiedReactRibbonUxEnabled()) ? 1 : 2;
    Diag.ULS.sendTraceTag(40380383, 0, 50, 'ReactRibbonUser.c\'tor: Ribbon Generation Starting.');
    this._createAndInitializeHeader$p$1(ewaControl, RibbonClientId);
    var ribbonDownloadPromise = null;
    this._ewaControl$p$1.get_sessionStateManager().add_applicationModeChanged(this.$$d__onModeChanged$p$1);
    if (this._ewaControl$p$1.get_sessionStateManager().get_hasModeSwitched()) {
        this._onModeChanged$p$1(null, null);
    }
    if (!this._ewaControl$p$1.get_reactRibbonRenderer()) {
        ribbonDownloadPromise = dynamicScriptLoader.loadScript('appChrome');
    }
    else {
        ribbonDownloadPromise = $$sc.TaskPromiseExtensions.toPromise$o(ewaControl.get_reactRibbonRenderer().get_reactRibbonResources());
    }
    ewaControl.get_serviceRegistry().registerService(CommandUI.ReactRibbonRoot, 337, this._ribbonRoot);
    var $$t_1G = this, $$t_1H = this, $$t_1I = this;
    ribbonDownloadPromise.then(function(_) {
        if ($$t_1G._isDisposed$p$1) {
            return;
        }
        var loadLazyResourcesPromise = null;
        if ($$t_1G._ewaControl$p$1.isServerFeatureEnabled(452)) {
            loadLazyResourcesPromise = _Ewa.RibbonUserFactory.loadSLRLazyResources($$t_1G._dynamicScriptLoader$p$1);
        }
        if (!$$t_1G._ewaControl$p$1.get_reactRibbonRenderer()) {
            $$t_1G._renderMinimalRibbon$p$1(ribbonPanel);
        }
        else {
            Diag.ULS.shipAssertTag(41283921, 0, document.querySelectorAll('[data-unique-id=\'Home\']').length > 0, 'Home tab of SLR should be rendered at this point');
        }
        if (!$$t_1G._ewaControl$p$1.isServerFeatureEnabled(452)) {
            loadLazyResourcesPromise = _Ewa.RibbonUserFactory.loadSLRLazyResources($$t_1G._dynamicScriptLoader$p$1);
        }
        loadLazyResourcesPromise.then($$t_1G.$$d__initializeFullRibbon$p$1).catch(function(e) {
            return $$t_1G._repportInitializeFullRibbonFailure$p$1(e);
        });
    }, function(e) {
        _Ewa.ULSError.sendExceptionTraceTag(e, 'ReactRibbonUser.Constructor.ResourceLoad', false);
        Diag.ULS.sendTraceTag(38634456, 0, 10, 'Failed to load the resources for the ribbon: {0}', e);
    }).catch(function(e) {
        _Ewa.ULSError.sendExceptionTraceTag(e, 'ReactRibbonUser.Constructor.RenderMinimalRibbon', false);
        Diag.ULS.sendTraceTag(38634457, 0, 10, 'Failed to render minimal ribbon: {0}', e);
    });
}
_Ewa.ReactRibbonUser.prototype = {
    _topRowPeripheralControlCreator$p$1: null,
    _ribbonSectionName$p$1: null,
    _legacyNamingPrefix$p$1: null,
    _ewaControl$p$1: null,
    _jewelPropertiesBuilder$p$1: null,
    _resizableContainer$p$1: null,
    _isDisposed$p$1: false,
    _dynamicScriptLoader$p$1: null,
    _unregisterLoggingCommandHandlerAction$p$1: null,
    _topBar$p$1: null,
    _fileMenuHost$p$1: null,
    _ribbonMode$p$1: 0,
    
    get_ribbonMode: function _Ewa_ReactRibbonUser$get_ribbonMode$in() {
        return this._ribbonMode$p$1;
    },
    
    set_ribbonMode: function _Ewa_ReactRibbonUser$set_ribbonMode$in(value) {
        this._ribbonMode$p$1 = value;
        return value;
    },
    
    get_inKeyTipMode: function _Ewa_ReactRibbonUser$get_inKeyTipMode$in() {
        if (!this._canUseAppChrome$p$1('InKeyTipMode')) {
            return false;
        }
        return appChrome.api.inKeytipMode();
    },
    
    dispose: function _Ewa_ReactRibbonUser$dispose$in() {
        Diag.ULS.sendTraceTag(50448208, 0, 50, 'ReactRibbonUser disposing');
        this._isDisposed$p$1 = true;
        if (this._topRowPeripheralControlCreator$p$1) {
            this._topRowPeripheralControlCreator$p$1.disposeTopRowControls();
            this._topRowPeripheralControlCreator$p$1 = null;
        }
        Common.App.AppLifecycleManager.get_instance().clearAppInitializationStatus(7);
        Common.App.AppLifecycleManager.get_instance().clearAppInitializationStatus(4);
        Common.App.AppLifecycleManager.get_instance().clearAppInitializationStatus(11);
        Common.App.AppLifecycleManager.get_instance().clearAppInitializationStatus(5);
        Common.App.AppLifecycleManager.get_instance().clearAppInitializationStatus(10);
        this._ewaControl$p$1.get_sessionStateManager().remove_applicationModeChanged(this.$$d__onModeChanged$p$1);
        if (this._fileMenuHost$p$1) {
            appChrome.unmountReactComponent(this._fileMenuHost$p$1);
            _Ewa.DOMElementExtensions.removeElementFromParentNode(this._fileMenuHost$p$1);
            this._fileMenuHost$p$1 = null;
        }
        if (this._canUseAppChrome$p$1('Dispose')) {
            appChrome.unmountReactComponent(this._ribbonPanel);
        }
        this._unbindLoggingCommandHandler$p$1();
        if (this._ewaControl$p$1.get_reactRibbonRenderer()) {
            this._ewaControl$p$1.get_reactRibbonRenderer().dispose();
        }
        this._ewaControl$p$1.set_reactRibbonRenderer(null);
        this._ewaControl$p$1 = null;
        CommandUI.ReactRibbonUser.prototype.dispose.call(this);
        Diag.ULS.sendTraceTag(40380384, 0, 50, 'ReactRibbonUser disposed');
    },
    
    exitKeytipModeCallback: function _Ewa_ReactRibbonUser$exitKeytipModeCallback$in() {
        return;
    },
    
    enterKeytipMode: function _Ewa_ReactRibbonUser$enterKeytipMode$in(onExitCallback) {
        if (!this._canUseAppChrome$p$1('EnterKeytipMode')) {
            return;
        }
        try {
            appChrome.api.allowKeytips(true);
            appChrome.setKeytipExitCallback(onExitCallback);
            appChrome.api.enterKeytipMode(false);
        }
        finally {
            appChrome.api.allowKeytips(false);
        }
    },
    
    exitKeytipMode: function _Ewa_ReactRibbonUser$exitKeytipMode$in(preserveRibbonFocus, dismissTabPopup) {
        if (!this._canUseAppChrome$p$1('ExitKeytipMode')) {
            return;
        }
        try {
            appChrome.api.allowKeytips(true);
            appChrome.api.exitKeytipMode();
            if (!preserveRibbonFocus) {
                _Ewa.GridViewExtensions.grid(this._ewaControl$p$1).focus();
            }
        }
        finally {
            appChrome.api.allowKeytips(false);
        }
    },
    
    activateRibbonTab: function _Ewa_ReactRibbonUser$activateRibbonTab$in(tabId) {
        if (!this._canUseAppChrome$p$1(String.format('ActivateRibbonTab({0})', tabId))) {
            return;
        }
        if (this._isContextualTab$p$1(tabId)) {
            CommandUI.ReactRibbonUser.prototype.activateAndSetCurrentContextualTab.call(this, tabId);
        }
        else {
            appChrome.api.dispatch(appChrome.actions.setCurrentTab(tabId));
        }
    },
    
    get_selectedTabId: function _Ewa_ReactRibbonUser$get_selectedTabId$in() {
        if (!this._canUseAppChrome$p$1('SelectedTabId')) {
            return '';
        }
        return appChrome.selectors.getSelectedTabId();
    },
    
    get_topRowControls: function _Ewa_ReactRibbonUser$get_topRowControls$in() {
        return this._topRowPeripheralControlCreator$p$1._topRowControls;
    },
    
    updateOpenMenu: function _Ewa_ReactRibbonUser$updateOpenMenu$in(menuId) {
        if (!menuId) {
            Diag.ULS.debugAssertTag(594106467, 0, !!menuId, 'ReactRibbonUser.UpdateOpenMenu: no menuId.');
            return false;
        }
        if (!this._canUseAppChrome$p$1(String.format('UpdateOpenMenu({0})', menuId))) {
            return false;
        }
        if (menuId.startsWith(this._legacyNamingPrefix$p$1)) {
            return this.get_ribbonExternal().updateOpenMenu(menuId);
        }
        this.populateControlMenu(menuId);
        return true;
    },
    
    setFocus: function _Ewa_ReactRibbonUser$setFocus$in() {
        Common.AFrameworkApplication.get_activeFrame().get_theFocusManager().setScopeFromTop(this._ribbonSectionName$p$1);
    },
    
    logTheTimeTakenByPollForStateUpdate: function _Ewa_ReactRibbonUser$logTheTimeTakenByPollForStateUpdate$in(pollForStateUpdateStartTime, executionTimeForGetActions, executionTimeForDispatchActions) {
        var executionTime = Common.WindowUtils.getTickCount() - pollForStateUpdateStartTime;
        var $$t_A = this;
        window.requestAnimationFrame(function(_) {
            var executionTimeWithRaf = Common.WindowUtils.getTickCount() - pollForStateUpdateStartTime;
            window.setTimeout(function() {
                var executionTimeTotal = Common.WindowUtils.getTickCount() - pollForStateUpdateStartTime;
                Diag.ULS.sendTraceTag(42267865, 0, 50, 'ReactPollForStateUpdate, ExecutionTime: {0}, ExecutionTimeRaf: {1}, ExecutionTimeTotal: {2}, ExecutionTimeForGetActions: {3}, ExecutionTimeForDispatchActions: {4}', executionTime, executionTimeWithRaf, executionTimeTotal, executionTimeForGetActions, executionTimeForDispatchActions);
            }, 0);
        });
    },
    
    pollForStateUpdate: function _Ewa_ReactRibbonUser$pollForStateUpdate$in() {
        if (!Common.App.AppLifecycleManager.get_instance().isCompleted(7)) {
            return;
        }
        if (this._ewaControl$p$1.isServerFeatureEnabled(781)) {
            CommandUI.ReactRibbonUser.prototype.pollForStateAndUpdateWithAsyncDispatch.call(this, this.$$d_logTheTimeTakenByPollForStateUpdate);
            return;
        }
        var operationStart = Common.WindowUtils.getTickCount();
        var reactRibbonUpdateStopwatch = this._ewaControl$p$1.get_stopwatchBuilder().makeAndStartStopwatch('UserAction', 'ReactRibbonUpdateStopwatch');
        CommandUI.ReactRibbonUser.prototype.pollForStateUpdate.call(this);
        reactRibbonUpdateStopwatch.stop();
        this.logTheTimeTakenByPollForStateUpdate(operationStart, 0, 0);
    },
    
    get_upperRibbonHeight: function _Ewa_ReactRibbonUser$get_upperRibbonHeight$in() {
        if (this._ribbonMode$p$1 === 1) {
            return 36;
        }
        else if (this._ribbonMode$p$1 === 2) {
            return 36;
        }
        return Common.RibbonSize.get_upperRibbonHeight();
    },
    
    get_lowerRibbonHeight: function _Ewa_ReactRibbonUser$get_lowerRibbonHeight$in() {
        if (this._ribbonMode$p$1 === 1) {
            return 41;
        }
        else if (this._ribbonMode$p$1 === 2) {
            return 91;
        }
        return Common.RibbonSize.lowerRibbonHeight(false, false);
    },
    
    showRibbonTab: function _Ewa_ReactRibbonUser$showRibbonTab$in(tabId) {
        if (!this._canUseAppChrome$p$1(String.format('ShowRibbonTab({0})', tabId))) {
            return;
        }
        appChrome.api.dispatch(appChrome.actions.activateRibbonTab(tabId));
    },
    
    setRibbonControlsHiddenState: function _Ewa_ReactRibbonUser$setRibbonControlsHiddenState$in(controlIds, isHidden) {
        if (!this._canUseAppChrome$p$1(String.format('SetRibbonControlsHiddenState({0})', controlIds.toString()))) {
            return;
        }
        var actions = [];
        for (var $$arr_3 = controlIds, $$len_4 = $$arr_3.length, $$idx_5 = 0; $$idx_5 < $$len_4; ++$$idx_5) {
            var controlId = $$arr_3[$$idx_5];
            actions.push(appChrome.actions.updateControlHiddenState(controlId, isHidden));
        }
        appChrome.api.dispatch(actions);
    },
    
    toggleRibbonMode: function _Ewa_ReactRibbonUser$toggleRibbonMode$in(toggledToSLR) {
        Diag.ULS.sendTraceTag(592840070, 0, 50, 'ReactRibbonUser.ToggleRibbonMode: User switched between react ribbons. SwitchedToSLR:{0}', toggledToSLR);
        this._ribbonMode$p$1 = (toggledToSLR) ? 1 : 2;
        Common.Cookie.setWithExpiration('ExcelIsSimplifiedRibbonOn', toggledToSLR.toString(), 390);
        _Ewa.RibbonManagerExtensions.ribbonManager(this._ewaControl$p$1).updateRibbonParameters();
        this._ewaControl$p$1.resetLayoutPositions();
        this._ewaControl$p$1.updateToolbarsAndRibbons();
    },
    
    _renderMinimalRibbon$p$1: function _Ewa_ReactRibbonUser$_renderMinimalRibbon$p$1$in(ribbonPanel) {
        Diag.ULS.sendTraceTag(41199637, 0, 50, 'ReactRibbonUser.RenderMinimalRibbon called');
        var $$t_1 = this._dynamicScriptLoader$p$1;
        var $$t_2 = this;
        _Ewa.ReactRibbonRenderer.renderMinimalRibbon(this._ewaControl$p$1, ribbonPanel, ($$t_1.$$d_loadScript || ($$t_1.$$d_loadScript = Function.createDelegate($$t_1, $$t_1.loadScript))), this.$$d__bindLoggingCommandHandler$p$1, function() {
            if ($$t_2._ribbonTrimmingProperties) {
                appChrome.api.dispatch($$t_2.getTrimmedIdsHideActions());
            }
        });
    },
    
    _bindLoggingCommandHandler$p$1: function _Ewa_ReactRibbonUser$_bindLoggingCommandHandler$p$1$in() {
        if (this._ewaControl$p$1.isChangeGateEnabled('OfficeVSO:4244762_UseSharedPerceivedInteractiveCommandHandler')) {
            _Ewa.ReactRibbonRenderer.getPerceivedInteractiveCommandHandler(this._ewaControl$p$1).bindLoggingCommandHandler();
        }
        else {
            this._unregisterLoggingCommandHandlerAction$p$1 = _Ewa.ReactRibbonRenderer.bindLoggingCommandHandler();
        }
        appChrome.api.dispatch(appChrome.actions.setControlBehaviorAttached(true));
    },
    
    _unbindLoggingCommandHandler$p$1: function _Ewa_ReactRibbonUser$_unbindLoggingCommandHandler$p$1$in() {
        if (this._ewaControl$p$1.isChangeGateEnabled('OfficeVSO:4244762_UseSharedPerceivedInteractiveCommandHandler')) {
            _Ewa.ReactRibbonRenderer.getPerceivedInteractiveCommandHandler(this._ewaControl$p$1).unbindLoggingCommandHandler();
        }
        else {
            if (this._unregisterLoggingCommandHandlerAction$p$1) {
                this._unregisterLoggingCommandHandlerAction$p$1();
                this._unregisterLoggingCommandHandlerAction$p$1 = null;
            }
        }
    },
    
    _createAndInitializeHeader$p$1: function _Ewa_ReactRibbonUser$_createAndInitializeHeader$p$1$in(ewaControl, ribbonClientId) {
        Common.AFrameworkApplication.logFlightedSettingUsage('Microsoft.Office.Excel.Server.Flighting.IDenyListUseSharedHeader');
        if (_Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isReactSharedHeaderUxEnabled()) {
            if (!_Ewa.ReactHeaderRenderer._$$pf_HeaderWasRendered$p) {
                var headerRenderer = this._ewaControl$p$1.get_serviceRegistry().registerService(_Ewa.IReactHeaderRenderer, 360, new _Ewa.ReactHeaderRenderer(this._ewaControl$p$1, true, null));
                headerRenderer.createReactHeader(ribbonClientId, this._resizableContainer$p$1);
            }
        }
        else {
            this._createLegacyHeader$p$1(ewaControl, ribbonClientId);
        }
    },
    
    _createLegacyHeader$p$1: function _Ewa_ReactRibbonUser$_createLegacyHeader$p$1$in(ewaControl, RibbonClientId) {
        var headerSkeleton = new CommandUI.HeaderSkeleton(RibbonClientId, this._resizableContainer$p$1);
        this._topBar$p$1 = headerSkeleton.ensureTopBarDomElement();
        var startRenderTime = window.performance.now();
        var builderHelper = _Ewa.CommandUIManager._createCuiHelper$i(ewaControl);
        this._topRowPeripheralControlCreator$p$1.createTopRowControls(this._topBar$p$1, builderHelper, RibbonClientId);
        headerSkeleton.appendTopBarPeripheralElements();
        Diag.ULS.sendTraceTag(595855182, 0, 50, 'ReactRibbonUser.CreateLegacyHeader - Header first render time: {0} ms', Math.round(window.performance.now() - startRenderTime));
        Common.CuiHeaderDomReference.initializeCuiScope(RibbonClientId, null, this._topBar$p$1, true, true, true, true);
        this._ewaControl$p$1.hidePageLoadSkeletonElement('skeletonAppHeaderPlaceHolder', true, '');
        Diag.ULS.sendTraceTag(595732180, 0, 50, 'ReactRibbonUser.CreateLegacyHeader - Header first interactive time: {0} ms', Math.round(window.performance.now() - startRenderTime));
    },
    
    _createFileMenu$p$1: function _Ewa_ReactRibbonUser$_createFileMenu$p$1$in() {
        if (_Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isReactFileMenuUxEnabled()) {
            var actions = new Array(0);
            if (this._ewaControl$p$1.get_fileMenuOptions() & 4194304) {
                var $$t_2, $$t_3;
                var sessionDetails = [ ($$t_2 = new TextInfoSectionField(), $$t_2.label = CommonUIStrings.L_DiagnosticsSessionId, $$t_2.value = Common.AFrameworkApplication.userSessionId, $$t_2), ($$t_3 = new TextInfoSectionField(), $$t_3.label = CommonUIStrings.L_DiagnosticsBuild, $$t_3.value = Common.AFrameworkApplication.buildVersion, $$t_3) ];
                actions.push(appChrome.actions.setFileMenuSessionDetails('AboutTextSection', sessionDetails));
            }
            this._fileMenuHost$p$1 = document.createElement('div');
            document.body.appendChild(this._fileMenuHost$p$1);
            return appChrome.renderFileMenu(this._fileMenuHost$p$1, actions);
        }
        return Promise.resolve(null);
    },
    
    _initializeFullRibbon$p$1: function _Ewa_ReactRibbonUser$_initializeFullRibbon$p$1$in(lazyInitializationActions) {
        if (this._isDisposed$p$1) {
            return;
        }
        _Ewa.ReactRibbonRenderer.safeMeasure('InitializeFullRibbon');
        _Ewa.PageLoadTrackingInfo.get_instance().endMetric('RibbonLazyPrepare');
        _Ewa.PageLoadTrackingInfo.get_instance().startMetric('RibbonInteractive');
        Diag.ULS.sendTraceTag(38601114, 0, 50, 'ReactRibbonUser.InitializeFullRibbon GetLazyRibbonInitializationActions finished');
        var renderFileMenuPromise = this._createFileMenu$p$1();
        var $$t_2 = this;
        renderFileMenuPromise.then(function() {
            Diag.ULS.sendTraceTag(594375070, 0, 50, 'ReactRibbonUser.InitializeFullRibbon - file menu render done');
            $$t_2._internalInitializeFullRibbon$p$1(lazyInitializationActions);
        });
    },
    
    _internalInitializeFullRibbon$p$1: function _Ewa_ReactRibbonUser$_internalInitializeFullRibbon$p$1$in(lazyInitializationActions) {
        if (this._ribbonTrimmingProperties) {
            lazyInitializationActions.push.apply(lazyInitializationActions, this.getTrimmedIdsHideActions());
        }
        lazyInitializationActions.push.apply(lazyInitializationActions, this.getPollForStateAndUpdateActions());
        if (this._topRowPeripheralControlCreator$p$1.shouldShowActionButtonInRibbon()) {
            this.showActionButton('Share');
        }
        if (this._topRowPeripheralControlCreator$p$1.shouldShowCopyLinkButtonInRibbon()) {
            lazyInitializationActions.push(this.getShowCopyLinkButtonStoreAction('CopyLink'));
        }
        this._unbindLoggingCommandHandler$p$1();
        if (this._ewaControl$p$1.isChangeGateEnabled('OfficeVSO:4244762_UseSharedPerceivedInteractiveCommandHandler')) {
            this.addBindCommandHandlerCallback(_Ewa.ReactRibbonRenderer.getPerceivedInteractiveCommandHandler(this._ewaControl$p$1));
        }
        else {
            this.addBindCommandHandlerCallback(null);
        }
        lazyInitializationActions.push(appChrome.actions.setControlBehaviorAttached(true));
        appChrome.api.dispatch(lazyInitializationActions);
        this.initializeFocusManager();
        var fileMenuTask = _Ewa.ClientHostingPlatform.loadScript(97, 4, false, false, 0, 1);
        if (fileMenuTask.get_status() === 6) {
            Diag.ULS.sendTraceTag(41685212, 0, 50, 'ReactRibbonUser.InternalInitializeFullRibbon  - file menu intialized synchronously');
            this._initFileMenuAndFinishRibbonInitialization$p$1();
        }
        else {
            Diag.ULS.sendTraceTag(41685213, 0, 50, 'ReactRibbonUser.InternalInitializeFullRibbon  - file menu will be initialilzed asynchronously');
            var $$t_4 = this;
            _Ewa.TaskExtensions.c(fileMenuTask, function(t) {
                if ($$t_4._isDisposed$p$1) {
                    return;
                }
                $$t_4._initFileMenuAndFinishRibbonInitialization$p$1();
            }, this._ewaControl$p$1.get_cancelOnDisposeToken());
        }
        _Ewa.ReactRibbonRenderer.safeMeasure('InitializeFullRibbonEnd');
        return null;
    },
    
    _initFileMenuAndFinishRibbonInitialization$p$1: function _Ewa_ReactRibbonUser$_initFileMenuAndFinishRibbonInitialization$p$1$in() {
        _Ewa.ReactRibbonRenderer.safeMeasure('InitFileMenuAndFinishRibbonInitialization');
        this._jewelProperties = this._jewelPropertiesBuilder$p$1();
        this.buildAndSetJewel();
        this._setRibbonIsInteractiveFlags$p$1();
        _Ewa.ReactRibbonRenderer.safeMeasure('InitFileMenuAndFinishRibbonInitializationEnd');
    },
    
    _repportInitializeFullRibbonFailure$p$1: function _Ewa_ReactRibbonUser$_repportInitializeFullRibbonFailure$p$1$in(e) {
        _Ewa.ULSError.sendExceptionTraceTag(e, 'ReactRibbonUser.RepportInitializeFullRibbonFailure', false);
        Diag.ULS.sendTraceTag(38601115, 0, 10, 'ReactRibbonUser.InitializeFullRibbon failed: {0}', e);
    },
    
    _setRibbonIsInteractiveFlags$p$1: function _Ewa_ReactRibbonUser$_setRibbonIsInteractiveFlags$p$1$in() {
        this.logRibbonLoaded();
        if (this._ewaControl$p$1.isChangeGateEnabled('OfficeVSO:4152865_LogSLRUsage')) {
            Common.AFrameworkApplication.logUniqueFlightedSettingUsage('Microsoft.Office.Excel.Server.Flighting.IDenyListRibbonUseReactRibbonUser');
        }
        _Ewa.PageLoadTrackingInfo.get_instance().endMetric('RibbonInteractive');
        Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(7);
        Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(4);
        Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(11);
    },
    
    _canUseAppChrome$p$1: function _Ewa_ReactRibbonUser$_canUseAppChrome$p$1$in(api) {
        if (Common.AppChromeUtils.appChromeAlreadyLoaded()) {
            return true;
        }
        Diag.ULS.sendTraceTag(40494369, 0, 15, 'ReactRibbonUser ignoring api {0} call since AppChrome isn\'t ready', api);
        return false;
    },
    
    _isContextualTab$p$1: function _Ewa_ReactRibbonUser$_isContextualTab$p$1$in(tabId) {
        if (!this._canUseAppChrome$p$1(String.format('IsContextualTab({0})', tabId))) {
            return false;
        }
        var contextualTabIds = appChrome.selectors.getContextualTabIds();
        for (var $$arr_2 = contextualTabIds, $$len_3 = $$arr_2.length, $$idx_4 = 0; $$idx_4 < $$len_3; ++$$idx_4) {
            var currentTab = $$arr_2[$$idx_4];
            if (tabId === currentTab) {
                return true;
            }
        }
        return false;
    },
    
    _onModeChanged$p$1: function _Ewa_ReactRibbonUser$_onModeChanged$p$1$in(sender, e) {
        if (this._ewaControl$p$1.isServerFeatureEnabled(597) && this._canUseAppChrome$p$1('UpdateModeSwitcher')) {
            _Ewa.ReactRibbonRenderer.updateModeSwitcherMode((this._ewaControl$p$1.get_isEditMode()) ? 'Edit' : 'View');
        }
    }
}


_Ewa.ReactHeaderRenderer = function _Ewa_ReactHeaderRenderer(ewaControl, isReactBasedRibbon, ribbonFocusId) {
    this.$$d__renderReactHeader$p$0 = Function.createDelegate(this, this._renderReactHeader$p$0);
    this.$$d__renderReactHeaderAction$p$0 = Function.createDelegate(this, this._renderReactHeaderAction$p$0);
    this._ewaControl$p$0 = ewaControl;
    this._isReactBasedRibbon$p$0 = isReactBasedRibbon;
    this._ribbonFocusId$p$0 = ribbonFocusId;
    Diag.ULS.sendTraceTag(594126730, 0, 50, 'ReactHeaderRenderer: isReactBasedRibbon = {0}', isReactBasedRibbon);
}
_Ewa.ReactHeaderRenderer.get_headerWasRendered = function _Ewa_ReactHeaderRenderer$get_headerWasRendered$st() {
    return _Ewa.ReactHeaderRenderer._$$pf_HeaderWasRendered$p;
}
_Ewa.ReactHeaderRenderer.prototype = {
    _ewaControl$p$0: null,
    _topBar$p$0: null,
    _isReactBasedRibbon$p$0: false,
    _ribbonFocusId$p$0: null,
    _reactRibbonFocusManager$p$0: null,
    
    createReactHeader: function _Ewa_ReactHeaderRenderer$createReactHeader$in(RibbonClientId, resizableContainer) {
        if (!document.getElementById('o365header')) {
            _Ewa.ReactHeaderRenderer._$$pf_HeaderWasRendered$p = true;
            var headerSkeleton = new CommandUI.HeaderSkeleton(RibbonClientId, resizableContainer);
            this._topBar$p$0 = headerSkeleton.ensureTopBarDomElement();
            Common.AFrameworkApplication.logFlightedSettingUsage('Microsoft.Office.Excel.Server.Flighting.IDenyListSharedHeaderSearchUx');
            if (!this._isReactBasedRibbon$p$0) {
                this._initializeFocusManager$p$0();
            }
            _Ewa.ClientHostingPlatform.loadScript(24, 0, false, false, 0, 1);
            if (this._ewaControl$p$0.get_sessionStateManager().get_isCommandUIGeneratedAndGridInteractive()) {
                this._renderReactHeaderAction$p$0(null, null);
            }
            else {
                this._ewaControl$p$0.get_sessionStateManager().add_commandUIGeneratedAndGridInteractive(this.$$d__renderReactHeaderAction$p$0);
            }
        }
        else {
            Diag.ULS.sendTraceTag(594126729, 0, 50, 'ReactHeaderRenderer.CreateReactHeader, tried to re-render React shared header');
        }
    },
    
    _renderReactHeaderAction$p$0: function _Ewa_ReactHeaderRenderer$_renderReactHeaderAction$p$0$in(sender, e) {
        if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            this._renderReactHeader$p$0();
        }
        else {
            var $$t_4 = this;
            this._ewaControl$p$0.getReactEnvironmentManagerAsync(function(reactEnvironmentManager) {
                reactEnvironmentManager.getAppChromePromise().then($$t_4.$$d__renderReactHeader$p$0);
            });
        }
    },
    
    _renderReactHeader$p$0: function _Ewa_ReactHeaderRenderer$_renderReactHeader$p$0$in() {
        var headerPropsHelper = new Common.ReactSharedHeaderPropsHelper('');
        var firstRenderPromise = appChrome.renderSharedHeader(this._topBar$p$0, headerPropsHelper.getProps(false));
        Diag.ULS.shipAssertTag(594126728, 0, this._ewaControl$p$0.get_isReopenDisabled(), 'RenderReactHeader: Reopen should be disabled at this point');
        var $$t_7 = this;
        firstRenderPromise.then(function() {
            $$t_7._ewaControl$p$0.hidePageLoadSkeletonElement('skeletonAppHeaderPlaceHolder', true, '');
            if (!$$t_7._ewaControl$p$0.get_isEditMode()) {
                appChrome.getHeaderApi().then(function(api) {
                    api.updateDocumentTitleStatus(true, '', '', null);
                    return null;
                });
            }
        });
    },
    
    _initializeFocusManager$p$0: function _Ewa_ReactHeaderRenderer$_initializeFocusManager$p$0$in() {
        if (Common.AFrameworkApplication.get_activeFrame().get_theFocusManager() && Common.AFrameworkApplication.get_theActionManager() && this._ribbonFocusId$p$0 && this._topBar$p$0) {
            this._reactRibbonFocusManager$p$0 = new CommandUI.ReactRibbonFocusManager(Common.AFrameworkApplication.get_activeFrame().get_theFocusManager(), Common.AFrameworkApplication.get_theActionManager(), this._topBar$p$0, this._ribbonFocusId$p$0);
            this._reactRibbonFocusManager$p$0.initialize();
        }
    },
    
    dispose: function _Ewa_ReactHeaderRenderer$dispose$in() {
        if (!this._ewaControl$p$0.get_isAppUnloading()) {
            Diag.ULS.shipAssertTag(594330311, 0, false, 'ReactHeaderRenderer.Dispose was called when app not unloading');
        }
        this._ewaControl$p$0.get_sessionStateManager().remove_commandUIGeneratedAndGridInteractive(this.$$d__renderReactHeaderAction$p$0);
    }
}


_Ewa.RibbonManager = function _Ewa_RibbonManager(ewaControl, progressUIManager, commandUIJSON, ribbonUserFactory) {
    this.$$d__onWorkingStateChanged$p$3 = Function.createDelegate(this, this._onWorkingStateChanged$p$3);
    this.$$d__onRenderingModeChanged$p$3 = Function.createDelegate(this, this._onRenderingModeChanged$p$3);
    this.$$d__onCurrentSelectionModeChanged$p$3 = Function.createDelegate(this, this._onCurrentSelectionModeChanged$p$3);
    this.$$d__updateUndoRedoButtons$p$3 = Function.createDelegate(this, this._updateUndoRedoButtons$p$3);
    this.$$d__onActiveItemChanged$p$3 = Function.createDelegate(this, this._onActiveItemChanged$p$3);
    this.$$d__onCategoryMappingUpdated$p$3 = Function.createDelegate(this, this._onCategoryMappingUpdated$p$3);
    this._eventSource$p$3 = new _Ewa.BaseEventSource(false);
    this._contextualRibbonGroups$p$3 = [];
    this._licenseFeatures$p$3 = new ($$sc.List$1.$$(_Ewa.RibbonManager._licensedRibbonFeature))();
    this._licenseCommandsToDisable$p$3 = new ($$sc.List$1.$$(_Ewa.RibbonCommand))();
    _Ewa.RibbonManager.initializeBase(this, [ ewaControl, 'commandUIContainer', commandUIJSON ]);
    this._$$pf_ProgressUIManager$p$3 = progressUIManager;
    this._ribbonUserFactory$p$3 = ribbonUserFactory;
    if (this.get_rootCommandUIElement() && !document.getElementById(this.getNamingIdConcatString(this.get_commandUISuffix()))) {
        this.get_rootCommandUIElement().innerHTML = String.format('<div class=\'{0}\' id=\'{1}\'></div>', 'ewa-ribbon', this._$$pf_NamingIdPrefix$p$2 + this.get_commandUISuffix());
    }
    this._chartsContextualRibbonGroup$p$3 = _Ewa._contextualRibbonGroup.createContextualRibbonGroup(ewaControl, this, this.getNamingIdConcatString('Ribbon.ChartsGroup'), (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) ? 'Home' : this.getNamingIdConcatString('Ribbon.Home'), [ 2, 8 ], 4, (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) ? 'Chart' : this.getNamingIdConcatString('Ribbon.Charts.Design'));
    Array.add(this._contextualRibbonGroups$p$3, this._chartsContextualRibbonGroup$p$3);
    var drawingToolsContextualRibbonGroup = _Ewa._contextualRibbonGroup.createContextualRibbonGroup(ewaControl, this, (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) ? 'Home' : this.getNamingIdConcatString('Ribbon.DrawingGroup'), this.getNamingIdConcatString('Ribbon.Home'), [ 64 ], 3, (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) ? 'Drawing' : this.getNamingIdConcatString('Ribbon.Drawing.Format'));
    Array.add(this._contextualRibbonGroups$p$3, drawingToolsContextualRibbonGroup);
    var tableToolsContextualRibbonGroup = _Ewa._tableContextualRibbonGroup.createContextualRibbonGroup(ewaControl, this, (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) ? 'Home' : this.getNamingIdConcatString('Ribbon.TableToolsGroup'), this.getNamingIdConcatString('Ribbon.Home'), [ 1 ], (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) ? 'Table' : this.getNamingIdConcatString('Ribbon.Table.Design'));
    Array.add(this._contextualRibbonGroups$p$3, tableToolsContextualRibbonGroup);
    if (ewaControl.isServerFeatureEnabled(434)) {
        var pivotTableContextualRibbonGroup = _Ewa._pivotTableContextualRibbonGroup.createContextualRibbonGroup(ewaControl, this, (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) ? 'Home' : this.getNamingIdConcatString('Ribbon.PivotTableGroup'), this.getNamingIdConcatString('Ribbon.Home'), [ 1 ], (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) ? 'PivotTable' : this.getNamingIdConcatString('Ribbon.PivotTable'));
        Array.add(this._contextualRibbonGroups$p$3, pivotTableContextualRibbonGroup);
    }
    if (ewaControl.isServerFeatureEnabled(757)) {
        var slicerContextualRibbonGroup = _Ewa._contextualRibbonGroup.createContextualRibbonGroup(ewaControl, this, (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) ? 'Home' : this.getNamingIdConcatString('Ribbon.SlicerGroup'), this.getNamingIdConcatString('Ribbon.Home'), [ 128 ], 5, (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) ? 'Slicer' : this.getNamingIdConcatString('Ribbon.Slicer'));
        Array.add(this._contextualRibbonGroups$p$3, slicerContextualRibbonGroup);
    }
    ewaControl.get_commandHandlerManager().addCommandHandler(this, null);
    this._$$pf_FileMenuManager$p$2 = new _Ewa.FileMenuManager(ewaControl);
    this._linkedEntityEnabled$p$3 = this._$$pf_EwaControl$p$2.isServerFeatureEnabled(169);
    this._skipPollForStateWhenAppUnloading$p$3 = this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:3877181_SkipPoll4StateOnUnload');
    this._$$pf_EwaControl$p$2.get_serviceRegistry().registerService(_Ewa.RibbonManager, 391, this);
    this.attachCommandUIControlInternal();
}
_Ewa.RibbonManager._getNumberFormatCategoryByMenuIndex$p = function _Ewa_RibbonManager$_getNumberFormatCategoryByMenuIndex$p$st(numberFormatCategory) {
    switch (numberFormatCategory) {
        case 0:
            return _Ewa.ClientStringManager.get_instance().getString(398);
        case 1:
            return _Ewa.ClientStringManager.get_instance().getString(399);
        case 2:
            return _Ewa.ClientStringManager.get_instance().getString(400);
        case 3:
            return _Ewa.ClientStringManager.get_instance().getString(401);
        case 4:
            return _Ewa.ClientStringManager.get_instance().getString(409);
        case 5:
            return _Ewa.ClientStringManager.get_instance().getString(404);
        case 6:
            return _Ewa.ClientStringManager.get_instance().getString(405);
        case 7:
            return _Ewa.ClientStringManager.get_instance().getString(406);
        case 8:
            return _Ewa.ClientStringManager.get_instance().getString(407);
        case 9:
            return _Ewa.ClientStringManager.get_instance().getString(408);
        case 10:
            return _Ewa.ClientStringManager.get_instance().getString(410);
        case 11:
            return _Ewa.ClientStringManager.get_instance().getString(411);
        default:
            Diag.ULS.debugAssertTag(9048322, 0, false, 'GetNumberFormatCategoryByMenuIndex - wrong category \'{0}\'', numberFormatCategory);
            return _Ewa.ClientStringManager.get_instance().getString(398);
    }
}
_Ewa.RibbonManager.prototype = {
    _chartsContextualRibbonGroup$p$3: null,
    _selectedContextualRibbonGroup$p$3: null,
    _activeCell$p$3: null,
    _headerUI$p$3: null,
    _ribbonUser$p$3: null,
    _ribbonUserFactory$p$3: null,
    _instantaneousSupportInformationManager$p$3: null,
    _convertToLinkedEntityManager$p$3: null,
    _geographyGalleryButtonPopulated$p$3: false,
    _stockGalleryButtonPopulated$p$3: false,
    _linkedEntityEnabled$p$3: false,
    _linkedEntityManagerTaskInitialized$p$3: false,
    _skipPollForStateWhenAppUnloading$p$3: false,
    _trimmedProperties$p$3: null,
    _numberFormatCategoryInRibbonReadyTcsForTests$p$3: null,
    _applicationFeatureHelper$p$3: null,
    
    add_ribbonStateChanged: function _Ewa_RibbonManager$add_ribbonStateChanged$in(value) {
        this._eventSource$p$3.addHandler('ribbonStateChanged', value);
    },
    
    remove_ribbonStateChanged: function _Ewa_RibbonManager$remove_ribbonStateChanged$in(value) {
        this._eventSource$p$3.removeHandler('ribbonStateChanged', value);
    },
    
    add_activateContextualTabOnObjectCreation: function _Ewa_RibbonManager$add_activateContextualTabOnObjectCreation$in(value) {
        this._eventSource$p$3.addHandler('ActivateContextualTabForCurrentSelection', value);
    },
    
    remove_activateContextualTabOnObjectCreation: function _Ewa_RibbonManager$remove_activateContextualTabOnObjectCreation$in(value) {
        this._eventSource$p$3.removeHandler('ActivateContextualTabForCurrentSelection', value);
    },
    
    raiseActivateContextualTabEvent: function _Ewa_RibbonManager$raiseActivateContextualTabEvent$in(ribbonTab) {
        this._eventSource$p$3.raiseEvent('ActivateContextualTabForCurrentSelection', new _Ewa.SelectContextualTabEventArgs(ribbonTab), null);
    },
    
    get_sectionName: function _Ewa_RibbonManager$get_sectionName$in() {
        return 'RM';
    },
    
    get__ribbonExternal$p$3: function _Ewa_RibbonManager$get__ribbonExternal$p$3$in() {
        return (this._ribbonUser$p$3) ? this._ribbonUser$p$3.get_ribbonExternal() : null;
    },
    
    get_ribbonUser: function _Ewa_RibbonManager$get_ribbonUser$in() {
        return this._ribbonUser$p$3;
    },
    
    get_inKeytipMode: function _Ewa_RibbonManager$get_inKeytipMode$in() {
        return this._ribbonUser$p$3.get_inKeyTipMode();
    },
    
    get_ribbonMode: function _Ewa_RibbonManager$get_ribbonMode$in() {
        return (this._ribbonUser$p$3) ? this._ribbonUser$p$3.get_ribbonMode() : 3;
    },
    
    get_commandUISuffix: function _Ewa_RibbonManager$get_commandUISuffix$in() {
        return 'commandUIPlaceHolder';
    },
    
    get_activeCell: function _Ewa_RibbonManager$get_activeCell$in() {
        return this._activeCell$p$3;
    },
    
    set_activeCell: function _Ewa_RibbonManager$set_activeCell$in(value) {
        this._activeCell$p$3 = value;
        return value;
    },
    
    _$$pf_ProgressUIManager$p$3: null,
    
    dispose: function _Ewa_RibbonManager$dispose$in() {
        this._unsubscribeFromEvents$p$3();
        System.IDisposableExtensions.safeDisposeArray([ this._headerUI$p$3, this._ribbonUser$p$3, this._ribbonUserFactory$p$3 ]);
        if (this._$$pf_EwaControl$p$2 && !this._$$pf_EwaControl$p$2.isServerFeatureEnabled(171)) {
            this._$$pf_EwaControl$p$2.get_serviceRegistry().detachAndDisposeService(_Ewa.IConvertToLinkedEntityManager, 271);
        }
        System.IDisposableExtensions.safeDisposeArray(this._contextualRibbonGroups$p$3);
        this._headerUI$p$3 = null;
        this._ribbonUser$p$3 = null;
        this._ribbonUserFactory$p$3 = null;
        this._activeCell$p$3 = null;
        this._$$pf_ProgressUIManager$p$3 = null;
        this._instantaneousSupportInformationManager$p$3 = null;
        this._convertToLinkedEntityManager$p$3 = null;
        this._removeLicensingCallbacks$p$3();
        _Ewa.CommandUIManager.prototype.dispose.call(this);
    },
    
    initializeConvertToLinkedEntityManager: function _Ewa_RibbonManager$initializeConvertToLinkedEntityManager$in(convertToLinkedEntityManagerInitialized) {
        Diag.ULS.debugAssertTag(591958241, 0, !convertToLinkedEntityManagerInitialized || this._$$pf_EwaControl$p$2.isServerFeatureEnabled(171), 'LinkedEntityDelayedHandshake needs to be enabled to set convertToLinkedEntityManager directly');
        if (convertToLinkedEntityManagerInitialized) {
            this._convertToLinkedEntityManager$p$3 = convertToLinkedEntityManagerInitialized;
        }
        else if (this._linkedEntityEnabled$p$3 && this._$$pf_EwaControl$p$2.get_sessionStateManager().get_isSessionActive() && !this._convertToLinkedEntityManager$p$3 && !this._linkedEntityManagerTaskInitialized$p$3) {
            Diag.ULS.sendTraceTag(593590107, 0, 50, 'RibbonManager.InitalizeConvertToLinkedEntityManager - getConvertToLinkedEntityManagerTask created');
            var getConvertToLinkedEntityManagerTask = _Ewa.GetServiceTaskFactory.getOrCreateAsync(_Ewa.IConvertToLinkedEntityManager, this._$$pf_EwaControl$p$2.get_serviceRegistry(), 271, 272, 1);
            var $$t_4 = this;
            _Ewa.TaskExtensions.cw(getConvertToLinkedEntityManagerTask, function(task) {
                $$t_4._convertToLinkedEntityManager$p$3 = (task).get_result();
                Diag.ULS.sendTraceTag(593590106, 0, 50, 'RibbonManager.InitalizeConvertToLinkedEntityManager: convertToLinkedEntityManager set = {0}', (!$$t_4._convertToLinkedEntityManager$p$3) ? 'null' : 'NOT null');
                $$t_4._convertToLinkedEntityManager$p$3.populateDomainData();
            }, this._$$pf_EwaControl$p$2.get_cancelOnDisposeToken(), 3);
            this._linkedEntityManagerTaskInitialized$p$3 = true;
        }
    },
    
    onComponentBuilt: function _Ewa_RibbonManager$onComponentBuilt$in(root, componentId) {
        Diag.ULS.shipAssertTag(23634398, 0, false, 'This function should not be called. IRootBuildClient for ribbon is implemented by LegacyRibbonUser class.');
    },
    
    belongsToSection: function _Ewa_RibbonManager$belongsToSection$in(candidate) {
        return _Ewa.CommandUIManager.belongsToCommandUIElement((this).get_rootElement(), candidate);
    },
    
    updateOpenMenu: function _Ewa_RibbonManager$updateOpenMenu$in(menuId) {
        return (!!this._ribbonUser$p$3 && this._ribbonUser$p$3.updateOpenMenu(menuId)) || this.get_theStandaloneRoot().refreshOpenMenu(menuId);
    },
    
    updateControlView: function _Ewa_RibbonManager$updateControlView$in(controlId, resizeHeaders) {
        if (this.get__ribbonExternal$p$3() && this._$$pf_EwaControl$p$2.get_sessionStateManager().get_isSessionActive()) {
            this.get_theStandaloneRoot().pollForControlState(controlId);
            if (resizeHeaders) {
                this.get__ribbonExternal$p$3().scaleHeader();
            }
        }
    },
    
    handleFocusGained: function _Ewa_RibbonManager$handleFocusGained$in() {
        var $$t_2 = this;
        this._ribbonUser$p$3.enterKeytipMode(function(DomEvent) {
            $$t_2._ribbonUser$p$3.exitKeytipModeCallback();
        });
        Common.AFrameworkApplication.get_activeFrame().get_theFocusManager().setScope(this.get_sectionName());
    },
    
    handleFocusLost: function _Ewa_RibbonManager$handleFocusLost$in() {
        if (this.get_inKeytipMode()) {
            this._ribbonUser$p$3.exitKeytipMode(true, true);
        }
    },
    
    logVisibilityMismatch: function _Ewa_RibbonManager$logVisibilityMismatch$in() {
        this._validateTrimmingPropertiesMatch$p$3(this._trimmedProperties$p$3, this._buildTrimmingProperties$p$3());
    },
    
    executeCommand: function _Ewa_RibbonManager$executeCommand$in(selectionMode, commandInfo, properties, data) {
        var handled = true;
        switch (commandInfo.get_command()) {
            case 1308255763:
                this._handleRibbonStateChanged$p$3();
                break;
            case 1631556630:
            case 1401833042:
            case -887642827:
                this._toggleMinimizeRibbon$p$3();
                break;
            case -411645385:
                this._toggleKeytipModeExternal$p$3(properties);
                break;
            case -1610103463:
                this._toggleRibbonUX$p$3();
                break;
            case -1104934572:
                this._handleRibbonTabSwitched$p$3(_Ewa.CommandUIManager.ribbonCommandFromId(properties['NewContextCommand']), commandInfo);
                break;
            case -263833595:
                this._toggleRibbonMode$p$3(true);
                break;
            case 536345575:
                this._toggleRibbonMode$p$3(false);
                break;
            default:
                handled = false;
                break;
        }
        return (handled) ? $$sc.Task.fromResult(Boolean, true) : _Ewa.RibbonCommandExtensions.createTaskForUnhandledCommand(commandInfo.get_command());
    },
    
    canExecuteCommand: function _Ewa_RibbonManager$canExecuteCommand$in(selectionMode, commandInfo, properties, data) {
        var canExecuteCommand = false;
        switch (commandInfo.get_command()) {
            case 1308255763:
            case 1631556630:
            case 1401833042:
            case -887642827:
            case -411645385:
            case -1104934572:
            case 536345575:
            case -263833595:
                canExecuteCommand = true;
                break;
            case -1610103463:
                canExecuteCommand = _Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isSimplifiedReactRibbonUxFlightEnabled();
                break;
        }
        return canExecuteCommand;
    },
    
    populateMenu: function _Ewa_RibbonManager$populateMenu$in(selectionMode, populateCommand, menuProperties) {
        return false;
    },
    
    shouldDisable: function _Ewa_RibbonManager$shouldDisable$in(selectionMode, command) {
        switch (command) {
            case 536345575:
            case -263833595:
            case -1610103463:
                return false;
        }
        var grid = _Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2);
        var selectedRanges = (this._$$pf_EwaControl$p$2.isServerFeatureEnabled(458)) ? grid.get_selectionManager().get_gridSelection().get_selectedRanges() : [ grid.get_selectionManager().get_singleSelectedRange() ];
        var sheetProtection = new _Ewa.SheetProtection(this._$$pf_EwaControl$p$2.get_sheets());
        return !sheetProtection.isRibbonCommandAllowed(selectionMode, command, selectedRanges, grid) || this._licenseCommandsToDisable$p$3.contains(command);
    },
    
    prepareNumberFormatCategoryInRibbonReadyTaskForTests: function _Ewa_RibbonManager$prepareNumberFormatCategoryInRibbonReadyTaskForTests$in() {
        _Ewa.ULS.debugSendTraceTag(50665537, 0, 50, 'RibbonManager.PrepareNumberFormatCategoryInRibbonReadyTaskForTests called.');
        this._numberFormatCategoryInRibbonReadyTcsForTests$p$3 = new ($$sc.TaskCompletionSource$1.$$(String))();
    },
    
    getNumberFormatCategoryInRibbonReadyTaskForTests: function _Ewa_RibbonManager$getNumberFormatCategoryInRibbonReadyTaskForTests$in() {
        _Ewa.ULS.debugSendTraceTag(50665538, 0, 50, 'RibbonManager.GetNumberFormatCategoryInRibbonReadyTaskForTests called. Task Status = {0}', this._numberFormatCategoryInRibbonReadyTcsForTests$p$3.get_task().get_status());
        return this._numberFormatCategoryInRibbonReadyTcsForTests$p$3.get_task();
    },
    
    handleRibbonQueryCommandForGrid: function _Ewa_RibbonManager$handleRibbonQueryCommandForGrid$in(queryCommand, properties, commandName) {
        var commandHandled = true;
        if (this._$$pf_EwaControl$p$2.get_commandHandlerManager().getCurrentSelectionMode() !== 1) {
            return commandHandled;
        }
        var format = this._activeCell$p$3;
        if (format) {
            var gridCellProxy = $$as(_Ewa.IGridCellProxy, format.get_cell());
            var blockModelProxy = (gridCellProxy) ? gridCellProxy.get_gridBlockModelProxy() : null;
            if (blockModelProxy && blockModelProxy.getCellFromRange(format.get_cell().getRange(false), false, false) !== format.get_cell()) {
                format = this._activeCell$p$3 = _Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).getFormattedCell(null);
            }
        }
        if (!format) {
            return commandHandled;
        }
        if (this._$$pf_EwaControl$p$2.get_isChromeRtl() && (queryCommand === 'QueryAlignmentLeft' || queryCommand === 'QueryAlignmentRight')) {
            queryCommand = (queryCommand === 'QueryAlignmentLeft') ? 'QueryAlignmentRight' : 'QueryAlignmentLeft';
        }
        var grid = _Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2);
        switch (queryCommand) {
            case 'QueryNumberFormat':
                if (!this._instantaneousSupportInformationManager$p$3) {
                    this._instantaneousSupportInformationManager$p$3 = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.IInstantaneousSupportInformationManager, 268, false);
                    if (this._instantaneousSupportInformationManager$p$3) {
                        this._instantaneousSupportInformationManager$p$3.add_categoryMappingUpdated(this.$$d__onCategoryMappingUpdated$p$3);
                    }
                }
                var categorySet = false;
                var categoryText = '';
                var category = 0;
                var formatIndex = 0;
                if (this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4177982_AddingIfmtCellToCell')) {
                    formatIndex = format.get_cell().get_stampedCellNumberFormatIndex();
                }
                else {
                    formatIndex = format.get_cell().get_numberFormatIndex();
                }
                if (formatIndex <= 0) {
                    categoryText = _Ewa.RibbonManager._getNumberFormatCategoryByMenuIndex$p(0);
                    categorySet = true;
                }
                else {
                    var $$t_F, $$t_G;
                    if (this._instantaneousSupportInformationManager$p$3 && (($$t_G = this._instantaneousSupportInformationManager$p$3.tryGetNumberFormatCategory(formatIndex, ($$t_F = {'val': category}), false)), category = $$t_F.val, $$t_G)) {
                        categoryText = _Ewa.RibbonManager._getNumberFormatCategoryByMenuIndex$p(category);
                        categorySet = true;
                    }
                    else {
                        Diag.ULS.sendTraceTag(40468577, 0, 50, 'RibbonManager.HandleRibbonQueryCommandForGrid failed to get number format category for index {0}. this.instantaneousSupportInformationManager==null={1}', formatIndex, !this._instantaneousSupportInformationManager$p$3);
                    }
                }
                properties[CommandUI.Controls.ComboBoxCommandProperties.Value] = categoryText;
                if (categorySet && this._numberFormatCategoryInRibbonReadyTcsForTests$p$3) {
                    _Ewa.ULS.debugSendTraceTag(50665539, 0, 50, 'RibbonManager.HandleRibbonQueryCommandForGrid:QueryNumberFormat setting numberForamtCategoryInRibbonReadyTcsForTests to {0}', categoryText);
                    this._numberFormatCategoryInRibbonReadyTcsForTests$p$3.setResult(categoryText);
                }
                _Ewa.ULS.debugSendTraceTag(50665540, 0, 50, 'RibbonManager.HandleRibbonQueryCommandForGrid:QueryNumberFormat finished: categorySet={0}, category={1}', categorySet, categoryText);
                break;
            case 'QueryFontSize':
                properties[CommandUI.Controls.ComboBoxCommandProperties.IsFreeForm] = true;
                var fontSizeValue = format.get_fontSize().toString();
                properties[CommandUI.Controls.ComboBoxCommandProperties.Value] = fontSizeValue;
                break;
            case 'QueryFontName':
                properties[CommandUI.Controls.ComboBoxCommandProperties.IsFreeForm] = true;
                var fontFamilyValue = format.get_fontName();
                properties[CommandUI.Controls.ComboBoxCommandProperties.Value] = fontFamilyValue;
                break;
            case 'QueryBold':
                properties['On'] = format.get_bold();
                break;
            case 'QueryItalics':
                properties['On'] = format.get_italic();
                break;
            case 'QueryUnderline':
                properties['On'] = format.get_underline();
                break;
            case 'QueryDoubleUnderline':
                properties['On'] = format.get_doubleUnderline();
                break;
            case 'QueryBorderColor':
                var borderFormatManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.IBorderFormatManager, 296, false);
                if (borderFormatManager) {
                    properties['IconColor'] = Common.StringUtils.getRGBFromBGR(borderFormatManager.currentBorderColor());
                }
                break;
            case 'QueryStrikethrough':
                properties['On'] = format.get_fontStrikethrough();
                break;
            case 'QueryAlignmentWrap':
                properties['On'] = format.get_wrapped();
                break;
            case 'QueryMergeCellsMenu':
                properties['On'] = grid.get_selectionManager().isMergeInSelection();
                break;
            case 'QueryAlignment':
                if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
                    properties[CommandUI.SharedControlCommandProperties.Icon] = (_Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).get_rtl()) ? 'RightAlign_20' : 'LeftAlign_20';
                }
                break;
            case 'QueryAlignmentLeft':
                properties['On'] = format.get_horizontalAlignment() === 1;
                break;
            case 'QueryAlignmentCenter':
                properties['On'] = format.get_horizontalAlignment() === 2;
                break;
            case 'QueryAlignmentRight':
                properties['On'] = format.get_horizontalAlignment() === 3;
                break;
            case 'QueryAlignmentTop':
                properties['On'] = !format.get_verticalAlignment();
                break;
            case 'QueryAlignmentMiddle':
                properties['On'] = format.get_verticalAlignment() === 1;
                break;
            case 'QueryAlignmentBottom':
                properties['On'] = format.get_verticalAlignment() === 2;
                break;
            case 'QueryIncreaseIndent':
                if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
                    properties[CommandUI.SharedControlCommandProperties.Icon] = (this._$$pf_EwaControl$p$2.get_isChromeRtl()) ? 'IndentRTL_20' : 'Indent_20';
                }
                else {
                    properties[CommandUI.Controls.ButtonCommandProperties.Image16by16Class] = (_Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).get_rtl()) ? 'ewaboot_indentrtl16' : 'ewaboot_indent16';
                }
                break;
            case 'QueryDecreaseIndent':
                if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
                    properties[CommandUI.SharedControlCommandProperties.Icon] = (this._$$pf_EwaControl$p$2.get_isChromeRtl()) ? 'Indent_20' : 'IndentRTL_20';
                }
                else {
                    properties[CommandUI.Controls.ButtonCommandProperties.Image16by16Class] = (_Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).get_rtl()) ? 'ewaboot_outdentrtl16' : 'ewaboot_outdent16';
                }
                break;
            case 'QueryBorderGalleryIcon':
                properties[CommandUI.Controls.GalleryButtonCommandProperties.On] = false;
                break;
            case 'QueryModeSwitcherEditMode':
                properties['On'] = this._$$pf_EwaControl$p$2.get_isEditMode();
                break;
            case 'QueryModeSwitcherViewMode':
                properties['On'] = !this._$$pf_EwaControl$p$2.get_isEditMode();
                break;
            default:
                Diag.ULS.debugAssertTag(1635150899, 0, false, 'RibbonManager.HandleRibbonQueryCommandForGrid: Don\'t know how to handle query command \'{0}\'', commandName);
                commandHandled = false;
                break;
        }
        return commandHandled;
    },
    
    updateRibbonParameters: function _Ewa_RibbonManager$updateRibbonParameters$in() {
        if (this._$$pf_EwaControl$p$2 && this._ribbonUser$p$3) {
            var frame = this._$$pf_EwaControl$p$2.get_frame();
            frame.set_upperRibbonHeight(this._ribbonUser$p$3.get_upperRibbonHeight());
            frame.set_lowerRibbonHeight(this._ribbonUser$p$3.get_lowerRibbonHeight());
            _Ewa.DOMElementExtensions.updateHeight(this._$$pf_CommandUIElement$p$2, frame.get_documentPanelWithRibbonTop(), false);
        }
    },
    
    handleQueryCommand: function _Ewa_RibbonManager$handleQueryCommand$in(commandName, commandParams) {
        var queryCommand = commandName;
        var ewa = this._$$pf_EwaControl$p$2;
        var grid = _Ewa.GridViewExtensions.grid(ewa);
        if (queryCommand === 'QueryChartGalleryIcon') {
            commandParams[CommandUI.Controls.GalleryButtonCommandProperties.On] = false;
        }
        else if (queryCommand === 'QueryConditionalFormattingGalleryIcon') {
            commandParams[CommandUI.Controls.GalleryButtonCommandProperties.On] = false;
        }
        else if (queryCommand === 'QueryLinkedEntityGalleryIcon') {
            commandParams[CommandUI.Controls.GalleryButtonCommandProperties.On] = false;
        }
        else if (queryCommand === 'QueryLinkedEntityGalleryButtons' && this._linkedEntityEnabled$p$3) {
            commandParams[CommandUI.Controls.GalleryButtonCommandProperties.On] = false;
            if (!commandParams[CommandUI.Controls.GalleryButtonCommandProperties.InnerHTML]) {
                var linkedEntityRibbonVisibilityImprovementEnabled = _Ewa.IsFeatureEnabledExtensions.isLinkedEntityRibbonVisibilityImprovementEnabled(this._$$pf_EwaControl$p$2);
                if (!linkedEntityRibbonVisibilityImprovementEnabled && this._convertToLinkedEntityManager$p$3) {
                    this.updateLinkedEntityGalleryButtonsVisibility();
                }
                else if (linkedEntityRibbonVisibilityImprovementEnabled && !_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
                    this.updateLinkedEntityGalleryButtonsVisibility();
                }
            }
            if (this._convertToLinkedEntityManager$p$3 && !commandParams[CommandUI.Controls.GalleryButtonCommandProperties.InnerHTML]) {
                var menuItemIdKey = commandParams['MenuItemId'].toString();
                var isStaticStockButton = (_Ewa.StringExtensions.equals(menuItemIdKey, _Ewa.ClientStringManager.get_instance().getString(1528), true) || _Ewa.StringExtensions.equals(menuItemIdKey, _Ewa.ClientStringManager.get_instance().getString(1529), true));
                var isStaticGeographyButton = _Ewa.StringExtensions.equals(menuItemIdKey, _Ewa.ClientStringManager.get_instance().getString(1530), true);
                if (this._$$pf_EwaControl$p$2.isServerFeatureEnabled(672)) {
                    if (!isStaticStockButton && !isStaticGeographyButton) {
                        this._convertToLinkedEntityManager$p$3.getDynamicPreviewGalleryButtonProperties(menuItemIdKey, commandParams);
                    }
                }
                else {
                    if (!this._stockGalleryButtonPopulated$p$3 && isStaticStockButton) {
                        this._stockGalleryButtonPopulated$p$3 = true;
                        commandParams[CommandUI.Controls.GalleryButtonCommandProperties.InnerHTML] = this._convertToLinkedEntityManager$p$3.constructGalleryButtonHtmlForStockDomain();
                    }
                    else if (!this._geographyGalleryButtonPopulated$p$3 && isStaticGeographyButton) {
                        this._geographyGalleryButtonPopulated$p$3 = true;
                        commandParams[CommandUI.Controls.GalleryButtonCommandProperties.InnerHTML] = this._convertToLinkedEntityManager$p$3.constructGalleryButtonHtmlForGeographyDomain();
                    }
                }
            }
        }
        else if (queryCommand === 'QueryLinkedEntityMenuGalleryButtons' && this._linkedEntityEnabled$p$3) {
            commandParams[CommandUI.Controls.GalleryButtonCommandProperties.On] = false;
            if (this._convertToLinkedEntityManager$p$3 && !commandParams[CommandUI.Controls.GalleryButtonCommandProperties.InnerHTML]) {
                var domain = commandParams['MenuItemId'];
                commandParams[CommandUI.Controls.GalleryButtonCommandProperties.InnerHTML] = this._convertToLinkedEntityManager$p$3.constructGalleryButtonHtmlFromDomain(domain);
            }
        }
        else if (queryCommand === 'QueryLinkedEntityMenuGalleryButtonsRedesign' && this._linkedEntityEnabled$p$3) {
            commandParams[CommandUI.Controls.GalleryButtonCommandProperties.On] = false;
        }
        else if (queryCommand === 'QueryEditingView') {
            commandParams['On'] = ewa.get_isEditMode();
        }
        else if (queryCommand === 'QueryReadingView') {
            commandParams['On'] = !ewa.get_isEditMode();
        }
        else if (queryCommand === 'QueryShowComments') {
            var commentTaskPane = ewa.get_serviceRegistry().getService(_Ewa.ICommentTaskPane, 52, false);
            commandParams['On'] = !!commentTaskPane && commentTaskPane.get_isVisible();
        }
        else if (queryCommand === 'QueryShowGridlines') {
            commandParams['On'] = !_Ewa.ActiveItemExtensions.areGridlinesHidden(ewa.get_activeItem());
        }
        else if (queryCommand === 'QueryShowHeadings') {
            commandParams['On'] = _Ewa.ActiveItemExtensions.areHeadersVisible(ewa.get_activeItem());
        }
        else if (queryCommand === 'QueryChangeSheetDirection') {
            commandParams['On'] = ewa.get_activeItem().get_displayRtl();
        }
        else if (queryCommand === 'QueryFreezePanes') {
            commandParams[CommandUI.Controls.ButtonCommandProperties.LabelText] = (grid.get_paneViewManager().get_inFreezePanesMode()) ? _Ewa.ClientStringManager.get_instance().getString(1287) : _Ewa.ClientStringManager.get_instance().getString(1286);
        }
        else if (queryCommand === 'QueryFormatPainter') {
            commandParams['On'] = grid.get_isFormatPainterOn();
        }
        else if (queryCommand === 'QueryShapeStyle') {
            _Ewa.OArtExtensions.shapeManager(ewa).handleShapeStyleQueryCommands(commandName, commandParams);
        }
        else if (queryCommand === 'QueryCellStyles') {
            var cellstylesManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.ICellStylesManager, 325, false);
            if (cellstylesManager) {
                cellstylesManager.handleQueryCellStylesCommand(commandParams);
            }
        }
        else if (queryCommand === 'QueryShapeOutlineWeight') {
            _Ewa.OArtExtensions.shapeManager(ewa).handleShapeOutlineWeightQueryCommands(commandName, commandParams);
        }
        else if (queryCommand === 'QueryShapeOutlineDashes') {
            _Ewa.OArtExtensions.shapeManager(ewa).handleShapeOutlineDashesQueryCommands(commandName, commandParams);
        }
        else if (queryCommand === 'QueryBreadcrumbDocName') {
            var breadcrumbDocName = Common.AFrameworkApplication.docPropertiesProvider.get_breadcrumbDocName();
            commandParams['Value'] = Common.StringUtils.getFileNameWithoutExtension(breadcrumbDocName);
        }
        else if (queryCommand === 'QuerySessionId') {
            commandParams['Text'] = Common.AFrameworkApplication.userSessionId;
        }
        else if (queryCommand === 'QueryBuildVersion') {
            commandParams['Text'] = Common.AFrameworkApplication.buildVersion;
        }
        else if (queryCommand === 'QueryAverageButton' || queryCommand === 'QueryCountButton' || queryCommand === 'QueryNumericalCountButton' || queryCommand === 'QueryMinimumButton' || queryCommand === 'QueryMaximumButton' || queryCommand === 'QuerySumButton') {
            var statusBarAggregateManager = ewa.get_serviceRegistry().getService(_Ewa.IStatusBarAggregateManager, 27, false);
            statusBarAggregateManager.getQueryCommandStatus(commandName, commandParams);
        }
        else if (queryCommand === 'QueryToggleAutoFilter') {
            commandParams['On'] = this._handleRibbonQueryCommandToggleAutoFilter$p$3();
        }
        else if (queryCommand === 'QueryDeleteCellsShiftLeft') {
            var unparsedString = (_Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).get_rtl()) ? _Ewa.ClientStringManager.get_instance().getString(299) : _Ewa.ClientStringManager.get_instance().getString(454);
            commandParams[CommandUI.Controls.ButtonCommandProperties.LabelText] = unparsedString.replace('&amp;', '&');
        }
        else if (queryCommand === 'QueryInsertCellsShiftRight') {
            var unparsedString = (_Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).get_rtl()) ? _Ewa.ClientStringManager.get_instance().getString(300) : _Ewa.ClientStringManager.get_instance().getString(457);
            commandParams[CommandUI.Controls.ButtonCommandProperties.LabelText] = unparsedString.replace('&amp;', '&');
        }
        else if (queryCommand === 'QueryInsertColumnsTable') {
            commandParams[CommandUI.Controls.ButtonCommandProperties.LabelText] = (_Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).get_rtl()) ? _Ewa.ClientStringManager.get_instance().getString(370) : _Ewa.ClientStringManager.get_instance().getString(369);
        }
        else if (queryCommand === 'QueryInsertCopiedCutCells') {
            var copyPasteInfrastructure = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.ICopyPasteInfrastructure, 254, false);
            commandParams[CommandUI.Controls.ButtonCommandProperties.LabelText] = (copyPasteInfrastructure && copyPasteInfrastructure.lastOperationWasCut()) ? _Ewa.ClientStringManager.get_instance().getString(20) : _Ewa.ClientStringManager.get_instance().getString(14);
        }
        else if (queryCommand === 'QuerySetReadOnlyRecommended') {
            commandParams[CommandUI.Controls.ToggleButtonCommandProperties.Alt] = (this._$$pf_EwaControl$p$2.get_sessionStateManager().get_amIAlone()) ? '' : _Ewa.ClientStringManager.get_instance().getString(517);
            commandParams['On'] = _Ewa.WorkbookOptionsExtensions.isReadOnlyRecommended(ewa.get_sessionStateManager().get_workbookContext().Options);
            commandParams['Description'] = (_Ewa.WorkbookOptionsExtensions.isReadOnlyRecommended(ewa.get_sessionStateManager().get_workbookContext().Options)) ? _Ewa.ClientStringManager.get_instance().getString(516) : _Ewa.ClientStringManager.get_instance().getString(515);
        }
        else if (queryCommand === 'QueryCalcMode') {
            if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
                commandParams[CommandUI.Controls.ComboBoxCommandProperties.Value] = this._$$pf_EwaControl$p$2.getCalcModeString();
            }
            else {
                var calcMode = parseInt(commandParams['MenuItemId']);
                if (calcMode >= 0 && calcMode < 3) {
                    commandParams['On'] = this._$$pf_EwaControl$p$2.get_sessionStateManager().get_workbookContext().CalcMode === calcMode;
                }
                else {
                    Diag.ULS.sendTraceTag(41263651, 0, 10, 'QueryCalcMode , unexpected menuItemId: {0}', commandParams['MenuItemId']);
                }
            }
        }
        else if (queryCommand === 'QueryBorderStyle') {
            var borderFormatManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.IBorderFormatManager, 296, false);
            if (borderFormatManager) {
                borderFormatManager.handleQueryBorderStyleCommand(commandParams);
            }
        }
        else if (queryCommand === 'QueryTableStyleOption') {
            var tableStyleManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.ITableStyleManager, 329, false);
            if (tableStyleManager) {
                commandParams['On'] = tableStyleManager.handleTableStyleOptionQueryCommand(commandParams);
            }
        }
        else if (queryCommand === 'QueryFieldListStatus') {
            var fieldManagerPane = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.IFieldManagerPane, 16, false);
            commandParams['On'] = ((fieldManagerPane) ? fieldManagerPane.isEnabledForWorkbook() : !_Ewa.WorkbookOptionsExtensions.hidePivotFieldList(this._$$pf_EwaControl$p$2.get_workbookOptions()));
        }
        else if (queryCommand === 'QueryPivotTableDrillInState') {
            var pivotTable = grid.get_gridContentQueries().getPivotTableRangeFromRange(grid.get_selectionManager().get_activeCell());
            if (pivotTable) {
                commandParams['On'] = pivotTable.get_showDrillIndicators();
            }
            else {
                Diag.ULS.sendTraceTag(51668449, 0, 50, 'PivotTableRange is null for QueryPivotTableDrillInState');
            }
        }
        else if (queryCommand === 'QueryPivotTableRowHeaders') {
            var pivotTable = grid.get_gridContentQueries().getPivotTableRangeFromRange(grid.get_selectionManager().get_activeCell());
            if (pivotTable) {
                commandParams['On'] = pivotTable.get_showRowHeaders();
            }
            else {
                Diag.ULS.sendTraceTag(51668450, 0, 50, 'PivotTableRange is null for QueryPivotTableRowHeaders');
            }
        }
        else if (queryCommand === 'QueryPivotTableBandedRows') {
            var pivotTable = grid.get_gridContentQueries().getPivotTableRangeFromRange(grid.get_selectionManager().get_activeCell());
            if (pivotTable) {
                commandParams['On'] = pivotTable.get_showRowStripes();
            }
            else {
                Diag.ULS.sendTraceTag(51668451, 0, 50, 'PivotTableRange is null for QueryPivotTableBandedRows');
            }
        }
        else if (queryCommand === 'QueryPivotTableColumnHeaders') {
            var pivotTable = grid.get_gridContentQueries().getPivotTableRangeFromRange(grid.get_selectionManager().get_activeCell());
            if (pivotTable) {
                commandParams['On'] = pivotTable.get_showColumnHeaders();
            }
            else {
                Diag.ULS.sendTraceTag(51668480, 0, 50, 'PivotTableRange is null for QueryPivotTableColumnHeaders');
            }
        }
        else if (queryCommand === 'QueryPivotTableBandedColumns') {
            var pivotTable = grid.get_gridContentQueries().getPivotTableRangeFromRange(grid.get_selectionManager().get_activeCell());
            if (pivotTable) {
                commandParams['On'] = pivotTable.get_showColumnStripes();
            }
            else {
                Diag.ULS.sendTraceTag(51668481, 0, 50, 'PivotTableRange is null for QueryPivotTableBandedColumns');
            }
        }
        else if (queryCommand === 'QueryPivotTableSettingsStatus') {
            var pivotTableSettingsTaskPane = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.IPivotTableSettingsTaskPane, 346, false);
            if (pivotTableSettingsTaskPane) {
                commandParams['On'] = pivotTableSettingsTaskPane.get_enabledToShow();
            }
            else {
                Diag.ULS.sendTraceTag(51668482, 0, 50, 'pivotTableSettingsTaskPane is null for QueryPivotTableSettingsStatus');
            }
        }
        else if (queryCommand === 'QuerySlicerSettingsStatus') {
            var slicerSettingsTaskPane = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.ISlicerSettingsTaskPane, 371, false);
            if (slicerSettingsTaskPane) {
                commandParams['On'] = slicerSettingsTaskPane.get_enabledToShow();
            }
            else {
                Diag.ULS.sendTraceTag(593850371, 0, 50, 'slicerSettingsTaskPane is null for QuerySlicerSettingsStatus');
            }
        }
        else if ('QueryTableName' === queryCommand) {
            if (this._$$pf_EwaControl$p$2.isServerFeatureEnabled(586)) {
                var tableManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.ITableManager, 66, false);
                if (tableManager && tableManager.get_currentTableObject()) {
                    var currentTableName = tableManager.get_currentTableObject().get_name();
                    if (!_Ewa.StringExtensions.isNullOrWhiteSpace(currentTableName)) {
                        commandParams['Text'] = currentTableName;
                    }
                    else {
                        Diag.ULS.sendTraceTag(50337924, 0, 10, 'Got an empty/null table name while querying table name');
                    }
                }
                else {
                    Diag.ULS.sendTraceTag(50337925, 0, 10, 'Table Manager or CurrentTableObject is null for QueryTableName');
                }
            }
        }
        else if (queryCommand === 'QuerySensitivity') {
            Common.AFrameworkApplication.get_theActionManager().processActionWithData(3134802707, 2, commandParams, null);
        }
        else if (queryCommand === 'QueryActiveNamedSheetViewName') {
            var currentSheet = this._$$pf_EwaControl$p$2.get_sheets().get_activeItem();
            commandParams[CommandUI.Controls.ComboBoxCommandProperties.IsFreeForm] = true;
            if (currentSheet.get_namedSheetViewState().get_isNamedSheetViewMode()) {
                commandParams[CommandUI.Controls.ComboBoxCommandProperties.Value] = currentSheet.get_namedSheetViewState().get_activeNamedSheetViewDisplayName();
                commandParams[CommandUI.Controls.ComboBoxCommandProperties.Key] = currentSheet.get_namedSheetViewState().get_activeNamedSheetViewName();
            }
            else {
                commandParams[CommandUI.Controls.ComboBoxCommandProperties.Value] = _Ewa.ClientStringManager.get_instance().getString(1623);
                commandParams[CommandUI.Controls.ComboBoxCommandProperties.Key] = 'DefaultNamedSheetViewID';
            }
        }
        else if (queryCommand === 'QueryAdvancedPasteContextMenuGalleryIcon') {
            commandParams[CommandUI.Controls.GalleryButtonCommandProperties.On] = false;
        }
        else if (queryCommand === 'QueryTableStyle') {
            var tableStyleManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.ITableStyleManager, 329, false);
            if (tableStyleManager) {
                tableStyleManager.handleTableStyleQueryCommand(commandParams);
            }
        }
        else if (queryCommand === 'QueryPivotTableStyles') {
            var formatStylesManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.IFormatStylesManager, 382, false);
            if (formatStylesManager) {
                formatStylesManager.handleFormatStylesQueryCommand(commandParams);
            }
        }
        else if (queryCommand === 'QueryEditInExcel') {
            commandParams[CommandUI.Controls.ButtonCommandProperties.LabelText] = commandParams[CommandUI.Controls.ButtonCommandProperties.Alt] = _Ewa.ClientStringManager.get_instance().getString((Common.BrowserUtils.get_isMobile()) ? 1138 : 1137);
        }
        else if (queryCommand === 'QueryAutomateGalleryButtons' && this._$$pf_EwaControl$p$2.get_isOfficeScriptingEnabled()) {
            var automateCommandManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.IAutomateCommandManager, 352, false);
            commandParams[CommandUI.Controls.GalleryButtonCommandProperties.On] = false;
            if (automateCommandManager) {
                var menuItemIdKey = commandParams['MenuItemId'].toString();
                automateCommandManager.getGalleryPreviewButtonProperties(menuItemIdKey, commandParams);
            }
        }
        else if (queryCommand === 'QueryClearGallerySelection') {
            commandParams[CommandUI.Controls.GalleryButtonCommandProperties.On] = false;
        }
        else if (queryCommand === 'QueryToggleCatchUpFlyout') {
            var catchUpActivityManager = ewa.get_serviceRegistry().getService(_Ewa.ICatchUpActivityManager, 286, false);
            commandParams['On'] = !!catchUpActivityManager && catchUpActivityManager.get_isCatchUpFlyoutVisible();
        }
        else if (queryCommand === 'QueryInkDrawWithTouch' || queryCommand === 'QueryInkTool' || queryCommand === 'QueryInkThickness' || queryCommand === 'QueryInkRecentColors' || queryCommand === 'QueryInkSnapToText') {
            if (_Ewa.OArtExtensions.inkOverlay(ewa)) {
                _Ewa.OArtExtensions.inkOverlay(ewa).handleQueryCommands(commandName, commandParams);
            }
        }
        else {
            if (this._chartsContextualRibbonGroup$p$3.shouldShowContextualDefaultTab()) {
                _Ewa.OArtExtensions.chartElementManager(ewa).handleChartElementQueryCommands(commandName, commandParams);
                return true;
            }
            return this.handleRibbonQueryCommandForGrid(queryCommand, commandParams, commandName);
        }
        return true;
    },
    
    _handleRibbonQueryCommandToggleAutoFilter$p$3: function _Ewa_RibbonManager$_handleRibbonQueryCommandToggleAutoFilter$p$3$in() {
        for (var i = 0; i < this._$$pf_EwaControl$p$2.get_namedObjects().get_count(); i++) {
            var currObject = this._$$pf_EwaControl$p$2.get_namedObjects().getItem(i);
            if (currObject.get_type() === 2 && _Ewa.StringExtensions.equals(currObject.get_sheetName(), this._$$pf_EwaControl$p$2.get_sheets().get_activeItem().get_name(), true) && currObject.get_usedRange()) {
                if ((!this._$$pf_EwaControl$p$2.isServerFeatureEnabled(458) || _Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).get_selectionManager().get_gridSelection().get_isSingleRange()) && currObject.get_usedRange().contains(_Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).get_selectionManager().get_singleSelectedRange())) {
                    return currObject.get_hasAutoFilter();
                }
            }
        }
        return this._$$pf_EwaControl$p$2.get_activeItem().get_hasAutoFilter();
    },
    
    isCommandEnabled: function _Ewa_RibbonManager$isCommandEnabled$in(command, enabled) {
        var sessionStateManager = this._$$pf_EwaControl$p$2.get_sessionStateManager();
        if (command === -1502853784) {
            enabled = enabled && sessionStateManager.get_undoEnabledState() === 1;
        }
        else if (command === -111689794) {
            enabled = enabled && sessionStateManager.get_redoEnabledState() === 1;
        }
        if (this._$$pf_EwaControl$p$2.get_isRibbonInViewModeEnabled() && !this._$$pf_EwaControl$p$2.get_isEditMode()) {
            var commandData = this._$$pf_EwaControl$p$2.get_commandHandlerManager().getCommandData(command);
            enabled = enabled && (!commandData || commandData.get_enabledInViewModeRibbon() || (!this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4269801_ExcelReactRootUserEnabled') && commandData.get_enabledInReactContextMenuInViewMode()));
        }
        return enabled;
    },
    
    pollForStateAndUpdate: function _Ewa_RibbonManager$pollForStateAndUpdate$in() {
        if (this._skipPollForStateWhenAppUnloading$p$3 && (this._$$pf_EwaControl$p$2.get_isAppUnloading() || !Sys.Application || Sys.Application.get_isDisposing())) {
            return;
        }
        if (this._ribbonUser$p$3) {
            this._activeCell$p$3 = _Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).getFormattedCell(null);
            _Ewa.ULS.debugSendTraceTag(1668443953, 0, 50, 'RibbonManager.PollForStateAndUpdate: Updating ribbon');
            this._ribbonUser$p$3.pollForStateUpdate();
        }
        if (!this._$$pf_EwaControl$p$2.isServerFeatureEnabled(171)) {
            this.initializeConvertToLinkedEntityManager(null);
        }
        this._updateContextualTabsVisibility$p$3();
    },
    
    generateAndAttachCommandUIControl: function _Ewa_RibbonManager$generateAndAttachCommandUIControl$in() {
        var ewaControl = this._$$pf_EwaControl$p$2;
        var trimmedProperties = this._buildTrimmingProperties$p$3();
        this._trimmedProperties$p$3 = trimmedProperties;
        var rootUser = null;
        if (this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4269801_ExcelReactRootUserEnabled')) {
            var excelReactRootUser = new _Ewa.ExcelReactRootUser(ewaControl, this);
            rootUser = excelReactRootUser;
        }
        else {
            rootUser = this;
        }
        this._ribbonUser$p$3 = this._ribbonUserFactory$p$3.create(this.get_theStandaloneRoot(), this.get_cuiControlManager(), rootUser, this._$$pf_CommandUIElement$p$2, trimmedProperties, this._$$pf_CommandUIJSON$p$2, this._$$pf_NamingIdPrefix$p$2, 'ribbon', this.get_sectionName(), _Ewa.UIHelpers.getRibbonMinimizedStateCookieValue());
        this._subscribeToEvents$p$3();
        this._updateUndoRedoTooltips$p$3();
        this.updateRibbonParameters();
        if (!_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled() && this.get__ribbonExternal$p$3() && this.get__ribbonExternal$p$3().get_minimized()) {
            this._handleRibbonStateChanged$p$3();
        }
        var headerElement;
        var $$t_8, $$t_9;
        var headerFound = (($$t_9 = Common.CuiHeaderDomReference.tryEnsuredHeaderPanelInitialized(($$t_8 = {'val': headerElement}), !Common.AFrameworkApplication.hideHeaderEmbedded, false)), headerElement = $$t_8.val, $$t_9);
        Diag.ULS.debugAssertTag(19674566, 0, headerFound, 'Header wasn\'t found, can\'t register KeyboardAccessibleSection');
        if (headerFound) {
            this._headerUI$p$3 = new _Ewa.HeaderUI(ewaControl, headerElement);
        }
        if (!_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            this.attachCommandUIKeyEvents();
        }
        var $$t_A = this;
        var callCommandUIAttach = function() {
            ($$as(_Ewa.ICommandUIEventManager, _Ewa.CommandUIExtensions.commandUIEventManager(ewaControl))).commandUIAttachCompleted();
        };
        var $$t_B = this;
        var notifyRibbonReady = function() {
            Diag.ULS.sendTraceTag(38601116, 0, 50, 'notifyRibbonReady started');
            if (!ewaControl.isChangeGateEnabled('OfficeVSO:4257398_HideRibbonSkeletonOnRibbonVisible')) {
                ewaControl.hidePageLoadSkeletonElement('skeletonRibbonPlaceHolder', true, '');
            }
            ewaControl.resetLayoutPositions();
            $$t_B._updateUndoRedoTooltips$p$3();
        };
        Common.App.AppLifecycleManager.get_instance().executeWhen(10, notifyRibbonReady, 3);
        if (ewaControl.get_shouldReactComponentsBeRendered()) {
            Common.App.AppLifecycleManager.get_instance().executeWhen(4, callCommandUIAttach, 3);
        }
        else {
            callCommandUIAttach();
        }
        if (_Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isRibbonVisualRefreshEnabled()) {
            Sys.UI.DomElement.addCssClass(this._$$pf_CommandUIElement$p$2, 'MLRVisualRefresh');
        }
        if (this._$$pf_EwaControl$p$2.isServerFeatureEnabled(812)) {
            this._initializeLicensing$p$3();
        }
        if (ewaControl.get_isOfficeScriptingEnabled() && !_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            _Ewa.HelperMethods.hideDomElementByID(this.getNamingIdConcatString('Ribbon.Automate-title'));
        }
        return true;
    },
    
    updateFromSelectionHighlight: function _Ewa_RibbonManager$updateFromSelectionHighlight$in() {
        this._updateContextualTabsVisibility$p$3();
    },
    
    setFocusOnCommandUIBar: function _Ewa_RibbonManager$setFocusOnCommandUIBar$in() {
        if (this._$$pf_LastKeyboardClickedElement$p$2) {
            _Ewa.DOMElementExtensions.setFocus(this._$$pf_LastKeyboardClickedElement$p$2, false);
        }
        else {
            this._ribbonUser$p$3.setFocus();
        }
        return true;
    },
    
    _updateContextualTabsVisibility$p$3: function _Ewa_RibbonManager$_updateContextualTabsVisibility$p$3$in() {
        for (var $$arr_0 = this._contextualRibbonGroups$p$3, $$len_1 = $$arr_0.length, $$idx_2 = 0; $$idx_2 < $$len_1; ++$$idx_2) {
            var contextualRibbonGroup = $$arr_0[$$idx_2];
            contextualRibbonGroup.showIfNeeded();
        }
    },
    
    _subscribeToEvents$p$3: function _Ewa_RibbonManager$_subscribeToEvents$p$3$in() {
        this.subscribeToSelectionEvents();
        var ewaControl = this._$$pf_EwaControl$p$2;
        ewaControl.get_namedObjects().add_activeItemChanged(this.$$d__onActiveItemChanged$p$3);
        ewaControl.get_sheets().add_activeItemChanged(this.$$d__onActiveItemChanged$p$3);
        ewaControl.get_commandHandlerManager().add_commandHandlerAdded(this.$$d_pollForStateAndUpdateInternalAsync);
        ewaControl.add_toolbarsAndRibbonsUpdateRequested(this.$$d_pollForStateAndUpdateInternalAsync);
        ewaControl.get_sessionStateManager().add_undoRedoEnabledChanged(this.$$d__updateUndoRedoButtons$p$3);
        var grid = _Ewa.GridViewExtensions.grid(ewaControl);
        grid.add_contentReady(this.$$d_pollForStateAndUpdateInternalAsync);
        if (!ewaControl.isServerFeatureEnabled(709)) {
            grid.get_selectionManager().add_selectionChanged(this.$$d_pollForStateAndUpdateInternalAsync);
        }
        else {
            grid.get_selectionManager().add_selectionEnded(this.$$d_pollForStateAndUpdateInternalAsync);
        }
        grid.add_currentSelectionModeChanged(this.$$d__onCurrentSelectionModeChanged$p$3);
        if (ewaControl.isServerFeatureEnabled(120) && grid.get_blockManager()) {
            grid.get_blockManager().add_renderingModeChanged(this.$$d__onRenderingModeChanged$p$3);
        }
        grid.get_cellTextEdit().add_editStarted(this.$$d_pollForStateAndUpdateInternalAsync);
        grid.get_cellTextEdit().add_editEnded(this.$$d_pollForStateAndUpdateInternalAsync);
        this._manageSubscriptionToSheetOptionsChanges$p$3(null, ewaControl.get_activeItem());
        this._$$pf_ProgressUIManager$p$3.add_statusChanged(this.$$d__onWorkingStateChanged$p$3);
        _Ewa.ProgressUIManagerExtensions.progressUIManager(ewaControl).add_partialInteractivityStatusChanged(this.$$d_pollForStateAndUpdateInternalAsync);
    },
    
    _unsubscribeFromEvents$p$3: function _Ewa_RibbonManager$_unsubscribeFromEvents$p$3$in() {
        var ewaControl = this._$$pf_EwaControl$p$2;
        if (ewaControl) {
            this.unsubscribeToSelectionEvents();
            ewaControl.get_namedObjects().remove_activeItemChanged(this.$$d__onActiveItemChanged$p$3);
            ewaControl.get_sheets().remove_activeItemChanged(this.$$d__onActiveItemChanged$p$3);
            ewaControl.get_commandHandlerManager().remove_commandHandlerAdded(this.$$d_pollForStateAndUpdateInternalAsync);
            ewaControl.remove_toolbarsAndRibbonsUpdateRequested(this.$$d_pollForStateAndUpdateInternalAsync);
            ewaControl.get_sessionStateManager().remove_undoRedoEnabledChanged(this.$$d__updateUndoRedoButtons$p$3);
            var grid = _Ewa.GridViewExtensions.grid(ewaControl);
            grid.remove_contentReady(this.$$d_pollForStateAndUpdateInternalAsync);
            if (!ewaControl.isServerFeatureEnabled(709)) {
                grid.get_selectionManager().remove_selectionChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            }
            else {
                grid.get_selectionManager().remove_selectionEnded(this.$$d_pollForStateAndUpdateInternalAsync);
            }
            grid.remove_currentSelectionModeChanged(this.$$d__onCurrentSelectionModeChanged$p$3);
            if (ewaControl.isServerFeatureEnabled(120) && grid.get_blockManager()) {
                grid.get_blockManager().remove_renderingModeChanged(this.$$d__onRenderingModeChanged$p$3);
            }
            grid.get_cellTextEdit().remove_editStarted(this.$$d_pollForStateAndUpdateInternalAsync);
            grid.get_cellTextEdit().remove_editEnded(this.$$d_pollForStateAndUpdateInternalAsync);
            _Ewa.ProgressUIManagerExtensions.progressUIManager(ewaControl).remove_partialInteractivityStatusChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            this._manageSubscriptionToSheetOptionsChanges$p$3(ewaControl.get_activeItem(), null);
            ewaControl.get_commandHandlerManager().removeCommandHandler(this);
        }
        if (this._$$pf_ProgressUIManager$p$3) {
            this._$$pf_ProgressUIManager$p$3.remove_statusChanged(this.$$d__onWorkingStateChanged$p$3);
        }
        if (this._instantaneousSupportInformationManager$p$3) {
            this._instantaneousSupportInformationManager$p$3.remove_categoryMappingUpdated(this.$$d__onCategoryMappingUpdated$p$3);
        }
    },
    
    _handleRibbonStateChanged$p$3: function _Ewa_RibbonManager$_handleRibbonStateChanged$p$3$in() {
        this._eventSource$p$3.raiseEvent('ribbonStateChanged', null, null);
        this._saveMinimizedStateToCookie$p$3();
        this._$$pf_CommandUIElement$p$2.style.height = _Ewa.HelperMethods.pixelCssString((this.get__ribbonExternal$p$3().get_minimized()) ? this._$$pf_EwaControl$p$2.get_frame().get_documentPanelWithoutRibbonTop() : this._$$pf_EwaControl$p$2.get_frame().get_documentPanelWithRibbonTop());
        this._$$pf_EwaControl$p$2.resetLayoutPositions();
    },
    
    _handleRibbonTabSwitched$p$3: function _Ewa_RibbonManager$_handleRibbonTabSwitched$p$3$in(command, commandInfo) {
        switch (command) {
            case 1180017532:
                this._updateUndoRedoTooltips$p$3();
                break;
            case 1840639927:
                if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled() || _Ewa.IsFeatureEnabledExtensions.isLinkedEntityRibbonVisibilityImprovementEnabled(this._$$pf_EwaControl$p$2)) {
                    var $$t_3 = this;
                    Common.App.AppLifecycleManager.get_instance().executeWhen(10, function() {
                        $$t_3.updateLinkedEntityGalleryButtonsVisibility();
                    }, 3);
                }
                break;
            case -613088389:
                if (this._$$pf_EwaControl$p$2.isServerFeatureEnabled(586)) {
                    this._updateTableNameTextBoxFocusEventRegistration$p$3();
                }
                this._updateTableStyleGalleryVisibility$p$3();
                break;
            case -2037441119:
                var automateCommandManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.IAutomateCommandManager, 352, false);
                if (automateCommandManager && !automateCommandManager.get_hasReadFromStorage() && this._$$pf_EwaControl$p$2.isServerFeatureEnabled(473)) {
                    automateCommandManager.populateAutomateGallery();
                }
                break;
            case 2122263425:
                if (this._$$pf_EwaControl$p$2.isServerFeatureEnabled(921)) {
                    this._updatePivotTableStyleGalleryVisibility$p$3();
                }
                break;
        }
        if (!_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            this._updateRibbonVisibilityForLicense$p$3();
        }
        else if (this._$$pf_EwaControl$p$2 && !this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4209248_PollForStateAfterLicenseUpdate')) {
            var $$t_4 = this;
            Common.App.AppLifecycleManager.get_instance().executeWhen(10, function() {
                $$t_4._updateRibbonVisibilityForLicense$p$3();
            }, 3);
        }
        if (commandInfo.get_method() === 2) {
            _Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).focus();
        }
    },
    
    _toggleMinimizeRibbon$p$3: function _Ewa_RibbonManager$_toggleMinimizeRibbon$p$3$in() {
        if (this.get__ribbonExternal$p$3()) {
            var previouslyMinimized = this.get__ribbonExternal$p$3().get_minimized();
            if (!previouslyMinimized && !this._selectedContextualRibbonGroup$p$3) {
                for (var $$arr_1 = this._contextualRibbonGroups$p$3, $$len_2 = $$arr_1.length, $$idx_3 = 0; $$idx_3 < $$len_2; ++$$idx_3) {
                    var contextualRibbonGroup = $$arr_1[$$idx_3];
                    var contextualRibbonGroupSelected = contextualRibbonGroup.isContextualTabSelected();
                    if (contextualRibbonGroup.get_visible() && contextualRibbonGroupSelected) {
                        this._selectedContextualRibbonGroup$p$3 = contextualRibbonGroup;
                        break;
                    }
                }
            }
            this.get__ribbonExternal$p$3().toggleMinimizedState(_Ewa.CommandHandlerManagerStaticMethods.get_lastInputMethod());
            if (previouslyMinimized && this._selectedContextualRibbonGroup$p$3 && this._selectedContextualRibbonGroup$p$3.get_visible()) {
                this._selectedContextualRibbonGroup$p$3.selectDefaultTab();
            }
        }
    },
    
    _saveMinimizedStateToCookie$p$3: function _Ewa_RibbonManager$_saveMinimizedStateToCookie$p$3$in() {
        if (this.get__ribbonExternal$p$3()) {
            Common.Cookie.setWithExpiration('EWARibbonMinimized', (this.get__ribbonExternal$p$3().get_minimized()) ? 'true' : 'false', 390);
        }
    },
    
    updateLinkedEntityGalleryButtonsVisibility: function _Ewa_RibbonManager$updateLinkedEntityGalleryButtonsVisibility$in() {
        Diag.ULS.sendTraceTag(593590105, 0, 100, 'UpdateLinkedEntityGalleryButtonsVisibility - convertToLinkedEntityManager = {0}', (!this._convertToLinkedEntityManager$p$3) ? 'null' : 'NOT null');
        var StockNonReactPreviewGalleryButtonId = 'Data.LinkedEntity.Stock-Large';
        var GeographyNonReactPreviewGalleryButtonId = 'Data.LinkedEntity.Geography-Large';
        var LinkedEntityNonReactPreviewGalleryId = 'Ribbon.Data.LinkedEntity';
        var DynamicNonReactPreviewGalleryButtonIdPrefix = 'Data.LinkedEntityPreview.';
        var StockReactPreviewGalleryButtonId = 'ConvertToStockLinkedEntity';
        var GeographyReactPreviewGalleryButtonId = 'ConvertToGeographyLinkedEntity';
        var LinkedEntityReactPreviewGalleryId = 'ConvertToLinkedEntityGallery';
        var isReact = _Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled();
        if (!this._convertToLinkedEntityManager$p$3) {
            if (!isReact && this._$$pf_EwaControl$p$2.isServerFeatureEnabled(672)) {
                _Ewa.HelperMethods.hideDomElementByID(this.getNamingIdConcatString(LinkedEntityNonReactPreviewGalleryId));
            }
            return;
        }
        if (this._$$pf_EwaControl$p$2.isServerFeatureEnabled(672)) {
            if (!isReact) {
                _Ewa.HelperMethods.hideDomElementByID(this.getNamingIdConcatString(StockNonReactPreviewGalleryButtonId));
                _Ewa.HelperMethods.hideDomElementByID(this.getNamingIdConcatString(GeographyNonReactPreviewGalleryButtonId));
            }
            var shouldHideAll = true;
            var shouldHideLinkedEntityPreviewButtons = new Array(this._convertToLinkedEntityManager$p$3.get_maxDynamicLinkedEntityPreviewButtons());
            if (this._linkedEntityEnabled$p$3) {
                for (var index = 0; index < shouldHideLinkedEntityPreviewButtons.length; ++index) {
                    if (this._convertToLinkedEntityManager$p$3.shouldHideDynamicPreviewGalleryButton(index)) {
                        shouldHideLinkedEntityPreviewButtons[index] = true;
                    }
                    else {
                        shouldHideLinkedEntityPreviewButtons[index] = false;
                        shouldHideAll = false;
                    }
                }
            }
            if (isReact) {
                this._ribbonUser$p$3.setRibbonControlsHiddenState([ LinkedEntityReactPreviewGalleryId ], shouldHideAll);
            }
            else {
                if (shouldHideAll) {
                    _Ewa.HelperMethods.hideDomElementByID(this.getNamingIdConcatString(LinkedEntityNonReactPreviewGalleryId));
                }
                else {
                    _Ewa.HelperMethods.setDomElementByID(this.getNamingIdConcatString(LinkedEntityNonReactPreviewGalleryId), '');
                }
            }
            if (!shouldHideAll) {
                for (var index = 0; index < shouldHideLinkedEntityPreviewButtons.length; ++index) {
                    if (shouldHideLinkedEntityPreviewButtons[index]) {
                        var buttonId = this._convertToLinkedEntityManager$p$3.getDynamicPreviewGalleryButtonId(index, isReact);
                        if (isReact) {
                            this._ribbonUser$p$3.setRibbonControlsHiddenState([ buttonId ], true);
                        }
                        else {
                            _Ewa.HelperMethods.hideDomElementByID(buttonId);
                        }
                    }
                }
            }
        }
        else {
            var shouldHideStockButton = this._convertToLinkedEntityManager$p$3.shouldHideStockDOMElement() || !this._linkedEntityEnabled$p$3;
            var shouldHideGeographyButton = this._convertToLinkedEntityManager$p$3.shouldHideGeographyDOMElement() || !this._linkedEntityEnabled$p$3;
            var shouldHideAll = shouldHideStockButton && shouldHideGeographyButton;
            if (isReact && !this._geographyGalleryButtonPopulated$p$3 && !this._stockGalleryButtonPopulated$p$3) {
                appChrome.api.dispatch(appChrome.actions.updateControlHiddenState(LinkedEntityReactPreviewGalleryId, (shouldHideAll) ? true : false));
            }
            if (shouldHideAll) {
                if (!isReact) {
                    _Ewa.HelperMethods.hideDomElementByID(this.getNamingIdConcatString(LinkedEntityNonReactPreviewGalleryId));
                }
                this._stockGalleryButtonPopulated$p$3 = true;
                this._geographyGalleryButtonPopulated$p$3 = true;
                return;
            }
            else if (shouldHideStockButton) {
                if (isReact) {
                    appChrome.api.dispatch(appChrome.actions.updateControlHiddenState(StockReactPreviewGalleryButtonId, true));
                }
                else {
                    _Ewa.HelperMethods.hideDomElementByID(this.getNamingIdConcatString(StockNonReactPreviewGalleryButtonId));
                }
                this._stockGalleryButtonPopulated$p$3 = true;
            }
            else if (shouldHideGeographyButton) {
                if (isReact) {
                    appChrome.api.dispatch(appChrome.actions.updateControlHiddenState(GeographyReactPreviewGalleryButtonId, true));
                }
                else {
                    _Ewa.HelperMethods.hideDomElementByID(this.getNamingIdConcatString(GeographyNonReactPreviewGalleryButtonId));
                }
                this._geographyGalleryButtonPopulated$p$3 = true;
            }
            if (!isReact) {
                for (var index = 0; index < this._convertToLinkedEntityManager$p$3.get_maxDynamicLinkedEntityPreviewButtons(); ++index) {
                    _Ewa.HelperMethods.hideDomElementByID(this.getNamingIdConcatString(DynamicNonReactPreviewGalleryButtonIdPrefix + index.toString() + '-Large'));
                }
            }
            if (this._convertToLinkedEntityManager$p$3.shouldHideFlyout()) {
                _Ewa.HelperMethods.hideDomElementByID((isReact) ? 'ConvertToLinkedEntityGallery-previewExpandButton' : this.getNamingIdConcatString('Data.LinkedEntity.Flyout-Thin'));
            }
        }
    },
    
    _buildTrimmingProperties$p$3: function _Ewa_RibbonManager$_buildTrimmingProperties$p$3$in() {
        var ribbonTrimmer = new _Ewa.RibbonControlsTrimmer(this._$$pf_EwaControl$p$2);
        var trimmingProperties = ribbonTrimmer.buildTrimmingProperties(false);
        this._$$pf_FileMenuManager$p$2.manageVisibilityForEditModeJewelButtons(trimmingProperties.get_trimmedIds());
        return trimmingProperties;
    },
    
    _onActiveItemChanged$p$3: function _Ewa_RibbonManager$_onActiveItemChanged$p$3$in(sender, e) {
        if (_Ewa.ActiveItemExtensions.isChartSheet(this._$$pf_EwaControl$p$2.get_activeItem())) {
            this._chartsContextualRibbonGroup$p$3.showIfNeeded();
        }
        this._manageSubscriptionToSheetOptionsChanges$p$3(e.get_previousActiveItem(), e.get_activeItem());
        this.pollForStateAndUpdateInternalAsync();
    },
    
    _onCurrentSelectionModeChanged$p$3: function _Ewa_RibbonManager$_onCurrentSelectionModeChanged$p$3$in(sender, e) {
        this._activeCell$p$3 = null;
    },
    
    _onRenderingModeChanged$p$3: function _Ewa_RibbonManager$_onRenderingModeChanged$p$3$in(sender, e) {
        if (this._activeCell$p$3) {
            this._activeCell$p$3 = _Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2).getFormattedCell(null);
        }
    },
    
    _manageSubscriptionToSheetOptionsChanges$p$3: function _Ewa_RibbonManager$_manageSubscriptionToSheetOptionsChanges$p$3$in(subscribeToItem, unsubscribeFromItem) {
        var subscribeToSheet = $$as(_Ewa.Sheet, subscribeToItem);
        var unsubscribeFromSheet = $$as(_Ewa.Sheet, unsubscribeFromItem);
        if (subscribeToSheet) {
            subscribeToSheet.remove_sheetOptionsChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            subscribeToSheet.get_namedSheetViewState().remove_namedSheetViewModeChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            subscribeToSheet.get_namedSheetViewState().remove_namedSheetViewSwitched(this.$$d_pollForStateAndUpdateInternalAsync);
            subscribeToSheet.get_namedSheetViewState().remove_sortedNamedSheetViewsChanged(this.$$d_pollForStateAndUpdateInternalAsync);
        }
        if (unsubscribeFromSheet) {
            unsubscribeFromSheet.add_sheetOptionsChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            unsubscribeFromSheet.get_namedSheetViewState().add_namedSheetViewModeChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            unsubscribeFromSheet.get_namedSheetViewState().add_namedSheetViewSwitched(this.$$d_pollForStateAndUpdateInternalAsync);
            unsubscribeFromSheet.get_namedSheetViewState().add_sortedNamedSheetViewsChanged(this.$$d_pollForStateAndUpdateInternalAsync);
        }
    },
    
    _onWorkingStateChanged$p$3: function _Ewa_RibbonManager$_onWorkingStateChanged$p$3$in(sender, e) {
        if (_Ewa.ReactRibbonUser.isInstanceOfType(this._ribbonUser$p$3)) {
            return;
        }
        if (this._$$pf_ProgressUIManager$p$3.get_state() === 7 && this._ribbonUser$p$3) {
            this.get__ribbonExternal$p$3().dismissTabPopup(true, true);
        }
    },
    
    _updateUndoRedoButtons$p$3: function _Ewa_RibbonManager$_updateUndoRedoButtons$p$3$in(sender, e) {
        this.pollForStateAndUpdateInternalAsync();
        this._updateUndoRedoTooltips$p$3();
    },
    
    _updateUndoRedoTooltips$p$3: function _Ewa_RibbonManager$_updateUndoRedoTooltips$p$3$in() {
        var undoTitle;
        var redoTitle;
        if (!this._$$pf_EwaControl$p$2) {
            return;
        }
        var undoState = this._$$pf_EwaControl$p$2.get_sessionStateManager().get_undoEnabledState();
        var redoState = this._$$pf_EwaControl$p$2.get_sessionStateManager().get_redoEnabledState();
        switch (undoState) {
            case 1:
            case 0:
                undoTitle = _Ewa.ClientStringManager.get_instance().getStringUnencoded(74);
                break;
            case 3:
                undoTitle = _Ewa.ClientStringManager.get_instance().getStringUnencoded(77);
                break;
            case 2:
                undoTitle = _Ewa.ClientStringManager.get_instance().getStringUnencoded(76);
                break;
            case 4:
                undoTitle = _Ewa.ClientStringManager.get_instance().getStringUnencoded(75);
                break;
            default:
                Diag.ULS.debugAssertTag(42062359, 0, false, 'RibbonManager.UpdateUndoRedoTooltips: unknown undoState {0}', undoState);
                undoTitle = _Ewa.ClientStringManager.get_instance().getStringUnencoded(74);
                break;
        }
        switch (redoState) {
            case 1:
            case 0:
                redoTitle = _Ewa.ClientStringManager.get_instance().getStringUnencoded(71);
                break;
            case 2:
                redoTitle = _Ewa.ClientStringManager.get_instance().getStringUnencoded(73);
                break;
            case 4:
                redoTitle = _Ewa.ClientStringManager.get_instance().getStringUnencoded(72);
                break;
            default:
                Diag.ULS.debugAssertTag(42062360, 0, false, 'RibbonManager.UpdateUndoRedoTooltips: unknown redoState {0}', redoState);
                redoTitle = _Ewa.ClientStringManager.get_instance().getStringUnencoded(71);
                break;
        }
        if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled() && Common.AppChromeUtils.appChromeAlreadyLoaded() && this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:3355607_changeUndoRedoTooltip') && this._ribbonUser$p$3.get_selectedTabId() === 'Home') {
            var setControlCustomTooltipActions = [ appChrome.actions.setControlCustomTooltip('Undo', undoTitle), appChrome.actions.setControlCustomTooltip('Redo', redoTitle), appChrome.actions.setControlCustomTooltip('UndoRedo', undoTitle) ];
            appChrome.api.dispatch(setControlCustomTooltipActions);
        }
        else if (!_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            var undoButton = document.getElementById(this.getNamingIdConcatString('UndoRedo.Undo-Small'));
            var redoButton = document.getElementById(this.getNamingIdConcatString('UndoRedo.Redo-Small'));
            if (undoButton) {
                undoButton.title = undoTitle;
            }
            if (redoButton) {
                redoButton.title = redoTitle;
            }
        }
    },
    
    _updateTableNameTextBoxFocusEventRegistration$p$3: function _Ewa_RibbonManager$_updateTableNameTextBoxFocusEventRegistration$p$3$in() {
        var tableManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.ITableManager, 66, false);
        if (!tableManager) {
            Diag.ULS.sendTraceTag(594344151, 0, 10, 'RibbonManager:HandleRibbonTabSwitched Got an empty/null tableManager object');
            return;
        }
        if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            var $$t_3 = this;
            Common.App.AppLifecycleManager.get_instance().executeWhen(10, function() {
                var tableRenameElementReactRibbon = document.getElementById('RenameTable');
                if (!tableRenameElementReactRibbon) {
                    Diag.ULS.sendTraceTag(594344150, 0, 10, 'RibbonManager:HandleRibbonTabSwitched: Got an empty/null tableRenameElement while trying to register it to textbox focus event in SLR mode');
                    return;
                }
                tableManager.registerToTextboxFocusEvent(tableRenameElementReactRibbon);
            }, 3);
            return;
        }
        var tableRenameElementMultiLineRibbon = document.getElementById(this.getNamingIdConcatString('Ribbon.TableTools.TableProperties.TableRename'));
        if (!tableRenameElementMultiLineRibbon) {
            Diag.ULS.sendTraceTag(594883981, 0, 10, 'RibbonManager:HandleQueryCommand: Got an empty/null tableRenameElement while trying to register it to textbox focus event in MLR mode');
            return;
        }
        tableManager.registerToTextboxFocusEvent(tableRenameElementMultiLineRibbon);
    },
    
    _updateTableStyleGalleryVisibility$p$3: function _Ewa_RibbonManager$_updateTableStyleGalleryVisibility$p$3$in() {
        Diag.ULS.sendTraceTag(51709703, 0, 50, 'RibbonManager.HandleRibbonTabSwitched: Switched to TableDesignTab containing Table Style Preview Gallery');
        var tableStyleManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.ITableStyleManager, 329, false);
        if (tableStyleManager && !tableStyleManager.isTableStylesReady()) {
            if (this._$$pf_EwaControl$p$2.get_sessionStateManager().get_isCommandUIGeneratedAndGridConsistentAfterWorkbookLoadedFromServer()) {
                tableStyleManager.getTableStyleWebServiceCall('tableTabSwitch');
            }
            else {
                var $$t_1 = tableStyleManager;
                this._$$pf_EwaControl$p$2.get_sessionStateManager().add_commandUIGeneratedAndGridConsistentAfterWorkbookLoadedFromServer(($$t_1.$$d_fetchTableStyles || ($$t_1.$$d_fetchTableStyles = Function.createDelegate($$t_1, $$t_1.fetchTableStyles))));
                Diag.ULS.sendTraceTag(51663575, 0, 15, 'RibbonManager.HandleRibbonTabSwitched: Switched to TableDesignTab while CommandUIGeneratedAndGridConsistentAfterWorkbookLoadedFromServer is false');
            }
        }
    },
    
    _updatePivotTableStyleGalleryVisibility$p$3: function _Ewa_RibbonManager$_updatePivotTableStyleGalleryVisibility$p$3$in() {
        Diag.ULS.sendTraceTag(590137160, 0, 50, 'RibbonManager.HandleRibbonTabSwitched: Switched to PivotTableTab containing PivotTable Style Preview Gallery');
        var $$t_4 = this;
        _Ewa.TaskExtensions.cw(_Ewa.GetServiceTaskFactory.create(Array, this._$$pf_EwaControl$p$2.get_serviceRegistry(), 381, this.get_cancelOnDisposeToken(), 1), function(task) {
            var formatStylesManager = $$t_4._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.IFormatStylesManager, 382, false);
            if (formatStylesManager) {
                formatStylesManager.getFormatStylesByType(1);
            }
            else {
                Diag.ULS.sendTraceTag(590137159, 0, 10, 'Format Styles Manager null for PivotTable tab switch');
            }
        }, this._$$pf_EwaControl$p$2.get_cancelOnDisposeToken(), 3);
    },
    
    _toggleKeytipModeExternal$p$3: function _Ewa_RibbonManager$_toggleKeytipModeExternal$p$3$in(properties) {
        var domEvent = properties['event'];
        var lastFocusedElement;
        if (!domEvent) {
            Diag.ULS.sendTraceTag(19718537, 0, 10, 'RibbonManager.ToggleKeytipModeEx: Nullified \'event\' property when calling ToggleKeytipMode');
            lastFocusedElement = this.get_rootElement().ownerDocument.activeElement;
        }
        else {
            lastFocusedElement = domEvent.rawEvent.target;
        }
        this._toggleKeytipMode$p$3(lastFocusedElement);
    },
    
    _toggleKeytipMode$p$3: function _Ewa_RibbonManager$_toggleKeytipMode$p$3$in(lastFocusedElement) {
        var shortcutKey = (Common.BrowserUtils.get_isMac()) ? 'Alt+Ctrl (Mac)' : 'Alt+Winkey (Windows)';
        if (this.get_inKeytipMode()) {
            Diag.ULS.sendTraceTag(19708122, 0, 50, 'Exiting keytip mode using {0}', shortcutKey);
            this._ribbonUser$p$3.exitKeytipMode(false, true);
        }
        else {
            if (!lastFocusedElement) {
                Diag.ULS.sendTraceTag(19708123, 0, 10, 'lastFocusedElement is null when calling ToggleKeytipMode to show keytips');
            }
            var isInvokedFromRibbon = this.belongsToSection(lastFocusedElement);
            var grid = _Ewa.GridViewExtensions.grid(this._$$pf_EwaControl$p$2);
            if (isInvokedFromRibbon) {
                grid.focus();
            }
            else {
                Diag.ULS.sendTraceTag(19708121, 0, 50, 'Entering keytip mode using {0}', shortcutKey);
                var isEditing = grid.get_isEditing();
                var editingMode = (isEditing) ? grid.get_editingMode() : 0;
                var caretPosition = grid.get_cellTextEditBox().get_textBox().get_caretPosition();
                if (_Ewa.StringExtensions.isNullOrWhiteSpace(grid.get_cellTextEditBox().get_textBox().get_text())) {
                    caretPosition = 0;
                }
                var $$t_8 = this;
                this._ribbonUser$p$3.enterKeytipMode(function(receivedEvent) {
                    if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
                        return;
                    }
                    if (isEditing) {
                        grid.startEdit(false, editingMode, null, true);
                        grid.get_cellTextEditBox().get_textBox().set_caretPosition(caretPosition);
                    }
                    else {
                        if (lastFocusedElement && _Ewa.DOMElementExtensions.canReceiveFocus(lastFocusedElement)) {
                            _Ewa.DOMElementExtensions.setFocus(lastFocusedElement, false);
                        }
                        else {
                            grid.focus();
                        }
                    }
                });
                this._$$pf_PreviousFocusSetOnCommandUI$p$2 = true;
                this._ribbonUser$p$3.setFocus();
            }
        }
    },
    
    _onCategoryMappingUpdated$p$3: function _Ewa_RibbonManager$_onCategoryMappingUpdated$p$3$in(sender, eventArgs) {
        var args = $$as(_Ewa.CategoryMappingUpdatedEventArgs, eventArgs);
        Diag.ULS.shipAssertTag(24417762, 0, !!args, 'CategoryMappingUpdated event should send CategoryMappingUpdatedEventArgs');
        if (!args) {
            return;
        }
        this._updateCellCategory$p$3(args.get_formatIndex());
    },
    
    _updateCellCategory$p$3: function _Ewa_RibbonManager$_updateCellCategory$p$3$in(updatedFormatIndex) {
        var cell = this._activeCell$p$3;
        if (cell) {
            var formatIndex = cell.get_cell().get_numberFormatIndex();
            if (formatIndex === updatedFormatIndex) {
                Diag.ULS.sendTraceTag(21520843, 0, 50, 'Refreshing ribbon due to number category update');
                this.pollForStateAndUpdateInternalAsync(this, Sys.EventArgs.Empty);
            }
        }
    },
    
    _toggleRibbonMode$p$3: function _Ewa_RibbonManager$_toggleRibbonMode$p$3$in(toggledToSLR) {
        if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            this._ribbonUser$p$3.toggleRibbonMode(toggledToSLR);
            if (this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4253377_TrimmingActionsDuringReactRibbonToggle')) {
                this._sendTrimmingActionsForReactRibbonToggle$p$3();
            }
        }
        else {
            Diag.ULS.shipAssertTag(592840069, 0, false, 'RibbonManager.ToggleRibbonMode: ToggleRibbonMode should not be called for legacy ribbon user.');
        }
    },
    
    _sendTrimmingActionsForReactRibbonToggle$p$3: function _Ewa_RibbonManager$_sendTrimmingActionsForReactRibbonToggle$p$3$in() {
        var ribbonControlsTrimmer = new _Ewa.RibbonControlsTrimmer(this._$$pf_EwaControl$p$2);
        var trimmingProperties = ribbonControlsTrimmer.buildTrimmingProperties(true);
        var map = Common.Utils.Container.get_instance().tryResolve(Common.IExternalUICommandDefinitionMapping, '') || new _Ewa.ExcelReactCommandDefinitionMapping(this._$$pf_EwaControl$p$2.get_namingContainerIdPrefix(), this._$$pf_EwaControl$p$2);
        var actions = new Array(0);
        var trimHelper = new Common.ReactRibbonTrimmingHelper(map);
        actions.push.apply(actions, trimHelper.getActionsForTrimmedTabs(trimmingProperties.get_trimmedTabs()));
        appChrome.api.dispatch(actions);
        var automateCommandManager = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.IAutomateCommandManager, 352, false);
        if (automateCommandManager) {
            automateCommandManager.showAutomateTabIfEnabled(true);
        }
    },
    
    _toggleRibbonUX$p$3: function _Ewa_RibbonManager$_toggleRibbonUX$p$3$in() {
        Diag.ULS.sendTraceTag(36750854, 0, 50, 'Starting toggle Ribbon UX experience');
        var simplifiedRibbonIsOn = _Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isSimplifiedReactRibbonUxEnabled();
        var $$t_7 = this;
        var saveCookieAndRefresh = function() {
            Common.Cookie.setWithExpiration('ExcelIsSimplifiedRibbonOn', (!simplifiedRibbonIsOn).toString(), 390);
            var activityState = _Ewa.WorkflowExtensions.clientWorkflow($$t_7._$$pf_EwaControl$p$2).get_activityExecutionContext().get_activityState();
            var cookieValue = Common.Cookie.get('ExcelIsSimplifiedRibbonOn');
            if (!cookieValue || cookieValue !== (!simplifiedRibbonIsOn).toString()) {
                new CommonUI.EnableCookiesDialog();
                Diag.ULS.sendTraceTag(41542361, 0, 50, 'User is prompted to enable third-party cookies to switch to or from the Single Line Ribbon');
                activityState['PUOAudna'] = 'cw0';
                return;
            }
            $$t_7._$$pf_EwaControl$p$2.pushReopenActivityExecutionContext(true, false);
            activityState['PUOAudna'] = 'cw30';
            activityState['OWMem'] = true;
        };
        if (simplifiedRibbonIsOn) {
            var sif = Common.Utils.Container.get_instance().resolveFuture(Common.ISystemInitiatedFeedback, '');
            var $$t_8 = this;
            var systemInitiatedFeedbackAction = function(systemInitiatedFeedback) {
                if (systemInitiatedFeedback) {
                    systemInitiatedFeedback.trySetCampaignTriggerData('SLROptOut', 'true');
                }
                else {
                    Diag.ULS.sendTraceTag(39965659, 0, 50, 'ISystemInitiatedFeedback was null');
                }
            };
            sif.execute(systemInitiatedFeedbackAction);
            Diag.ULS.sendTraceTag(37748768, 0, 50, 'User is switching to the Classic Ribbon from Single Line Ribbon');
            Common.AFrameworkApplication.get_theActionManager().processAction(422501225, 2, null);
        }
        else {
            Diag.ULS.sendTraceTag(37748769, 0, 50, 'User is switching to the Single Line Ribbon from Classic Ribbon');
            Common.AFrameworkApplication.get_theActionManager().processAction(2363934117, 2, null);
        }
        _Ewa.ProgressUIManagerExtensions.progressUIManager(this._$$pf_EwaControl$p$2).queueOrExecuteUserStateMachineChangeRequest(new _Ewa.StateMachineChangeData('cw8', 5, saveCookieAndRefresh));
    },
    
    _validateTrimmingPropertiesMatch$p$3: function _Ewa_RibbonManager$_validateTrimmingPropertiesMatch$p$3$in(left, right) {
        if (!left || !right) {
            return true;
        }
        var idMismatch = _Ewa.CommandUIManager.getDictionaryMismatch(left.get_trimmedIds(), right.get_trimmedIds(), this._$$pf_EwaControl$p$2.get_namingContainerIdPrefix());
        var galleryMismatch = _Ewa.CommandUIManager.getGalleryMismatch(left.get_trimmedGallerySections(), right.get_trimmedGallerySections());
        var tabMismatch = _Ewa.CommandUIManager.getDictionaryMismatch(left.get_trimmedTabs(), right.get_trimmedTabs(), '');
        Diag.ULS.sendTraceTag(40506659, 0, 50, 'RibbonManager.ValidateTrimmingPropertiesMatch: Switch:{0}, Ids:[{1}], Galleries:[{2}], Tabs:[{3}]', _Ewa.WorkbookCacheExtensions.isSwitchCachedContent(this._$$pf_EwaControl$p$2), idMismatch, galleryMismatch, tabMismatch);
        return _Ewa.StringExtensions.isNullOrEmpty(idMismatch) && _Ewa.StringExtensions.isNullOrEmpty(galleryMismatch) && _Ewa.StringExtensions.isNullOrEmpty(tabMismatch);
    },
    
    _initializeLicensing$p$3: function _Ewa_RibbonManager$_initializeLicensing$p$3$in() {
        var $$t_U, $$t_V;
        this._licenseFeatures$p$3 = (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) ? ($$t_U = new ($$sc.List$1.$$(_Ewa.RibbonManager._licensedRibbonFeature))(), $$t_U.add(new _Ewa.RibbonManager._licensedRibbonFeature('ExcelIdeas', 'Ideas', this.getNamingIdConcatString('Ribbon.Home.Ideas'), -515602470, 'Home', false, true)), $$t_U.add(new _Ewa.RibbonManager._licensedRibbonFeature('ExcelIdeasRecommendedCharts', 'LaunchRecommendedChartsPane', this.getNamingIdConcatString('Charts.RecommendCharts'), -336193495, 'Insert', false, true)), $$t_U) : ($$t_V = new ($$sc.List$1.$$(_Ewa.RibbonManager._licensedRibbonFeature))(), $$t_V.add(new _Ewa.RibbonManager._licensedRibbonFeature('ExcelIdeas', this.getNamingIdConcatString('Ribbon.Home.Ideas'), this.getNamingIdConcatString('Ribbon.Home.Ideas'), -515602470, this.getNamingIdConcatString('Ribbon.Home'), false, true)), $$t_V.add(new _Ewa.RibbonManager._licensedRibbonFeature('ExcelIdeasRecommendedCharts', this.getNamingIdConcatString('Charts.RecommendCharts-Large'), this.getNamingIdConcatString('Charts.RecommendCharts'), -336193495, this.getNamingIdConcatString('Ribbon.Insert'), false, true)), $$t_V);
        var $$t_W = this;
        var updateRibbonVisibilityAndCommandStatus = function() {
            if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
                Common.App.AppLifecycleManager.get_instance().executeWhen(10, function() {
                    $$t_W._updateRibbonVisibilityForLicense$p$3();
                    if ($$t_W._$$pf_EwaControl$p$2 && !$$t_W._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4209248_PollForStateAfterLicenseUpdate')) {
                        $$t_W._updateDisabledCommandsForLicense$p$3();
                    }
                }, 3);
            }
            else {
                $$t_W._updateRibbonVisibilityForLicense$p$3();
                $$t_W._updateDisabledCommandsForLicense$p$3();
            }
        };
        updateRibbonVisibilityAndCommandStatus();
        var $$t_X = this;
        Common.Utils.Container.get_instance().resolveFuture(Common.App.ApplicationFeatureHelper.IApplicationFeatureHelper, '').execute(function(applicationFeatureHelper) {
            $$t_X._applicationFeatureHelper$p$3 = applicationFeatureHelper;
            var licensePromises = new ($$sc.List$1.$$(Promise))();
            var setLicenseEnabled = function(feat) {
                return function(enabledState) {
                    feat._$$pf_EnabledState$p$0 = enabledState;
                };
            };
            var featureStateCallback = function(feat) {
                return function(args) {
                    feat._$$pf_EnabledState$p$0 = args.isEnabled;
                    updateRibbonVisibilityAndCommandStatus();
                };
            };
            var $$enum_I = $$t_X._licenseFeatures$p$3.$$lge();
            while ($$enum_I.$$mn()) {
                var feature = $$enum_I.$$cu();
                if (!((feature._$$pf_LegacyControlId$p$0) in $$t_X._trimmedProperties$p$3.get_trimmedIds())) {
                    licensePromises.add(applicationFeatureHelper.isFeatureEnabled(feature._$$pf_FeatureName$p$0, feature._$$pf_FallBackState$p$0).then(setLicenseEnabled(feature)));
                }
                feature._$$pf_CallbackId$p$0 = applicationFeatureHelper.registerFeatureStateChangeCallback(feature._$$pf_FeatureName$p$0, featureStateCallback(feature));
            }
            Promise.all(licensePromises.toArray()).then(function(_) {
                updateRibbonVisibilityAndCommandStatus();
            });
        });
    },
    
    _removeLicensingCallbacks$p$3: function _Ewa_RibbonManager$_removeLicensingCallbacks$p$3$in() {
        if (this._applicationFeatureHelper$p$3) {
            var $$enum_1 = this._licenseFeatures$p$3.$$lge();
            while ($$enum_1.$$mn()) {
                var feature = $$enum_1.$$cu();
                if (!_Ewa.StringExtensions.isNullOrEmpty(feature._$$pf_CallbackId$p$0)) {
                    this._applicationFeatureHelper$p$3.removeFeatureStateChangeCallback(feature._$$pf_FeatureName$p$0, feature._$$pf_CallbackId$p$0);
                    feature._$$pf_CallbackId$p$0 = null;
                }
            }
            this._applicationFeatureHelper$p$3 = null;
        }
    },
    
    _updateRibbonVisibilityForLicense$p$3: function _Ewa_RibbonManager$_updateRibbonVisibilityForLicense$p$3$in() {
        if (!this._ribbonUser$p$3) {
            return;
        }
        var currentRibbonTab = this._ribbonUser$p$3.get_selectedTabId();
        var $$enum_2 = this._licenseFeatures$p$3.$$lge();
        while ($$enum_2.$$mn()) {
            var feature = $$enum_2.$$cu();
            if (feature._$$pf_TabId$p$0 !== currentRibbonTab || (this._$$pf_EwaControl$p$2 && this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4209248_PollForStateAfterLicenseUpdate'))) {
                var shouldTrim = !feature._$$pf_EnabledState$p$0;
                if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
                    if (!((feature._$$pf_LegacyControlId$p$0) in this._trimmedProperties$p$3.get_trimmedIds())) {
                        appChrome.api.dispatch(appChrome.actions.updateControlHiddenState(feature._$$pf_IdToTrim$p$0, shouldTrim));
                    }
                }
                else {
                    _Ewa.HelperMethods.setDomElementByID(feature._$$pf_IdToTrim$p$0, (shouldTrim) ? 'none' : 'inline-block');
                }
            }
        }
    },
    
    _updateDisabledCommandsForLicense$p$3: function _Ewa_RibbonManager$_updateDisabledCommandsForLicense$p$3$in() {
        this._licenseCommandsToDisable$p$3.clear();
        var $$enum_1 = this._licenseFeatures$p$3.$$lge();
        while ($$enum_1.$$mn()) {
            var feature = $$enum_1.$$cu();
            if (!feature._$$pf_EnabledState$p$0) {
                this._licenseCommandsToDisable$p$3.add(feature._$$pf_CommandToDisable$p$0);
            }
        }
        if (this._$$pf_EwaControl$p$2 && this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4209248_PollForStateAfterLicenseUpdate')) {
            this.pollForStateAndUpdateInternalAsync();
        }
    }
}


_Ewa.RibbonManager._licensedRibbonFeature = function _Ewa_RibbonManager__licensedRibbonFeature(featureName, idToTrim, legacyControlId, commandToDisable, tabId, initialState, fallbackState) {
    this._$$pf_FeatureName$p$0 = featureName;
    this._$$pf_IdToTrim$p$0 = idToTrim;
    this._$$pf_LegacyControlId$p$0 = legacyControlId;
    this._$$pf_CommandToDisable$p$0 = commandToDisable;
    this._$$pf_TabId$p$0 = tabId;
    this._$$pf_FallBackState$p$0 = fallbackState;
    this._$$pf_EnabledState$p$0 = initialState;
    this._$$pf_CallbackId$p$0 = null;
}
_Ewa.RibbonManager._licensedRibbonFeature.prototype = {
    _$$pf_LegacyControlId$p$0: null,
    
    get_legacyControlId: function _Ewa_RibbonManager__licensedRibbonFeature$get_legacyControlId$in() {
        return this._$$pf_LegacyControlId$p$0;
    },
    
    _$$pf_FeatureName$p$0: null,
    
    get_featureName: function _Ewa_RibbonManager__licensedRibbonFeature$get_featureName$in() {
        return this._$$pf_FeatureName$p$0;
    },
    
    _$$pf_IdToTrim$p$0: null,
    
    get_idToTrim: function _Ewa_RibbonManager__licensedRibbonFeature$get_idToTrim$in() {
        return this._$$pf_IdToTrim$p$0;
    },
    
    _$$pf_CommandToDisable$p$0: 0,
    
    get_commandToDisable: function _Ewa_RibbonManager__licensedRibbonFeature$get_commandToDisable$in() {
        return this._$$pf_CommandToDisable$p$0;
    },
    
    _$$pf_TabId$p$0: null,
    
    get_tabId: function _Ewa_RibbonManager__licensedRibbonFeature$get_tabId$in() {
        return this._$$pf_TabId$p$0;
    },
    
    _$$pf_FallBackState$p$0: false,
    
    get_fallBackState: function _Ewa_RibbonManager__licensedRibbonFeature$get_fallBackState$in() {
        return this._$$pf_FallBackState$p$0;
    },
    
    _$$pf_EnabledState$p$0: false,
    
    get_enabledState: function _Ewa_RibbonManager__licensedRibbonFeature$get_enabledState$in() {
        return this._$$pf_EnabledState$p$0;
    },
    
    set_enabledState: function _Ewa_RibbonManager__licensedRibbonFeature$set_enabledState$in(value) {
        this._$$pf_EnabledState$p$0 = value;
        return value;
    },
    
    _$$pf_CallbackId$p$0: null,
    
    get_callbackId: function _Ewa_RibbonManager__licensedRibbonFeature$get_callbackId$in() {
        return this._$$pf_CallbackId$p$0;
    },
    
    set_callbackId: function _Ewa_RibbonManager__licensedRibbonFeature$set_callbackId$in(value) {
        this._$$pf_CallbackId$p$0 = value;
        return value;
    }
}


_Ewa.RibbonUserFactory = function _Ewa_RibbonUserFactory(ewaControl) {
    this.$$d__routeToggleRibbonCommandToCommandUIManager$p$0 = Function.createDelegate(this, this._routeToggleRibbonCommandToCommandUIManager$p$0);
    this._ewaControl$p$0 = ewaControl;
}
_Ewa.RibbonUserFactory.loadSLRLazyResources = function _Ewa_RibbonUserFactory$loadSLRLazyResources$st(scriptLoader) {
    Diag.ULS.sendTraceTag(40719139, 0, 50, 'RibbonUserFactory.LoadSLRLazyResources called');
    var $$t_1 = scriptLoader;
    return _Ewa.ReactRibbonRenderer.loadSLRLazyResources(($$t_1.$$d_loadScript || ($$t_1.$$d_loadScript = Function.createDelegate($$t_1, $$t_1.loadScript))), null);
}
_Ewa.RibbonUserFactory.loadRibbonJsonAndCommonStringsResources = function _Ewa_RibbonUserFactory$loadRibbonJsonAndCommonStringsResources$st(ewaControl) {
    var commonStringsTask = _Ewa.GetServiceTaskFactory.create(Object, ewaControl.get_serviceRegistry(), 155, ewaControl.get_cancelOnDisposeToken(), 1);
    var jsonLoadTask = _Ewa.ClientHostingPlatform.loadScriptsWithValidationAndRetry(63, 4, function() {
        return !isNullOrUndefined(window.ewaEditRibbonJSON);
    }, ewaControl.get_bootstrapContext().MaxRetriesForLoadingScript, ewaControl.get_cancelOnDisposeToken(), 0, 1);
    return _Ewa.TaskExtensions.ws([ commonStringsTask, jsonLoadTask ], ewaControl.get_cancelOnDisposeToken(), 3);
}
_Ewa.RibbonUserFactory.prototype = {
    _ewaControl$p$0: null,
    _excelTopRowPeripheralControlCreator$p$0: null,
    _dynamicScriptLoaderProvider$p$0: null,
    
    loadRibbonResources: function _Ewa_RibbonUserFactory$loadRibbonResources$in() {
        if (_Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled()) {
            this._dynamicScriptLoaderProvider$p$0 = _Ewa.GetServiceTaskFactory.getOrCreateAsync(Common.IDynamicScriptLoaderProvider, this._ewaControl$p$0.get_serviceRegistry(), 283, 284, -2).get_result();
            if (!this._ewaControl$p$0.isServerFeatureEnabled(329)) {
                var loadSLRMainResources = this._dynamicScriptLoaderProvider$p$0.getScriptLoader().loadScript('appChrome');
                if (this._ewaControl$p$0.isServerFeatureEnabled(452)) {
                    var $$t_2 = this;
                    loadSLRMainResources.then((function(unused) {
                        _Ewa.RibbonUserFactory.loadSLRLazyResources($$t_2._dynamicScriptLoaderProvider$p$0.getScriptLoader());
                        return null;
                    }));
                    _Ewa.PageLoadTrackingInfo.get_instance().addTag('LoadSLRLazyResourcesBeforeRender');
                }
            }
            return _Ewa.GetServiceTaskFactory.create(Object, this._ewaControl$p$0.get_serviceRegistry(), 155, this._ewaControl$p$0.get_cancelOnDisposeToken(), 1);
        }
        else {
            return _Ewa.RibbonUserFactory.loadRibbonJsonAndCommonStringsResources(this._ewaControl$p$0);
        }
    },
    
    create: function _Ewa_RibbonUserFactory$create$in(standaloneRoot, cuiControlManager, rootUser, commandUIElement, trimmedProperties, commandUIJSON, namingIdPrefix, ribbonClientId, ribbonFocusId, minimized) {
        this._excelTopRowPeripheralControlCreator$p$0 = new _Ewa.ExcelTopRowPeripheralControlCreator(standaloneRoot, this._ewaControl$p$0);
        var useReactRibbon = _Ewa.IsFeatureEnabledExtensions.isReactRibbonEnabled();
        var resizableContainer = new Common.WindowResizeEventSource();
        if (_Ewa.CoreStaticMethods.get_ewaApplicationInstance().get_isSimplifiedReactRibbonUxFlightEnabled()) {
            Common.AFrameworkApplication.get_theActionManager().addAction(422501225, 2147483648, Common.ActionManager.doNothingButReportHandler);
            Common.AFrameworkApplication.get_theActionManager().addAction(2363934117, 2147483648, Common.ActionManager.doNothingButReportHandler);
        }
        if (!Common.Utils.Container.get_instance().tryResolve(Common.IRibbonSQMInformation, '')) {
            var $$t_E = this;
            Common.Utils.Container.get_instance().register(_Ewa.ExcelEditorRibbonSQMInformation, '').as(Common.IRibbonSQMInformation, '').singleInstance().usingFactory(function() {
                return new _Ewa.ExcelEditorRibbonSQMInformation(Common.AFrameworkApplication.get_theActionManager(), namingIdPrefix);
            });
        }
        if (this._excelTopRowPeripheralControlCreator$p$0.shouldShowActionButtonInRibbon()) {
            Common.AFrameworkApplication.get_theActionManager().addAction(1342108365, 2147483648, this.$$d__routeToggleRibbonCommandToCommandUIManager$p$0);
        }
        if ((_Ewa.IsFeatureEnabledExtensions.isReactComponentsInMLREnabled(this._ewaControl$p$0) || useReactRibbon) && !Common.Utils.Container.get_instance().tryResolve(Common.IExternalUICommandDefinitionMapping, '')) {
            var $$t_F = this;
            Common.Utils.Container.get_instance().register(_Ewa.ExcelReactCommandDefinitionMapping, '').as(Common.IExternalUICommandDefinitionMapping, '').singleInstance().usingFactory(function() {
                return new _Ewa.ExcelReactCommandDefinitionMapping(namingIdPrefix, $$t_F._ewaControl$p$0);
            });
        }
        if (useReactRibbon) {
            var $$t_G = this;
            var fileMenuJSONProvider = function() {
                return window.ewaFileMenuSlrJSON;
            };
            var jewelPropertiesBuilder = this._getReactRibbonJewelPropertiesBuilder$p$0(trimmedProperties.get_trimmedIds(), namingIdPrefix, fileMenuJSONProvider);
            return new _Ewa.ReactRibbonUser(this._ewaControl$p$0, commandUIElement, Common.AFrameworkApplication.get_activeFrame().get_theFocusManager(), Common.AFrameworkApplication.get_theActionManager(), Common.Utils.Container.get_instance().resolve(Common.IExternalUICommandDefinitionMapping, ''), rootUser, ribbonClientId, ribbonFocusId, this._excelTopRowPeripheralControlCreator$p$0, jewelPropertiesBuilder, trimmedProperties, namingIdPrefix, this._dynamicScriptLoaderProvider$p$0.getScriptLoader(), resizableContainer);
        }
        else {
            return new _Ewa.LegacyRibbonUser(this._ewaControl$p$0, commandUIElement, standaloneRoot, cuiControlManager, rootUser, trimmedProperties.get_trimmedIds(), commandUIJSON, namingIdPrefix, ribbonClientId, minimized, this._excelTopRowPeripheralControlCreator$p$0, 'jewelcontainer', resizableContainer, ribbonFocusId);
        }
    },
    
    _getReactRibbonJewelPropertiesBuilder$p$0: function _Ewa_RibbonUserFactory$_getReactRibbonJewelPropertiesBuilder$p$0$in(trimmedIds, namingIdPrefix, fileMenuJSONProvider) {
        var $$t_3 = this;
        return function() {
            return new CommandUI.ReactRibbonJewelProperties(new _Ewa.EwaCuiDataSource(fileMenuJSONProvider(), namingIdPrefix), trimmedIds, 'jewelcontainer');
        };
    },
    
    _routeToggleRibbonCommandToCommandUIManager$p$0: function _Ewa_RibbonUserFactory$_routeToggleRibbonCommandToCommandUIManager$p$0$in(actionid, context, behavior, reportingdata, actiondata) {
        return (_Ewa.CommandUIExtensions.commandUIManager(this._ewaControl$p$0).executeRootCommand('-1610103463', {}, new Common.CommandSqmInfo(), null, null)) ? 32 : 2;
    },
    
    dispose: function _Ewa_RibbonUserFactory$dispose$in() {
        if (this._excelTopRowPeripheralControlCreator$p$0) {
            Common.AFrameworkApplication.get_theActionManager().removeAction(422501225, 2147483648, Common.ActionManager.doNothingButReportHandler);
            Common.AFrameworkApplication.get_theActionManager().removeAction(2363934117, 2147483648, Common.ActionManager.doNothingButReportHandler);
            if (this._excelTopRowPeripheralControlCreator$p$0.shouldShowActionButtonInRibbon()) {
                Common.AFrameworkApplication.get_theActionManager().removeAction(1342108365, 2147483648, this.$$d__routeToggleRibbonCommandToCommandUIManager$p$0);
            }
            this._excelTopRowPeripheralControlCreator$p$0 = null;
        }
    }
}


_Ewa._statusBarManager = function _Ewa__statusBarManager(ewaControl, commandUIJSON) {
    this.$$d__onWebMethodSuccess$p$3 = Function.createDelegate(this, this._onWebMethodSuccess$p$3);
    this._aggregatesLabels$p$3 = [ 'averageLabel', 'countLabel', 'numericalCountLabel', 'minimumLabel', 'maximumLabel', 'sumLabel' ];
    _Ewa._statusBarManager.initializeBase(this, [ ewaControl, 'statusBarContainer', commandUIJSON ]);
    this._showAddinLoadStatus$p$3 = ewaControl.isServerFeatureEnabled(63);
    if (ewaControl.isServerFeatureEnabled(569)) {
        ewaControl.get_connectionManager().add_webMethodSuccess(this.$$d__onWebMethodSuccess$p$3);
        this._showPivotDataSourceStatus$p$3 = true;
    }
    this.attachCommandUIControlInternal();
    if (this._$$pf_EwaControl$p$2.get_isRegionComposerLayoutManagementEnabled()) {
        _Ewa.EwaApplication.get_activeAppFrame().get_regionComposerManager().appendContentToRegion('StatusBar', this._$$pf_CommandUIElement$p$2);
    }
}
_Ewa._statusBarManager._handleQueryEnvironmentNameCommand$p = function _Ewa__statusBarManager$_handleQueryEnvironmentNameCommand$p$st(commandParams) {
    if (_Ewa.StringExtensions.isNullOrEmpty(Common.AFrameworkApplication.appSettingsManager.get_appSettings()['StatusBarEnvironmentNameToUse'])) {
        return false;
    }
    var actionResponse = Common.AFrameworkApplication.get_theActionManager().processActionWithData(3887408216, 2, commandParams, null);
    return actionResponse === 32;
}
_Ewa._statusBarManager.prototype = {
    _showAddinLoadStatus$p$3: false,
    _showPivotDataSourceStatus$p$3: false,
    _$$pf_StatusBar$p$3: null,
    
    get_statusBar: function _Ewa__statusBarManager$get_statusBar$in() {
        return this._$$pf_StatusBar$p$3;
    },
    
    get_canReceiveFocus: function _Ewa__statusBarManager$get_canReceiveFocus$in() {
        return !!this._getFirstFocusableControl$p$3();
    },
    
    get_sectionName: function _Ewa__statusBarManager$get_sectionName$in() {
        return 'SB';
    },
    
    get_commandUISuffix: function _Ewa__statusBarManager$get_commandUISuffix$in() {
        return 'statusBarContainer';
    },
    
    dispose: function _Ewa__statusBarManager$dispose$in() {
        if (this._$$pf_EwaControl$p$2.isServerFeatureEnabled(569)) {
            this._$$pf_EwaControl$p$2.get_connectionManager().remove_webMethodSuccess(this.$$d__onWebMethodSuccess$p$3);
        }
        if (this._$$pf_CommandUIFeatureRootUsers$p$2) {
            var $$enum_1 = this._$$pf_CommandUIFeatureRootUsers$p$2.$$ge();
            while ($$enum_1.$$mn()) {
                var featureRootUser = $$enum_1.$$cu();
                featureRootUser.remove_statusChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            }
            this._$$pf_CommandUIFeatureRootUsers$p$2 = null;
        }
        System.IDisposableExtensions.safeDispose(this._$$pf_StatusBar$p$3);
        this._$$pf_StatusBar$p$3 = null;
        _Ewa.CommandUIManager.prototype.dispose.call(this);
    },
    
    onComponentBuilt: function _Ewa__statusBarManager$onComponentBuilt$in(root, componentId) {
        if (CommandUI.StatusBar.isInstanceOfType(root)) {
            root.set_rootUser(this);
            this._$$pf_StatusBar$p$3 = root;
            for (var $$arr_2 = this._aggregatesLabels$p$3, $$len_3 = $$arr_2.length, $$idx_4 = 0; $$idx_4 < $$len_3; ++$$idx_4) {
                var aggregatesLabel = $$arr_2[$$idx_4];
                this._setControlVisibility$p$3(this.getNamingIdConcatString(aggregatesLabel), false);
            }
            if (this._showAddinLoadStatus$p$3) {
                this._setControlVisibility$p$3(this.getNamingIdConcatString('OfficeAddinLabel'), false);
            }
            root.pollForStateAndUpdate();
            var cuiRoot = $$as(Common.ICUIRoot, root);
            if (cuiRoot) {
                cuiRoot.set_controlIdPrefix(this._$$pf_NamingIdPrefix$p$2);
            }
            Diag.ULS.sendTraceTag(25454287, 0, 50, 'StatusBarManager:OnComponentBuilt finished creating the StatusBar');
            this._$$pf_EwaControl$p$2.adjustForStatusBar();
        }
    },
    
    setFocusOnSection: function _Ewa__statusBarManager$setFocusOnSection$in(forward, alreadyFocused) {
        return this.trySetFocus(this._getFirstFocusableControl$p$3(), alreadyFocused);
    },
    
    addFeatureRootUser: function _Ewa__statusBarManager$addFeatureRootUser$in(featureRootUser) {
        if (!this._$$pf_CommandUIFeatureRootUsers$p$2) {
            this._$$pf_CommandUIFeatureRootUsers$p$2 = new ($$sc.List$1.$$(_Ewa.ICommandUIFeatureRootUser))();
        }
        if (!this._$$pf_CommandUIFeatureRootUsers$p$2.contains(featureRootUser)) {
            this._$$pf_CommandUIFeatureRootUsers$p$2.add(featureRootUser);
            featureRootUser.add_statusChanged(this.$$d_pollForStateAndUpdateInternalAsync);
        }
    },
    
    removeFeatureRootUser: function _Ewa__statusBarManager$removeFeatureRootUser$in(featureRootUser) {
        if (this._$$pf_CommandUIFeatureRootUsers$p$2 && this._$$pf_CommandUIFeatureRootUsers$p$2.contains(featureRootUser)) {
            featureRootUser.remove_statusChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            this._$$pf_CommandUIFeatureRootUsers$p$2.remove(featureRootUser);
        }
    },
    
    handleFocusGained: function _Ewa__statusBarManager$handleFocusGained$in() {
        Common.AFrameworkApplication.get_activeFrame().get_theFocusManager().setScope(this.get_sectionName());
    },
    
    handleQueryCommand: function _Ewa__statusBarManager$handleQueryCommand$in(commandId, commandParams) {
        if (commandId === 'QueryEnvironmentName') {
            return _Ewa._statusBarManager._handleQueryEnvironmentNameCommand$p(commandParams);
        }
        var $$t_4 = this;
        return !!this._$$pf_CommandUIFeatureRootUsers$p$2 && $$sc.Enumerable.AT(_Ewa.ICommandUIFeatureRootUser, this._$$pf_CommandUIFeatureRootUsers$p$2, function(featureRootUser) {
            return featureRootUser.executeRootCommand(commandId, commandParams, null, null, null);
        });
    },
    
    pollForStateAndUpdate: function _Ewa__statusBarManager$pollForStateAndUpdate$in() {
        if (this._$$pf_StatusBar$p$3 && this._$$pf_StatusBar$p$3.get_root()) {
            this._$$pf_StatusBar$p$3.pollForStateAndUpdate();
        }
    },
    
    generateAndAttachCommandUIControl: function _Ewa__statusBarManager$generateAndAttachCommandUIControl$in() {
        var options = new CommandUI.ToolbarBuildOptions();
        options.trimmedIds = {};
        this._manageVisibility$p$3(options.trimmedIds);
        var builder = new CommandUI.ToolbarBuilder(options, this._$$pf_CommandUIElement$p$2, this, null);
        builder.set_dataSource(new _Ewa.EwaCuiDataSource(this._$$pf_CommandUIJSON$p$2, this._$$pf_NamingIdPrefix$p$2));
        builder.buildToolbar();
        this._manageVisibilityForControlsProperties$p$3();
        this.attachCommandUIKeyEvents();
        return true;
    },
    
    setFocusOnCommandUIBar: function _Ewa__statusBarManager$setFocusOnCommandUIBar$in() {
        var focusableElement = this._$$pf_LastKeyboardClickedElement$p$2 || this._getFirstFocusableControl$p$3();
        if (focusableElement) {
            _Ewa.DOMElementExtensions.setFocus(focusableElement, false);
        }
        return true;
    },
    
    _manageVisibility$p$3: function _Ewa__statusBarManager$_manageVisibility$p$3$in(trimmedIds) {
        var showGiveFeedback = this._$$pf_EwaControl$p$2.get_sessionStateManager().get_fullDocumentOptions().get(17);
        var showGallatinText = this._$$pf_EwaControl$p$2.get_basicDocumentOptions().get(44);
        var isForceShowGallatinTextForCNOnly = this._$$pf_EwaControl$p$2.isServerFeatureEnabled(265);
        var machineCluster = 'N/A';
        if (isForceShowGallatinTextForCNOnly) {
            var chineseLawClusters = [ 'CN1', 'CN2' ];
            machineCluster = this._$$pf_EwaControl$p$2.get_bootstrapContext().MachineCluster.trim();
            var isMachineClusterInChineseDatacenter = Array.contains(chineseLawClusters, machineCluster);
            showGallatinText = isMachineClusterInChineseDatacenter;
        }
        var showOcsConnectionStatusLabel = this._$$pf_EwaControl$p$2.isServerFeatureEnabled(317);
        var showCanvasStatusLabel = this._$$pf_EwaControl$p$2.isServerFeatureEnabled(396);
        var showNetworkInformationLabel = this._$$pf_EwaControl$p$2.isServerFeatureEnabled(732);
        var showClassificationLabel = this._$$pf_EwaControl$p$2.isServerFeatureEnabled(447);
        var selectionModeLabel = this._$$pf_EwaControl$p$2.isServerFeatureEnabled(458);
        var showZoomButton = this._$$pf_EwaControl$p$2.isServerFeatureEnabled(778) && _Ewa.ZoomManagerExtensions.zoomManager(this._$$pf_EwaControl$p$2).zoomFeatureShouldBeDeployed();
        Diag.ULS.sendTraceTag(37089858, 0, 15, 'StatusBarManager:ManageVisibility showGallatinText: {0}, MachineCluster: {1}, isForceShowGallatinTextForCNOnly: {2}, BasicDocumentInfoOption.IsOfficeOnlineInGallatinTextVisible: {3}', showGallatinText, machineCluster, isForceShowGallatinTextForCNOnly, this._$$pf_EwaControl$p$2.get_basicDocumentOptions().get(44));
        var showSeparatorLabel = showGiveFeedback;
        trimmedIds[this.getNamingIdConcatString('separatorLabel')] = !showSeparatorLabel;
        if (this._$$pf_EwaControl$p$2.isServerFeatureEnabled(479) && this._$$pf_EwaControl$p$2.isServerFeatureEnabled(300)) {
            trimmedIds[this.getNamingIdConcatString('giveFeedbackPane')] = !showGiveFeedback;
            trimmedIds[this.getNamingIdConcatString('giveFeedback')] = true;
        }
        else {
            trimmedIds[this.getNamingIdConcatString('giveFeedbackPane')] = true;
            trimmedIds[this.getNamingIdConcatString('giveFeedback')] = !showGiveFeedback;
        }
        trimmedIds[this.getNamingIdConcatString('OfficeAddinLabel')] = !this._showAddinLoadStatus$p$3;
        trimmedIds[this.getNamingIdConcatString('centerStatusLabel')] = !showGallatinText;
        trimmedIds[this.getNamingIdConcatString('OcsConnectionStatusLabel')] = !showOcsConnectionStatusLabel;
        trimmedIds[this.getNamingIdConcatString('MergeSuspensionStatusLabel')] = !showOcsConnectionStatusLabel;
        trimmedIds[this.getNamingIdConcatString('CanvasStatusLabel')] = !showCanvasStatusLabel;
        trimmedIds[this.getNamingIdConcatString('NetworkInfoLabel')] = !showNetworkInformationLabel;
        trimmedIds[this.getNamingIdConcatString('ClassificationLabel')] = !showClassificationLabel;
        trimmedIds[this.getNamingIdConcatString('DataSourceDirtinessButton')] = !this._showPivotDataSourceStatus$p$3;
        trimmedIds[this.getNamingIdConcatString('SelectionModeLabel')] = !selectionModeLabel;
        trimmedIds[this.getNamingIdConcatString('ZoomIncrease')] = !showZoomButton;
        trimmedIds[this.getNamingIdConcatString('ZoomDecrease')] = !showZoomButton;
        trimmedIds[this.getNamingIdConcatString('separatorLabelAfterZoom')] = !showZoomButton;
        trimmedIds[this.getNamingIdConcatString('zoomLevel')] = !showZoomButton;
    },
    
    _manageVisibilityForControlsProperties$p$3: function _Ewa__statusBarManager$_manageVisibilityForControlsProperties$p$3$in() {
        this._manageVisibilityForZoomControlsProperties$p$3();
    },
    
    _manageVisibilityForZoomControlsProperties$p$3: function _Ewa__statusBarManager$_manageVisibilityForZoomControlsProperties$p$3$in() {
        if (this._$$pf_EwaControl$p$2.isServerFeatureEnabled(778) && _Ewa.ZoomManagerExtensions.zoomManager(this._$$pf_EwaControl$p$2).zoomFeatureShouldBeDeployed()) {
            var zoomLabel = _Ewa.DOMElementExtensions.getElementById(this._$$pf_EwaControl$p$2.get_domElement(), 'm_excelWebRenderer_ewaCtl_zoomLevel-Medium14');
            if (!zoomLabel) {
                Diag.ULS.sendTraceTag(591204766, 0, 50, 'StatusBarManager.ManageVisibilityForZoomControlsProperties cannot find zoom control');
                return;
            }
            if (this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4246500_NewIconsForZoomWithAdjustments')) {
                zoomLabel.style.paddingLeft = '0';
                zoomLabel.style.paddingRight = '0';
                zoomLabel.style.marginLeft = '0';
                zoomLabel.style.marginRight = '0';
            }
            var zoomInternalLabelCollection = zoomLabel.getElementsByClassName(' cui-img-cont-float cui-img-8by8');
            if (zoomInternalLabelCollection.length !== 1) {
                Diag.ULS.shipAssertTag(591204765, 0, false, 'Cannot find zoom\'s flyout image');
                return;
            }
            zoomInternalLabelCollection[0].style.display = 'none';
            if (this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4246500_NewIconsForZoomWithAdjustments')) {
                this._adjustZoomButtons$p$3('m_excelWebRenderer_ewaCtl_ZoomIncrease-Medium14', 'ewaother_zoomPlus12', true);
                this._adjustZoomButtons$p$3('m_excelWebRenderer_ewaCtl_ZoomDecrease-Medium14', 'ewaother_zoomMinus12', false);
            }
        }
    },
    
    _adjustZoomButtons$p$3: function _Ewa__statusBarManager$_adjustZoomButtons$p$3$in(buttonId, buttonClass, left) {
        var zoomButton = _Ewa.DOMElementExtensions.getElementById(this._$$pf_EwaControl$p$2.get_domElement(), buttonId);
        if (!zoomButton) {
            Diag.ULS.sendTraceTag(590956110, 0, 50, 'StatusBarManager.ManageVisibilityForZoomControlsProperties cannot find button id {0}', buttonId);
            return;
        }
        if (left) {
            zoomButton.style.marginLeft = '0';
        }
        else {
            zoomButton.style.marginRight = '0';
            zoomButton.style.paddingRight = '0';
        }
        var zoomButtonClass = zoomButton.getElementsByClassName(buttonClass);
        if (zoomButtonClass.length !== 1) {
            Diag.ULS.shipAssertTag(590956109, 0, false, 'StatusBarManager.ManageVisibilityForZoomControlsProperties {0}.Length is {1}. Should be 1', buttonClass, zoomButtonClass.length);
            return;
        }
        zoomButtonClass[0].style.top = _Ewa.HelperMethods.pixelCssString(zoomButtonClass[0].offsetTop + 2);
    },
    
    _getFirstFocusableControl$p$3: function _Ewa__statusBarManager$_getFirstFocusableControl$p$3$in() {
        var anchorElements = this._$$pf_CommandUIElement$p$2.getElementsByTagName('a');
        return _Ewa.DOMElementExtensions.getFirstFocusableElement(anchorElements);
    },
    
    _setControlVisibility$p$3: function _Ewa__statusBarManager$_setControlVisibility$p$3$in(controlId, visible) {
        this._$$pf_StatusBar$p$3.setControlVisibility(controlId, visible, true);
    },
    
    _onWebMethodSuccess$p$3: function _Ewa__statusBarManager$_onWebMethodSuccess$p$3$in(sender, args) {
        if (args && args.get_ewaResult() && this._showPivotDataSourceStatus$p$3 !== args.get_ewaResult().HasDirtyDataSource) {
            this._showPivotDataSourceStatus$p$3 = args.get_ewaResult().HasDirtyDataSource;
            this._setControlVisibility$p$3(this.getNamingIdConcatString('DataSourceDirtinessButton'), this._showPivotDataSourceStatus$p$3);
        }
    }
}


_Ewa.StatusBarManagerFactory = function _Ewa_StatusBarManagerFactory(ewaControl) {
    _Ewa.StatusBarManagerFactory.initializeBase(this);
    this._$$pf_EwaControl$p$4 = ewaControl;
    _Ewa.CommandDataManager.addCommandData(-2058599425, 511, 0, 0);
    if (this._$$pf_EwaControl$p$4.isServerFeatureEnabled(778) && _Ewa.ZoomManagerExtensions.zoomManager(this._$$pf_EwaControl$p$4).zoomFeatureShouldBeDeployed()) {
        _Ewa.CommandDataManager.addCommandData(298515797, 511, 0, 0);
    }
}
_Ewa.StatusBarManagerFactory.prototype = {
    _$$pf_EwaControl$p$4: null,
    
    create: function _Ewa_StatusBarManagerFactory$create$in() {
        var ewa = this._$$pf_EwaControl$p$4;
        var $$t_3 = this;
        _Ewa.TaskExtensions.cw(_Ewa.ClientHostingPlatform.loadScript(64, 4, false, false, 0, this.get_scriptLoadFlavor()), function(_) {
            $$t_3.raiseServiceCreatedEvent(new _Ewa._statusBarManager(ewa, window.ewaStatusBarJSON));
            _Ewa.ULS.debugSendTraceTag(20235934, 0, 100, 'StatusBarManagerFactory.Create - after RaiseServiceCreatedEvent');
        }, ewa.get_cancelOnDisposeToken(), 3);
    }
}


_Ewa._tableContextualRibbonGroup = function _Ewa__tableContextualRibbonGroup(ewaControl, ribbonManager, contextualGroupId, homeTabId, selectionModesToShowContextualGroup, tabsIds) {
    _Ewa._tableContextualRibbonGroup.initializeBase(this, [ ewaControl, ribbonManager, contextualGroupId, homeTabId, selectionModesToShowContextualGroup, 1, tabsIds ]);
}
_Ewa._tableContextualRibbonGroup.createContextualRibbonGroup = function _Ewa__tableContextualRibbonGroup$createContextualRibbonGroup$st(ewaControl, ribbonManager, contextualGroupId, homeTabId, selectionModesToShowContextualGroup) {
    var tabsIds = [];
    for (var $$pai_6 = 5; $$pai_6 < arguments.length; ++$$pai_6) {
        tabsIds[$$pai_6 - 5] = arguments[$$pai_6];
    }
    return new _Ewa._tableContextualRibbonGroup(ewaControl, ribbonManager, contextualGroupId, homeTabId, selectionModesToShowContextualGroup, tabsIds);
}
_Ewa._tableContextualRibbonGroup.prototype = {
    
    shouldShowContextualDefaultTab: function _Ewa__tableContextualRibbonGroup$shouldShowContextualDefaultTab$in() {
        var grid = _Ewa.GridViewExtensions.grid(this.ewaControl);
        var containingTable = grid.get_gridContentQueries().getTableContainingRange(grid.get_selectionManager().get_activeCell(), false);
        return _Ewa._contextualRibbonGroup.prototype.shouldShowContextualDefaultTab.call(this) && !!containingTable;
    },
    
    selectDefaultTab: function _Ewa__tableContextualRibbonGroup$selectDefaultTab$in() {
        if (!this.ewaControl.isChangeGateEnabled('OfficeVSO:3370417_DoNotShowTableDesignTabByDefault')) {
            _Ewa._contextualRibbonGroup.prototype.selectDefaultTab.call(this);
        }
    }
}


_Ewa._toolbarManager = function _Ewa__toolbarManager(ewaControl, commandUIJSON) {
    this.$$d__onWindowResize$p$3 = Function.createDelegate(this, this._onWindowResize$p$3);
    this.$$d__onActiveItemChanged$p$3 = Function.createDelegate(this, this._onActiveItemChanged$p$3);
    _Ewa._toolbarManager.initializeBase(this, [ ewaControl, 'commandUIContainer', commandUIJSON ]);
    Diag.ULS.sendTraceTag(40380385, 0, 50, 'ToolbarManager.c\'tor: Toolbar Generation Starting.');
    if (this.get_rootCommandUIElement()) {
        this.get_rootCommandUIElement().innerHTML = String.format('<div class=\'{0}\' id=\'{1}\'></div>', 'ewa-readmodetoolbar', this._$$pf_NamingIdPrefix$p$2 + this.get_commandUISuffix());
    }
    this._$$pf_FileMenuManager$p$2 = new _Ewa.FileMenuManager(ewaControl);
    this.attachCommandUIControlInternal();
}
_Ewa._toolbarManager.prototype = {
    _readmodeFindElement$p$3: null,
    _namedObjectDropdownList$p$3: null,
    _viewerChrome$p$3: null,
    _headerUI$p$3: null,
    _trimmedIds$p$3: null,
    
    get_sectionName: function _Ewa__toolbarManager$get_sectionName$in() {
        return 'TM';
    },
    
    _$$pf_ReadModeToolbar$p$3: null,
    
    get_readModeToolbar: function _Ewa__toolbarManager$get_readModeToolbar$in() {
        return this._$$pf_ReadModeToolbar$p$3;
    },
    
    get_readModeFindElement: function _Ewa__toolbarManager$get_readModeFindElement$in() {
        return this._readmodeFindElement$p$3 || (this._readmodeFindElement$p$3 = _Ewa.DOMElementExtensions.getElementById(this.get_rootCommandUIElement(), this.getNamingIdConcatString('btnFind-Medium')));
    },
    
    get_commandUISuffix: function _Ewa__toolbarManager$get_commandUISuffix$in() {
        return 'commandUIPlaceHolder';
    },
    
    get__shouldAnyPartBeVisible$p$3: function _Ewa__toolbarManager$get__shouldAnyPartBeVisible$p$3$in() {
        var sessionStateManager = this._$$pf_EwaControl$p$2.get_sessionStateManager();
        return !!document.getElementById(this.getNamingIdConcatString('commandUIContainer')) && (!this.get__inWebPart$p$3() || !this.get__navigationOnlyToolbar$p$3() || (sessionStateManager.get_isNamedObjectViewMode() && sessionStateManager.get_permissionSet().get_showVisibleItemButton()));
    },
    
    get__navigationOnlyToolbar$p$3: function _Ewa__toolbarManager$get__navigationOnlyToolbar$p$3$in() {
        return _Ewa.BootstrapContextExtensions.isSet(this._$$pf_EwaControl$p$2.get_bootstrapContext(), 13);
    },
    
    get__inWebPart$p$3: function _Ewa__toolbarManager$get__inWebPart$p$3$in() {
        return this._$$pf_EwaControl$p$2.get_sessionStateManager().get_permissionSet().get_inWebPart();
    },
    
    dispose: function _Ewa__toolbarManager$dispose$in() {
        if (this._$$pf_EwaControl$p$2) {
            var ewaControl = this._$$pf_EwaControl$p$2;
            ewaControl.get_commandHandlerManager().remove_commandHandlerAdded(this.$$d_pollForStateAndUpdateInternalAsync);
            ewaControl.remove_toolbarsAndRibbonsUpdateRequested(this.$$d_pollForStateAndUpdateInternalAsync);
            this.unsubscribeToSelectionEvents();
            ewaControl.get_sheets().remove_activeItemChanged(this.$$d__onActiveItemChanged$p$3);
            ewaControl.remove_beforeContentAreaResized(this.$$d__onWindowResize$p$3);
            _Ewa.ProgressUIManagerExtensions.progressUIManager(ewaControl).remove_partialInteractivityStatusChanged(this.$$d_pollForStateAndUpdateInternalAsync);
        }
        System.IDisposableExtensions.safeDisposeArray([ this._$$pf_ReadModeToolbar$p$3, this._namedObjectDropdownList$p$3, this._viewerChrome$p$3, this._headerUI$p$3 ]);
        Common.App.AppLifecycleManager.get_instance().clearAppInitializationStatus(7);
        this._$$pf_ReadModeToolbar$p$3 = null;
        this._namedObjectDropdownList$p$3 = null;
        this._viewerChrome$p$3 = null;
        this._headerUI$p$3 = null;
        _Ewa.CommandUIManager.prototype.dispose.call(this);
    },
    
    onComponentBuilt: function _Ewa__toolbarManager$onComponentBuilt$in(root, componentId) {
        if (Object.getType(root) === CommandUI.Toolbar) {
            root.set_rootUser(this);
            this._$$pf_ReadModeToolbar$p$3 = root;
            this.subscribeToSelectionEvents();
            var ewaControl = this._$$pf_EwaControl$p$2;
            ewaControl.get_sheets().add_activeItemChanged(this.$$d__onActiveItemChanged$p$3);
            ewaControl.get_commandHandlerManager().add_commandHandlerAdded(this.$$d_pollForStateAndUpdateInternalAsync);
            ewaControl.add_toolbarsAndRibbonsUpdateRequested(this.$$d_pollForStateAndUpdateInternalAsync);
            ewaControl.add_beforeContentAreaResized(this.$$d__onWindowResize$p$3);
            _Ewa.ProgressUIManagerExtensions.progressUIManager(ewaControl).add_partialInteractivityStatusChanged(this.$$d_pollForStateAndUpdateInternalAsync);
            root.pollForStateAndUpdate();
            if (this.get__inWebPart$p$3()) {
                this._setHeightForWebPart$p$3();
            }
        }
    },
    
    updateOpenMenu: function _Ewa__toolbarManager$updateOpenMenu$in(menuId) {
        return !!this._$$pf_ReadModeToolbar$p$3 && this._$$pf_ReadModeToolbar$p$3.updateOpenMenu(menuId);
    },
    
    handleFocusGained: function _Ewa__toolbarManager$handleFocusGained$in() {
        Common.AFrameworkApplication.get_activeFrame().get_theFocusManager().setScope(this.get_sectionName());
    },
    
    logVisibilityMismatch: function _Ewa__toolbarManager$logVisibilityMismatch$in() {
        if (this._trimmedIds$p$3) {
            var trimmedIds = {};
            this._manageVisibility$p$3(trimmedIds);
            var idMismatch = _Ewa.CommandUIManager.getDictionaryMismatch(this._trimmedIds$p$3, trimmedIds, this._$$pf_EwaControl$p$2.get_namingContainerIdPrefix());
            Diag.ULS.sendTraceTag(40506688, 0, 50, 'ToolbarManager.LogVisibilityMismatch: Ids:[{0}]', idMismatch);
        }
    },
    
    pollForStateAndUpdate: function _Ewa__toolbarManager$pollForStateAndUpdate$in() {
        if (this._$$pf_ReadModeToolbar$p$3 && this._$$pf_ReadModeToolbar$p$3.get_rootUser()) {
            var isAppChromeReady = false;
            if (this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4299060_AddLogForToolbarDisplayedAndToolbarInteractiveTime')) {
                isAppChromeReady = Common.App.AppLifecycleManager.get_instance().isCompleted(7);
                if (!isAppChromeReady) {
                    _Ewa.PageLoadTrackingInfo.get_instance().startMetric('RibbonInteractive');
                }
            }
            _Ewa.ULS.debugSendTraceTag(1414034, 0, 50, 'ToolbarManager.PollForStateAndUpdate: Updating toolbar');
            this._$$pf_ReadModeToolbar$p$3.pollForStateAndUpdate();
            if (this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4299060_AddLogForToolbarDisplayedAndToolbarInteractiveTime')) {
                if (!isAppChromeReady) {
                    _Ewa.PageLoadTrackingInfo.get_instance().endMetric('RibbonInteractive');
                    Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(7);
                }
            }
        }
    },
    
    generateAndAttachCommandUIControl: function _Ewa__toolbarManager$generateAndAttachCommandUIControl$in() {
        if (!this.get__shouldAnyPartBeVisible$p$3()) {
            return false;
        }
        var ewaControl = this._$$pf_EwaControl$p$2;
        var toolbarContainer = this._$$pf_CommandUIElement$p$2;
        if (this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4299060_AddLogForToolbarDisplayedAndToolbarInteractiveTime')) {
            _Ewa.PageLoadTrackingInfo.get_instance().startMetric('RibbonDisplay');
        }
        if (!this.get__inWebPart$p$3()) {
            this._$$pf_TopRowControls$p$2 = _Ewa.CommandUIManager._createCuiHelper$i(ewaControl).createTopRowControls('toolbar', this._$$pf_CommandUIElement$p$2, null, this.get_cuiControlManager(), true, false, false);
            this._viewerChrome$p$3 = new Common.ViewerChrome(this._$$pf_CommandUIElement$p$2, 'toolbar', null, Common.AFrameworkApplication.hideHeader || Common.AFrameworkApplication.hideHeaderEmbedded, false, false);
            toolbarContainer = this._viewerChrome$p$3.get_toolbarContainer();
            this.attachCommandUIKeyEvents();
            var headerUIElement = this._viewerChrome$p$3.get_peripheralContentContainer();
            if (headerUIElement) {
                this._headerUI$p$3 = new _Ewa.HeaderUI(ewaControl, headerUIElement);
            }
            this._$$pf_EwaControl$p$2.hidePageLoadSkeletonElement('skeletonAppHeaderPlaceHolder', true, '');
            this._$$pf_EwaControl$p$2.hidePageLoadSkeletonElement('skeletonToolBar', true, '');
        }
        var options = new CommandUI.ToolbarBuildOptions();
        options.trimmedIds = {};
        options.clientID = 'toolbar';
        options.supportsEmphasizedControls = true;
        options.staticUiTouchMode = Common.AFrameworkApplication.get_activeFrame().get_isStaticUiTouchMode();
        this._manageVisibility$p$3(options.trimmedIds);
        this._trimmedIds$p$3 = options.trimmedIds;
        var builder = new CommandUI.ToolbarBuilder(options, toolbarContainer, this, null);
        builder.set_dataSource(new _Ewa.EwaCuiDataSource(this._$$pf_CommandUIJSON$p$2, this._$$pf_NamingIdPrefix$p$2));
        builder.buildToolbar();
        if (this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4299060_AddLogForToolbarDisplayedAndToolbarInteractiveTime')) {
            _Ewa.PageLoadTrackingInfo.get_instance().endMetric('RibbonDisplay');
        }
        if (this._viewerChrome$p$3) {
            this._viewerChrome$p$3.scale();
        }
        _Ewa.ULS.debugSendTraceTag(2185315, 0, 50, 'ToolbarManager.GenerateAndAttachCommandUIControl: Toolbar Generation Completed.');
        var toolbarHeight;
        if (this.get__inWebPart$p$3()) {
            if (this.get__navigationOnlyToolbar$p$3()) {
                _Ewa.DOMElementExtensions.setVisible(document.getElementById(this.getNamingIdConcatString('Jewel-Default')), false, true);
                _Ewa.DOMElementExtensions.setVisible(document.getElementById(this.getNamingIdConcatString('stripLeft')), false, true);
            }
            if (!ewaControl.get_workbookContext().NovMode) {
                Sys.UI.DomElement.addCssClass(this._$$pf_CommandUIElement$p$2, 'ewa-readmodetoolbar-nov');
                this._namedObjectDropdownList$p$3 = _Ewa.NamedObjectDropdownList.attach(ewaControl);
            }
            toolbarHeight = Common.ViewerChrome.calculateToolbarWithTopBarHeight(true, false);
        }
        else {
            toolbarHeight = this._viewerChrome$p$3.get_toolbarWithTopbarHeight();
        }
        this._$$pf_CommandUIElement$p$2.style.height = _Ewa.HelperMethods.pixelCssString(toolbarHeight);
        if (this._$$pf_EwaControl$p$2.get_isMobileMode()) {
            this._setPaddingAndMarginForToolbarContainer$p$3();
        }
        ewaControl.resetLayoutPositions();
        ($$as(_Ewa.CommandUIEventManager, _Ewa.CommandUIExtensions.commandUIEventManager(ewaControl))).commandUIAttachCompleted();
        if (!this._$$pf_EwaControl$p$2.isChangeGateEnabled('OfficeVSO:4299060_AddLogForToolbarDisplayedAndToolbarInteractiveTime')) {
            Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(7);
        }
        return true;
    },
    
    setFocusOnCommandUIBar: function _Ewa__toolbarManager$setFocusOnCommandUIBar$in() {
        if (this._$$pf_LastKeyboardClickedElement$p$2) {
            _Ewa.DOMElementExtensions.setFocus(this._$$pf_LastKeyboardClickedElement$p$2, false);
            return true;
        }
        var firstFocusableElement = this._getFirstFocusableElement$p$3();
        return this.trySetFocus(firstFocusableElement, false);
    },
    
    handleQueryCommand: function _Ewa__toolbarManager$handleQueryCommand$in(commandName, commandParams) {
        var queryCommand = commandName;
        if (queryCommand === 'QueryShowComments') {
            var commentTaskPane = this._$$pf_EwaControl$p$2.get_serviceRegistry().getService(_Ewa.ICommentTaskPane, 52, false);
            commandParams['On'] = !!commentTaskPane && commentTaskPane.get_isVisible();
        }
        else if (queryCommand === 'QueryCopyAndEditButton' && this._$$pf_EwaControl$p$2.get_sessionStateManager().get_fullDocumentOptions().get(43)) {
            commandParams['LabelText'] = _Ewa.ClientStringManager.get_instance().getString(883);
        }
        return true;
    },
    
    _manageVisibility$p$3: function _Ewa__toolbarManager$_manageVisibility$p$3$in(trimmedIds) {
        this._$$pf_FileMenuManager$p$2.manageVisibilityForViewModeJewelButtons(trimmedIds);
        this._manageVisibilityForToolbarControls$p$3(trimmedIds);
    },
    
    _setHeightForWebPart$p$3: function _Ewa__toolbarManager$_setHeightForWebPart$p$3$in() {
        if (this.get_rootCommandUIElement()) {
            var height = 0;
            if (this.get__shouldAnyPartBeVisible$p$3()) {
                height = 4 + Common.ViewerChrome.calculateToolbarWithTopBarHeight(true, false);
            }
            this.get_rootCommandUIElement().style.height = _Ewa.HelperMethods.pixelCssString(height);
        }
    },
    
    _manageVisibilityForToolbarControls$p$3: function _Ewa__toolbarManager$_manageVisibilityForToolbarControls$p$3$in(trimmedIds) {
        var ewaControl = this._$$pf_EwaControl$p$2;
        var modeCapabilities = ewaControl.get_modeCapabilities();
        var fileMenuControl = ewaControl.get_fileMenuOptions();
        var downloadCopy = ewaControl.get_downloadCopyOnOpenInClient();
        var openInClient = !!(modeCapabilities & 2) && !ewaControl.get_basicDocumentOptions().get(8);
        var canEdit = !!(modeCapabilities & 64);
        var showEditDropDown = !downloadCopy && openInClient && canEdit;
        trimmedIds[this.getNamingIdConcatString('btnDownload')] = !downloadCopy;
        if (ewaControl.isServerFeatureEnabled(478)) {
            trimmedIds[this.getNamingIdConcatString('flyoutExcelEdit')] = !showEditDropDown;
            trimmedIds[this.getNamingIdConcatString('flyoutExcelEdit_Old')] = true;
        }
        else {
            trimmedIds[this.getNamingIdConcatString('flyoutExcelEdit')] = true;
            trimmedIds[this.getNamingIdConcatString('flyoutExcelEdit_Old')] = !showEditDropDown;
        }
        trimmedIds[this.getNamingIdConcatString('btnEditOnWeb')] = !(!showEditDropDown && canEdit);
        trimmedIds[this.getNamingIdConcatString('btnOpenInClient')] = !(!showEditDropDown && openInClient);
        trimmedIds[this.getNamingIdConcatString('btnPrint')] = !this._$$pf_EwaControl$p$2.get_printingEnabled();
        trimmedIds[this.getNamingIdConcatString('btnSaveToCloudStorage')] = canEdit || !this._$$pf_EwaControl$p$2.get_sessionStateManager().get_fullDocumentOptions().get(40) || Common.BrowserUtils.get_isMobile();
        trimmedIds[this.getNamingIdConcatString('btnFind')] = !(modeCapabilities & 2097152);
        trimmedIds[this.getNamingIdConcatString('btnComments')] = !(modeCapabilities & 16777216);
        trimmedIds[this.getNamingIdConcatString('flyoutExcelData')] = !(modeCapabilities & 1048576);
        trimmedIds[this.getNamingIdConcatString('btnRefreshSelectedConnection')] = !(modeCapabilities & 256);
        trimmedIds[this.getNamingIdConcatString('btnRefreshAllConnections')] = !(modeCapabilities & 512);
        trimmedIds[this.getNamingIdConcatString('btnCalculateWorkbook')] = !(modeCapabilities & 1024);
        var trimEmbed = !(fileMenuControl & 131072);
        var trimShareWithPeople = !(modeCapabilities & 33554432);
        trimmedIds[this.getNamingIdConcatString('btnEmbed')] = trimEmbed;
        trimmedIds[this.getNamingIdConcatString('btnShareWithPeople')] = trimShareWithPeople;
        trimmedIds[this.getNamingIdConcatString('flyoutExcelShare')] = trimEmbed && trimShareWithPeople;
        if (this.get__inWebPart$p$3()) {
            trimmedIds[this.getNamingIdConcatString('ExcelViewerHeroDock')] = true;
        }
        else {
            trimmedIds[this.getNamingIdConcatString('ExcelWebPartHeroDock')] = true;
        }
    },
    
    _onActiveItemChanged$p$3: function _Ewa__toolbarManager$_onActiveItemChanged$p$3$in(sender, e) {
        var ewaControl = this._$$pf_EwaControl$p$2;
        var findElement = this.get_readModeFindElement();
        if (findElement) {
            findElement.disabled = _Ewa.ActiveItemExtensions.isChartSheet(ewaControl.get_activeItem()) || _Ewa.ActiveItemExtensions.isInteractiveReportSheet(ewaControl.get_sessionStateManager().get_activeItem());
            _Ewa.DOMElementExtensions.toggleCssClass(findElement, 'cui-disabled', findElement.disabled);
        }
        this.pollForStateAndUpdateInternalAsync();
    },
    
    _onWindowResize$p$3: function _Ewa__toolbarManager$_onWindowResize$p$3$in(sender, e) {
        if (this.get__inWebPart$p$3() && this._$$pf_CommandUIElement$p$2) {
            this._setHeightForWebPart$p$3();
            if (this._$$pf_ReadModeToolbar$p$3) {
                this._$$pf_ReadModeToolbar$p$3.refresh();
            }
        }
    },
    
    _getFocusableChildElements$p$3: function _Ewa__toolbarManager$_getFocusableChildElements$p$3$in() {
        return this._$$pf_CommandUIElement$p$2.querySelectorAll('input,button,select,submit,a,textarea');
    },
    
    _getFirstFocusableElement$p$3: function _Ewa__toolbarManager$_getFirstFocusableElement$p$3$in() {
        var commandUIChildElements = this._getFocusableChildElements$p$3();
        return _Ewa.DOMElementExtensions.getFirstFocusableElement(commandUIChildElements);
    },
    
    _getLastFocusableElement$p$3: function _Ewa__toolbarManager$_getLastFocusableElement$p$3$in() {
        var commandUIChildElements = this._getFocusableChildElements$p$3();
        return _Ewa.DOMElementExtensions.getLastFocusableElement(commandUIChildElements);
    },
    
    _setPaddingAndMarginForToolbarContainer$p$3: function _Ewa__toolbarManager$_setPaddingAndMarginForToolbarContainer$p$3$in() {
        var openInAppElement = document.getElementById(this.getNamingIdConcatString('Jewel.OpenInApp-Medium20'));
        if (openInAppElement) {
            openInAppElement.style.padding = '5px';
            openInAppElement.style.margin = '2px';
        }
        var overflowMenuElement = this._getLastFocusableElement$p$3();
        if (overflowMenuElement) {
            overflowMenuElement.style.padding = '5px';
            overflowMenuElement.style.marginLeft = '6px';
        }
        document.getElementById(this.getNamingIdConcatString('ExcelViewerToolbar')).style.paddingRight = '6px';
    }
}


_Ewa.ExcelTopRowPeripheralControlCreator.registerClass('_Ewa.ExcelTopRowPeripheralControlCreator', Common.TopRowPeripheralControlCreator);
_Ewa.ReactEnvironmentManager.registerClass('_Ewa.ReactEnvironmentManager', null, _Ewa.IReactEnvironmentManager, Sys.IDisposable);
_Ewa.EwaActionManager.registerClass('_Ewa.EwaActionManager', null, Common.IActionManager);
_Ewa.ContextMenuRootUser.registerClass('_Ewa.ContextMenuRootUser', null, Common.IRootUser);
_Ewa.ExcelEditorRibbonSQMInformation.registerClass('_Ewa.ExcelEditorRibbonSQMInformation', Common.RibbonSQMInformation);
_Ewa.ReactEnvironmentManagerFactory.registerClass('_Ewa.ReactEnvironmentManagerFactory', _Ewa.ServiceFactoryBase$1.$$(_Ewa.IReactEnvironmentManager));
_Ewa.RibbonFactory.registerClass('_Ewa.RibbonFactory', _Ewa.ServiceFactoryBase$1.$$(_Ewa.ICommandUIManager));
_Ewa._ribbonVisibilityStateManager.registerClass('_Ewa._ribbonVisibilityStateManager', _Ewa.BaseEventSource, _Ewa.IRibbonVisibilityStateManager);
_Ewa.RibbonVisibilityStateManagerFactory.registerClass('_Ewa.RibbonVisibilityStateManagerFactory', _Ewa.ServiceFactoryBase$1.$$(_Ewa.IRibbonVisibilityStateManager));
_Ewa.ToolbarFactory.registerClass('_Ewa.ToolbarFactory', _Ewa.ServiceFactoryBase$1.$$(_Ewa.ICommandUIManager));
_Ewa.CommandUIEventManager.registerClass('_Ewa.CommandUIEventManager', _Ewa.BaseEventSource, _Ewa.ICommandUIEventManager, Sys.INotifyDisposing);
_Ewa.CommandUIManager.registerClass('_Ewa.CommandUIManager', _Ewa.ExplicitDisposable, _Ewa.ICommandUIManager, Common.IRootUser, Common.IRootBuildClient, _Ewa.IKeyboardAccessibleSection);
_Ewa._contextualRibbonGroup.registerClass('_Ewa._contextualRibbonGroup', null, Sys.IDisposable);
_Ewa.EwaCuiDataSource.registerClass('_Ewa.EwaCuiDataSource', null, CommandUI.IDataSource);
_Ewa.ExcelReactRootUser.registerClass('_Ewa.ExcelReactRootUser', null, Common.IRootUser);
_Ewa.NamedObjectDropdownList.registerClass('_Ewa.NamedObjectDropdownList', _Ewa.ComboBox);
_Ewa.FileMenuManager.registerClass('_Ewa.FileMenuManager', null, Sys.IDisposable);
_Ewa.FloatieCommandHandlerFactory.registerClass('_Ewa.FloatieCommandHandlerFactory', _Ewa.ServiceFactoryBase$1.$$(Array));
_Ewa._floatieManager.registerClass('_Ewa._floatieManager', _Ewa.CommandUIManager, _Ewa.IFloatieManager, _Ewa.ICommandHandler, _Ewa.ICommandUIManager, Common.IRootUser);
_Ewa.HeaderUI.registerClass('_Ewa.HeaderUI', _Ewa.BaseControl, _Ewa.IKeyboardAccessibleSection);
_Ewa.LegacyRibbonUser.registerClass('_Ewa.LegacyRibbonUser', _Ewa.ExplicitDisposable, _Ewa.IRibbonUser, Common.IRibbonUser, Common.IRootBuildClient, Sys.IDisposable);
_Ewa._pivotTableContextualRibbonGroup.registerClass('_Ewa._pivotTableContextualRibbonGroup', _Ewa._contextualRibbonGroup);
_Ewa.ReactRibbonUser.registerClass('_Ewa.ReactRibbonUser', CommandUI.ReactRibbonUser, _Ewa.IRibbonUser, Common.IRibbonUser, Common.IRootBuildClient, Sys.IDisposable);
_Ewa.ReactHeaderRenderer.registerClass('_Ewa.ReactHeaderRenderer', null, _Ewa.IReactHeaderRenderer, Sys.IDisposable);
_Ewa.RibbonManager.registerClass('_Ewa.RibbonManager', _Ewa.CommandUIManager, _Ewa.ICommandHandler, _Ewa.IRibbonManager);
_Ewa.RibbonManager._licensedRibbonFeature.registerClass('_Ewa.RibbonManager._licensedRibbonFeature');
_Ewa.RibbonUserFactory.registerClass('_Ewa.RibbonUserFactory', null, _Ewa.IRibbonUserFactory, Sys.IDisposable);
_Ewa._statusBarManager.registerClass('_Ewa._statusBarManager', _Ewa.CommandUIManager);
_Ewa.StatusBarManagerFactory.registerClass('_Ewa.StatusBarManagerFactory', _Ewa.ServiceFactoryBase$1.$$(_Ewa.ICommandUIManager));
_Ewa._tableContextualRibbonGroup.registerClass('_Ewa._tableContextualRibbonGroup', _Ewa._contextualRibbonGroup);
_Ewa._toolbarManager.registerClass('_Ewa._toolbarManager', _Ewa.CommandUIManager);
_Ewa.CommandUIManager.placeHolderTemplate = '<div class=\'{0}\' id=\'{1}\'></div>';
_Ewa.EwaCuiDataSource._clusterRegularExpressions$p = {};
_Ewa.ReactHeaderRenderer._$$pf_HeaderWasRendered$p = false;
_Ewa.RibbonUserFactory.appChromeScriptName = 'appChrome';
Type.registerNamespace('_Ewa');

_Ewa._commandUISliceBootstrapper = function _Ewa__commandUISliceBootstrapper() {
}
_Ewa._commandUISliceBootstrapper.main = function _Ewa__commandUISliceBootstrapper$main$st() {
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(function(ewa) {
        var serviceRegistry = ewa.get_serviceRegistry();
        serviceRegistry.registerService(_Ewa.IServiceFactory$1.$$(_Ewa.ICommandUIManager), 194, new _Ewa.RibbonFactory(ewa));
        serviceRegistry.registerService(_Ewa.IServiceFactory$1.$$(_Ewa.ICommandUIManager), 195, new _Ewa.ToolbarFactory(ewa));
        serviceRegistry.registerService(_Ewa.IServiceFactory$1.$$(_Ewa.ICommandUIManager), 196, new _Ewa.StatusBarManagerFactory(ewa));
        serviceRegistry.registerService(_Ewa.IServiceFactory$1.$$(Array), 93, new _Ewa.FloatieCommandHandlerFactory(ewa));
        serviceRegistry.registerService(_Ewa.IServiceFactory$1.$$(_Ewa.IReactEnvironmentManager), 356, new _Ewa.ReactEnvironmentManagerFactory(ewa));
        _Ewa.ReactEnvironmentManagerFactory.attach(ewa);
        var commandUIEventManagerTask = _Ewa.GetServiceTaskFactory.create(Object, serviceRegistry, 155, ewa.get_cancelOnDisposeToken(), 1).CWRCT(_Ewa.ICommandUIEventManager, function(_) {
            return serviceRegistry.registerService(_Ewa.ICommandUIEventManager, 54, new _Ewa.CommandUIEventManager(ewa));
        }, serviceRegistry.get_cancelOnDisposeToken(), 3, $$sc.TaskScheduler.get_current());
        serviceRegistry.registerService(_Ewa.RibbonVisibilityStateManagerFactory, 168, new _Ewa.RibbonVisibilityStateManagerFactory(new ($$sc.Lazy$1.$$($$sc.Task$1.$$(_Ewa.ICommandUIEventManager)))(function() {
            return commandUIEventManagerTask;
        }), function() {
            return $$as(_Ewa.RibbonManager, serviceRegistry.getService(_Ewa.ICommandUIManager, 53, false));
        }));
    });
}


_Ewa._commandUISliceBootstrapper.registerClass('_Ewa._commandUISliceBootstrapper');
_Ewa._commandUISliceBootstrapper.main();
Type.registerNamespace('Common.App.DisplayEnvironmentName');

Common.App.DisplayEnvironmentName.DisplayEnvironmentName = function Common_App_DisplayEnvironmentName_DisplayEnvironmentName(actionManager, appSettingsManager) {
    this.$$d__updateEnvironmentName$p$0 = Function.createDelegate(this, this._updateEnvironmentName$p$0);
    this._actionManager$0 = actionManager;
    this._appSettingsManager$0 = appSettingsManager;
}
Common.App.DisplayEnvironmentName.DisplayEnvironmentName.prototype = {
    _actionManager$0: null,
    _appSettingsManager$0: null,
    _environmentString$0: null,
    
    registerActions: function Common_App_DisplayEnvironmentName_DisplayEnvironmentName$registerActions$in() {
        this._environmentString$0 = this._appSettingsManager$0.getStringAppSetting('StatusBarEnvironmentNameToUse');
        if (!this._environmentString$0 || this._environmentString$0 === '') {
            return;
        }
        this._actionManager$0.addActionWithFlags(Common.CommonCommands.queryEnvironmentName, Common.CommonContextIds.frame, this.$$d__updateEnvironmentName$p$0, 96);
    },
    
    _updateEnvironmentName$p$0: function Common_App_DisplayEnvironmentName_DisplayEnvironmentName$_updateEnvironmentName$p$0$in(actionid, context, behavior, reportingdata, actiondata) {
        if (behavior === 1) {
            return 32;
        }
        var controlProps = actiondata;
        controlProps[CommandUI.Controls.LabelCommandProperties.Value] = this._environmentString$0;
        controlProps[CommandUI.SharedControlCommandProperties.labelText] = this._environmentString$0;
        controlProps[CommandUI.Controls.LabelCommandProperties.Visible] = true;
        return 32;
    }
}


Common.App.DisplayEnvironmentName._displayEnvironmentNamePackage = function Common_App_DisplayEnvironmentName__displayEnvironmentNamePackage() {
}
Common.App.DisplayEnvironmentName._displayEnvironmentNamePackage.main = function Common_App_DisplayEnvironmentName__displayEnvironmentNamePackage$main$st() {
    Common.App.PackageLifecycleManager.get_instance().registerPackage(new Common.App.DisplayEnvironmentName._displayEnvironmentNamePackage(), 0, false);
}
Common.App.DisplayEnvironmentName._displayEnvironmentNamePackage.prototype = {
    _container$0: null,
    
    get_name: function Common_App_DisplayEnvironmentName__displayEnvironmentNamePackage$get_name$in() {
        return 'Common.App.DisplayEnvironmentName';
    },
    
    configure: function Common_App_DisplayEnvironmentName__displayEnvironmentNamePackage$configure$in(container) {
        this._container$0 = container;
        var $$t_1 = this;
        this._container$0.register(Common.App.DisplayEnvironmentName.DisplayEnvironmentName, '').singleInstance().usingFactory(function() {
            return new Common.App.DisplayEnvironmentName.DisplayEnvironmentName(Common.AFrameworkApplication.get_theActionManager(), Common.AFrameworkApplication.appSettingsManager);
        });
    },
    
    init: function Common_App_DisplayEnvironmentName__displayEnvironmentNamePackage$init$in() {
        this._container$0.resolve(Common.App.DisplayEnvironmentName.DisplayEnvironmentName, '').registerActions();
    },
    
    dispose: function Common_App_DisplayEnvironmentName__displayEnvironmentNamePackage$dispose$in() {
    }
}


Common.App.DisplayEnvironmentName.DisplayEnvironmentName.registerClass('Common.App.DisplayEnvironmentName.DisplayEnvironmentName');
Common.App.DisplayEnvironmentName._displayEnvironmentNamePackage.registerClass('Common.App.DisplayEnvironmentName._displayEnvironmentNamePackage', null, Common.App.IPackage, Common.Utils.IContainerConfiguration);
Common.App.DisplayEnvironmentName._displayEnvironmentNamePackage.main();
Type.registerNamespace('Common.App.EventsCacheManager');

Common.App.EventsCacheManager.EventsCachePackage = function Common_App_EventsCacheManager_EventsCachePackage() {
}
Common.App.EventsCacheManager.EventsCachePackage.main = function Common_App_EventsCacheManager_EventsCachePackage$main$st() {
    Common.App.PackageLifecycleManager.get_instance().registerPackage(new Common.App.EventsCacheManager.EventsCachePackage(), 0, false);
}
Common.App.EventsCacheManager.EventsCachePackage.prototype = {
    
    get_name: function Common_App_EventsCacheManager_EventsCachePackage$get_name$in() {
        return 'Common.App.EventsCachePackage';
    },
    
    configure: function Common_App_EventsCacheManager_EventsCachePackage$configure$in(container) {
    },
    
    init: function Common_App_EventsCacheManager_EventsCachePackage$init$in() {
        Common.App.EventsCacheManager.CommandClickEventsCache.get_instance().init();
    },
    
    dispose: function Common_App_EventsCacheManager_EventsCachePackage$dispose$in() {
    }
}


Common.App.EventsCacheManager.CommandClickEventsCache = function Common_App_EventsCacheManager_CommandClickEventsCache() {
    this.$$d__sqmEventRaised$p$0 = Function.createDelegate(this, this._sqmEventRaised$p$0);
}
Common.App.EventsCacheManager.CommandClickEventsCache.get_instance = function Common_App_EventsCacheManager_CommandClickEventsCache$get_instance$st() {
    return Common.App.EventsCacheManager.CommandClickEventsCache._instance || (Common.App.EventsCacheManager.CommandClickEventsCache._instance = new Common.App.EventsCacheManager.CommandClickEventsCache());
}
Common.App.EventsCacheManager.CommandClickEventsCache.prototype = {
    _commandClickBuffer$0: null,
    
    init: function Common_App_EventsCacheManager_CommandClickEventsCache$init$in() {
        this._commandClickBuffer$0 = new ($$sc.List$1.$$(CommandUI.Root.SQMEventArgs))();
        CommandUI.Root.add_onSQMEventHandler(this.$$d__sqmEventRaised$p$0);
    },
    
    _sqmEventRaised$p$0: function Common_App_EventsCacheManager_CommandClickEventsCache$_sqmEventRaised$p$0$in(source, args) {
        var MaxCommandClickedEventQueueSize = Common.AFrameworkApplication.appSettingsManager.getIntAppSetting('MaxCommandClickedEventQueueSize', 20);
        var properties = args;
        this._commandClickBuffer$0.insert(0, properties);
        if (this._commandClickBuffer$0.get_count() > MaxCommandClickedEventQueueSize) {
            this._commandClickBuffer$0.removeAt(MaxCommandClickedEventQueueSize);
        }
    },
    
    getCommandClicks: function Common_App_EventsCacheManager_CommandClickEventsCache$getCommandClicks$in() {
        return this._commandClickBuffer$0;
    }
}


Common.App.EventsCacheManager.EventsCachePackage.registerClass('Common.App.EventsCacheManager.EventsCachePackage', null, Common.App.IPackage, Common.Utils.IContainerConfiguration);
Common.App.EventsCacheManager.CommandClickEventsCache.registerClass('Common.App.EventsCacheManager.CommandClickEventsCache');
Common.App.EventsCacheManager.CommandClickEventsCache._instance = null;
Common.App.EventsCacheManager.EventsCachePackage.main();
Type.registerNamespace('CUIB');

CUIB._colorPickerBehavior = function CUIB__colorPickerBehavior(colorPicker) {
    this.$$d__onCellPointerDown$p$1 = Function.createDelegate(this, this._onCellPointerDown$p$1);
    this.$$d__onCellPointerOver$p$1 = Function.createDelegate(this, this._onCellPointerOver$p$1);
    this.$$d__onCellPointerUp$p$1 = Function.createDelegate(this, this._onCellPointerUp$p$1);
    this.$$d__onCellClick$p$1 = Function.createDelegate(this, this._onCellClick$p$1);
    this.$$d__onCellBlur$p$1 = Function.createDelegate(this, this._onCellBlur$p$1);
    this.$$d__onCellFocus$p$1 = Function.createDelegate(this, this._onCellFocus$p$1);
    this._focusedIndex$1 = -1;
    this._selectedIndex$1 = -1;
    CUIB._colorPickerBehavior.initializeBase(this, [ colorPicker ]);
}
CUIB._colorPickerBehavior._getNearestContainingParentElementOfType$p = function CUIB__colorPickerBehavior$_getNearestContainingParentElementOfType$p$st(elem, strTagName) {
    return CUIB._colorPickerBehavior._getNearestContainingParentElementOfTypes$p(elem, [ strTagName ]);
}
CUIB._colorPickerBehavior._getNearestContainingParentElementOfTypes$p = function CUIB__colorPickerBehavior$_getNearestContainingParentElementOfTypes$p$st(elem, aTagNames) {
    var aTagNames_length = aTagNames.length;
    if (!elem) {
        return null;
    }
    for (var i = 0; i < aTagNames_length; i++) {
        if (elem.tagName.toLowerCase() === aTagNames[i].toLowerCase()) {
            return elem;
        }
    }
    var elemParent = elem.parentNode;
    while (elemParent) {
        for (var i = 0; i < aTagNames_length; i++) {
            if (elemParent.tagName.toLowerCase() === aTagNames[i].toLowerCase()) {
                return elemParent;
            }
        }
        elemParent = elemParent.parentNode;
    }
    return null;
}
CUIB._colorPickerBehavior.prototype = {
    
    get__colorPicker$p$1: function CUIB__colorPickerBehavior$get__colorPicker$p$1$in() {
        return this.get_control();
    },
    
    get__colorCells$p$1: function CUIB__colorPickerBehavior$get__colorCells$p$1$in() {
        return this.get__colorPicker$p$1().get_colorPickerDom().colorCells;
    },
    
    get__properties$p$1: function CUIB__colorPickerBehavior$get__properties$p$1$in() {
        return this.get__colorPicker$p$1().get_controlProperties();
    },
    
    doDefaultAction: function CUIB__colorPickerBehavior$doDefaultAction$in(elmTarget, inputMethod, e) {
        if (this.get_control().get_enabled()) {
            var cell = CUIB._colorPickerBehavior._getNearestContainingParentElementOfType$p(elmTarget, 'td');
            var parameters = this.get_stateProperties();
            parameters['Color'] = cell[CommandUI.Controls.ColorPicker.colorInformation];
            var menuLauncher = null;
            var stateful = CommandUI.Utility.isTrue(this.get__properties$p$1().Stateful);
            if (stateful && this.get_displayedComponent() && this.get_displayedComponent().isMenuItem() && this.get_parentMenu()) {
                var menuIndex = this.get_parentMenu().get_stackIndex();
                menuLauncher = this.get_root().get_menuLauncherStack()[menuIndex];
            }
            Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$1().Command), 4785875);
            this.get_root().executeCommand(this.get__properties$p$1().Command, parameters, this.get_displayedComponent(), inputMethod, true, null, this.getTelemetryData(e));
            if (menuLauncher) {
                menuLauncher.selectDropdownItem(this.get__colorPicker$p$1());
            }
        }
    },
    
    pollForStateAndUpdate: function CUIB__colorPickerBehavior$pollForStateAndUpdate$in() {
        var dict = this.get_stateProperties();
        dict['SourceControlId'] = this.get__properties$p$1().Id;
        var result = this.pollForStateAndUpdateInternal(this.get__properties$p$1().Command, this.get__properties$p$1().QueryCommand, dict);
        if ((result & 2) > 0) {
            var selectedNew = -1;
            if ((CommandUI.Controls.ColorPickerCommandProperties.IndexColorSelected) in this.get_stateProperties()) {
                selectedNew = this.get_stateProperties()[CommandUI.Controls.ColorPickerCommandProperties.IndexColorSelected];
            }
            if (selectedNew !== this._selectedIndex$1) {
                var colorCells = this.get__colorCells$p$1();
                if ((0 <= selectedNew) && (selectedNew < colorCells.length)) {
                    this._updateCellSelection$p$1(colorCells[selectedNew], true);
                }
                if ((0 <= this._selectedIndex$1) && (this._selectedIndex$1 < colorCells.length)) {
                    this._updateCellSelection$p$1(colorCells[this._selectedIndex$1], false);
                }
                this._selectedIndex$1 = selectedNew;
            }
        }
    },
    
    _updateCellSelection$p$1: function CUIB__colorPickerBehavior$_updateCellSelection$p$1$in(cell, selected) {
        if (selected) {
            CommandUI.Utility.ensureCSSClassOnElement(cell, CUIB._colorPickerBehavior._selectedCellClassName$p);
        }
        else {
            CommandUI.Utility.removeCSSClassFromElement(cell, CUIB._colorPickerBehavior._selectedCellClassName$p);
        }
    },
    
    attachEvents: function CUIB__colorPickerBehavior$attachEvents$in(controlComponentDom) {
        Common.Debug.assertTag(CommandUI.Controls.ColorPickerComponentDom.isInstanceOfType(controlComponentDom), 4785876);
        var colorPickerDom = controlComponentDom;
        for (var i = 0; i < colorPickerDom.aTags.length; ++i) {
            var button = colorPickerDom.aTags[i];
            Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, button, this.$$d__onCellFocus$p$1);
            Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.blur, button, this.$$d__onCellBlur$p$1);
            Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, button, this.$$d_onKeyDown);
            Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, button, this.$$d_onKeyUp);
            Common.ClickInputManager.get_instance().registerHandler(Common.EventNames.click, button, this.$$d__onCellClick$p$1);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerUp, button, this.$$d__onCellPointerUp$p$1);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOver, button, this.$$d__onCellPointerOver$p$1);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, button, this.$$d__onCellPointerDown$p$1);
        }
    },
    
    _onCellFocus$p$1: function CUIB__colorPickerBehavior$_onCellFocus$p$1$in(args) {
        var cell = CUIB._colorPickerBehavior._getNearestContainingParentElementOfType$p(args.get_sourceElement(), 'td');
        this.get_parentMenu().updateFocusedIndex(this.get_displayedComponent());
        this._updateCellFocus$p$1(cell, true);
        return true;
    },
    
    _onCellBlur$p$1: function CUIB__colorPickerBehavior$_onCellBlur$p$1$in(args) {
        var cell = CUIB._colorPickerBehavior._getNearestContainingParentElementOfType$p(args.get_sourceElement(), 'td');
        this._updateCellFocus$p$1(cell, false);
        return true;
    },
    
    _updateCellFocus$p$1: function CUIB__colorPickerBehavior$_updateCellFocus$p$1$in(cell, focused) {
        if (focused) {
            this._focusedIndex$1 = parseInt(cell.getAttribute('arrayPosition'));
            CommandUI.Utility.ensureCSSClassOnElement(cell, CUIB._colorPickerBehavior._hoverCellClassName$p);
            this._startLivePreview$p$1(cell);
        }
        else {
            this._focusedIndex$1 = -1;
            this._endLivePreview$p$1(cell);
            CommandUI.Utility.removeCSSClassFromElement(cell, CUIB._colorPickerBehavior._hoverCellClassName$p);
        }
    },
    
    _onCellClick$p$1: function CUIB__colorPickerBehavior$_onCellClick$p$1$in(args) {
        if (args.get_inputSource() === Common.InputManager.InputMethod.touch) {
            this.doDefaultAction(args.get_sourceElement(), args.get_inputSource(), args.innerEvent);
        }
        return true;
    },
    
    _onCellPointerUp$p$1: function CUIB__colorPickerBehavior$_onCellPointerUp$p$1$in(args) {
        if (args.get_inputSource() !== Common.InputManager.InputMethod.touch) {
            this.doDefaultAction(args.get_sourceElement(), args.get_inputSource(), args.innerEvent);
        }
        return true;
    },
    
    _onCellPointerOver$p$1: function CUIB__colorPickerBehavior$_onCellPointerOver$p$1$in(args) {
        this.closeChildMenus(false);
        var cell = CUIB._colorPickerBehavior._getNearestContainingParentElementOfType$p(args.get_sourceElement(), 'td');
        var cellIndex = parseInt(cell.getAttribute('arrayPosition'));
        this._setFocusOnCell$p$1(cellIndex);
        return true;
    },
    
    _onCellPointerDown$p$1: function CUIB__colorPickerBehavior$_onCellPointerDown$p$1$in(args) {
        return false;
    },
    
    _startLivePreview$p$1: function CUIB__colorPickerBehavior$_startLivePreview$p$1$in(cell) {
        if (this.get_control().get_enabled()) {
            Common.Debug.assertStringTag(CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$1().CommandPreview) === CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$1().CommandRevert), 'Color picker control supports live preview but does not provide both preview AND revert commands!', 4785877);
            var commandPreview = this.get__properties$p$1().CommandPreview;
            if (!CommandUI.ScriptUtility.isNullOrEmptyString(commandPreview)) {
                var parameters = this.get_stateProperties();
                parameters['Color'] = cell[CommandUI.Controls.ColorPicker.colorInformation];
                this.get_root().executeCommand(commandPreview, parameters, this.get_displayedComponent(), 0, false, null, null);
            }
        }
    },
    
    _endLivePreview$p$1: function CUIB__colorPickerBehavior$_endLivePreview$p$1$in(cell) {
        if (this.get_control().get_enabled()) {
            var commandRevert = this.get__properties$p$1().CommandRevert;
            if (!CommandUI.ScriptUtility.isNullOrEmptyString(commandRevert)) {
                var parameters = this.get_stateProperties();
                parameters['Color'] = cell[CommandUI.Controls.ColorPicker.colorInformation];
                this.get_root().executeCommand(commandRevert, parameters, this.get_displayedComponent(), 0, false, null, null);
            }
        }
    },
    
    focusNext: function CUIB__colorPickerBehavior$focusNext$in(direction) {
        var newIndex = CommandUI.Control.focusNextIndexInGrid(this._focusedIndex$1, this.get__colorPicker$p$1().get_width(), this.get__colorCells$p$1().length, direction);
        Common.Debug.assertTag((newIndex >= 0) && (newIndex < this.get__colorCells$p$1().length), 4785878);
        if ((newIndex !== this._focusedIndex$1) && this._setFocusOnCell$p$1(newIndex)) {
            return true;
        }
        this._updateCellFocus$p$1(this.get__colorCells$p$1()[this._focusedIndex$1], false);
        return false;
    },
    
    setFocusOnControl: function CUIB__colorPickerBehavior$setFocusOnControl$in() {
        return this._setFocusOnCell$p$1(0);
    },
    
    _setFocusOnCell$p$1: function CUIB__colorPickerBehavior$_setFocusOnCell$p$1$in(i) {
        if (this.get__colorCells$p$1() && this.get__colorCells$p$1().length > i) {
            var cell = this.get__colorCells$p$1()[i];
            if (cell.firstChild) {
                cell.firstChild.focus();
                return true;
            }
        }
        return false;
    },
    
    onMenuClosed: function CUIB__colorPickerBehavior$onMenuClosed$in() {
        if (this._focusedIndex$1 !== -1) {
            this._updateCellFocus$p$1(this.get__colorCells$p$1()[this._focusedIndex$1], false);
        }
    }
}


CUIB._cuiBehaviorPackage = function CUIB__cuiBehaviorPackage() {
}
CUIB._cuiBehaviorPackage.main = function CUIB__cuiBehaviorPackage$main$st() {
    Common.App.PackageLifecycleManager.get_instance().registerPackage(new CUIB._cuiBehaviorPackage(), Common.App.AppInitializationStatus.ribbonInitialized, false);
}
CUIB._cuiBehaviorPackage.prototype = {
    
    get_name: function CUIB__cuiBehaviorPackage$get_name$in() {
        return 'CUI.Behavior';
    },
    
    configure: function CUIB__cuiBehaviorPackage$configure$in(container) {
        if (Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('AccessibleMovingDialogsEnabled')) {
            var $$t_1 = this;
            container.register(Common.UI.IDialogMenuRootUser, '').singleInstance().usingFactory(function() {
                return new CUIB.DialogMenuRootUser();
            });
            var $$t_2 = this;
            container.register(Common.IKeyMoveAdapter, '').singleInstance().usingFactory(function() {
                return new CUIB.KeyMoveAdapter(Common.AFrameworkApplication.get_activeFrame().getDOMElement(), Common.KeyInputManager.get_instance(), Common.PointerInputManager.get_instance());
            });
        }
        var $$t_3 = this;
        container.register(CommandUI.RootManager, '').as(Common.IRootManager, '').singleInstance().usingFactory(function() {
            return CommandUI.RootManager.get_instance();
        });
    },
    
    init: function CUIB__cuiBehaviorPackage$init$in() {
        CommandUI.ControlBehaviorFactoryProvider.set_controlBehaviorFactory(CUIB.ControlBehaviorFactory.get_instance());
        var roots = CommandUI.RootManager.get_instance().get_roots();
        for (var i = 0; i < roots.length; ++i) {
            var cuiRoot = $$as(Common.ICUIRoot, roots[i]);
            if (cuiRoot) {
                cuiRoot.ensureBehaviorAttached();
            }
        }
        Common.App.AppLifecycleManager.get_instance().setAppInitializationStatus(Common.App.AppInitializationStatus.ribbonBehaviorAttached);
    },
    
    dispose: function CUIB__cuiBehaviorPackage$dispose$in() {
    }
}


CUIB._menuPositioner = function CUIB__menuPositioner(textDirectionLtr, isAppDivSyndicated) {
    this._textDirectionLtr$0 = textDirectionLtr;
    this._isAppDivSyndicated$0 = isAppDivSyndicated;
}
CUIB._menuPositioner._dictToInt$p = function CUIB__menuPositioner$_dictToInt$p$st(d, key) {
    if (CommandUI.ScriptUtility.isNullOrUndefined(d)) {
        return 0;
    }
    return d[key];
}
CUIB._menuPositioner.prototype = {
    _textDirectionLtr$0: false,
    _isAppDivSyndicated$0: false,
    
    setFlyoutCoordinates: function CUIB__menuPositioner$setFlyoutCoordinates$in(flyout, dimensions, flyoutDirection, launcherBounds) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(flyout) || CommandUI.ScriptUtility.isNullOrUndefined(dimensions)) {
            return null;
        }
        var menuPositioningInfo = new CommandUI.MenuPositioningInfo();
        var flyoutLeft;
        var flyoutTop;
        var launcherLeft = launcherBounds.x;
        var launcherTop = launcherBounds.y;
        var launcherWidth = launcherBounds.width;
        var launcherHeight = launcherBounds.height;
        var flyoutWidth = CUIB._menuPositioner._dictToInt$p(dimensions, 'flyoutWidth');
        var flyoutRealHeight = CUIB._menuPositioner._dictToInt$p(dimensions, 'flyoutRealHeight');
        var viewportWidth = CUIB._menuPositioner._dictToInt$p(dimensions, 'viewportWidth');
        var viewportHeight = CUIB._menuPositioner._dictToInt$p(dimensions, 'viewportHeight');
        var viewableLeft = CUIB._menuPositioner._dictToInt$p(dimensions, 'viewableLeft');
        var viewableTop = CUIB._menuPositioner._dictToInt$p(dimensions, 'viewableTop');
        var isLTR = this._textDirectionLtr$0;
        var buttedToRightEdge = false, buttedToLeftEdge = false;
        var horizontal = (flyoutDirection === CommandUI.FlyoutDirectionType.horizontal);
        var verticalAdjustable = (flyoutDirection === CommandUI.FlyoutDirectionType.verticalAnchorAdjustable);
        var adjustForPositionInWindow = this._isAppDivSyndicated$0;
        flyout.style.maxHeight = 'none';
        flyout.style.top = '0px';
        flyout.style.overflowY = 'visible';
        flyout.style.width = 'auto';
        flyoutWidth = this.measureWidth(flyout);
        menuPositioningInfo.viewPortHeight = viewportHeight;
        menuPositioningInfo.viewPortWidth = viewportWidth;
        if (horizontal) {
            if (isLTR) {
                flyoutLeft = launcherLeft + launcherWidth;
            }
            else {
                flyoutLeft = launcherLeft - flyoutWidth;
                menuPositioningInfo.launchedLeft = true;
            }
            flyoutTop = launcherTop;
        }
        else {
            var minWidthCss = '';
            if (launcherWidth > flyoutWidth) {
                flyoutWidth = launcherWidth;
                minWidthCss = (flyoutWidth - (CommandUI.Menu.menuBorderPx * 2)).toString();
            }
            if (isLTR) {
                flyoutLeft = launcherLeft;
            }
            else {
                flyoutLeft = launcherLeft + launcherWidth - flyoutWidth;
                menuPositioningInfo.launchedLeft = true;
            }
            flyoutTop = launcherTop + launcherHeight;
            if (minWidthCss !== '') {
                flyout.style.minWidth = minWidthCss + 'px';
            }
        }
        if (adjustForPositionInWindow) {
            flyoutTop += viewableTop;
            flyoutLeft += viewableLeft;
        }
        flyout.style.top = flyoutTop + 'px';
        flyout.style.left = flyoutLeft + 'px';
        var leftChanged = false;
        var flippedHorizontally = false;
        if (flyoutWidth <= viewportWidth) {
            if (flyoutLeft + flyoutWidth > viewableLeft + viewportWidth) {
                if (horizontal && isLTR && (launcherLeft - flyoutWidth) > viewableLeft || verticalAdjustable && (launcherLeft - flyoutWidth) > viewableLeft) {
                    flyoutLeft = launcherLeft - flyoutWidth;
                    if (adjustForPositionInWindow) {
                        flyoutLeft += viewableLeft;
                    }
                    menuPositioningInfo.launchedLeft = true;
                    flippedHorizontally = true;
                }
                else {
                    flyoutLeft = viewableLeft + viewportWidth - flyoutWidth;
                    buttedToRightEdge = true;
                }
                leftChanged = true;
            }
            else if (flyoutLeft < viewableLeft) {
                if (horizontal && !isLTR && (launcherLeft + launcherWidth + flyoutWidth) < (viewableLeft + viewportWidth)) {
                    flyoutLeft = launcherLeft + launcherWidth;
                    if (adjustForPositionInWindow) {
                        flyoutLeft += viewableLeft;
                    }
                    menuPositioningInfo.launchedLeft = false;
                    flippedHorizontally = true;
                }
                else {
                    flyoutLeft = viewableLeft;
                    buttedToLeftEdge = true;
                    menuPositioningInfo.launchedLeft = true;
                }
                leftChanged = true;
            }
        }
        else {
            if (isLTR) {
                flyoutLeft = viewableLeft;
                leftChanged = true;
                menuPositioningInfo.launchedLeft = true;
            }
            else {
                flyoutLeft = viewableLeft + viewportWidth - flyoutWidth;
                leftChanged = true;
                menuPositioningInfo.launchedLeft = false;
            }
        }
        if (leftChanged) {
            flyout.style.left = flyoutLeft + 'px';
        }
        var flyoutFitsLaunchingDown = (flyoutTop + flyoutRealHeight <= viewableTop + viewportHeight);
        menuPositioningInfo.flyoutTop = flyoutTop;
        if (!flyoutFitsLaunchingDown || (flyoutDirection === CommandUI.FlyoutDirectionType.verticalUp)) {
            var newFlyoutTop;
            var flyoutMaxHeight;
            var isFixedToBottom;
            var isScrollable;
            menuPositioningInfo.launchedUp = true;
            var $$t_V, $$t_W, $$t_X, $$t_Y;
            this._fitFlyoutVertically$p$0(flyoutDirection, flyoutTop, flyoutRealHeight, launcherTop, viewableTop, viewportHeight, ($$t_V = {'val': newFlyoutTop}), ($$t_W = {'val': flyoutMaxHeight}), ($$t_X = {'val': isFixedToBottom}), ($$t_Y = {'val': isScrollable})), newFlyoutTop = $$t_V.val, flyoutMaxHeight = $$t_W.val, isFixedToBottom = $$t_X.val, isScrollable = $$t_Y.val;
            if (flyoutTop !== newFlyoutTop) {
                flyout.style.top = newFlyoutTop + 'px';
                menuPositioningInfo.flyoutTop = newFlyoutTop;
            }
            if (flyoutMaxHeight > -1) {
                flyout.style.maxHeight = flyoutMaxHeight + 'px';
            }
            if (isFixedToBottom) {
                flyout.style.bottom = '0px';
                flyout.style.height = 'auto';
            }
            if (isScrollable) {
                this._makeFlyoutScrollable$p$0(flyout, isLTR, horizontal, flippedHorizontally, buttedToLeftEdge, buttedToRightEdge, viewportWidth, launcherLeft, launcherWidth);
            }
        }
        menuPositioningInfo.flyoutLeft = flyoutLeft;
        menuPositioningInfo.flyoutWidth = flyoutWidth;
        menuPositioningInfo.flyoutHeight = flyoutRealHeight;
        return menuPositioningInfo;
    },
    
    _fitFlyoutVertically$p$0: function CUIB__menuPositioner$_fitFlyoutVertically$p$0$in(flyoutDirection, flyoutTop, flyoutRealHeight, launcherTop, viewableTop, viewportHeight, newFlyoutTop, flyoutMaxHeight, isFixedToBottom, isScrollable) {
        newFlyoutTop.val = flyoutTop;
        flyoutMaxHeight.val = -1;
        isFixedToBottom.val = false;
        isScrollable.val = false;
        var oldFlyoutTop = flyoutTop;
        var oldflyoutViewableHeight = viewableTop + viewportHeight - flyoutTop;
        flyoutTop = launcherTop - flyoutRealHeight;
        var adjustForPositionInWindow = this._isAppDivSyndicated$0;
        var fillsUpScreen = false;
        if (flyoutTop < 0) {
            flyoutTop = viewableTop;
        }
        var newFlyoutViewableHeight = launcherTop;
        if (!adjustForPositionInWindow) {
            newFlyoutViewableHeight -= viewableTop;
        }
        var fitsLaunchingUp = flyoutRealHeight <= newFlyoutViewableHeight;
        if (!fitsLaunchingUp || (flyoutDirection === CommandUI.FlyoutDirectionType.horizontal)) {
            var adjustAnchorPoint = (flyoutDirection === CommandUI.FlyoutDirectionType.verticalAnchorAdjustable) || (flyoutDirection === CommandUI.FlyoutDirectionType.horizontal);
            if (adjustAnchorPoint) {
                var fitsInViewport = flyoutRealHeight < viewportHeight;
                if (fitsInViewport) {
                    flyoutTop = viewportHeight - flyoutRealHeight;
                    isFixedToBottom.val = true;
                }
                else {
                    flyoutTop = viewableTop;
                    isFixedToBottom.val = true;
                    isScrollable.val = true;
                    fillsUpScreen = true;
                }
            }
            else {
                var launchDown = (newFlyoutViewableHeight < oldflyoutViewableHeight) && (flyoutDirection !== CommandUI.FlyoutDirectionType.verticalUp);
                if (launchDown) {
                    flyoutTop = oldFlyoutTop;
                    isFixedToBottom.val = true;
                }
                else {
                    flyoutMaxHeight.val = newFlyoutViewableHeight;
                }
                isScrollable.val = true;
            }
        }
        if (adjustForPositionInWindow) {
            isFixedToBottom.val = false;
            if (fillsUpScreen) {
                flyoutMaxHeight.val = viewportHeight;
            }
            else {
                flyoutTop += viewableTop;
            }
        }
        newFlyoutTop.val = flyoutTop;
    },
    
    _makeFlyoutScrollable$p$0: function CUIB__menuPositioner$_makeFlyoutScrollable$p$0$in(flyout, isLTR, horizontal, flippedHorizontally, buttedToLeftEdge, buttedToRightEdge, viewportWidth, launcherLeft, launcherWidth) {
        flyout.style.overflowY = 'scroll';
        flyout.style.width = 'auto';
        if (isLTR) {
            if (buttedToRightEdge || flippedHorizontally) {
                var rightPx = (buttedToRightEdge) ? 0 : (viewportWidth - launcherLeft);
                flyout.style.left = '';
                flyout.style.right = rightPx + 'px';
            }
        }
        else {
            if (!buttedToLeftEdge && !flippedHorizontally) {
                var rightPx = (horizontal) ? (viewportWidth - launcherLeft) : (viewportWidth - launcherLeft - launcherWidth);
                flyout.style.left = '';
                flyout.style.right = rightPx + 'px';
            }
        }
    },
    
    _getDimensionsForMenu$i$0: function CUIB__menuPositioner$_getDimensionsForMenu$i$0$in(flyout) {
        var d = {};
        if (CommandUI.ScriptUtility.isNullOrUndefined(flyout)) {
            return d;
        }
        d['viewportWidth'] = Common.DomUtils.getViewPortWidth();
        d['viewportHeight'] = Common.DomUtils.getViewPortHeight();
        if (CommandUI.ScriptUtility.isNullOrUndefined(d['viewportWidth'])) {
            d['viewportWidth'] = document.documentElement.clientWidth;
            d['viewportHeight'] = document.documentElement.clientHeight;
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(d['viewportWidth'])) {
            d['viewportWidth'] = document.body.clientWidth;
            d['viewportHeight'] = document.body.clientHeight;
        }
        d['viewableTop'] = window.pageYOffset;
        d['viewableLeft'] = window.pageXOffset;
        if (CommandUI.ScriptUtility.isNullOrUndefined(d['viewableTop'])) {
            d['viewableTop'] = document.documentElement.scrollTop;
            d['viewableLeft'] = document.documentElement.scrollLeft;
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(d['viewableTop'])) {
            d['viewableTop'] = document.body.scrollTop;
            d['viewableLeft'] = document.body.scrollLeft;
        }
        if (flyout.scrollHeight !== flyout.offsetHeight) {
            d['flyoutRealHeight'] = flyout.scrollHeight + (CommandUI.Menu.menuBorderPx * 2);
        }
        else {
            d['flyoutRealHeight'] = flyout.scrollHeight;
        }
        var oldOverflowValue = flyout.style.overflowY;
        flyout.style.overflowY = 'visible';
        d['flyoutWidth'] = this.measureWidth(flyout);
        flyout.style.overflowY = oldOverflowValue;
        return d;
    },
    
    measureWidth: function CUIB__menuPositioner$measureWidth$in(element) {
        return element.offsetWidth;
    }
}


CUIB._buttonBehavior = function CUIB__buttonBehavior(button) {
    this.$$d__onKeyPress$i$1 = Function.createDelegate(this, this._onKeyPress$i$1);
    CUIB._buttonBehavior.initializeBase(this, [ button ]);
}
CUIB._buttonBehavior.prototype = {
    
    get__button$p$1: function CUIB__buttonBehavior$get__button$p$1$in() {
        return this.get_control();
    },
    
    get__properties$p$1: function CUIB__buttonBehavior$get__properties$p$1$in() {
        return this.get_control().get_controlProperties();
    },
    
    attachEvents: function CUIB__buttonBehavior$attachEvents$in(componentDom) {
        var button = componentDom.elmControl;
        var displayMode = componentDom.get_displayMode();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(button)) {
            Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, button, this.$$d__onFocus$i$0);
            Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.blur, button, this.$$d__onBlur$i$0);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOver, button, this.$$d__onPointerOver$i$0);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOut, button, this.$$d__onPointerOut$i$0);
            Common.KeyInputManager.get_instance().registerHandlerWithData(Common.EventNames.keyDown, button, this.$$d_onKeyDown, displayMode);
            Common.KeyInputManager.get_instance().registerHandlerWithData(Common.EventNames.keyPress, button, this.$$d__onKeyPress$i$1, displayMode);
            Common.KeyInputManager.get_instance().registerHandlerWithData(Common.EventNames.keyUp, button, this.$$d_onKeyUp, displayMode);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, button, this.$$d_onPointerDown);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerUp, button, this.$$d__onPointerUp$i$0);
            Common.ClickInputManager.get_instance().registerHandler(Common.EventNames.click, button, this.$$d__onClick$i$0);
            Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchMove, button, this.$$d__onTouchMove$i$0);
            Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchEnd, button, this.$$d__onTouchEnd$i$0);
        }
    },
    
    doDefaultAction: function CUIB__buttonBehavior$doDefaultAction$in(elmTarget, inputMethod, e) {
        if (this.get_control().get_enabled()) {
            var menuLauncher = null;
            if (this.get_displayedComponent() && this.get_displayedComponent().isMenuItem() && this.get_parentMenu()) {
                var menuIndex = this.get_parentMenu().get_stackIndex();
                menuLauncher = this.get_root().get_menuLauncherStack()[menuIndex];
                if (menuLauncher && !this.get_isCommitChangeFixEnabled()) {
                    menuLauncher.selectDropdownItem(this.get__button$p$1());
                    menuLauncher = null;
                }
            }
            this._executeCommand$p$1(this.get_control().get_controlProperties().Command, inputMethod, true, e);
            if (menuLauncher) {
                menuLauncher.selectDropdownItem(this.get__button$p$1());
            }
        }
    },
    
    _executeCommand$p$1: function CUIB__buttonBehavior$_executeCommand$p$1$in(commandName, inputMethod, closeAllMenus, e) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(commandName)) {
            var parameters = this.get_stateProperties();
            parameters['CommandValueId'] = this.get__button$p$1().getCommandValueId();
            parameters['MenuItemId'] = this.get__button$p$1().getMenuItemId();
            parameters['SourceControlId'] = this.get_control().get_id();
            this.get_root().executeCommand(commandName, parameters, this.get_displayedComponent(), inputMethod, closeAllMenus, null, this.getTelemetryData(e));
        }
    },
    
    pollForStateAndUpdate: function CUIB__buttonBehavior$pollForStateAndUpdate$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_control().get_controlProperties().Command)) {
            var result = this.pollForStateAndUpdateInternal(this.get__properties$p$1().Command, this.get__properties$p$1().QueryCommand, this.get_stateProperties());
            if ((result & 2) > 0) {
                var visible = this.updateVisibility();
                if (visible) {
                    this._updateHtml$p$1();
                }
            }
        }
    },
    
    _updateHtml$p$1: function CUIB__buttonBehavior$_updateHtml$p$1$in() {
        this.updateLabelText();
        this.updateTooltip();
        this.updateImage();
    },
    
    _onFocus$i$0: function CUIB__buttonBehavior$_onFocus$i$0$in(args) {
        CUIB.ControlBehavior.prototype._onFocus$i$0.call(this, args);
        this._startLivePreview$p$1();
        return false;
    },
    
    _onBlur$i$0: function CUIB__buttonBehavior$_onBlur$i$0$in(args) {
        CUIB.ControlBehavior.prototype._onBlur$i$0.call(this, args);
        this._endLivePreview$p$1();
        return false;
    },
    
    onKeyDown: function CUIB__buttonBehavior$onKeyDown$in(args) {
        var handled = CUIB.ControlBehavior.prototype.onKeyDown.call(this, args);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent)) {
            var displayMode = args.userData;
            var keyCode = args.innerEvent.keyCode;
            if (this._shouldDoDefaultActionOnKeyPress$p$1(displayMode, keyCode)) {
                handled = false;
            }
        }
        return handled;
    },
    
    _onKeyPress$i$1: function CUIB__buttonBehavior$_onKeyPress$i$1$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            var displayMode = args.userData;
            var keyCode = (args.innerEvent.rawEvent).keyCode;
            if (this._shouldDoDefaultActionOnKeyPress$p$1(displayMode, keyCode)) {
                this.doDefaultAction(args.get_sourceElement(), args.get_inputSource(), args.innerEvent);
                handled = true;
            }
            else {
                args.innerEvent.preventDefault();
            }
        }
        return handled;
    },
    
    _shouldDoDefaultActionOnKeyPress$p$1: function CUIB__buttonBehavior$_shouldDoDefaultActionOnKeyPress$p$1$in(displayMode, keyCode) {
        if (Common.BrowserUtils.get_isInternetExplorerNonEdge() && keyCode === Sys.UI.Key.enter) {
            switch (displayMode) {
                case 'MenuMru':
                case 'MenuTemplate':
                case 'MenuHeader':
                case 'MenuFooter':
                    return true;
            }
        }
        return false;
    },
    
    onKeyUp: function CUIB__buttonBehavior$onKeyUp$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent)) {
            var displayMode = args.userData;
            var keyCode = args.innerEvent.keyCode;
            if (!this._shouldDoDefaultActionOnKeyPress$p$1(displayMode, keyCode)) {
                handled = CUIB.ControlBehavior.prototype.onKeyUp.call(this, args);
            }
        }
        return handled;
    },
    
    _startLivePreview$p$1: function CUIB__buttonBehavior$_startLivePreview$p$1$in() {
        if (this.get_control().get_enabled()) {
            Common.Debug.assertStringTag(CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$1().CommandPreview) === CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$1().CommandRevert), 'Button supports live preview but does not provide both preview AND revert commands!', 4773514);
            Common.Debug.assertStringTag(!this.get__properties$p$1().CommandPreview || CommandUI.MenuItem.isInstanceOfType(this.get_displayedComponent()), 'Attempting to perform live preview on a top-level button? ', 4773515);
            this._executeCommand$p$1(this.get__properties$p$1().CommandPreview, 0, false, null);
        }
    },
    
    _endLivePreview$p$1: function CUIB__buttonBehavior$_endLivePreview$p$1$in() {
        if (this.get_control().get_enabled()) {
            this._executeCommand$p$1(this.get__properties$p$1().CommandRevert, 0, false, null);
        }
    }
}


CUIB._comboBoxBehavior = function CUIB__comboBoxBehavior(comboBox) {
    this.$$d_executeAutoComplete = Function.createDelegate(this, this.executeAutoComplete);
    this.$$d__onMenuButtonPointerDown$p$3 = Function.createDelegate(this, this._onMenuButtonPointerDown$p$3);
    this.$$d_onInputPointerDown = Function.createDelegate(this, this.onInputPointerDown);
    this.$$d__onInputMouseUp$p$3 = Function.createDelegate(this, this._onInputMouseUp$p$3);
    this.$$d__onInputKeyPress$p$3 = Function.createDelegate(this, this._onInputKeyPress$p$3);
    this.$$d__onInputKeyDown$p$3 = Function.createDelegate(this, this._onInputKeyDown$p$3);
    this.$$d_onInputBlur = Function.createDelegate(this, this.onInputBlur);
    this.$$d_onInputFocus = Function.createDelegate(this, this.onInputFocus);
    this._pendingAutoCompleteTimeoutId$3 = -1;
    CUIB._comboBoxBehavior.initializeBase(this, [ comboBox ]);
}
CUIB._comboBoxBehavior.prototype = {
    _elmHadFocus$3: null,
    _mouseupOnTextboxSinceFocus$3: false,
    _inputFocused$3: false,
    _needMenuContentsForAutocomplete$3: false,
    
    get__comboBox$p$3: function CUIB__comboBoxBehavior$get__comboBox$p$3$in() {
        return this.get_control();
    },
    
    get__comboBoxDom$p$3: function CUIB__comboBoxBehavior$get__comboBoxDom$p$3$in() {
        return this.get__comboBox$p$3().get_comboBoxDom();
    },
    
    get__cbProperties$p$3: function CUIB__comboBoxBehavior$get__cbProperties$p$3$in() {
        return this.get__comboBox$p$3().get_cbProperties();
    },
    
    get__isFreeForm$p$3: function CUIB__comboBoxBehavior$get__isFreeForm$p$3$in() {
        return this.get_stateProperties()[CommandUI.Controls.ComboBoxCommandProperties.IsFreeForm];
    },
    
    set__isFreeForm$p$3: function CUIB__comboBoxBehavior$set__isFreeForm$p$3$in(value) {
        this.get_stateProperties()[CommandUI.Controls.ComboBoxCommandProperties.IsFreeForm] = value;
        return value;
    },
    
    attachEvents: function CUIB__comboBoxBehavior$attachEvents$in(componentDom) {
        Common.Debug.assertTag(CommandUI.Controls.ComboBoxComponentDom.isInstanceOfType(componentDom), 4801741);
        var comboBoxDom = componentDom;
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, comboBoxDom.elmControl, this.$$d_onPointerDown);
        var elmInput = comboBoxDom.elmInput;
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, elmInput, this.$$d_onInputFocus);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.blur, elmInput, this.$$d_onInputBlur);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, elmInput, this.$$d__onInputKeyDown$p$3);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyPress, elmInput, this.$$d__onInputKeyPress$p$3);
        Common.MouseInputManager.get_instance().registerHandler(Common.EventNames.mouseUp, elmInput, this.$$d__onInputMouseUp$p$3);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, elmInput, this.$$d_onInputPointerDown);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, comboBoxDom.elmBtnA, this.$$d__onMenuButtonPointerDown$p$3);
    },
    
    pollForStateAndUpdate: function CUIB__comboBoxBehavior$pollForStateAndUpdate$in() {
        var result = this.pollForStateAndUpdateInternal(this.get__cbProperties$p$3().Command, this.get__cbProperties$p$3().QueryCommand, this.get_stateProperties());
        if ((result & 2) > 0) {
            if (!this._inputFocused$3) {
                this._updateValueAndSelectedControl$p$3();
            }
            this._updateFontStyle$p$3();
        }
    },
    
    onDynamicMenuPopulated: function CUIB__comboBoxBehavior$onDynamicMenuPopulated$in() {
        this.get__comboBox$p$3().set_menuItems(null);
        var cc = null;
        var c = null;
        var isc = null;
        var imi = null;
        var itemId = null;
        var labeltext = null;
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_menu())) {
            return;
        }
        this._setAriaOwnsAttributeWithMenuId$p$3();
        var $$enum_7 = this.get_menu().get_children().getEnumerator();
        while ($$enum_7.moveNext()) {
            var ms = $$enum_7.get_current();
            var $$enum_9 = ms.get_children().getEnumerator();
            while ($$enum_9.moveNext()) {
                var comp = $$enum_9.get_current();
                if (CommandUI.MenuItem.isInstanceOfType(comp)) {
                    cc = comp;
                    c = cc.get_control();
                    if (CommandUI.ISelectableControl.isInstanceOfType(c)) {
                        isc = c;
                        itemId = isc.getMenuItemId();
                    }
                    if (CommandUI.IMenuItem.isInstanceOfType(c)) {
                        imi = c;
                        labeltext = imi.getTextValue();
                    }
                    if (!(CommandUI.ScriptUtility.isNullOrUndefined(itemId) || CommandUI.ScriptUtility.isNullOrUndefined(labeltext))) {
                        this.get__comboBox$p$3().get_menuItems()[labeltext] = itemId;
                        labeltext = null;
                        itemId = null;
                    }
                }
            }
        }
    },
    
    onInputPointerDown: function CUIB__comboBoxBehavior$onInputPointerDown$in(args) {
        if (CommandUI.IFloatie.isInstanceOfType(this.get_root()) && args.get_inputSource() === Common.InputManager.InputMethod.mouse) {
            this._elmHadFocus$3 = Common.WindowUtils.getActiveElement(this.get_control().get_focusableElement().ownerDocument);
            this.get_control().get_focusableElement().focus();
        }
        return false;
    },
    
    onPointerDown: function CUIB__comboBoxBehavior$onPointerDown$in(args) {
        this.commitRootPendingChanges();
        var handled = false;
        if (args.get_inputSource() === Common.InputManager.InputMethod.touch) {
            handled = CUIB._menuLauncherBehavior.prototype.onPointerDown.call(this, args);
            this._setAriaOwnsAttributeWithMenuId$p$3();
        }
        if (handled) {
            args.innerEvent.preventDefault();
        }
        return false;
    },
    
    _onMenuButtonPointerDown$p$3: function CUIB__comboBoxBehavior$_onMenuButtonPointerDown$p$3$in(args) {
        var handled = false;
        if (args.get_inputSource() !== Common.InputManager.InputMethod.mouse || !args.get_mouseButton()) {
            this.doDefaultAction(args.get_sourceElement(), args.get_inputSource(), args.innerEvent);
            this._setAriaOwnsAttributeWithMenuId$p$3();
            handled = true;
        }
        if (handled) {
            args.innerEvent.preventDefault();
        }
        return false;
    },
    
    _pendingDropdownItemId$3: null,
    
    _onInputKeyDown$p$3: function CUIB__comboBoxBehavior$_onInputKeyDown$p$3$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            var keyEvt = args.innerEvent.rawEvent;
            var keyCode = args.innerEvent.keyCode;
            var shiftKey = keyEvt.shiftKey;
            var altKey = keyEvt.altKey;
            var hasAutoComplete = CommandUI.Utility.isTrue(this.get__cbProperties$p$3().AutoComplete);
            if (keyCode === Sys.UI.Key.enter) {
                this.commitPendingChange();
                this._restoreFocusFromFloatie$p$3();
                if (CommandUI.Ribbon.isInstanceOfType(this.get_root())) {
                    (this.get_root()).dismissTabPopup(true, true);
                }
                handled = true;
            }
            else if (keyCode === Sys.UI.Key.tab) {
                this.commitPendingChange();
                this._restoreFocusFromFloatie$p$3();
                if (CommandUI.Ribbon.isInstanceOfType(this.get_root())) {
                    handled = (this.get_root()).wrapKeyboardFocus(this.get_displayedComponent().get_elementInternal(), !shiftKey);
                }
                if (CommandUI.IFloatie.isInstanceOfType(this.get_root())) {
                    return true;
                }
            }
            else if ((keyCode === Sys.UI.Key.backspace) || (keyCode === Sys.UI.Key.del)) {
                if (this.get_control().get_enabled()) {
                    this._cancelPendingAutoComplete$p$3();
                    this._pendingDropdownItemId$3 = null;
                }
                else {
                    handled = true;
                }
            }
            else if (keyCode === Sys.UI.Key.esc) {
                this._restoreToKnownValue$p$3();
                this._restoreFocusFromFloatie$p$3();
                if (CommandUI.Ribbon.isInstanceOfType(this.get_root())) {
                    (this.get_root()).dismissTabPopup(true, true);
                }
                handled = true;
            }
            else if (keyCode === Sys.UI.Key.down) {
                this.launchMenu(Common.InputManager.InputMethod.keyboard);
                this._setAriaOwnsAttributeWithMenuId$p$3();
                handled = true;
            }
        }
        return handled;
    },
    
    _onInputKeyPress$p$3: function CUIB__comboBoxBehavior$_onInputKeyPress$p$3$in(args) {
        if (!this.get_control().get_enabled()) {
            return true;
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && (args.innerEvent.charCode)) {
            this._delayAutoComplete$p$3();
        }
        return false;
    },
    
    _onInputMouseUp$p$3: function CUIB__comboBoxBehavior$_onInputMouseUp$p$3$in(args) {
        if (!this._mouseupOnTextboxSinceFocus$3) {
            this._mouseupOnTextboxSinceFocus$3 = true;
            return true;
        }
        return false;
    },
    
    executeAutoComplete: function CUIB__comboBoxBehavior$executeAutoComplete$in() {
        this._pendingAutoCompleteTimeoutId$3 = -1;
        var elmInput = this.get__comboBoxDom$p$3().elmInput;
        var currentValue = elmInput.value;
        var bestGuess = this._getFirstMenuItemThatBeginsWith$p$3(currentValue);
        if (!bestGuess) {
            this._pendingDropdownItemId$3 = null;
            return;
        }
        elmInput.value = bestGuess.key;
        if (elmInput.setSelectionRange) {
            elmInput.setSelectionRange(currentValue.length, elmInput.value.length);
        }
        else if (elmInput.createTextRange) {
            var tr = elmInput.createTextRange();
            tr.moveStart('character', currentValue.length);
            tr.moveEnd('character', elmInput.value.length);
            tr.select();
        }
        else {
            Common.Debug.assertNotReachedTag(7399323);
        }
        this._pendingDropdownItemId$3 = bestGuess.value;
    },
    
    _getFirstMenuItemThatBeginsWith$p$3: function CUIB__comboBoxBehavior$_getFirstMenuItemThatBeginsWith$p$3$in(beg) {
        var $$dict_2 = this.get__comboBox$p$3().get_menuItems();
        for (var $$key_3 in $$dict_2) {
            var de = { key: $$key_3, value: $$dict_2[$$key_3] };
            if (de.key.toLowerCase().startsWith(beg.toLowerCase())) {
                return de;
            }
        }
        return null;
    },
    
    _delayAutoComplete$p$3: function CUIB__comboBoxBehavior$_delayAutoComplete$p$3$in() {
        if (CommandUI.Utility.isTrue(this.get__cbProperties$p$3().AutoComplete) && (this._pendingAutoCompleteTimeoutId$3 === -1)) {
            if (this._needMenuContentsForAutocomplete$3) {
                this.pollForDynamicMenu(0);
                this._needMenuContentsForAutocomplete$3 = false;
            }
            this._pendingAutoCompleteTimeoutId$3 = window.setTimeout(this.$$d_executeAutoComplete, this.get__comboBox$p$3().get_autoCompleteDelay());
        }
    },
    
    _cancelPendingAutoComplete$p$3: function CUIB__comboBoxBehavior$_cancelPendingAutoComplete$p$3$in() {
        if (CommandUI.Utility.isTrue(this.get__cbProperties$p$3().AutoComplete)) {
            var $$t_0;
            CommandUI.Utility.cancelPendingTimeout(($$t_0 = {'val': this._pendingAutoCompleteTimeoutId$3})), this._pendingAutoCompleteTimeoutId$3 = $$t_0.val;
        }
    },
    
    onInputFocus: function CUIB__comboBoxBehavior$onInputFocus$in(args) {
        if (this.get_menuLaunched()) {
            Common.Debug.assertStringTag(Common.BrowserUtils.get_isInternetExplorer10Up(), 'ComboBox\'s text box received focus while a menu is launched.', 4781002);
            this.get_menu().setFocus(0);
            return true;
        }
        if (CommandUI.IFloatie.isInstanceOfType(this.get_root())) {
            Common.FocusManager.instance().scopeChanged('ribbon');
            (this.get_root()).set_hasShynessBehavior(false);
        }
        CUIB.ControlBehavior.prototype._onFocus$i$0.call(this, args);
        this._inputFocused$3 = true;
        CommandUI.Utility.ensureCSSClassOnElement(this.get__comboBoxDom$p$3().elmControl, 'cui-cb-focus');
        if (CommandUI.Utility.isTrue(this.get__cbProperties$p$3().PopulateDynamically)) {
            this._needMenuContentsForAutocomplete$3 = true;
        }
        Common.WindowUtils.selectAllTextInInput(this.get__comboBoxDom$p$3().elmInput);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_menu())) {
            this.get_menu().refreshInternal();
        }
        this._mouseupOnTextboxSinceFocus$3 = false;
        return false;
    },
    
    onInputBlur: function CUIB__comboBoxBehavior$onInputBlur$in(args) {
        this._inputFocused$3 = false;
        this.commitPendingChange();
        CommandUI.Utility.removeCSSClassFromElement(this.get__comboBoxDom$p$3().elmControl, 'cui-cb-focus');
        return false;
    },
    
    _restoreFocusFromFloatie$p$3: function CUIB__comboBoxBehavior$_restoreFocusFromFloatie$p$3$in() {
        if (CommandUI.IFloatie.isInstanceOfType(this.get_root())) {
            if (!isNullOrUndefined(this._elmHadFocus$3)) {
                Common.AFrameworkApplication.get_activeFrame().restoreFocusAfterDismissingPopup(this._elmHadFocus$3, Common.InputManager.InputMethod.mouse);
            }
            this._elmHadFocus$3 = null;
        }
    },
    
    commitPendingChange: function CUIB__comboBoxBehavior$commitPendingChange$in() {
        if (this.get_control().get_enabled()) {
            this._cancelPendingAutoComplete$p$3();
            var elmInput = this.get__comboBoxDom$p$3().elmInput;
            if (!isNullOrUndefined(this.get_stateProperties()[CommandUI.Controls.ComboBoxCommandProperties.Value]) && elmInput.value === this.get_stateProperties()[CommandUI.Controls.ComboBoxCommandProperties.Value].toString()) {
                return;
            }
            if (!this.get__comboBox$p$3().selectDropdownItemById(this._pendingDropdownItemId$3)) {
                if (!CommandUI.Utility.isTrue(this.get__cbProperties$p$3().AutoComplete)) {
                    var itemId = this.get__comboBox$p$3().get_menuItems()[elmInput.value];
                    if (!CommandUI.ScriptUtility.isNullOrEmptyString(itemId) && this.get__comboBox$p$3().selectDropdownItemById(itemId)) {
                        this.set__isFreeForm$p$3(false);
                        this.get_stateProperties()[CommandUI.Controls.ComboBoxCommandProperties.Value] = elmInput.value;
                        Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrEmptyString(this.get__cbProperties$p$3().Command), 4781003);
                        var parameters = { IsFreeForm: false, CommandValueId: this.get__comboBox$p$3().get_selectedControl().getCommandValueId(), MenuItemId: itemId };
                        this.get_root().executeCommand(this.get__cbProperties$p$3().Command, parameters, this.get_displayedComponent(), 0, false, null, null);
                        return;
                    }
                }
                var hasValue = !CommandUI.ScriptUtility.isNullOrEmptyString(elmInput.value) && (Common.StringUtils.removeAllWhitespace(elmInput.value) !== '');
                if (this.get__comboBox$p$3().get_allowFreeForm() && hasValue) {
                    this.set__isFreeForm$p$3(true);
                    this.get_stateProperties()[CommandUI.Controls.ComboBoxCommandProperties.Value] = elmInput.value;
                    Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrEmptyString(this.get__cbProperties$p$3().Command), 4781004);
                    var parameters = { IsFreeForm: true, Value: elmInput.value };
                    this.get_root().executeCommand(this.get__cbProperties$p$3().Command, parameters, this.get_displayedComponent(), 0, false, null, null);
                }
                else {
                    this._restoreToKnownValue$p$3();
                    return;
                }
            }
            else {
                this.set__isFreeForm$p$3(false);
                this.get_stateProperties()[CommandUI.Controls.ComboBoxCommandProperties.Value] = elmInput.value;
                Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrEmptyString(this.get__cbProperties$p$3().Command), 4781005);
                var parameters = { IsFreeForm: false, CommandValueId: this.get__comboBox$p$3().get_selectedControl().getCommandValueId(), MenuItemId: this.get__comboBox$p$3().get_selectedControl().getMenuItemId() };
                this.get_root().executeCommand(this.get__cbProperties$p$3().Command, parameters, this.get_displayedComponent(), 0, false, null, null);
            }
        }
        else {
            this._restoreToKnownValue$p$3();
        }
    },
    
    _restoreToKnownValue$p$3: function CUIB__comboBoxBehavior$_restoreToKnownValue$p$3$in() {
        this._cancelPendingAutoComplete$p$3();
        this._pendingDropdownItemId$3 = null;
        this._updateValueAndSelectedControl$p$3();
    },
    
    _updateValueAndSelectedControl$p$3: function CUIB__comboBoxBehavior$_updateValueAndSelectedControl$p$3$in() {
        var value = this.get_stateProperties()[CommandUI.Controls.ComboBoxCommandProperties.Value] || '';
        if (value !== this.get__comboBoxDom$p$3().elmInput.value) {
            this.get__comboBoxDom$p$3().elmInput.value = value;
        }
        this.get__comboBox$p$3().selectDropdownItemById(this.get__comboBox$p$3().get_menuItems()[value]);
    },
    
    _updateFontStyle$p$3: function CUIB__comboBoxBehavior$_updateFontStyle$p$3$in() {
        var fontStyle = this.get_stateProperties()[CommandUI.Controls.ComboBoxCommandProperties.FontStyle] || 'normal';
        if (fontStyle !== this.get__comboBoxDom$p$3().elmInput.style.fontStyle) {
            this.get__comboBoxDom$p$3().elmInput.style.fontStyle = fontStyle;
        }
    },
    
    _setAriaOwnsAttributeWithMenuId$p$3: function CUIB__comboBoxBehavior$_setAriaOwnsAttributeWithMenuId$p$3$in() {
        if (this.get_control().get_focusableElement() && this.get_menu()) {
            this.get_control().get_focusableElement().setAttribute(Common.AccessibilityUtils.ariaOwnsAttribute, this.get_menu().get_id());
        }
    }
}


CUIB.ControlBehavior = function CUIB_ControlBehavior(control) {
    this.$$d__onTouchEnd$i$0 = Function.createDelegate(this, this._onTouchEnd$i$0);
    this.$$d__onTouchMove$i$0 = Function.createDelegate(this, this._onTouchMove$i$0);
    this.$$d__onClick$i$0 = Function.createDelegate(this, this._onClick$i$0);
    this.$$d__onPointerUp$i$0 = Function.createDelegate(this, this._onPointerUp$i$0);
    this.$$d_onPointerDown = Function.createDelegate(this, this.onPointerDown);
    this.$$d__onPointerOut$i$0 = Function.createDelegate(this, this._onPointerOut$i$0);
    this.$$d__onPointerOver$i$0 = Function.createDelegate(this, this._onPointerOver$i$0);
    this.$$d__onBlur$i$0 = Function.createDelegate(this, this._onBlur$i$0);
    this.$$d__onFocus$i$0 = Function.createDelegate(this, this._onFocus$i$0);
    this.$$d_onKeyUp = Function.createDelegate(this, this.onKeyUp);
    this.$$d_onKeyDown = Function.createDelegate(this, this.onKeyDown);
    Common.Debug.assertStringTag(!!control, 'Control can\'t be null or things will crash really quickly.', 4773520);
    this.set_control(control);
}
CUIB.ControlBehavior.prototype = {
    _$$pf_Control$p$0: null,
    
    get_control: function CUIB_ControlBehavior$get_control$in() {
        return this._$$pf_Control$p$0;
    },
    
    set_control: function CUIB_ControlBehavior$set_control$in(value) {
        this._$$pf_Control$p$0 = value;
        return value;
    },
    
    get_stateProperties: function CUIB_ControlBehavior$get_stateProperties$in() {
        return this.get_control().get_stateProperties();
    },
    
    get_root: function CUIB_ControlBehavior$get_root$in() {
        return this.get_control().get_root();
    },
    
    get_parentMenu: function CUIB_ControlBehavior$get_parentMenu$in() {
        return this.get_control().get_parentMenu();
    },
    
    get__activatesOnPress$p$0: function CUIB_ControlBehavior$get__activatesOnPress$p$0$in() {
        return this.get_control().get_activatesOnPress();
    },
    
    get_displayedComponent: function CUIB_ControlBehavior$get_displayedComponent$in() {
        return this.get_control().get_displayedComponent();
    },
    
    get_controlComponentDomCache: function CUIB_ControlBehavior$get_controlComponentDomCache$in() {
        return this.get_control().get_controlComponentDomCache();
    },
    
    attachEvents: function CUIB_ControlBehavior$attachEvents$in(componentDom) {
    },
    
    initialize: function CUIB_ControlBehavior$initialize$in() {
    },
    
    doDefaultAction: function CUIB_ControlBehavior$doDefaultAction$in(elmTarget, inputMethod, e) {
        this.get_control().doDefaultActionPublic(elmTarget, inputMethod, e);
    },
    
    pollForStateAndUpdate: function CUIB_ControlBehavior$pollForStateAndUpdate$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_control().get_controlProperties().Command)) {
            this.pollForStateAndUpdateInternal(this.get_control().get_controlProperties().Command, null, null);
        }
    },
    
    pollForStateAndUpdateInternal: function CUIB_ControlBehavior$pollForStateAndUpdateInternal$in(command, queryCommand, properties) {
        if (this.get_root().get_rootUser()) {
            Common.Debug.assertStringTag(this.get_root().get_pollForState(), 'The root should be polling for state', 4773521);
        }
        var result = 0;
        if (this.get_root()) {
            result = this.get_root().pollForCommandState(command, queryCommand, properties);
        }
        this.get_control().set_enabled((result & 1) > 0);
        return result;
    },
    
    updateVisibility: function CUIB_ControlBehavior$updateVisibility$in() {
        var controlVisible = this.get_control().get_visible();
        if (this.get_root().get_supportsInvisibleControls()) {
            controlVisible = this.get_stateProperties()[CommandUI.SharedControlCommandProperties.visible];
            if (controlVisible !== this.get_control().get_visible()) {
                this.get_control().set_visible(controlVisible);
                this.get_root().set_needRefresh(true);
            }
        }
        return controlVisible;
    },
    
    updateLabelText: function CUIB_ControlBehavior$updateLabelText$in() {
        var newText = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.SharedControlCommandProperties.labelText], this.get_control().get_controlProperties().LabelText);
        this.setLabelText(newText);
    },
    
    setLabelText: function CUIB_ControlBehavior$setLabelText$in(newText) {
        if (this.get_control().get_labelText() !== newText) {
            var $$t_3 = this;
            this.get_controlComponentDomCache().forEach(function(dom) {
                dom.setLabelText(newText);
            });
            this.get_control().set_labelText(newText);
            this.get_root().set_needScaling(true);
        }
    },
    
    updateTooltip: function CUIB_ControlBehavior$updateTooltip$in() {
        var newTooltip = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.SharedControlCommandProperties.alt], this.get_control().get_controlProperties().Alt);
        this.setTooltip(newTooltip);
    },
    
    setTooltip: function CUIB_ControlBehavior$setTooltip$in(newTooltip) {
        if (this.get_control().get_tooltip() !== newTooltip) {
            var $$t_3 = this;
            this.get_controlComponentDomCache().forEach(function(dom) {
                dom.setTooltip(newTooltip);
            });
            this.get_control().set_tooltip(newTooltip);
        }
    },
    
    updateImage: function CUIB_ControlBehavior$updateImage$in() {
        var smallClassNameNew = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.Controls.ButtonCommandProperties.Image16by16Class], this.get_control().get_controlProperties().Image16by16Class);
        var largeClassNameNew = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.Controls.ButtonCommandProperties.Image32by32Class], this.get_control().get_controlProperties().Image32by32Class);
        var extraLargeClassNameNew = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.Controls.ButtonCommandProperties.Image48by48Class], this.get_control().get_controlProperties().Image48by48Class);
        var largeMenuClassNameNew = (!CommandUI.ScriptUtility.isNullOrEmptyString(extraLargeClassNameNew)) ? extraLargeClassNameNew : largeClassNameNew;
        this._applyImageCssClass$p$0(this.get_controlComponentDomCache().get_small(), smallClassNameNew);
        this._applyImageCssClass$p$0(this.get_controlComponentDomCache().get_medium(), smallClassNameNew);
        this._applyImageCssClass$p$0(this.get_controlComponentDomCache().get_large(), largeClassNameNew);
        this._applyImageCssClass$p$0(this.get_controlComponentDomCache().get_smallMenu(), smallClassNameNew);
        this._applyImageCssClass$p$0(this.get_controlComponentDomCache().get_largeMenu(), largeMenuClassNameNew);
    },
    
    _applyImageCssClass$p$0: function CUIB_ControlBehavior$_applyImageCssClass$p$0$in(domObject, className) {
        if (domObject) {
            if (!CommandUI.ScriptUtility.isNullOrUndefined(domObject.elmImage) && !CommandUI.ScriptUtility.isNullOrUndefined(className) && (domObject.elmImage.className !== className)) {
                domObject.elmImage.className = className;
            }
        }
    },
    
    updateDisplayMode: function CUIB_ControlBehavior$updateDisplayMode$in(displayMode) {
        if (!CommandUI.ScriptUtility.isNullOrEmptyString(displayMode)) {
            if (this.get_root().get_supportsDynamicDisplayMode()) {
                var displayModeExists = false;
                for (var $$arr_2 = this.get_control().get_components(), $$len_3 = $$arr_2.length, $$idx_4 = 0; $$idx_4 < $$len_3; ++$$idx_4) {
                    var component = $$arr_2[$$idx_4];
                    var activateThisComponent = component.get_displayMode() === displayMode;
                    if (activateThisComponent) {
                        Common.Debug.assertTag(!displayModeExists, 6160844);
                        displayModeExists = true;
                        this.get_control().set_activeComponentWhenVisible(component);
                    }
                    if (this.get_control().get_visible()) {
                        component.set_visibleInDOM(activateThisComponent);
                    }
                }
                if (this.get_control().get_visible()) {
                    this.get_root().set_needScaling(true);
                }
                Common.Debug.assertTag(displayModeExists, 6160845);
            }
            else {
                Common.Debug.assertNotReachedStringTag('UpdateDisplayMode called for an invalid root', 6160846);
            }
        }
    },
    
    adjustLayoutForLargeMenu: function CUIB_ControlBehavior$adjustLayoutForLargeMenu$in() {
        if (this.get_controlComponentDomCache().get_largeMenu() && this.get_controlComponentDomCache().get_largeMenu().elmLabel && this.get_controlComponentDomCache().get_largeMenu().elmDescription) {
            var elmLargeMenuLabel = this.get_controlComponentDomCache().get_largeMenu().elmLabel;
            var description = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.Description], this.get_control().get_controlProperties().Description);
            if (CommandUI.ScriptUtility.isNullOrEmptyString(description)) {
                elmLargeMenuLabel.style.position = 'relative';
                elmLargeMenuLabel.style.top = ((elmLargeMenuLabel.parentNode.offsetHeight - elmLargeMenuLabel.offsetHeight) / 2) + 'px';
                elmLargeMenuLabel.style.padding = '0px';
            }
        }
    },
    
    _onFocus$i$0: function CUIB_ControlBehavior$_onFocus$i$0$in(args) {
        var comp = this.get_displayedComponent();
        if (CommandUI.MenuItem.isInstanceOfType(comp)) {
            this.get_parentMenu().updateFocusedIndex(comp);
        }
        else {
            this.get_root().set_controlWithFocus(this.get_control());
        }
        return false;
    },
    
    _onBlur$i$0: function CUIB_ControlBehavior$_onBlur$i$0$in(args) {
        var comp = this.get_displayedComponent();
        if (this.get_control().isStandardMenuItem()) {
            CommandUI.Utility.removeCSSClassFromElement(comp.get_elementInternal(), 'cui-ctl-menu-hovered-without-focus');
        }
        else {
            if (comp) {
                Common.Debug.assertStringTag(this.get_root().get_controlWithFocus() === this.get_control() || !this.get_root().get_controlWithFocus(), 'No one other control should be marked as the ControlWithFocus until after this control has lost focus.', 4773522);
            }
        }
        this.get_root().set_controlWithFocus(null);
        return false;
    },
    
    _onPointerOver$i$0: function CUIB_ControlBehavior$_onPointerOver$i$0$in(args) {
        if (this.get_control().isStandardMenuItem()) {
            var menuIndex = this.get_parentMenu().get_stackIndex();
            var inTopmostMenu = (menuIndex === (this.get_root().get_menuStackDepth() - 1));
            var activeLauncherInMenu = (!inTopmostMenu) ? this.get_root().get_menuLauncherStack()[menuIndex + 1] : null;
            this.closeChildMenus(false);
            if (!inTopmostMenu && (this.get_control() !== activeLauncherInMenu)) {
                CommandUI.Utility.removeCSSClassFromElement(activeLauncherInMenu.get_launcher(), CommandUI.MenuLauncher.menuDroppedClassName);
            }
            if (this.get_control().get_enabled() && this.get_control().get_focusableElement()) {
                if (inTopmostMenu) {
                    this.get_control().setFocusOnControl();
                }
                else {
                    CommandUI.Utility.ensureCSSClassOnElement(this.get_displayedComponent().get_elementInternal(), 'cui-ctl-menu-hovered-without-focus');
                    activeLauncherInMenu.set_elmHadFocus(this.get_control().get_focusableElement());
                }
            }
            else {
                if (inTopmostMenu) {
                    this.get_parentMenu().setFocus(args.get_inputSource());
                }
                else {
                    activeLauncherInMenu.set_elmHadFocus(this.get_parentMenu().get_elementInternal());
                    this.get_parentMenu().resetFocusedIndex();
                }
            }
        }
        return false;
    },
    
    _onPointerOut$i$0: function CUIB_ControlBehavior$_onPointerOut$i$0$in(args) {
        if (this.get_control().isStandardMenuItem()) {
            CommandUI.Utility.removeCSSClassFromElement(this.get_displayedComponent().get_elementInternal(), 'cui-ctl-menu-hovered-without-focus');
        }
        return false;
    },
    
    onKeyDown: function CUIB_ControlBehavior$onKeyDown$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            var keyEvt = args.innerEvent.rawEvent;
            var keyCode = args.innerEvent.keyCode;
            var shiftKey = keyEvt.shiftKey;
            if (keyCode === Sys.UI.Key.enter) {
                handled = true;
            }
            if (CommandUI.MenuItem.isInstanceOfType(this.get_displayedComponent())) {
                var parentMenu = this.get_parentMenu();
                if (!CommandUI.ScriptUtility.isNullOrUndefined(parentMenu)) {
                    var stackIndex = parentMenu.get_stackIndex();
                    var ltr = (!this.get_root().get_textDirection());
                    var inGrid = !CommandUI.ScriptUtility.isNullOrUndefined(this.get_control().get_parentGrid());
                    if (keyCode !== Sys.UI.Key.tab && keyCode !== Sys.UI.Key.left && keyCode !== Sys.UI.Key.right && keyCode !== Sys.UI.Key.up && keyCode !== Sys.UI.Key.down && keyCode !== Sys.UI.Key.esc) {
                        return handled;
                    }
                    Common.WindowUtils.clearSelectionIfNecessary();
                    if ((keyCode === Sys.UI.Key.tab) && !shiftKey) {
                        parentMenu.focusNext(0);
                        handled = true;
                    }
                    else if ((keyCode === Sys.UI.Key.tab) && shiftKey) {
                        parentMenu.focusNext(CommandUI.Control.FocusDirection.backward);
                        handled = true;
                    }
                    else if (((keyCode === Sys.UI.Key.left) && ltr) || ((keyCode === Sys.UI.Key.right) && !ltr)) {
                        if (inGrid) {
                            parentMenu.focusNext(CommandUI.Control.FocusDirection.left);
                        }
                        else if (stackIndex > 0) {
                            this.get_root().closeMenuStackAtIndex(stackIndex, true, false);
                        }
                        handled = true;
                    }
                    else if (((keyCode === Sys.UI.Key.right) && ltr) || ((keyCode === Sys.UI.Key.left) && !ltr)) {
                        if (inGrid) {
                            parentMenu.focusNext(CommandUI.Control.FocusDirection.right);
                        }
                        handled = true;
                    }
                    else if (keyCode === Sys.UI.Key.up) {
                        parentMenu.focusNext(CommandUI.Control.FocusDirection.up);
                        handled = true;
                    }
                    else if (keyCode === Sys.UI.Key.down) {
                        parentMenu.focusNext(CommandUI.Control.FocusDirection.down);
                        handled = true;
                    }
                    else if (keyCode === Sys.UI.Key.esc) {
                        this.get_root().closeMenuStackAtIndex(stackIndex, true, false);
                        handled = true;
                    }
                }
            }
        }
        return handled;
    },
    
    onKeyUp: function CUIB_ControlBehavior$onKeyUp$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            var keyEvt = args.innerEvent.rawEvent;
            var keyCode = args.innerEvent.keyCode;
            var shiftKey = keyEvt.shiftKey;
            if (!Common.KeyInputManager.hasKeyModifiers(args) && ((keyCode === Sys.UI.Key.enter) || (keyCode === Sys.UI.Key.space))) {
                handled = this.handleDefaultActionWithKeytips(args);
                if (!handled) {
                    this.doDefaultAction(args.get_sourceElement(), Common.InputManager.InputMethod.keyboard, args.innerEvent);
                    handled = true;
                }
            }
        }
        return handled;
    },
    
    onPointerDown: function CUIB_ControlBehavior$onPointerDown$in(args) {
        this.commitRootPendingChanges();
        if (this.get__activatesOnPress$p$0()) {
            var activate = true;
            if (args.get_inputSource() === Common.InputManager.InputMethod.mouse) {
                activate = (!args.get_mouseButton());
            }
            Common.Debug.assertStringTag(!!this.get_displayedComponent(), 'We expected a DisplayedComponent created by now. Unable to handle the click.', 17150159);
            if (activate && this.get_displayedComponent()) {
                this._activateElement$i$0(this.get_displayedComponent().get_elementInternal());
            }
        }
        if (args.innerEvent.type.toLowerCase() !== Common.EventNames.touchStart || this.get__activatesOnPress$p$0()) {
            args.innerEvent.preventDefault();
        }
        return false;
    },
    
    _$$pf_IsCommitChangeFixEnabled$p$0: false,
    
    get_isCommitChangeFixEnabled: function CUIB_ControlBehavior$get_isCommitChangeFixEnabled$in() {
        return this._$$pf_IsCommitChangeFixEnabled$p$0;
    },
    
    set_isCommitChangeFixEnabled: function CUIB_ControlBehavior$set_isCommitChangeFixEnabled$in(value) {
        this._$$pf_IsCommitChangeFixEnabled$p$0 = value;
        return value;
    },
    
    enableCommitChangeFix: function CUIB_ControlBehavior$enableCommitChangeFix$in() {
        this.set_isCommitChangeFixEnabled(true);
    },
    
    commitRootPendingChanges: function CUIB_ControlBehavior$commitRootPendingChanges$in() {
        if (this.get_isCommitChangeFixEnabled()) {
            this.get_control().get_root().commitAnyPendingChange();
        }
    },
    
    _onPointerUp$i$0: function CUIB_ControlBehavior$_onPointerUp$i$0$in(args) {
        var handled = false;
        if ((CommandUI.MenuItem.isInstanceOfType(this.get_displayedComponent())) && !this.get__activatesOnPress$p$0() && args.get_inputSource() === Common.InputManager.InputMethod.mouse && !args.get_mouseButton()) {
            this.doDefaultAction(args.get_sourceElement(), args.get_inputSource(), args.innerEvent);
            handled = true;
        }
        else {
            handled = this.get_control().deactivateElement(args);
        }
        return handled;
    },
    
    _onClick$i$0: function CUIB_ControlBehavior$_onClick$i$0$in(args) {
        var handled = false;
        if ((CommandUI.MenuItem.isInstanceOfType(this.get_displayedComponent())) && !this.get__activatesOnPress$p$0() && (args.get_inputSource() === Common.InputManager.InputMethod.touch)) {
            this.doDefaultAction(args.get_sourceElement(), args.get_inputSource(), args.innerEvent);
            handled = true;
        }
        if (Common.BrowserUtils.get_isIPad()) {
            return false;
        }
        return handled;
    },
    
    _onTouchMove$i$0: function CUIB_ControlBehavior$_onTouchMove$i$0$in(args) {
        return this._onActivePointerMove$i$0(args);
    },
    
    _onTouchEnd$i$0: function CUIB_ControlBehavior$_onTouchEnd$i$0$in(args) {
        this.deactivateElement(args);
        return false;
    },
    
    _onActivePointerMove$i$0: function CUIB_ControlBehavior$_onActivePointerMove$i$0$in(args) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._activeElement$0)) {
            var hovered = Common.WindowUtils.isPointInBounds(this.get_activeElementBounds(), args.get_clientPoint());
            this.setActiveElementHovered(hovered);
            return true;
        }
        return false;
    },
    
    onModalBodyPointerDown: function CUIB_ControlBehavior$onModalBodyPointerDown$in(args) {
        var handled = false;
        if (this.deactivateElement(args)) {
            handled = true;
        }
        if (args.get_inputSource() !== Common.InputManager.InputMethod.touch) {
            this.get_root().closeAllMenus();
            handled = true;
        }
        return handled;
    },
    
    onModalBodyPointerUp: function CUIB_ControlBehavior$onModalBodyPointerUp$in(args) {
        return this.deactivateElement(args);
    },
    
    onModalBodyPointerMove: function CUIB_ControlBehavior$onModalBodyPointerMove$in(args) {
        return this._onActivePointerMove$i$0(args);
    },
    
    onModalBodyPointerOut: function CUIB_ControlBehavior$onModalBodyPointerOut$in(args) {
        return this.deactivateElement(args);
    },
    
    onModalBodyClick: function CUIB_ControlBehavior$onModalBodyClick$in(args) {
        if (args.get_inputSource() === Common.InputManager.InputMethod.touch) {
            this.get_root().closeAllMenus();
            return true;
        }
        return false;
    },
    
    onModalBodyMouseWheel: function CUIB_ControlBehavior$onModalBodyMouseWheel$in(args) {
        return false;
    },
    
    _activeElement$0: null,
    _activeElementBounds$0: null,
    
    get_activeElementBounds: function CUIB_ControlBehavior$get_activeElementBounds$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._activeElement$0) && CommandUI.ScriptUtility.isNullOrUndefined(this._activeElementBounds$0)) {
            this._activeElementBounds$0 = Common.WindowUtils.getElementBounds(this._activeElement$0);
        }
        return this._activeElementBounds$0;
    },
    
    _activeElementHovered$0: false,
    
    setActiveElementHovered: function CUIB_ControlBehavior$setActiveElementHovered$in(hovered) {
        if (this._activeElementHovered$0 !== hovered) {
            this._activeElementHovered$0 = hovered;
            this._activeElementStateChanged$i$0(this._activeElementHovered$0);
        }
    },
    
    _activeElementStateChanged$i$0: function CUIB_ControlBehavior$_activeElementStateChanged$i$0$in(hovered) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._activeElement$0)) {
            CommandUI.Utility.toggleCSSClassOnElement(this._activeElement$0, CommandUI.Control.activeClassName, hovered);
        }
    },
    
    _activateElement$i$0: function CUIB_ControlBehavior$_activateElement$i$0$in(element) {
        if (this.get_control().get_enabled()) {
            Common.Debug.assertTag(CommandUI.ScriptUtility.isNullOrUndefined(this._activeElement$0), 4773523);
            this._activeElement$0 = element;
            this.get_root().set_activeControl(this.get_control());
            this.setActiveElementHovered(true);
            this.get_root().beginModal(this.get_control(), false, false);
        }
    },
    
    deactivateElement: function CUIB_ControlBehavior$deactivateElement$in(pointerReleaseArgs) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this._activeElement$0)) {
            this.setActiveElementHovered(false);
            if (this.get_root()) {
                this.get_root().endModal(this.get_control(), false, false);
            }
            if (!CommandUI.ScriptUtility.isNullOrUndefined(pointerReleaseArgs)) {
                var point = pointerReleaseArgs.get_clientPoint();
                if (Common.WindowUtils.isPointInBounds(this.get_activeElementBounds(), point)) {
                    this.doDefaultAction(this._activeElement$0, pointerReleaseArgs.get_inputSource(), pointerReleaseArgs.innerEvent);
                }
            }
            if (this.get_root()) {
                this.get_root().set_activeControl(null);
            }
            this._activeElement$0 = null;
            this._activeElementBounds$0 = null;
            return true;
        }
        return false;
    },
    
    focusNext: function CUIB_ControlBehavior$focusNext$in(direction) {
        var comp = this.get_displayedComponent();
        if (CommandUI.MenuItem.isInstanceOfType(comp)) {
            if ((direction !== CommandUI.Control.FocusDirection.left) && (direction !== CommandUI.Control.FocusDirection.right)) {
                if (!Common.WindowUtils.isActiveElement(this.get_control().get_focusableElement())) {
                    return this.setFocusOnControl();
                }
            }
        }
        return false;
    },
    
    setFocusOnControl: function CUIB_ControlBehavior$setFocusOnControl$in() {
        try {
            if (this.get_control().get_visible()) {
                var focusableElement = this.get_control().get_focusableElement();
                if (!CommandUI.ScriptUtility.isNullOrUndefined(focusableElement)) {
                    focusableElement.focus();
                    return true;
                }
            }
        }
        catch ($$e_1) {
            Common.Debug.assertNotReachedStringTag('Failed to set focus to control!', 4801742);
        }
        return false;
    },
    
    closeChildMenus: function CUIB_ControlBehavior$closeChildMenus$in(immediate) {
        var parentMenu = this.get_parentMenu();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(parentMenu)) {
            this.get_root().closeMenuStackAtIndex(parentMenu.get_stackIndex() + 1, immediate, true);
        }
    },
    
    onMenuClosed: function CUIB_ControlBehavior$onMenuClosed$in() {
    },
    
    handleDefaultActionWithKeytips: function CUIB_ControlBehavior$handleDefaultActionWithKeytips$in(args) {
        return false;
    },
    
    getTelemetryData: function CUIB_ControlBehavior$getTelemetryData$in(e) {
        var telemetryParameters = null;
        if (e && e.rawEvent) {
            telemetryParameters = {};
            telemetryParameters[CUIB.ControlBehavior.triggerTime] = e.rawEvent.timeStamp;
        }
        return telemetryParameters;
    }
}


CUIB.ControlBehaviorFactory = function CUIB_ControlBehaviorFactory(commitChangeFixEnabled) {
    this._commitChangeFixEnabled$0 = commitChangeFixEnabled;
    var $$t_M = this, $$t_N = this, $$t_O = this, $$t_P = this, $$t_Q = this, $$t_R = this, $$t_S = this, $$t_T = this, $$t_U = this, $$t_V = this, $$t_W = this, $$t_X = this, $$t_Y = this, $$t_Z = this, $$t_a = this, $$t_b = this, $$t_c = this, $$t_d = this, $$t_e = this, $$t_f = this, $$t_g = this;
    this._factoryMethods$0 = { Button: (function(ctrl) {
        return new CUIB._buttonBehavior(ctrl);
    }), FileMenuButton: (function(ctrl) {
        return new CUIB._buttonBehavior(ctrl);
    }), ColorPicker: (function(ctrl) {
        return new CUIB._colorPickerBehavior(ctrl);
    }), ComboBox: (function(ctrl) {
        return new CUIB._comboBoxBehavior(ctrl);
    }), ContextMenuControl: (function(ctrl) {
        return new CUIB._contextMenuLauncherBehavior(ctrl);
    }), ContextMenuLauncher: (function(ctrl) {
        return new CUIB._contextMenuLauncherBehavior(ctrl);
    }), DialogMenuLauncher: (function(ctrl) {
        return new CUIB._dialogMenuLauncherBehavior(ctrl);
    }), DropDown: (function(ctrl) {
        return new CUIB._dropDownBehavior(ctrl);
    }), FlyoutAnchor: (function(ctrl) {
        return new CUIB._flyoutAnchorBehavior(ctrl);
    }), GalleryButton: (function(ctrl) {
        return new CUIB._galleryButtonBehavior(ctrl);
    }), StatefulColorFlyoutAnchor: (function(ctrl) {
        return new CUIB._flyoutAnchorBehavior(ctrl);
    }), JewelMenuLauncher: (function(ctrl) {
        return new CUIB._jewelMenuLauncherBehavior(ctrl);
    }), Label: (function(ctrl) {
        return new CUIB._labelBehavior(ctrl);
    }), Placeholder: (function(ctrl) {
        return new CUIB.ControlBehavior(ctrl);
    }), SearchBox: (function(ctrl) {
        return new CUIB._searchBoxBehavior(ctrl);
    }), Separator: (function(ctrl) {
        return new CUIB.ControlBehavior(ctrl);
    }), SplitButton: (function(ctrl) {
        return new CUIB._splitButtonBehavior(ctrl);
    }), StatefulColorSplitButton: (function(ctrl) {
        return new CUIB._splitButtonBehavior(ctrl);
    }), StatefulImageSplitButton: (function(ctrl) {
        return new CUIB._splitButtonBehavior(ctrl);
    }), TextBox: (function(ctrl) {
        return new CUIB._textBoxBehavior(ctrl);
    }), ToggleButton: (function(ctrl) {
        return new CUIB._toggleButtonBehavior(ctrl);
    }) };
}
CUIB.ControlBehaviorFactory.get_instance = function CUIB_ControlBehaviorFactory$get_instance$st() {
    return CUIB.ControlBehaviorFactory._instance || (CUIB.ControlBehaviorFactory._instance = new CUIB.ControlBehaviorFactory(!!Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('CUICommitChangeFixIsEnabled')));
}
CUIB.ControlBehaviorFactory.prototype = {
    _factoryMethods$0: null,
    _commitChangeFixEnabled$0: false,
    
    enableInsertTable: function CUIB_ControlBehaviorFactory$enableInsertTable$in() {
        var $$t_1 = this;
        this._factoryMethods$0[CommandUI.Control.insertTableControlType] = (function(ctrl) {
            return new CUIB._insertTableBehavior(ctrl);
        });
    },
    
    enableSlider: function CUIB_ControlBehaviorFactory$enableSlider$in() {
        var $$t_1 = this;
        this._factoryMethods$0[CommandUI.Control.sliderControlType] = (function(ctrl) {
            return new CUIB._sliderBehavior(ctrl);
        });
    },
    
    enableSpinner: function CUIB_ControlBehaviorFactory$enableSpinner$in() {
        var $$t_1 = this;
        this._factoryMethods$0[CommandUI.Control.spinnerControlType] = (function(ctrl) {
            return new CUIB._spinnerBehavior(ctrl);
        });
    },
    
    getBehaviorForControl: function CUIB_ControlBehaviorFactory$getBehaviorForControl$in(control) {
        var behaviorFactory = this._factoryMethods$0[control.get_controlType()];
        var controlBehavior = (!behaviorFactory) ? null : behaviorFactory(control);
        if (controlBehavior && this._commitChangeFixEnabled$0) {
            controlBehavior.enableCommitChangeFix();
        }
        return controlBehavior;
    }
}




CUIB._contextMenuLauncherBehavior = function CUIB__contextMenuLauncherBehavior(contextMenuLauncher) {
    CUIB._contextMenuLauncherBehavior.initializeBase(this, [ contextMenuLauncher ]);
}
CUIB._contextMenuLauncherBehavior.prototype = {
    
    get__contextMenuLauncher$p$2: function CUIB__contextMenuLauncherBehavior$get__contextMenuLauncher$p$2$in() {
        return this.get_control();
    },
    
    getLauncherBounds: function CUIB__contextMenuLauncherBehavior$getLauncherBounds$in() {
        var leftOffset = 0;
        if (this.get_menu() && this.get_menu().get_elementInternal() && this.get_menu().get_horizontalAlignment() === CommandUI.MenuHorizontalAlignment.right) {
            leftOffset = this.get_menu().get_elementInternal().clientWidth;
        }
        return new Sys.UI.Bounds(this.get__contextMenuLauncher$p$2().get_x() - leftOffset, this.get__contextMenuLauncher$p$2().get_y(), this.get__contextMenuLauncher$p$2().get_launcherWidth(), this.get__contextMenuLauncher$p$2().get_launcherHeight());
    }
}


CUIB._dialogMenuLauncherBehavior = function CUIB__dialogMenuLauncherBehavior(contextMenuLauncher) {
    CUIB._dialogMenuLauncherBehavior.initializeBase(this, [ contextMenuLauncher ]);
}
CUIB._dialogMenuLauncherBehavior.prototype = {
    
    get__dialogMenuLauncher$p$2: function CUIB__dialogMenuLauncherBehavior$get__dialogMenuLauncher$p$2$in() {
        return this.get_control();
    },
    
    getLauncherBounds: function CUIB__dialogMenuLauncherBehavior$getLauncherBounds$in() {
        return new Sys.UI.Bounds(this.get__dialogMenuLauncher$p$2().get_x(), this.get__dialogMenuLauncher$p$2().get_y(), this.get__dialogMenuLauncher$p$2().get_launcherWidth(), this.get__dialogMenuLauncher$p$2().get_launcherHeight());
    }
}


CUIB.DialogMenuRootUser = function CUIB_DialogMenuRootUser() {
    this.$$d__populateDialogMenu$p$0 = Function.createDelegate(this, this._populateDialogMenu$p$0);
    var props = new CommandUI.DialogMenuRootProperties();
    props.ImageSideArrow = Common.AFrameworkApplication.get_imageClusterPath();
    props.ImageSideArrowClass = Common.ImageClusteringHelper.getImageClass('SubmenuFlyoutArrow_13x13x32');
    props.TextDirection = (Common.AFrameworkApplication.get_isRtl()) ? 'rtl' : 'ltr';
    this._root$0 = new CommandUI.DialogMenuRoot(CUIB.DialogMenuRootUser._dialogMenuRootId$p, props);
    this._root$0.set_rootUser(this);
    this._root$0.refresh();
    Common.AFrameworkApplication.get_theActionManager().addActionWithFlags(Common.CommonCommands.populateDialogMenu, Common.CommonContextIds.frame, this.$$d__populateDialogMenu$p$0, 96);
}
CUIB.DialogMenuRootUser.prototype = {
    _root$0: null,
    
    get_theRoot: function CUIB_DialogMenuRootUser$get_theRoot$in() {
        return this._root$0;
    },
    
    executeRootCommand: function CUIB_DialogMenuRootUser$executeRootCommand$in(commandName, commandParams, commandSqmInfo, actionResultCallback, telemetryParams) {
        var actionId = parseInt(commandName);
        Common.Debug.assertStringTag(isFinite(actionId), 'Encountered non-numeric command in DialogMenuRootUser: ' + commandName, 21516490);
        var actionManager = Common.AFrameworkApplication.get_theActionManager();
        if (commandSqmInfo) {
            actionManager.set_commandLocation(commandSqmInfo.CommandLocation);
            actionManager.set_invocationMethod(commandSqmInfo.InvocationMethod);
        }
        var actionData = commandParams;
        var result = actionManager.processActionWithData(actionId, 2, actionData, telemetryParams);
        this._root$0.refresh();
        return result === 32;
    },
    
    isRootCommandEnabled: function CUIB_DialogMenuRootUser$isRootCommandEnabled$in(commandName, properties) {
        if (!commandName) {
            return true;
        }
        var actionId = parseInt(commandName);
        Common.Debug.assertStringTag(isFinite(actionId), 'Encountered non-numeric command: ' + commandName, 21516491);
        var result = Common.AFrameworkApplication.get_theActionManager().processAction(actionId, 1, null);
        return result === 32;
    },
    
    _pollForStateAndUpdateInternal$i$0: function CUIB_DialogMenuRootUser$_pollForStateAndUpdateInternal$i$0$in() {
        (this.get_theRoot()).get_root().pollForStateAndUpdate();
    },
    
    createDialogMenu: function CUIB_DialogMenuRootUser$createDialogMenu$in(dialogMenuId, dialogMoveCommand, dialogCloseCommand) {
        var props = {};
        props.PopulateDynamically = 'true';
        props.PopulateOnlyOnce = 'false';
        props.PopulateQueryCommand = '3675896289';
        props.Command = '798637440';
        props.DialogMoveCommand = dialogMoveCommand;
        props.DialogCloseCommand = dialogCloseCommand;
        (this.get_theRoot()).createDialogMenu(props, dialogMenuId, '', '');
    },
    
    showDialogMenuAt: function CUIB_DialogMenuRootUser$showDialogMenuAt$in(dialogMenuId, x, y, inputMethod) {
        (this.get_theRoot()).showDialogMenuAt(dialogMenuId, x, y, inputMethod);
    },
    
    closeDialogMenu: function CUIB_DialogMenuRootUser$closeDialogMenu$in(dialogMenuId) {
        (this.get_theRoot()).closeDialogMenu(dialogMenuId);
    },
    
    _populateDialogMenu$p$0: function CUIB_DialogMenuRootUser$_populateDialogMenu$p$0$in(actionId, context, behavior, reportingData, actionData) {
        if (behavior === 1) {
            return 32;
        }
        var menuProps = actionData;
        var builder = new Sys.StringBuilder();
        builder.append('<Menu Id=\"dialogMenu\">');
        builder.append('<MenuSection Id=\"dialogMenuSection\" DisplayMode=\"Menu\"><Controls>');
        var moveCmd = menuProps.DialogMoveCommand;
        builder.append(String.format('<Button Id=\"DialogMenuMoveControl\" Command=\"{0}\" LabelText=\"{1}\"/>', moveCmd, CommonUIStrings.l_DialogMove));
        var closeCmd = menuProps.DialogCloseCommand;
        builder.append(String.format('<Button Id=\"DialogMenuCloseControl\" Command=\"{0}\" LabelText=\"{1}\"/>', closeCmd, CommonUIStrings.l_DialogClose));
        builder.append('</Controls></MenuSection>');
        builder.append('</Menu>');
        menuProps.PopulationXML = builder.toString();
        return 32;
    },
    
    dispose: function CUIB_DialogMenuRootUser$dispose$in() {
        if (this._root$0) {
            this._root$0.dispose();
            this._root$0 = null;
        }
    }
}


CUIB._dropDownBehavior = function CUIB__dropDownBehavior(dropDown) {
    CUIB._dropDownBehavior.initializeBase(this, [ dropDown ]);
}
CUIB._dropDownBehavior.prototype = {
    
    get__properties$p$2: function CUIB__dropDownBehavior$get__properties$p$2$in() {
        return this.get__dropDown$p$2().get_properties();
    },
    
    get__dropDown$p$2: function CUIB__dropDownBehavior$get__dropDown$p$2$in() {
        return this.get_control();
    },
    
    get__dropDownDom$p$2: function CUIB__dropDownBehavior$get__dropDownDom$p$2$in() {
        return this.get__dropDown$p$2().get_dropDownDom();
    },
    
    attachEvents: function CUIB__dropDownBehavior$attachEvents$in(componentDom) {
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, this.get__dropDownDom$p$2().elmControl, this.$$d_onPointerDown);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, this.get__dropDownDom$p$2().elmControl, this.$$d_onKeyDown);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, this.get__dropDownDom$p$2().elmControl, this.$$d_onKeyUp);
    },
    
    pollForStateAndUpdate: function CUIB__dropDownBehavior$pollForStateAndUpdate$in() {
        var selectedItemOld = this.get_stateProperties()[CommandUI.Controls.DropDownCommandProperties.SelectedItemId];
        var result = this.pollForStateAndUpdateInternal(this.get__properties$p$2().Command, this.get__properties$p$2().QueryCommand, this.get_stateProperties());
        if ((result & 2) > 0) {
            var selectedItemNew = this.get_stateProperties()[CommandUI.Controls.DropDownCommandProperties.SelectedItemId];
            if (!CommandUI.ScriptUtility.isNullOrUndefined(selectedItemNew) && (selectedItemOld !== selectedItemNew)) {
                if (!this.get__dropDown$p$2().selectDropdownItemById(selectedItemNew)) {
                    Common.Debug.assertNotReachedStringTag('Dropdown selection invalid!', 4781007);
                    this.get_stateProperties()[CommandUI.Controls.DropDownCommandProperties.SelectedItemId] = null;
                }
            }
        }
    }
}


CUIB._flyoutAnchorBehavior = function CUIB__flyoutAnchorBehavior(flyoutAnchor) {
    CUIB._flyoutAnchorBehavior.initializeBase(this, [ flyoutAnchor ]);
    this._shouldRefreshWhenDropped$2 = !CommandUI.Utility.isFalse(this.get__properties$p$2().ShouldRefreshWhenDropped);
}
CUIB._flyoutAnchorBehavior._applyColorToImage$p = function CUIB__flyoutAnchorBehavior$_applyColorToImage$p$st(image, rgbColor) {
    if (!CommandUI.ScriptUtility.isNullOrUndefined(image) && !CommandUI.ScriptUtility.isNullOrUndefined(rgbColor) && (image.style.backgroundColor !== rgbColor)) {
        image.style.backgroundColor = rgbColor;
    }
}
CUIB._flyoutAnchorBehavior.prototype = {
    _shouldRefreshWhenDropped$2: false,
    _needToRefreshAfterMenuClose$2: false,
    
    get__flyoutAnchor$p$2: function CUIB__flyoutAnchorBehavior$get__flyoutAnchor$p$2$in() {
        return this.get_control();
    },
    
    get__properties$p$2: function CUIB__flyoutAnchorBehavior$get__properties$p$2$in() {
        return this.get_control().get_controlProperties();
    },
    
    attachEvents: function CUIB__flyoutAnchorBehavior$attachEvents$in(componentDom) {
        var control = componentDom.elmControl;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(control)) {
            Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, control, this.$$d__onFocus$i$0);
            Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.blur, control, this.$$d__onBlur$i$0);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOver, control, this.$$d__onPointerOver$i$0);
            Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, control, this.$$d_onKeyDown);
            Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, control, this.$$d_onKeyUp);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, control, this.$$d_onPointerDown);
        }
    },
    
    pollForStateAndUpdate: function CUIB__flyoutAnchorBehavior$pollForStateAndUpdate$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_control().get_controlProperties().Command)) {
            return;
        }
        if (this.get__flyoutAnchor$p$2().get_menuLaunched() && !this._shouldRefreshWhenDropped$2) {
            this._needToRefreshAfterMenuClose$2 = true;
            return;
        }
        var result = this.pollForStateAndUpdateInternal(this.get__properties$p$2().Command, this.get__properties$p$2().QueryCommand, this.get_stateProperties());
        if ((result & 2) > 0) {
            var visible = this.updateVisibility();
            if (visible) {
                this._updateHtml$p$2();
            }
        }
        if (CommandUI.Utility.isTrue(this.get__properties$p$2().RefreshableMenu) && this.get_menuLaunched()) {
            this.get_menu().pollMenuState();
        }
    },
    
    _updateHtml$p$2: function CUIB__flyoutAnchorBehavior$_updateHtml$p$2$in() {
        this._updateFlyoutLabelText$p$2();
        this.updateImage();
        this._updateImageBackgroundColor$p$2();
        this.get__flyoutAnchor$p$2().set_imageIsVisible(this.get_stateProperties()[CommandUI.Controls.FlyoutAnchorCommandProperties.ImageIsVisible]);
    },
    
    _updateFlyoutLabelText$p$2: function CUIB__flyoutAnchorBehavior$_updateFlyoutLabelText$p$2$in() {
        var newText = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.Controls.FlyoutAnchorCommandProperties.LabelText], this.get__properties$p$2().LabelText);
        var newUserGeneratedPlaceholderReplacements = this.get_stateProperties()[CommandUI.Controls.FlyoutAnchorCommandProperties.LabelTextUserGeneratedPlaceholderReplacements];
        if (this.get_control().get_labelText() !== newText || this.get__properties$p$2().LabelTextUserGeneratedPlaceholderReplacements !== newUserGeneratedPlaceholderReplacements) {
            if (this.get_controlComponentDomCache().get_medium()) {
                this._updateFlyoutLabelTextDom$p$2(this.get_controlComponentDomCache().get_medium().elmLabel, newText, newUserGeneratedPlaceholderReplacements);
            }
            if (this.get_controlComponentDomCache().get_large()) {
                Common.Debug.assertNotReachedStringTag('Changing the text of a large flyout is not currently supported.', 4773524);
            }
            this.get_root().set_needScaling(true);
            this.get_control().set_labelText(newText);
            this.get__properties$p$2().LabelTextUserGeneratedPlaceholderReplacements = newUserGeneratedPlaceholderReplacements;
        }
    },
    
    _updateFlyoutLabelTextDom$p$2: function CUIB__flyoutAnchorBehavior$_updateFlyoutLabelTextDom$p$2$in(labelElement, newText, newUserGeneratedPlaceholderReplacements) {
        var arrow = labelElement.lastChild;
        CommandUI.Utility.setControlText(labelElement, newText + ' ', newUserGeneratedPlaceholderReplacements);
        var isArrowEmpty = CommandUI.ScriptUtility.isNullOrUndefined(arrow);
        Diag.ULS.sendTraceTag(38535884, 207, 50, 'FlyoutAnchorBehaviorUpdate.FlyoutLabelTextDom: arrow type: {0}', (isArrowEmpty) ? '' : arrow.nodeType.toString());
        if (!isArrowEmpty) {
            labelElement.appendChild(arrow);
        }
    },
    
    _updateImageBackgroundColor$p$2: function CUIB__flyoutAnchorBehavior$_updateImageBackgroundColor$p$2$in() {
        var imageBackgroundColor = this.get_stateProperties()[CommandUI.Controls.FlyoutAnchorCommandProperties.ImageBackColor];
        var $$t_3 = this;
        this.get_controlComponentDomCache().forEach(function(dom) {
            CUIB._flyoutAnchorBehavior._applyColorToImage$p(dom.elmImage, imageBackgroundColor);
        });
    },
    
    launchMenu: function CUIB__flyoutAnchorBehavior$launchMenu$in(inputMethod) {
        if (this.get_control().get_id() === 'faPrint' && this.get_control().get_root().get_id() === 'jewelWordEditor') {
            Common.AFrameworkApplication.logFlightedSettingUsage('Microsoft.Office.Web.SessionSettings.IWacWordPrintToWebSettings');
            Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.digitalPrintToSwaySlabClicked, 2, null);
        }
        if ((this.get_control().get_id() === 'faRemix' || this.get_control().get_id() === 'faTransform' || this.get_control().get_id() === 'faPublish') && this.get_control().get_root().get_id() === 'jewelWordEditor') {
            Common.AFrameworkApplication.get_theActionManager().processAction(Common.CommonCommands.digitalPrintToSwaySlabClicked, 2, null);
        }
        if (CommandUI.MenuItem.isInstanceOfType(this.get_displayedComponent())) {
            if (!this.get_menuLaunched()) {
                this.closeChildMenus(true);
            }
            if (this.get_control().get_enabled()) {
                this.setFocusOnControl();
            }
        }
        CUIB._menuLauncherBehavior.prototype.launchMenu.call(this, inputMethod);
    },
    
    closeMenu: function CUIB__flyoutAnchorBehavior$closeMenu$in() {
        CUIB._menuLauncherBehavior.prototype.closeMenu.call(this);
        if (this._needToRefreshAfterMenuClose$2) {
            this._needToRefreshAfterMenuClose$2 = false;
            this.pollForStateAndUpdate();
        }
    },
    
    _onPointerOver$i$0: function CUIB__flyoutAnchorBehavior$_onPointerOver$i$0$in(args) {
        if (this.get_control().isStandardMenuItem()) {
            if (this.get__flyoutAnchor$p$2().get_menuLaunched()) {
                this.get_root().cancelPendingCloseMenuStack();
                CommandUI.Utility.ensureCSSClassOnElement(this.get__flyoutAnchor$p$2().get_launcher(), CommandUI.MenuLauncher.menuDroppedClassName);
                this.get__flyoutAnchor$p$2().set_elmHadFocus(this.get_control().get_focusableElement());
            }
            else {
                CUIB.ControlBehavior.prototype._onPointerOver$i$0.call(this, args);
                this.doDefaultAction(args.get_sourceElement(), args.get_inputSource(), args.innerEvent);
            }
            return false;
        }
        return CUIB.ControlBehavior.prototype._onPointerOver$i$0.call(this, args);
    },
    
    onKeyDown: function CUIB__flyoutAnchorBehavior$onKeyDown$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            if (CommandUI.MenuItem.isInstanceOfType(this.get_displayedComponent())) {
                var keyEvt = args.innerEvent.rawEvent;
                var keyCode = args.innerEvent.keyCode;
                var ltr = (!this.get_root().get_textDirection());
                if (!keyEvt.shiftKey && !keyEvt.ctrlKey && (((keyCode === Sys.UI.Key.right) && ltr) || ((keyCode === Sys.UI.Key.left) && !ltr))) {
                    handled = this.handleDefaultActionWithKeytips(args);
                    if (!handled) {
                        this.doDefaultAction(args.get_sourceElement(), Common.InputManager.InputMethod.keyboard, args.innerEvent);
                        handled = true;
                    }
                }
            }
            if (!handled) {
                handled = CUIB._menuLauncherBehavior.prototype.onKeyDown.call(this, args);
            }
        }
        return handled;
    }
}


CUIB._galleryButtonBehavior = function CUIB__galleryButtonBehavior(control) {
    CUIB._galleryButtonBehavior.initializeBase(this, [ control ]);
}
CUIB._galleryButtonBehavior.prototype = {
    
    get__galleryButton$p$1: function CUIB__galleryButtonBehavior$get__galleryButton$p$1$in() {
        return this.get_control();
    },
    
    get__properties$p$1: function CUIB__galleryButtonBehavior$get__properties$p$1$in() {
        return this.get__galleryButton$p$1().get_properties();
    },
    
    get__componentDom$p$1: function CUIB__galleryButtonBehavior$get__componentDom$p$1$in() {
        return this.get__galleryButton$p$1().get_componentDom();
    },
    
    attachEvents: function CUIB__galleryButtonBehavior$attachEvents$in(componentDom) {
        Common.Debug.assertTag(CommandUI.Controls.GalleryButtonComponentDom.isInstanceOfType(componentDom), 4801743);
        var element = (componentDom).elmA;
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, element, this.$$d__onFocus$i$0);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.blur, element, this.$$d__onBlur$i$0);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOver, element, this.$$d__onPointerOver$i$0);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOut, element, this.$$d__onPointerOut$i$0);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, element, this.$$d_onKeyDown);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, element, this.$$d_onKeyUp);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, element, this.$$d_onPointerDown);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerUp, element, this.$$d__onPointerUp$i$0);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchMove, element, this.$$d__onTouchMove$i$0);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchEnd, element, this.$$d__onTouchEnd$i$0);
    },
    
    pollForStateAndUpdate: function CUIB__galleryButtonBehavior$pollForStateAndUpdate$in() {
        var selectedOld = this.get_stateProperties()[CommandUI.Controls.GalleryButtonCommandProperties.On];
        var isRtlOld = this.get_stateProperties()[CommandUI.Controls.GalleryButtonCommandProperties.IsRtl];
        this._updateStateProperties$p$1();
        var result = this.pollForStateAndUpdateInternal(this.get__properties$p$1().Command, this.get__properties$p$1().QueryCommand, this.get_stateProperties());
        if ((result & 2) > 0) {
            var hasHtml = !CommandUI.ScriptUtility.isNullOrUndefined(this.get_stateProperties()[CommandUI.Controls.GalleryButtonCommandProperties.InnerHTML]) || !CommandUI.ScriptUtility.isNullOrUndefined(this.get__properties$p$1().InnerHTML);
            var hasImage = !CommandUI.ScriptUtility.isNullOrUndefined(this.get__properties$p$1().Image);
            if (!hasHtml && !hasImage) {
                this.get_control().set_enabled(false);
            }
            var elmDefaultA = this.get__componentDom$p$1().elmA;
            if (!CommandUI.ScriptUtility.isNullOrUndefined(elmDefaultA)) {
                if (hasHtml) {
                    var innerHtmlNew = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.Controls.GalleryButtonCommandProperties.InnerHTML], this.get__properties$p$1().InnerHTML);
                    if (null === elmDefaultA.innerHTML || null === innerHtmlNew || Common.StringUtils.toLower(elmDefaultA.innerHTML) !== Common.StringUtils.toLower(innerHtmlNew)) {
                        elmDefaultA.innerHTML = innerHtmlNew;
                    }
                    if (innerHtmlNew === '') {
                        this.get_control().set_enabled(false);
                    }
                }
                var altOld = elmDefaultA.title;
                var altNew = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.Controls.GalleryButtonCommandProperties.Alt], this.get__properties$p$1().Alt);
                if (altNew !== altOld && !this.get_control().get_shouldIgnoreTitle()) {
                    elmDefaultA.title = altNew;
                }
            }
            var selectedNew = this.get_stateProperties()[CommandUI.Controls.GalleryButtonCommandProperties.On];
            var isRtlNew = this.get_stateProperties()[CommandUI.Controls.GalleryButtonCommandProperties.IsRtl];
            if (selectedOld !== selectedNew || isRtlOld !== isRtlNew) {
                this.get_control().onStateChanged();
            }
        }
    },
    
    _updateStateProperties$p$1: function CUIB__galleryButtonBehavior$_updateStateProperties$p$1$in() {
        var properties = this.get_stateProperties();
        properties[CommandUI.Controls.GalleryButtonCommandProperties.CommandValueId] = this.get_control().getCommandValueId();
        properties['MenuItemId'] = this.get_control().getMenuItemId();
        properties['SourceControlId'] = this.get__properties$p$1().Id;
    },
    
    doDefaultAction: function CUIB__galleryButtonBehavior$doDefaultAction$in(elmTarget, inputMethod, e) {
        var source = this.get_displayedComponent();
        if (source && this.get_control().get_enabled()) {
            var root = this.get_root();
            if (Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ExcelBorderMenuCompactionEnabled')) {
                if (source.isMenuItem() && this.get_parentMenu()) {
                    var menuIndex = this.get_parentMenu().get_stackIndex();
                    var menuLauncher = root.get_menuLauncherStack()[menuIndex];
                    if (!menuLauncher) {
                        Diag.ULS.sendTraceTag(41034837, 207, 15, 'GalleryButtonBehavior.DoDefaultAction: Did not get Menulauncher for the menu item.');
                    }
                    else {
                        menuLauncher.selectDropdownItem(this.get__galleryButton$p$1());
                    }
                }
            }
            this._updateStateProperties$p$1();
            if (!(this.get_stateProperties()[CommandUI.Controls.GalleryButtonCommandProperties.On])) {
                this.get_stateProperties()[CommandUI.Controls.GalleryButtonCommandProperties.On] = true;
                this.get_control().onStateChanged();
            }
            if (source.get_displayMode() === 'Menu') {
                CommandUI.Utility.removeCSSClassFromElement(this.get__componentDom$p$1().elmControl, 'cui-gallerybutton-focused');
            }
            Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$1().Command), 4801744);
            root.executeCommand(this.get__properties$p$1().Command, this.get_stateProperties(), source, inputMethod, true, null, this.getTelemetryData(e));
        }
    },
    
    _onFocus$i$0: function CUIB__galleryButtonBehavior$_onFocus$i$0$in(args) {
        CUIB.ControlBehavior.prototype._onFocus$i$0.call(this, args);
        CommandUI.Utility.ensureCSSClassOnElement(this.get__componentDom$p$1().elmControl, 'cui-gallerybutton-focused');
        return false;
    },
    
    _onBlur$i$0: function CUIB__galleryButtonBehavior$_onBlur$i$0$in(args) {
        CUIB.ControlBehavior.prototype._onBlur$i$0.call(this, args);
        CommandUI.Utility.removeCSSClassFromElement(this.get__componentDom$p$1().elmControl, 'cui-gallerybutton-focused');
        return false;
    }
}


CUIB._insertTableBehavior = function CUIB__insertTableBehavior(insertTable) {
    this.$$d__onCellTouchStart$p$1 = Function.createDelegate(this, this._onCellTouchStart$p$1);
    this.$$d__onCellPointerUp$p$1 = Function.createDelegate(this, this._onCellPointerUp$p$1);
    this.$$d__onCellPointerOver$p$1 = Function.createDelegate(this, this._onCellPointerOver$p$1);
    this.$$d__onCellFocus$p$1 = Function.createDelegate(this, this._onCellFocus$p$1);
    this.$$d__onControlTouchEnd$p$1 = Function.createDelegate(this, this._onControlTouchEnd$p$1);
    this.$$d__onControlTouchMove$p$1 = Function.createDelegate(this, this._onControlTouchMove$p$1);
    this.$$d__onControlPointerOut$p$1 = Function.createDelegate(this, this._onControlPointerOut$p$1);
    this._oldIdx = -1;
    CUIB._insertTableBehavior.initializeBase(this, [ insertTable ]);
}
CUIB._insertTableBehavior.prototype = {
    
    get__insertTableControl$p$1: function CUIB__insertTableBehavior$get__insertTableControl$p$1$in() {
        return this.get_control();
    },
    
    get__properties$p$1: function CUIB__insertTableBehavior$get__properties$p$1$in() {
        return this.get__insertTableControl$p$1().get_controlProperties();
    },
    
    get__commandProperties$p$1: function CUIB__insertTableBehavior$get__commandProperties$p$1$in() {
        return this.get__insertTableControl$p$1().get_commandProperties();
    },
    
    get__hostMenuSection$p$1: function CUIB__insertTableBehavior$get__hostMenuSection$p$1$in() {
        var hostMenuSection = null;
        if (this.get_displayedComponent()) {
            var parentComp = this.get_displayedComponent().get_parent();
            if (!CommandUI.MenuSection.isInstanceOfType(parentComp)) {
                throw Error.create('InsertTable must live inside of a MenuSection.');
            }
            hostMenuSection = parentComp;
        }
        return hostMenuSection;
    },
    
    get__innerDivs$p$1: function CUIB__insertTableBehavior$get__innerDivs$p$1$in() {
        return this.get__insertTableControl$p$1().get_insertTableDom().innerDivs;
    },
    
    get__outerDivs$p$1: function CUIB__insertTableBehavior$get__outerDivs$p$1$in() {
        return this.get__insertTableControl$p$1().get_insertTableDom().outerDivs;
    },
    
    doDefaultAction: function CUIB__insertTableBehavior$doDefaultAction$in(elmTarget, inputMethod, e) {
        if (this.get_control().get_enabled()) {
            Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$1().Command), 4785879);
            var idx = this._getIndexFromElement$p$1(this._getCellOuterDiv$p$1(elmTarget));
            var column = this._getColFromIndex$p$1(idx);
            var row = this._getRowFromIndex$p$1(idx);
            this.get__commandProperties$p$1()[CommandUI.Controls.InsertTableCommandProperties.Rows] = row + 1;
            this.get__commandProperties$p$1()[CommandUI.Controls.InsertTableCommandProperties.Columns] = column + 1;
            this.get_root().executeCommand(this.get__properties$p$1().Command, this.get__commandProperties$p$1(), this.get_displayedComponent(), inputMethod, true, null, this.getTelemetryData(e));
        }
    },
    
    attachEvents: function CUIB__insertTableBehavior$attachEvents$in(componentDom) {
        Common.Debug.assertTag(CommandUI.Controls.InsertTableComponentDom.isInstanceOfType(componentDom), 4785880);
        var insertTableComponentDom = componentDom;
        var elmControl = insertTableComponentDom.elmControl;
        var cellATags = insertTableComponentDom.cellATags;
        var cells = insertTableComponentDom.cells;
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOut, elmControl, this.$$d__onControlPointerOut$p$1);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchMove, elmControl, this.$$d__onControlTouchMove$p$1);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchEnd, elmControl, this.$$d__onControlTouchEnd$p$1);
        Common.Debug.assertTag(cells.length === cellATags.length, 4785881);
        for (var i = 0; i < cells.length; ++i) {
            this._attachCellEvents$p$1(cellATags[i], cells[i]);
        }
    },
    
    _attachCellEvents$p$1: function CUIB__insertTableBehavior$_attachCellEvents$p$1$in(elmCellA, elmCell) {
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, elmCellA, this.$$d__onCellFocus$p$1);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOver, elmCell, this.$$d__onCellPointerOver$p$1);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerUp, elmCell, this.$$d__onCellPointerUp$p$1);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, elmCell, this.$$d_onKeyDown);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, elmCell, this.$$d_onKeyUp);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchStart, elmCell, this.$$d__onCellTouchStart$p$1);
    },
    
    _getIndexFromElement$p$1: function CUIB__insertTableBehavior$_getIndexFromElement$p$1$in(element) {
        return parseInt(element.id.substr(this.get__insertTableControl$p$1().get_id().length + 1));
    },
    
    _handleHighlightingTitle$p$1: function CUIB__insertTableBehavior$_handleHighlightingTitle$p$1$in(outerDiv) {
        this._handleHighlightingAndTitleForIndex$p$1(this._getIndexFromElement$p$1(outerDiv));
    },
    
    _getRowFromIndex$p$1: function CUIB__insertTableBehavior$_getRowFromIndex$p$1$in(idx) {
        return Math.floor(idx / CommandUI.Controls.InsertTable.numCols);
    },
    
    _getColFromIndex$p$1: function CUIB__insertTableBehavior$_getColFromIndex$p$1$in(idx) {
        return idx % CommandUI.Controls.InsertTable.numCols;
    },
    
    _handleHighlightingAndTitleForIndex$p$1: function CUIB__insertTableBehavior$_handleHighlightingAndTitleForIndex$p$1$in(idx) {
        if (idx !== this._oldIdx) {
            var column = this._getColFromIndex$p$1(idx);
            var row = this._getRowFromIndex$p$1(idx);
            var currRow = -1;
            var currCol = -1;
            if (this._oldIdx !== -1) {
                currRow = this._getRowFromIndex$p$1(this._oldIdx);
                currCol = this._getColFromIndex$p$1(this._oldIdx);
            }
            while (currRow !== row || currCol !== column) {
                if (currRow < row) {
                    this._setRowHighlighting$p$1(++currRow, currCol, true);
                }
                else if (currRow > row) {
                    this._setRowHighlighting$p$1(currRow, currCol, false);
                    currRow--;
                }
                else if (currCol < column) {
                    this._setColHighlighting$p$1(++currCol, currRow, true);
                }
                else if (currCol > column) {
                    this._setColHighlighting$p$1(currCol, currRow, false);
                    currCol--;
                }
            }
            if (this.get__hostMenuSection$p$1()) {
                this.get__hostMenuSection$p$1().setTitleImmediate(this._getCellTitle$p$1(row + 1, column + 1));
            }
            else {
                var ctrlComps = this.get_control().get_components();
                var firstComp = (ctrlComps && ctrlComps.length > 0) ? ctrlComps[0] : null;
                var dispComp = this.get_displayedComponent();
                Diag.ULS.sendTraceTag(19748692, 207, 15, 'Insert table menu is NULL. {0}', { CtrlComps: !!ctrlComps, FirstComp: !!firstComp, FirstCompPar: !!firstComp && !!firstComp.get_parent(), DispComp: !!dispComp, DispCompPar: !!dispComp && !!dispComp.get_parent() });
            }
            this._oldIdx = idx;
        }
    },
    
    _setRowHighlighting$p$1: function CUIB__insertTableBehavior$_setRowHighlighting$p$1$in(row, column, on) {
        for (var i = 0; i <= column; i++) {
            this._setCellHighlighting$p$1(row, i, on);
        }
    },
    
    _setColHighlighting$p$1: function CUIB__insertTableBehavior$_setColHighlighting$p$1$in(column, row, on) {
        for (var i = 0; i <= row; i++) {
            this._setCellHighlighting$p$1(i, column, on);
        }
    },
    
    _setCellHighlighting$p$1: function CUIB__insertTableBehavior$_setCellHighlighting$p$1$in(row, column, on) {
        var idx = row * CommandUI.Controls.InsertTable.numCols + column;
        var inner = this.get__innerDivs$p$1()[idx];
        var outer = this.get__outerDivs$p$1()[idx];
        if (on) {
            inner.className = 'cui-it-activeCell';
            outer.className = 'cui-it-activeCellOuter';
        }
        else {
            inner.className = 'cui-it-inactiveCell';
            outer.className = 'cui-it-inactiveCellOuter';
        }
    },
    
    _onCellPointerUp$p$1: function CUIB__insertTableBehavior$_onCellPointerUp$p$1$in(args) {
        this.doDefaultAction(args.get_sourceElement(), args.get_inputSource(), args.innerEvent);
        return true;
    },
    
    _getCellOuterDiv$p$1: function CUIB__insertTableBehavior$_getCellOuterDiv$p$1$in(elm) {
        while (elm.hasChildNodes()) {
            elm = elm.childNodes[0];
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(elm.tagName) || elm.tagName.toLowerCase() !== 'a') {
            return null;
        }
        return elm.parentNode.parentNode;
    },
    
    _setTitleOnAnchor$p$1: function CUIB__insertTableBehavior$_setTitleOnAnchor$p$1$in(elmOuterDiv) {
        var elm = elmOuterDiv.childNodes[0].childNodes[0];
        var idx = this._getIndexFromElement$p$1(elmOuterDiv);
        elm.title = this._getCellTitle$p$1(this._getRowFromIndex$p$1(idx) + 1, this._getColFromIndex$p$1(idx) + 1);
    },
    
    _getCellTitle$p$1: function CUIB__insertTableBehavior$_getCellTitle$p$1$in(row, column) {
        var title = this.get__properties$p$1().Alt;
        if (CommandUI.ScriptUtility.isNullOrUndefined(title)) {
            title = this.get__properties$p$1().MenuSectionTitle;
        }
        title = String.format(title, column.toString(), row.toString());
        return title;
    },
    
    _resetAll$p$1: function CUIB__insertTableBehavior$_resetAll$p$1$in() {
        if (this.get_displayedComponent()) {
            for (var i = 0; i < CommandUI.Controls.InsertTable.numCells; i++) {
                this.get__innerDivs$p$1()[i].className = 'cui-it-inactiveCell';
                this.get__outerDivs$p$1()[i].className = 'cui-it-inactiveCellOuter';
            }
            this._oldIdx = -1;
            var title = this.get__properties$p$1().MenuSectionInitialTitle;
            if (CommandUI.ScriptUtility.isNullOrUndefined(title)) {
                title = '';
            }
            this.get__hostMenuSection$p$1().setTitleImmediate(title);
        }
    },
    
    _onCellPointerOver$p$1: function CUIB__insertTableBehavior$_onCellPointerOver$p$1$in(args) {
        if (this.get_control().get_enabled()) {
            var cellOuterDiv = this._getCellOuterDiv$p$1(args.get_sourceElement());
            this._setFocusOnCell$p$1(cellOuterDiv);
            this._doCellHover$p$1(cellOuterDiv);
        }
        return false;
    },
    
    _doCellHover$p$1: function CUIB__insertTableBehavior$_doCellHover$p$1$in(cellOuterDiv) {
        this._setTitleOnAnchor$p$1(cellOuterDiv);
        this._handleHighlightingTitle$p$1(cellOuterDiv);
    },
    
    _onCellFocus$p$1: function CUIB__insertTableBehavior$_onCellFocus$p$1$in(args) {
        if (!this.get_control().get_enabled()) {
            return false;
        }
        var elmOuterDiv = this._getCellOuterDiv$p$1(args.get_sourceElement());
        this._setTitleOnAnchor$p$1(elmOuterDiv);
        this._handleHighlightingTitle$p$1(elmOuterDiv);
        return false;
    },
    
    _onControlPointerOut$p$1: function CUIB__insertTableBehavior$_onControlPointerOut$p$1$in(args) {
        if (!Common.WindowUtils.isPointInElement(this.get__insertTableControl$p$1().get_insertTableDom().elmControl, args.get_clientPoint())) {
            this._resetAll$p$1();
        }
        return false;
    },
    
    _onCellTouchStart$p$1: function CUIB__insertTableBehavior$_onCellTouchStart$p$1$in(args) {
        if (!this.get_control().get_enabled()) {
            return false;
        }
        var elmOuterDiv = this._getCellOuterDiv$p$1(args.get_sourceElement());
        this._doCellHover$p$1(elmOuterDiv);
        return true;
    },
    
    _onControlTouchMove$p$1: function CUIB__insertTableBehavior$_onControlTouchMove$p$1$in(args) {
        if (!this.get_control().get_enabled()) {
            return false;
        }
        var clientPoint = args.get_clientPoint();
        var element = Common.WindowUtils.getElementAtPoint(clientPoint);
        if (!element || element.tagName.toLowerCase() === 'table') {
            return false;
        }
        var elmOuterDiv = this._getCellOuterDiv$p$1(element);
        if (!elmOuterDiv) {
            this._resetAll$p$1();
        }
        else {
            this._doCellHover$p$1(elmOuterDiv);
        }
        return true;
    },
    
    _onControlTouchEnd$p$1: function CUIB__insertTableBehavior$_onControlTouchEnd$p$1$in(args) {
        if (!this.get_control().get_enabled()) {
            return false;
        }
        var clientPoint = args.get_clientPoint();
        var element = Common.WindowUtils.getElementAtPoint(clientPoint);
        if (!element || element.tagName.toLowerCase() === 'table') {
            this._resetAll$p$1();
            return true;
        }
        var elmOuterDiv = this._getCellOuterDiv$p$1(element);
        if (!elmOuterDiv) {
            this._resetAll$p$1();
        }
        else {
            this.doDefaultAction(elmOuterDiv, Common.InputManager.InputMethod.touch, args.innerEvent);
        }
        return true;
    },
    
    focusNext: function CUIB__insertTableBehavior$focusNext$in(direction) {
        var newIdx = CommandUI.Control.focusNextIndexInGrid(this._oldIdx, CommandUI.Controls.InsertTable.numCols, CommandUI.Controls.InsertTable.numCells, direction);
        Common.Debug.assertTag((newIdx >= 0) && (newIdx < CommandUI.Controls.InsertTable.numCells), 4785882);
        if (newIdx !== this._oldIdx) {
            this.get__innerDivs$p$1()[newIdx].firstChild.focus();
            this._handleHighlightingAndTitleForIndex$p$1(newIdx);
            return true;
        }
        this._resetAll$p$1();
        this._oldIdx = -1;
        return false;
    },
    
    setFocusOnControl: function CUIB__insertTableBehavior$setFocusOnControl$in() {
        var elmDivInner = this.get__innerDivs$p$1()[0];
        if (CommandUI.ScriptUtility.isNullOrUndefined(elmDivInner)) {
            Common.Debug.assertNotReachedStringTag('The div array for the insert table control should be full at this point when it is receiving the menu focus.  Why is it not?', 4785883);
            return false;
        }
        elmDivInner.firstChild.focus();
        return true;
    },
    
    _setFocusOnCell$p$1: function CUIB__insertTableBehavior$_setFocusOnCell$p$1$in(outerDiv) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(outerDiv)) {
            Common.Debug.assertNotReachedStringTag('The outerDiv argument is null when trying to focus on a cell in insert table control', 4785884);
            return false;
        }
        outerDiv.firstChild.firstChild.focus();
        return true;
    },
    
    onMenuClosed: function CUIB__insertTableBehavior$onMenuClosed$in() {
        this._resetAll$p$1();
    }
}


CUIB._jewelMenuLauncherBehavior = function CUIB__jewelMenuLauncherBehavior(menuLauncher) {
    CUIB._jewelMenuLauncherBehavior.initializeBase(this, [ menuLauncher ]);
}
CUIB._jewelMenuLauncherBehavior.prototype = {
    
    pollForStateAndUpdate: function CUIB__jewelMenuLauncherBehavior$pollForStateAndUpdate$in() {
        this.get_control().set_enabled(!!this.get_menu());
    },
    
    doDefaultAction: function CUIB__jewelMenuLauncherBehavior$doDefaultAction$in(elmTarget, inputMethod, e) {
        Common.AFrameworkApplication.get_theActionManager().processActionWithData(Common.CommonCommands.launchFileMenu, 2, inputMethod, this.getTelemetryData(e));
    }
}


CUIB.KeyMoveAdapter = function CUIB_KeyMoveAdapter(frameElement, keyInputManager, pointerInputManager) {
    this.$$d__pointerDownHandler$p$0 = Function.createDelegate(this, this._pointerDownHandler$p$0);
    this.$$d__keyEventHandler$i$0 = Function.createDelegate(this, this._keyEventHandler$i$0);
    this._frameElement$0 = frameElement;
    this._keyInputManager$0 = keyInputManager;
    this._pointerInputManager$0 = pointerInputManager;
    this._isRTL$0 = Common.AFrameworkApplication.get_isRtl();
}
CUIB.KeyMoveAdapter.prototype = {
    _target$0: null,
    _moveIcon$0: null,
    _startingPosition$0: null,
    _currentPosition$0: null,
    _shouldExit$0: false,
    _isRTL$0: false,
    _frameElement$0: null,
    _keyInputManager$0: null,
    _pointerInputManager$0: null,
    _$$pf_InMoveMode$p$0: false,
    
    get_inMoveMode: function CUIB_KeyMoveAdapter$get_inMoveMode$in() {
        return this._$$pf_InMoveMode$p$0;
    },
    
    set_inMoveMode: function CUIB_KeyMoveAdapter$set_inMoveMode$in(value) {
        this._$$pf_InMoveMode$p$0 = value;
        return value;
    },
    
    enterMoveMode: function CUIB_KeyMoveAdapter$enterMoveMode$in(moveElement) {
        if (!moveElement) {
            Diag.ULS.sendTraceTag(21516492, 201, 10, 'Cannot move null element');
            return;
        }
        this._target$0 = moveElement;
        this.set_inMoveMode(true);
        this._shouldExit$0 = false;
        this._keyInputManager$0.capture(this.$$d__keyEventHandler$i$0, null);
        this._pointerInputManager$0.registerHandler(Common.EventNames.pointerDown, this._frameElement$0, this.$$d__pointerDownHandler$p$0);
        if (!this._moveIcon$0) {
            this._createMoveIcon$p$0();
        }
        this._target$0.appendChild(this._moveIcon$0);
        this._initializeCurrentPosition$p$0();
    },
    
    exitMoveMode: function CUIB_KeyMoveAdapter$exitMoveMode$in() {
        this.set_inMoveMode(false);
        this._currentPosition$0 = null;
        this._startingPosition$0 = null;
        this._removeMoveIcon$p$0();
        this._releaseHandlers$p$0();
        this._target$0 = null;
    },
    
    _releaseHandlers$p$0: function CUIB_KeyMoveAdapter$_releaseHandlers$p$0$in() {
        this._keyInputManager$0.releaseCapture();
        this._pointerInputManager$0.unregisterHandler(Common.EventNames.pointerDown, this._frameElement$0, this.$$d__pointerDownHandler$p$0);
    },
    
    _initializeCurrentPosition$p$0: function CUIB_KeyMoveAdapter$_initializeCurrentPosition$p$0$in() {
        if (!this._target$0.style.left.endsWith('px') || !this._target$0.style.right.endsWith('px')) {
            var xPos = (this._isRTL$0) ? this._frameElement$0.offsetWidth - (this._target$0.offsetLeft + this._target$0.offsetWidth + Common.CssUtils.parseIntDefaultZero(this._target$0.style.marginRight)) : this._target$0.offsetLeft - Common.CssUtils.parseIntDefaultZero(this._target$0.style.marginLeft);
            var yPos = this._target$0.offsetTop - Common.CssUtils.parseIntDefaultZero(this._target$0.style.marginTop);
            this._setStylePosition$p$0(xPos, yPos);
            this._currentPosition$0 = new Sys.UI.Point(xPos, yPos);
        }
        else {
            this._currentPosition$0 = new Sys.UI.Point(Common.CssUtils.parseIntDefaultZero((this._isRTL$0) ? this._target$0.style.right : this._target$0.style.left), Common.CssUtils.parseIntDefaultZero(this._target$0.style.top));
        }
        this._startingPosition$0 = this._currentPosition$0;
    },
    
    _createMoveIcon$p$0: function CUIB_KeyMoveAdapter$_createMoveIcon$p$0$in() {
        this._moveIcon$0 = Common.ImageClusteringHelper.createClusteredImage(24, 24, 'ShapeQuadArrow_24x24x32', 'WACMoveArrowIcon', true, '');
    },
    
    _removeMoveIcon$p$0: function CUIB_KeyMoveAdapter$_removeMoveIcon$p$0$in() {
        if (this._moveIcon$0.parentNode === this._target$0) {
            this._target$0.removeChild(this._moveIcon$0);
        }
    },
    
    _keyEventHandler$i$0: function CUIB_KeyMoveAdapter$_keyEventHandler$i$0$in(e) {
        if (!this.get_inMoveMode()) {
            return false;
        }
        e.innerEvent.preventDefault();
        if (e.eventName === Common.EventNames.keyDown) {
            var incrementUnit = (e.innerEvent.ctrlKey) ? CUIB.KeyMoveAdapter._pixeL_SPEED_SLOW$p : CUIB.KeyMoveAdapter._pixeL_SPEED$p;
            var direction;
            switch (e.innerEvent.keyCode) {
                case Common.KeyCode.vK_UpArrow:
                    this._moveElement$p$0(0, -1 * incrementUnit);
                    break;
                case Common.KeyCode.vK_DownArrow:
                    this._moveElement$p$0(0, 1 * incrementUnit);
                    break;
                case Common.KeyCode.vK_LeftArrow:
                    direction = (this._isRTL$0) ? 1 : -1;
                    this._moveElement$p$0(direction * incrementUnit, 0);
                    break;
                case Common.KeyCode.vK_RightArrow:
                    direction = (this._isRTL$0) ? -1 : 1;
                    this._moveElement$p$0(direction * incrementUnit, 0);
                    break;
                case Common.KeyCode.vK_Esc:
                    this._moveElementTo$p$0(this._startingPosition$0.x, this._startingPosition$0.y);
                    this._shouldExit$0 = true;
                    break;
                case Common.KeyCode.vK_Enter:
                    this._shouldExit$0 = true;
                    break;
                default:
                    break;
            }
        }
        if (e.eventName === Common.EventNames.keyUp && this._shouldExit$0) {
            this.exitMoveMode();
        }
        return true;
    },
    
    _pointerDownHandler$p$0: function CUIB_KeyMoveAdapter$_pointerDownHandler$p$0$in(args) {
        if (!this.get_inMoveMode()) {
            return false;
        }
        args.innerEvent.preventDefault();
        this.exitMoveMode();
        return true;
    },
    
    _moveElement$p$0: function CUIB_KeyMoveAdapter$_moveElement$p$0$in(horizontalDelta, verticalDelta) {
        var newXPos = this._currentPosition$0.x + horizontalDelta;
        var newYPos = this._currentPosition$0.y + verticalDelta;
        this._moveElementTo$p$0(newXPos, newYPos);
    },
    
    _moveElementTo$p$0: function CUIB_KeyMoveAdapter$_moveElementTo$p$0$in(x, y) {
        var boundedPos = this.adjustPositionForAppFrameBounds(x, y);
        this._setStylePosition$p$0(boundedPos.x, boundedPos.y);
        this._currentPosition$0 = boundedPos;
    },
    
    _setStylePosition$p$0: function CUIB_KeyMoveAdapter$_setStylePosition$p$0$in(xPos, yPos) {
        if (this._isRTL$0) {
            this._target$0.style.right = xPos + 'px';
        }
        else {
            this._target$0.style.left = xPos + 'px';
        }
        this._target$0.style.top = yPos + 'px';
    },
    
    adjustPositionForAppFrameBounds: function CUIB_KeyMoveAdapter$adjustPositionForAppFrameBounds$in(x, y) {
        var targetMarginX = (this._isRTL$0) ? Common.CssUtils.parseIntDefaultZero(this._target$0.style.marginRight) : Common.CssUtils.parseIntDefaultZero(this._target$0.style.marginLeft);
        var maxX = this._frameElement$0.offsetWidth - this._target$0.offsetWidth - targetMarginX;
        var xPos = Math.min(Math.max(-targetMarginX, x), maxX);
        var targetMarginTop = Common.CssUtils.parseIntDefaultZero(this._target$0.style.marginTop);
        var maxTop = this._frameElement$0.offsetHeight - this._target$0.offsetHeight - targetMarginTop;
        var yPos = Math.min(Math.max(-targetMarginTop, y), maxTop);
        return new Sys.UI.Point(xPos, yPos);
    }
}


CUIB._labelBehavior = function CUIB__labelBehavior(label) {
    CUIB._labelBehavior.initializeBase(this, [ label ]);
}
CUIB._labelBehavior.prototype = {
    
    get__properties$p$1: function CUIB__labelBehavior$get__properties$p$1$in() {
        return this.get_control().get_controlProperties();
    },
    
    pollForStateAndUpdate: function CUIB__labelBehavior$pollForStateAndUpdate$in() {
        var result = this.pollForStateAndUpdateInternal(this.get__properties$p$1().Command, this.get__properties$p$1().QueryCommand, this.get_stateProperties());
        if ((result & 2) > 0) {
            var visible = this.updateVisibility();
            if (visible) {
                this._updateHtml$p$1();
            }
        }
    },
    
    _updateHtml$p$1: function CUIB__labelBehavior$_updateHtml$p$1$in() {
        this._updateTextForLabelControl$p$1();
        this.updateImage();
        this.updateTooltip();
    },
    
    _updateTextForLabelControl$p$1: function CUIB__labelBehavior$_updateTextForLabelControl$p$1$in() {
        var strInnerTextOld = this.get_control().get_labelText();
        var strInnerTextNew = this.get_stateProperties()[CommandUI.Controls.LabelCommandProperties.Value];
        if (CommandUI.ScriptUtility.isNullOrUndefined(strInnerTextNew)) {
            strInnerTextNew = this.get__properties$p$1().LabelText;
            if (CommandUI.ScriptUtility.isNullOrUndefined(strInnerTextNew)) {
                strInnerTextNew = '';
            }
        }
        if (strInnerTextNew !== strInnerTextOld) {
            this.setLabelText(strInnerTextNew);
        }
    },
    
    attachEvents: function CUIB__labelBehavior$attachEvents$in(componentDom) {
        var label = componentDom.elmControl;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(label)) {
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, label, this.$$d_onPointerDown);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOver, label, this.$$d__onPointerOver$i$0);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOut, label, this.$$d__onPointerOut$i$0);
        }
    }
}


CUIB._menuLauncherBehavior = function CUIB__menuLauncherBehavior(menuLauncher) {
    this.$$d__addAndPositionBackFrameInternal$p$1 = Function.createDelegate(this, this._addAndPositionBackFrameInternal$p$1);
    this.$$d__afterShowMenu$p$1 = Function.createDelegate(this, this._afterShowMenu$p$1);
    this.$$d_refreshMenuCallback = Function.createDelegate(this, this.refreshMenuCallback);
    this._pendingBackFrameTimeoutId$1 = -1;
    CUIB._menuLauncherBehavior.initializeBase(this, [ menuLauncher ]);
    this.set__menuPositioner$i$1(new CUIB._menuPositioner(!this.get_root().get_textDirection(), CommandUI.Utility.isTrue(this.get_root().get_properties().DivSyndicated)));
}
CUIB._menuLauncherBehavior._createHiddenIframeElement$p = function CUIB__menuLauncherBehavior$_createHiddenIframeElement$p$st() {
    var elmFrame = CommandUI.Utility.createElement('iframe');
    elmFrame.style.position = 'absolute';
    elmFrame.style.visibility = 'hidden';
    elmFrame.style.borderWidth = '0px';
    return elmFrame;
}
CUIB._menuLauncherBehavior.prototype = {
    _$$pf_MenuPositioner$p$1: null,
    
    get__menuPositioner$i$1: function CUIB__menuLauncherBehavior$get__menuPositioner$i$1$in() {
        return this._$$pf_MenuPositioner$p$1;
    },
    
    set__menuPositioner$i$1: function CUIB__menuLauncherBehavior$set__menuPositioner$i$1$in(value) {
        this._$$pf_MenuPositioner$p$1 = value;
        return value;
    },
    
    _menuInvocationMethod$1: 0,
    _lastDynamicPopulationXml$1: null,
    _elmBackFrame$1: null,
    _hasAsyncCallbackBeenSentToHandler$1: false,
    
    get_menuLauncher: function CUIB__menuLauncherBehavior$get_menuLauncher$in() {
        return this.get_control();
    },
    
    get__properties$p$1: function CUIB__menuLauncherBehavior$get__properties$p$1$in() {
        return this.get_control().get_controlProperties();
    },
    
    get_menu: function CUIB__menuLauncherBehavior$get_menu$in() {
        return this.get_menuLauncher().get_menu();
    },
    
    set_menu: function CUIB__menuLauncherBehavior$set_menu$in(value) {
        this.get_menuLauncher().set_menu(value);
        return value;
    },
    
    get_menuLaunched: function CUIB__menuLauncherBehavior$get_menuLaunched$in() {
        return this.get_menuLauncher().get_menuLaunched();
    },
    
    set_menuLaunched: function CUIB__menuLauncherBehavior$set_menuLaunched$in(value) {
        this.get_menuLauncher().set_menuLaunched(value);
        return value;
    },
    
    get__backFrame$p$1: function CUIB__menuLauncherBehavior$get__backFrame$p$1$in() {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this._elmBackFrame$1)) {
            this._elmBackFrame$1 = CUIB._menuLauncherBehavior._createHiddenIframeElement$p();
        }
        return this._elmBackFrame$1;
    },
    
    _$$pf_PolledOnce$p$1: false,
    
    get__polledOnce$p$1: function CUIB__menuLauncherBehavior$get__polledOnce$p$1$in() {
        return this._$$pf_PolledOnce$p$1;
    },
    
    set__polledOnce$p$1: function CUIB__menuLauncherBehavior$set__polledOnce$p$1$in(value) {
        this._$$pf_PolledOnce$p$1 = value;
        return value;
    },
    
    get__shouldRestoreFocusToApp$i$1: function CUIB__menuLauncherBehavior$get__shouldRestoreFocusToApp$i$1$in() {
        var restoreFocusToApp = !this.get_root().get_inModalMode();
        if ((CommandUI.IFloatie.isInstanceOfType(this.get_root())) && (this.get_root().get_menuStackDepth() === 1)) {
            restoreFocusToApp = true;
        }
        return restoreFocusToApp;
    },
    
    doDefaultAction: function CUIB__menuLauncherBehavior$doDefaultAction$in(elmTarget, inputMethod, e) {
        if (CommandUI.IFloatie.isInstanceOfType(this.get_root())) {
            (this.get_root()).ensureContextMenuDismissed();
        }
        this.get_menuLauncher().launchMenu(inputMethod);
    },
    
    launchMenu: function CUIB__menuLauncherBehavior$launchMenu$in(inputMethod) {
        if (!this.get_menuLauncher().get_enabled() || this.get_menuLaunched()) {
            return;
        }
        var activity = Common.ActivityManager.get_instance().startActivity(Common.CommonCommands.launchMenu, -1);
        activity.get_properties().add('Id', this.get_menuLauncher().get_controlProperties().Id);
        activity.get_properties().add('InputMethod', Common.InputManager.InputMethod.toString(inputMethod));
        activity.end();
        Common.PerfMetrics.mark(10326);
        Common.WindowUtils.measureTimeToNextFrame(this.get_menuLauncher().get_controlProperties().Id, 'MenuOpen');
        if (this.get_menuLauncher().get_focusableElement()) {
            this.get_menuLauncher().set_elmHadFocus(Common.WindowUtils.getActiveElement(this.get_menuLauncher().get_focusableElement().ownerDocument));
        }
        this._menuInvocationMethod$1 = inputMethod;
        this._populateAndPositionMenu$p$1(inputMethod, false);
        this.sendNotifyAsyncMenuTrigger();
        this.get_menuLauncher().updateAriaMenuLauncherAttributes(this.get_menuLauncher().get_focusableElement(), true);
    },
    
    sendNotifyAsyncMenuTrigger: function CUIB__menuLauncherBehavior$sendNotifyAsyncMenuTrigger$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get__properties$p$1().PopulateAsyncTriggerCommand) && !this._hasAsyncCallbackBeenSentToHandler$1) {
            Common.Debug.assertStringTag(CommandUI.Utility.isTrue(this.get__properties$p$1().PopulateDynamically), 'If a PopulateAsyncTriggerCommand is specified, PopulateDynamically must be set to true.', 4781008);
            this._notifyAsyncMenuTrigger$p$1();
            this._hasAsyncCallbackBeenSentToHandler$1 = true;
        }
    },
    
    _notifyAsyncMenuTrigger$p$1: function CUIB__menuLauncherBehavior$_notifyAsyncMenuTrigger$p$1$in() {
        var props = {};
        props[Common.MenuLauncherAsyncTriggerCommandProperties.Callback] = this.$$d_refreshMenuCallback;
        this.get_root().executeCommand(this.get__properties$p$1().PopulateAsyncTriggerCommand, props, this.get_displayedComponent(), 0, false, null, null);
    },
    
    refreshMenuCallback: function CUIB__menuLauncherBehavior$refreshMenuCallback$in() {
        this.get_menuLauncher().refreshMenu();
    },
    
    refreshMenu: function CUIB__menuLauncherBehavior$refreshMenu$in() {
        if (this.get_menuLaunched()) {
            this._populateAndPositionMenu$p$1(this._menuInvocationMethod$1, true);
        }
    },
    
    _populateAndPositionMenu$p$1: function CUIB__menuLauncherBehavior$_populateAndPositionMenu$p$1$in(inputMethod, isRefresh) {
        var initializeMenu = true;
        if (CommandUI.Utility.isTrue(this.get__properties$p$1().PopulateDynamically)) {
            var newMenuPopulated = false;
            var populationXml = this.pollForDynamicMenu(inputMethod);
            var menuChange = populationXml !== this._lastDynamicPopulationXml$1;
            if (menuChange) {
                newMenuPopulated = this.populateMenuFromXml(populationXml, isRefresh);
            }
            initializeMenu = newMenuPopulated || !this.get_menuLaunched();
        }
        if (initializeMenu) {
            var StopwatchBuilder = Common.AFrameworkApplication.get_activeFrame().get_theStopwatchBuilder();
            var stopwatchForMenuInitialization = null;
            if (StopwatchBuilder) {
                stopwatchForMenuInitialization = StopwatchBuilder.makeAndStartStopwatch('LoadResource', 'Menu Initialization');
            }
            this._initializeMenu$p$1(inputMethod);
            if (stopwatchForMenuInitialization) {
                stopwatchForMenuInitialization.stop();
            }
            this.onMenuChanged();
        }
    },
    
    _initializeMenu$p$1: function CUIB__menuLauncherBehavior$_initializeMenu$p$1$in(inputMethod) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get_menu())) {
            Common.PerfMetrics.mark(10327);
            return;
        }
        if (this.get_menuLauncher().get_parentKeytipsIds()) {
            var launcherComponent = this.get_menuLauncher().get_displayedComponent();
            if (launcherComponent && launcherComponent.get_keytip()) {
                var key = launcherComponent.get_keytip().get_key().toLocaleLowerCase();
                this.get_menu().setParentKeytipsIdsForMenuItems(String.format('{0} {1}', this.get_menuLauncher().get_parentKeytipsIds(), launcherComponent.get_keytip().get_elementId()), (this.get_menuLauncher().get_parentKeytipsKeys() && this.get_menuLauncher().get_parentKeytipsKeys() !== '') ? String.format('{0}-{1}', this.get_menuLauncher().get_parentKeytipsKeys(), key) : key);
            }
        }
        this.get_menu().ensureRefreshed();
        CommandUI.Utility.ensureCSSClassOnElement(this.get_menu().get_elementInternal(), this.get_menuLauncher().get_additionalMenuCssClass());
        var touchMode = (inputMethod === Common.InputManager.InputMethod.touch) || this.get_root().get_touchModeForcedOn();
        CommandUI.Utility.toggleCSSClassOnElement(this.get_menu().get_elementInternal(), 'cui-touch', touchMode);
        if (!this.get_menu().hasItems()) {
            Common.PerfMetrics.mark(10327);
            return;
        }
        this.get_menu().attachEvents();
        var comp = this.get_displayedComponent();
        comp.ensureChildren();
        comp.set_ignoreDirtyingEvents(true);
        comp.addChild(this.get_menu());
        comp.set_ignoreDirtyingEvents(false);
        this.get_menu().pollIfRootPolledSinceLastPoll();
        var isInScalableRoot = CommandUI.ScalableRoot.isInstanceOfType(this.get_root());
        var scalableRoot = null;
        var oldElementResizedHandlerEnabled = false;
        if (isInScalableRoot) {
            scalableRoot = this.get_root();
            oldElementResizedHandlerEnabled = scalableRoot.get_shouldHandleElementResize();
            scalableRoot.set_shouldHandleElementResize(false);
        }
        var menuElement = this.get_menu().get_elementInternal();
        menuElement.style.visibility = 'hidden';
        menuElement.style.position = 'absolute';
        menuElement.style.top = '0px';
        menuElement.style.left = '0px';
        if (Common.BrowserUtils.get_isInternetExplorerNonEdge() && !Common.BrowserUtils.get_isInternetExplorer9Up()) {
            menuElement.style.maxHeight = '100px';
            menuElement.style.overflowY = 'scroll';
        }
        document.body.appendChild(menuElement);
        this._adjustMenuLayout$p$1();
        this._positionMenu$p$1(menuElement);
        if (Sys.Browser.agent === Sys.Browser.InternetExplorer) {
            this._addAndPositionBackFrame$p$1();
        }
        CommandUI.Utility.ensureCSSClassOnElement(this.get_menuLauncher().get_launcher(), CommandUI.MenuLauncher.menuDroppedClassName);
        var menuStackDepth = this.get_root().get_menuStackDepth();
        if (this.get__shouldGoModal$p$1()) {
            this.get_root().beginModal(this.get_control(), true, false);
        }
        menuElement.style.zIndex = Common.AFrameworkApplication.get_activeFrame().get_activeModalUIZIndex();
        this.get_root().addMenuLauncherToStack(this.get_menuLauncher());
        this.get_menu().set_stackIndex(menuStackDepth);
        menuElement.style.visibility = 'visible';
        var hideElements = this._getChildElementsToAnimate$p$1();
        if (CommandUI.JewelSubMenu.isInstanceOfType(this.get_menu())) {
            menuElement.style.position = 'fixed';
            var jewelMenuLauncher = this.get_root().get_menuLauncherStack()[0];
            if (!jewelMenuLauncher || !jewelMenuLauncher.get_menu() || !jewelMenuLauncher.get_menu().get_elementInternal()) {
                Common.Debug.assertNotReachedTag(4781009);
                Common.CommonAnimator.showMenu(menuElement, hideElements, this.$$d__afterShowMenu$p$1);
            }
            else if (Common.WindowUtils.getOpacity((this.get_root().get_menuLauncherStack()[0]).get_menu().get_elementInternal()) !== 100) {
                Common.CommonAnimator.showMenu(menuElement, hideElements, this.$$d__afterShowMenu$p$1);
            }
        }
        else {
            Common.CommonAnimator.showMenu(menuElement, hideElements, this.$$d__afterShowMenu$p$1);
        }
        this.set_menuLaunched(true);
        this.get_menu().set_launched(true);
        if (!Common.BrowserUtils.get_isIPad() && this.get_menuLauncher().get_sendFocusToMenuDrop()) {
            this.get_menu().setFocus(inputMethod);
        }
        if (isInScalableRoot) {
            scalableRoot.set_shouldHandleElementResize(oldElementResizedHandlerEnabled);
        }
        var commandMenuOpen = this.get__properties$p$1().CommandMenuOpen;
        if (!CommandUI.ScriptUtility.isNullOrEmptyString(commandMenuOpen)) {
            this.get_root().executeCommand(commandMenuOpen, null, comp, inputMethod, false, null, null);
        }
        Common.PerfMetrics.mark(10327);
    },
    
    onMenuChanged: function CUIB__menuLauncherBehavior$onMenuChanged$in() {
    },
    
    _addAndPositionBackFrame$p$1: function CUIB__menuLauncherBehavior$_addAndPositionBackFrame$p$1$in() {
        var $$t_0;
        CommandUI.Utility.cancelPendingTimeout(($$t_0 = {'val': this._pendingBackFrameTimeoutId$1})), this._pendingBackFrameTimeoutId$1 = $$t_0.val;
        this._pendingBackFrameTimeoutId$1 = window.setTimeout(this.$$d__addAndPositionBackFrameInternal$p$1, 50);
    },
    
    _addAndPositionBackFrameInternal$p$1: function CUIB__menuLauncherBehavior$_addAndPositionBackFrameInternal$p$1$in() {
        if (this.get_menu() && this.get_menu().get_elementInternal()) {
            document.body.appendChild(this.get__backFrame$p$1());
            this._positionBackFrame$p$1();
        }
    },
    
    _positionBackFrame$p$1: function CUIB__menuLauncherBehavior$_positionBackFrame$p$1$in() {
        var elmBackFrame = this.get__backFrame$p$1();
        var elmFlyout = this.get_menu().get_elementInternal();
        elmBackFrame.style.position = 'absolute';
        elmBackFrame.style.visibility = 'hidden';
        elmBackFrame.style.left = elmFlyout.style.left;
        elmBackFrame.style.right = elmFlyout.style.right;
        elmBackFrame.style.top = elmFlyout.style.top;
        elmBackFrame.style.bottom = elmFlyout.style.bottom;
        var realWidth = elmFlyout.offsetWidth;
        var realHeight = elmFlyout.offsetHeight;
        if (Common.BrowserUtils.get_isInternetExplorer9Up()) {
            realWidth -= 4;
            realHeight -= 4;
        }
        elmBackFrame.style.width = realWidth.toString() + 'px';
        elmBackFrame.style.height = realHeight.toString() + 'px';
        elmBackFrame.style.visibility = 'visible';
    },
    
    get__shouldGoModal$p$1: function CUIB__menuLauncherBehavior$get__shouldGoModal$p$1$in() {
        if (!this.get_root().get_menuStackDepth()) {
            return true;
        }
        return false;
    },
    
    _afterShowMenu$p$1: function CUIB__menuLauncherBehavior$_afterShowMenu$p$1$in(args) {
        if (args.get_element()) {
            args.get_element().style.filter = '';
            args.get_element().style.opacity = '';
            if (this.get_menu() && this.get_menu().get_elementInternal() === args.get_element() && CommandUI.JewelMenu.isInstanceOfType(this.get_menu())) {
                Common.CommonAnimator.animateJewelMenuContents(this.get_menu().get_elementInternal(), this._getChildElementsToAnimate$p$1());
            }
        }
    },
    
    _getChildElementsToAnimate$p$1: function CUIB__menuLauncherBehavior$_getChildElementsToAnimate$p$1$in() {
        var sections = this.get_menu().get_children();
        var hideElements = [];
        if (CommandUI.JewelMenu.isInstanceOfType(this.get_menu())) {
            for (var iSection = 0; iSection < sections.get_count(); iSection++) {
                var ms = sections.get_item(iSection);
                Array.add(hideElements, ms.get_separator());
                for (var iMenuItem = 0; iMenuItem < ms.get_children().get_count(); iMenuItem++) {
                    var mi = ms.get_children().get_item(iMenuItem);
                    Array.add(hideElements, mi.get_elementInternal());
                }
            }
        }
        return hideElements;
    },
    
    _adjustMenuLayout$p$1: function CUIB__menuLauncherBehavior$_adjustMenuLayout$p$1$in() {
        var sections = this.get_menu().get_children();
        for (var iSection = 0; iSection < sections.get_count(); iSection++) {
            var section = sections.get_item(iSection);
            var components = section.get_children();
            for (var iComponent = 0; iComponent < components.get_count(); iComponent++) {
                var component = components.get_item(iComponent);
                if (CommandUI.MenuItem.isInstanceOfType(component)) {
                    var item = component;
                    if ((item.get_displayMode() === 'Menu32') || (item.get_displayMode() === 'Menu48')) {
                        var control = (component).get_control();
                        if (control.get_behavior() && (CommandUI.Controls.Button.isInstanceOfType(control) || CommandUI.Controls.ToggleButton.isInstanceOfType(control))) {
                            control.get_behavior().adjustLayoutForLargeMenu();
                        }
                    }
                }
            }
        }
        if (sections.get_count() > 0) {
            var firstSection = sections.get_item(0);
            if (!CommandUI.ScriptUtility.isNullOrUndefined(firstSection.get_separator())) {
                firstSection.get_separator().style.display = 'none';
            }
            if (!CommandUI.ScriptUtility.isNullOrUndefined(firstSection.get_titleElement())) {
                CommandUI.Utility.ensureCSSClassOnElement(firstSection.get_titleElement(), 'cui-menusection-titleAtTop');
            }
        }
    },
    
    _positionMenu$p$1: function CUIB__menuLauncherBehavior$_positionMenu$p$1$in(menu) {
        if (CommandUI.ScriptUtility.isNullOrUndefined(menu)) {
            Common.Debug.assertNotReachedStringTag('Invalidly attempting to position a menu!', 4781010);
            return;
        }
        menu.style.top = '0px';
        menu.style.left = '0px';
        menu.style.bottom = '';
        menu.style.right = '';
        menu.style.width = '';
        menu.style.minWidth = '';
        var $$disposable_1 = Common.CssFloatMetricsActivator.create();
        try {
            var dimensions = this.get__menuPositioner$i$1()._getDimensionsForMenu$i$0(menu);
            var launcherBounds = this.getLauncherBounds();
            var menuPositioningInfo = this.get_root().setFlyoutCoordinates(menu, dimensions, this.get_menuLauncher().get_menuDirection(), launcherBounds);
            if (!menuPositioningInfo) {
                menuPositioningInfo = this.get__menuPositioner$i$1().setFlyoutCoordinates(menu, dimensions, this.get_menuLauncher().get_menuDirection(), launcherBounds);
            }
            this.get_root().menuPositioningInfo = menuPositioningInfo;
        }
        finally {
            if ($$disposable_1) {
                $$disposable_1.dispose();
            }
        }
    },
    
    getLauncherBounds: function CUIB__menuLauncherBehavior$getLauncherBounds$in() {
        var launcherBounds = Common.WindowUtils.getElementBounds(this.get_menuLauncher().get_launcher());
        var parentMenu = this.get_parentMenu();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(parentMenu) && !CommandUI.ScriptUtility.isNullOrUndefined(parentMenu.get_elementInternal())) {
            var parentMenuBounds = Common.WindowUtils.getElementBounds(parentMenu.get_elementInternal());
            launcherBounds.x = parentMenuBounds.x + CommandUI.Menu.menuBorderPx;
            launcherBounds.width = parentMenuBounds.width - (CommandUI.Menu.menuBorderPx * 2);
        }
        if (CommandUI.Section.isInstanceOfType(this.get_menuLauncher().get_launcherComponent())) {
            launcherBounds.height = 0;
        }
        return launcherBounds;
    },
    
    closeMenu: function CUIB__menuLauncherBehavior$closeMenu$in() {
        if (!this.get_menuLauncher().get_menuLaunched()) {
            return;
        }
        Diag.ULS.sendTraceTag(6688860, 207, 50, 'Menu closing {0}', { Id: this.get_menuLauncher().get_controlProperties().Id });
        this.get_menu().onMenuClosed();
        this._removeMenuFromHierarchy$i$1();
        this.set_menuLaunched(false);
        this.get_menu().set_launched(false);
        this.get_root().endModal(this.get_control(), true, false);
        if (!this.get__shouldRestoreFocusToApp$i$1()) {
            this._restoreFocusToElmHadFocus$p$1();
        }
        else {
            Common.AFrameworkApplication.get_activeFrame().restoreFocusAfterDismissingPopup(this.get_menuLauncher().get_elmHadFocus(), this._menuInvocationMethod$1);
        }
        this.get_menuLauncher().set_elmHadFocus(null);
        var launcher = this.get_menuLauncher().get_launcher();
        CommandUI.Utility.removeCSSClassFromElement(launcher, CommandUI.MenuLauncher.menuDroppedClassName);
        this.get_menuLauncher().updateAriaMenuLauncherAttributes(this.get_menuLauncher().get_focusableElement(), false);
        CommandUI.Utility.removeCSSClassFromElement(launcher, 'cui-ctl-menu-hovered-without-focus');
        this.get_menu().resetFocusedIndex();
        var commandMenuClose = this.get__properties$p$1().CommandMenuClose;
        if (!CommandUI.ScriptUtility.isNullOrEmptyString(commandMenuClose)) {
            this.get_root().executeCommand(this.get__properties$p$1().CommandMenuClose, null, this.get_displayedComponent(), 0, false, null, null);
        }
        this._removeMenuFromDom$p$1();
    },
    
    _restoreFocusToElmHadFocus$p$1: function CUIB__menuLauncherBehavior$_restoreFocusToElmHadFocus$p$1$in() {
        var elmHadFocus = this.get_menuLauncher().get_elmHadFocus();
        if (!elmHadFocus) {
            Common.Debug.log('CloseMenu can\'t restore focus, elm null', Common.DebugLogCategory.ribbon, Common.LogLevel.warning);
        }
        else {
            try {
                elmHadFocus.focus();
            }
            catch (e) {
                Common.Debug.log('CloseMenu can\'t restore focus, exception: ' + e, Common.DebugLogCategory.ribbon, Common.LogLevel.warning);
            }
        }
    },
    
    _removeMenuFromDom$p$1: function CUIB__menuLauncherBehavior$_removeMenuFromDom$p$1$in() {
        Common.DomUtils.removeElement(this.get_menu().get_elementInternal());
        Common.DomUtils.removeElement(this._elmBackFrame$1);
        CommandUI.Utility.unregisterAllHandlers(this.get_menu().get_elementInternal());
    },
    
    pollForDynamicMenu: function CUIB__menuLauncherBehavior$pollForDynamicMenu$in(inputMethod) {
        if (this.get__polledOnce$p$1() && CommandUI.Utility.isTrue(this.get__properties$p$1().PopulateOnlyOnce)) {
            return null;
        }
        if (CommandUI.ScriptUtility.isNullOrUndefined(this.get__properties$p$1().PopulateQueryCommand)) {
            return null;
        }
        if (isNullOrUndefined(inputMethod)) {
            inputMethod = 0;
        }
        var props = this.get_menuLauncher().getCommandPopulateProperties();
        var result = this.get_root().pollForCommandState(this.get__properties$p$1().PopulateQueryCommand, this.get__properties$p$1().PopulateQueryCommand, props, inputMethod);
        if ((result & 1) > 0) {
            return props.PopulationXML;
        }
        return null;
    },
    
    populateMenuFromXml: function CUIB__menuLauncherBehavior$populateMenuFromXml$in(populationXml, isRefresh) {
        if (this.get__polledOnce$p$1() && CommandUI.Utility.isTrue(this.get__properties$p$1().PopulateOnlyOnce)) {
            return true;
        }
        var menu = null;
        this._lastDynamicPopulationXml$1 = populationXml;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(populationXml)) {
            menu = this._createMenuFromXml$p$1(populationXml);
        }
        if (!CommandUI.ScriptUtility.isNullOrUndefined(menu)) {
            this.set__polledOnce$p$1(true);
        }
        if (isRefresh) {
            this.get_root().clearMenuStack(this.get_menuLauncher());
            if (CommandUI.ScriptUtility.isNullOrUndefined(menu) || !menu.hasItems()) {
                this.closeMenu();
                return false;
            }
            this._removeMenuFromHierarchy$i$1();
            this._removeMenuFromDom$p$1();
        }
        this._setMenu$p$1(menu);
        return true;
    },
    
    onDynamicMenuPopulated: function CUIB__menuLauncherBehavior$onDynamicMenuPopulated$in() {
    },
    
    _createMenuFromXml$p$1: function CUIB__menuLauncherBehavior$_createMenuFromXml$p$1$in(populationXml) {
        var data = CommandUI.Builder.convertXMLStringToJSON(populationXml);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(data)) {
            var mbc = new CommandUI.MenuBuildContext();
            mbc.cloneControlsForMenu = true;
            mbc.parentId = this.get_control().get_id();
            var isComboBox = false;
            isComboBox = CommandUI.Controls.ComboBox.isInstanceOfType(this.get_control());
            return this.get_root().get_builder().buildMenu(data, mbc, isComboBox);
        }
        return null;
    },
    
    _setMenu$p$1: function CUIB__menuLauncherBehavior$_setMenu$p$1$in(menu) {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(menu)) {
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_menu())) {
                this.get_menu().dispose();
            }
            this.set_menu(menu);
            this.onDynamicMenuPopulated();
        }
    },
    
    _removeMenuFromHierarchy$i$1: function CUIB__menuLauncherBehavior$_removeMenuFromHierarchy$i$1$in() {
        var parent = this.get_menu().get_parent();
        parent.set_ignoreDirtyingEvents(true);
        parent.removeChild(this.get_menu().get_id());
        parent.set_ignoreDirtyingEvents(false);
    },
    
    onKeyDown: function CUIB__menuLauncherBehavior$onKeyDown$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            if (!(CommandUI.MenuItem.isInstanceOfType(this.get_displayedComponent()))) {
                var keyEvt = args.innerEvent.rawEvent;
                if (keyEvt.altKey && (args.innerEvent.keyCode === Sys.UI.Key.down)) {
                    this.doDefaultAction(args.get_sourceElement(), Common.InputManager.InputMethod.keyboard, args.innerEvent);
                    handled = true;
                }
            }
        }
        if (!handled) {
            handled = CUIB.ControlBehavior.prototype.onKeyDown.call(this, args);
        }
        return handled;
    },
    
    onPointerDown: function CUIB__menuLauncherBehavior$onPointerDown$in(args) {
        this.commitRootPendingChanges();
        if (args.get_inputSource() !== Common.InputManager.InputMethod.mouse || !args.get_mouseButton()) {
            this.doDefaultAction(args.get_sourceElement(), args.get_inputSource(), args.innerEvent);
        }
        args.innerEvent.preventDefault();
        return false;
    },
    
    handleDefaultActionWithKeytips: function CUIB__menuLauncherBehavior$handleDefaultActionWithKeytips$in(args) {
        if (!this.get_parentMenu() || !this.get_parentMenu().get_inKeytipMode() || !this.get_menuLauncher().get_onMenuLaunchCallback()) {
            return false;
        }
        this.get_menuLauncher().get_onMenuLaunchCallback()(this.get_displayedComponent(), args);
        return true;
    }
}


CUIB._searchBoxBehavior = function CUIB__searchBoxBehavior(searchBox) {
    CUIB._searchBoxBehavior.initializeBase(this, [ searchBox ]);
    this._isRedesignFlightEnabled$2 = Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('TellMeRedesignIsEnabled');
    if (this._isRedesignFlightEnabled$2) {
        this._activeIconClass$2 = this.get__searchBox$p$2().get_sbProperties().LightImage16by16Class;
        this._inactiveIconClass$2 = this.get__searchBox$p$2().get_sbProperties().DarkImage16by16Class;
    }
}
CUIB._searchBoxBehavior.prototype = {
    _closingMenu$2: false,
    _inActiveInteraction$2: false,
    _isRedesignFlightEnabled$2: false,
    _activeIconClass$2: null,
    _inactiveIconClass$2: null,
    
    get__searchBox$p$2: function CUIB__searchBoxBehavior$get__searchBox$p$2$in() {
        return this.get_control();
    },
    
    notifyCommandExecuted: function CUIB__searchBoxBehavior$notifyCommandExecuted$in(source, closeAllMenus, topLevelElement, commandName) {
        if (closeAllMenus) {
            this.get__searchBox$p$2().set_elmHadFocus(topLevelElement);
            Common.AFrameworkApplication.get_activeFrame().setFocusOnDocument();
        }
        if (!(CommandUI.ControlComponent.isInstanceOfType(source))) {
            return;
        }
        if (commandName) {
            var sqmInfo = new Common.CommandSqmInfo();
            sqmInfo.CommandLocation = this.get_root().get_rootType();
            sqmInfo.InvocationMethod = 0;
            var properties = {};
            var control = (source).get_control();
            if (control && control.get_controlProperties()) {
                properties.CommandId = control.get_controlProperties().Command;
                properties.ControlId = control.get_controlProperties().Id;
                properties.CloseAllMenus = closeAllMenus;
                if (control.get_parentMenu() && control.get_parentMenu().get_parent() && control.get_parentMenu().get_parent().get_id()) {
                    var parentLongId = control.get_parentMenu().get_parent().get_id();
                    properties.ParentControlId = parentLongId.split('-')[0];
                }
                if (this.get_root().get_rootUser()) {
                    this.get_root().get_rootUser().executeRootCommand(commandName, properties, sqmInfo, null, null);
                }
            }
        }
    },
    
    closeMenu: function CUIB__searchBoxBehavior$closeMenu$in() {
        if (!this.get__searchBox$p$2().get_elmHadFocus()) {
            this.get__searchBox$p$2().set_elmHadFocus(this.get__searchBox$p$2().get_inputField());
        }
        if (!this.get__searchBox$p$2().get_mouseIsOver()) {
            if (this._isRedesignFlightEnabled$2) {
                CommandUI.Utility.removeCSSClassFromElement(this.get__searchBox$p$2().get_inputField(), 'cui-sb-focus');
                CommandUI.Utility.removeCSSClassFromElement(this.get__searchBox$p$2().get_topLevelElement(), 'cui-sb-focus');
                CommandUI.Utility.removeCSSClassFromElement(this.get__searchBox$p$2().searchIcon, this._activeIconClass$2);
                CommandUI.Utility.ensureCSSClassOnElement(this.get__searchBox$p$2().searchIcon, this._inactiveIconClass$2);
            }
        }
        this._closingMenu$2 = true;
        CUIB._menuLauncherBehavior.prototype.closeMenu.call(this);
        this._closingMenu$2 = false;
        this.raiseInteractionEnd();
    },
    
    get__shouldRestoreFocusToApp$i$1: function CUIB__searchBoxBehavior$get__shouldRestoreFocusToApp$i$1$in() {
        return !this.get__searchBox$p$2().get_processingKeystroke();
    },
    
    onMenuChanged: function CUIB__searchBoxBehavior$onMenuChanged$in() {
        this.get__searchBox$p$2().onMenuChanged();
    },
    
    raiseInteractionBegin: function CUIB__searchBoxBehavior$raiseInteractionBegin$in() {
        if (!this._inActiveInteraction$2 && !this._closingMenu$2) {
            this._inActiveInteraction$2 = true;
            this.get__searchBox$p$2().raiseEvent(CommandUI.Controls.SearchBox.EventKeys.interactionBegin, null);
        }
    },
    
    raiseInteractionEnd: function CUIB__searchBoxBehavior$raiseInteractionEnd$in() {
        if (!this.get_menuLaunched() && !this.get__searchBox$p$2().get_inputHasFocus()) {
            this._inActiveInteraction$2 = false;
            this.get__searchBox$p$2().raiseEvent(CommandUI.Controls.SearchBox.EventKeys.interactionEnd, null);
        }
    },
    
    onInputBoxBlur: function CUIB__searchBoxBehavior$onInputBoxBlur$in(args) {
        CommandUI.Utility.removeCSSClassFromElement(this.get__searchBox$p$2().get_inputField(), 'cui-sb-focus');
        CommandUI.Utility.removeCSSClassFromElement(this.get__searchBox$p$2().get_topLevelElement(), 'cui-sb-focus');
        if (this._isRedesignFlightEnabled$2 && !this.get__searchBox$p$2().get_menuLaunched()) {
            CommandUI.Utility.removeCSSClassFromElement(this.get__searchBox$p$2().searchIcon, this._activeIconClass$2);
            CommandUI.Utility.ensureCSSClassOnElement(this.get__searchBox$p$2().searchIcon, this._inactiveIconClass$2);
        }
        this.get__searchBox$p$2().raiseEvent(CommandUI.Controls.SearchBox.EventKeys.blur, args);
        this.raiseInteractionEnd();
        this.get__searchBox$p$2().set_elmHadFocus(this.get__searchBox$p$2().get_inputField());
        return false;
    },
    
    onInputBoxFocus: function CUIB__searchBoxBehavior$onInputBoxFocus$in(args) {
        CommandUI.Utility.ensureCSSClassOnElement(this.get__searchBox$p$2().get_inputField(), 'cui-sb-focus');
        CommandUI.Utility.ensureCSSClassOnElement(this.get__searchBox$p$2().get_topLevelElement(), 'cui-sb-focus');
        if (this._isRedesignFlightEnabled$2) {
            CommandUI.Utility.removeCSSClassFromElement(this.get__searchBox$p$2().searchIcon, this._inactiveIconClass$2);
            CommandUI.Utility.ensureCSSClassOnElement(this.get__searchBox$p$2().searchIcon, this._activeIconClass$2);
        }
        this.get__searchBox$p$2().raiseEvent(CommandUI.Controls.SearchBox.EventKeys.focus, args);
        this.raiseInteractionBegin();
        return false;
    },
    
    onSearchContainerMouseOver: function CUIB__searchBoxBehavior$onSearchContainerMouseOver$in(args) {
        if (this._isRedesignFlightEnabled$2) {
            CommandUI.Utility.ensureCSSClassOnElement(this.get__searchBox$p$2().get_topLevelElement(), 'cui-sb-hover');
            CommandUI.Utility.ensureCSSClassOnElement(this.get__searchBox$p$2().get_inputField(), 'cui-sb-hover');
            CommandUI.Utility.removeCSSClassFromElement(this.get__searchBox$p$2().searchIcon, this._inactiveIconClass$2);
            CommandUI.Utility.ensureCSSClassOnElement(this.get__searchBox$p$2().searchIcon, this._activeIconClass$2);
        }
        return false;
    },
    
    onSearchContainerMouseOut: function CUIB__searchBoxBehavior$onSearchContainerMouseOut$in(args) {
        if (this._isRedesignFlightEnabled$2) {
            CommandUI.Utility.removeCSSClassFromElement(this.get__searchBox$p$2().get_topLevelElement(), 'cui-sb-hover');
            CommandUI.Utility.removeCSSClassFromElement(this.get__searchBox$p$2().get_inputField(), 'cui-sb-hover');
            if (!this.get__searchBox$p$2().get_menuLaunched() && !this.get__searchBox$p$2().get_inputHasFocus()) {
                CommandUI.Utility.removeCSSClassFromElement(this.get__searchBox$p$2().searchIcon, this._activeIconClass$2);
                CommandUI.Utility.ensureCSSClassOnElement(this.get__searchBox$p$2().searchIcon, this._inactiveIconClass$2);
            }
        }
        return false;
    }
}


CUIB._sliderBehavior = function CUIB__sliderBehavior(Slider) {
    this.$$d__onChange$p$1 = Function.createDelegate(this, this._onChange$p$1);
    CUIB._sliderBehavior.initializeBase(this, [ Slider ]);
}
CUIB._sliderBehavior.prototype = {
    
    get__slider$p$1: function CUIB__sliderBehavior$get__slider$p$1$in() {
        return this.get_control();
    },
    
    get__sliderDom$p$1: function CUIB__sliderBehavior$get__sliderDom$p$1$in() {
        return this.get__slider$p$1().get_sliderDom();
    },
    
    get__properties$p$1: function CUIB__sliderBehavior$get__properties$p$1$in() {
        return this.get_control().get_controlProperties();
    },
    
    initialize: function CUIB__sliderBehavior$initialize$in() {
    },
    
    doDefaultAction: function CUIB__sliderBehavior$doDefaultAction$in(elmTarget, inputMethod, e) {
    },
    
    attachEvents: function CUIB__sliderBehavior$attachEvents$in(componentDom) {
        Common.Debug.assertTag(CommandUI.Controls.SliderComponentDom.isInstanceOfType(componentDom), 8409666);
        var SliderDom = componentDom;
        var elmInput = SliderDom.elmInput;
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, elmInput, this.$$d__onFocus$i$0);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.blur, elmInput, this.$$d__onBlur$i$0);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.change, elmInput, this.$$d__onChange$p$1);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.input, elmInput, this.$$d__onChange$p$1);
    },
    
    _onFocus$i$0: function CUIB__sliderBehavior$_onFocus$i$0$in(args) {
        if (this.get__sliderDom$p$1().elmControl) {
            Sys.UI.DomElement.addCssClass(this.get__sliderDom$p$1().elmControl, CUIB._sliderBehavior._sliderOnFocusClassName$p);
        }
        return CUIB.ControlBehavior.prototype._onFocus$i$0.call(this, args);
    },
    
    _onBlur$i$0: function CUIB__sliderBehavior$_onBlur$i$0$in(args) {
        if (this.get__sliderDom$p$1().elmControl) {
            Sys.UI.DomElement.removeCssClass(this.get__sliderDom$p$1().elmControl, CUIB._sliderBehavior._sliderOnFocusClassName$p);
        }
        return CUIB.ControlBehavior.prototype._onBlur$i$0.call(this, args);
    },
    
    _onChange$p$1: function CUIB__sliderBehavior$_onChange$p$1$in(args) {
        this._commitValue$p$1(this.get__sliderDom$p$1().elmInput.value);
        return true;
    },
    
    _commitValue$p$1: function CUIB__sliderBehavior$_commitValue$p$1$in(value) {
        this.get_stateProperties()[CommandUI.Controls.SliderCommandProperties.Value] = parseFloat(value);
        this.get_root().executeCommand(this.get__properties$p$1().Command, this.get_stateProperties(), this.get_displayedComponent(), 0, false, null, null);
    },
    
    pollForStateAndUpdate: function CUIB__sliderBehavior$pollForStateAndUpdate$in() {
        var valueOld = this.get_stateProperties()[CommandUI.Controls.SliderCommandProperties.Value];
        var maxValueOld = this.get_stateProperties()[CommandUI.Controls.SliderCommandProperties.MaxValue];
        var textOld = this.get_stateProperties()[CommandUI.Controls.SliderCommandProperties.Text];
        var result = this.pollForStateAndUpdateInternal(this.get__properties$p$1().Command, this.get__properties$p$1().QueryCommand, this.get_stateProperties());
        if (this.get__sliderDom$p$1() && this.get__sliderDom$p$1().elmInput) {
            this.get__sliderDom$p$1().elmInput.disabled = !this.get_control().get_enabled();
        }
        if ((result & 2) > 0) {
            var valueNew = this.get_stateProperties()[CommandUI.Controls.SliderCommandProperties.Value];
            var maxValueNew = this.get_stateProperties()[CommandUI.Controls.SliderCommandProperties.MaxValue];
            var textNew = this.get_stateProperties()[CommandUI.Controls.SliderCommandProperties.Text];
            if (maxValueNew !== maxValueOld || valueNew !== valueOld || textOld !== textNew) {
                if (this.get__sliderDom$p$1() && this.get__sliderDom$p$1().elmInput) {
                    this.get__sliderDom$p$1().elmInput.setAttribute(Common.AccessibilityUtils.ariaValueMaxAttribute, String.format('{0}', maxValueNew));
                    this.get__sliderDom$p$1().elmInput.setAttribute('max', String.format('{0}', maxValueNew));
                    this.get__sliderDom$p$1().elmInput.value = valueNew;
                    this.get__sliderDom$p$1().elmLabel.innerText = this.get_stateProperties()[CommandUI.Controls.SliderCommandProperties.Text];
                }
            }
        }
    }
}


CUIB._spinnerBehavior = function CUIB__spinnerBehavior(spinner) {
    this.$$d__spin$i$1 = Function.createDelegate(this, this._spin$i$1);
    this.$$d__repeatSpin$p$1 = Function.createDelegate(this, this._repeatSpin$p$1);
    this.$$d_onArrowTouchEnd = Function.createDelegate(this, this.onArrowTouchEnd);
    this.$$d_onArrowTouchMove = Function.createDelegate(this, this.onArrowTouchMove);
    this.$$d__onArrowPointerUp$p$1 = Function.createDelegate(this, this._onArrowPointerUp$p$1);
    this.$$d__onArrowPointerDown$p$1 = Function.createDelegate(this, this._onArrowPointerDown$p$1);
    this.$$d__onInputMouseUp$p$1 = Function.createDelegate(this, this._onInputMouseUp$p$1);
    this.$$d__onChange$p$1 = Function.createDelegate(this, this._onChange$p$1);
    this.$$d__onKeyPress$p$1 = Function.createDelegate(this, this._onKeyPress$p$1);
    this._pendingDelaySpinTimeoutId$1 = -1;
    this._repeatSpinIntervalId$1 = -1;
    CUIB._spinnerBehavior.initializeBase(this, [ spinner ]);
}
CUIB._spinnerBehavior.prototype = {
    _numericalValue$1: 0,
    _unit$1: null,
    _isSpecialText$1: false,
    _validUnitTypes$1: null,
    _spinningUp$1: false,
    _mouseupOnTextboxSinceFocus$1: false,
    
    get__spinner$p$1: function CUIB__spinnerBehavior$get__spinner$p$1$in() {
        return this.get_control();
    },
    
    get__spinnerDom$p$1: function CUIB__spinnerBehavior$get__spinnerDom$p$1$in() {
        return this.get__spinner$p$1().get_spinnerDom();
    },
    
    get__properties$p$1: function CUIB__spinnerBehavior$get__properties$p$1$in() {
        return this.get_control().get_controlProperties();
    },
    
    initialize: function CUIB__spinnerBehavior$initialize$in() {
        var validUnits = this.get__spinner$p$1().get_validUnits();
        this._validUnitTypes$1 = this._unitTypeArrayFromUnitArray$p$1(validUnits);
        this._numericalValue$1 = validUnits[0].get_min();
        this._unit$1 = validUnits[0];
        this._isSpecialText$1 = false;
    },
    
    doDefaultAction: function CUIB__spinnerBehavior$doDefaultAction$in(elmTarget, inputMethod, e) {
    },
    
    attachEvents: function CUIB__spinnerBehavior$attachEvents$in(componentDom) {
        Common.Debug.assertTag(CommandUI.Controls.SpinnerComponentDom.isInstanceOfType(componentDom), 4801745);
        var spinnerDom = componentDom;
        var elmInput = spinnerDom.elmInput;
        var elmUpArrow = spinnerDom.elmUpArrow;
        var elmDownArrow = spinnerDom.elmDownArrow;
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, elmInput, this.$$d__onFocus$i$0);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.blur, elmInput, this.$$d__onBlur$i$0);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, elmInput, this.$$d_onKeyDown);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyPress, elmInput, this.$$d__onKeyPress$p$1);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, elmInput, this.$$d_onKeyUp);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.change, elmInput, this.$$d__onChange$p$1);
        Common.MouseInputManager.get_instance().registerHandler(Common.EventNames.mouseUp, elmInput, this.$$d__onInputMouseUp$p$1);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, elmUpArrow, this.$$d__onArrowPointerDown$p$1);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, elmDownArrow, this.$$d__onArrowPointerDown$p$1);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerUp, elmUpArrow, this.$$d__onArrowPointerUp$p$1);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerUp, elmDownArrow, this.$$d__onArrowPointerUp$p$1);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchMove, elmUpArrow, this.$$d_onArrowTouchMove);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchMove, elmDownArrow, this.$$d_onArrowTouchMove);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchEnd, elmUpArrow, this.$$d_onArrowTouchEnd);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchEnd, elmDownArrow, this.$$d_onArrowTouchEnd);
    },
    
    _onFocus$i$0: function CUIB__spinnerBehavior$_onFocus$i$0$in(args) {
        CUIB.ControlBehavior.prototype._onFocus$i$0.call(this, args);
        CommandUI.Utility.ensureCSSClassOnElement(this.get__spinnerDom$p$1().elmControl, 'cui-spn-focus');
        if (this.get_control().get_enabled()) {
            Common.WindowUtils.selectAllTextInInput(this.get__spinnerDom$p$1().elmInput);
        }
        this._mouseupOnTextboxSinceFocus$1 = false;
        return false;
    },
    
    _onBlur$i$0: function CUIB__spinnerBehavior$_onBlur$i$0$in(args) {
        CUIB.ControlBehavior.prototype._onBlur$i$0.call(this, args);
        CommandUI.Utility.removeCSSClassFromElement(this.get__spinnerDom$p$1().elmControl, 'cui-spn-focus');
        return false;
    },
    
    onKeyDown: function CUIB__spinnerBehavior$onKeyDown$in(args) {
        var handled = false;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            var keyEvt = args.innerEvent.rawEvent;
            var keyCode = args.innerEvent.keyCode;
            var shiftKey = keyEvt.shiftKey;
            if ((keyCode === Sys.UI.Key.up) || (keyCode === Sys.UI.Key.down)) {
                if (!this.get_root().isCurrentModalController(this.get_control())) {
                    this._startSpin$p$1(keyCode === Sys.UI.Key.up, args.get_inputSource());
                }
                handled = true;
            }
            else if (keyCode === Sys.UI.Key.enter) {
                this.commitPendingChange();
                if (CommandUI.Ribbon.isInstanceOfType(this.get_root())) {
                    (this.get_root()).dismissTabPopup(true, true);
                }
                handled = true;
            }
            else if (keyCode === Sys.UI.Key.tab) {
                this.commitPendingChange();
                if (CommandUI.Ribbon.isInstanceOfType(this.get_root())) {
                    handled = (this.get_root()).wrapKeyboardFocus(this.get_displayedComponent().get_elementInternal(), !shiftKey);
                }
            }
            else if (keyCode === Sys.UI.Key.esc) {
                this._resetInputToPreviousValue$p$1();
                if (CommandUI.Ribbon.isInstanceOfType(this.get_root())) {
                    (this.get_root()).dismissTabPopup(true, true);
                }
                handled = true;
            }
            else if ((keyCode === Sys.UI.Key.backspace) || (keyCode === Sys.UI.Key.del)) {
                handled = !this.get_control().get_enabled();
            }
        }
        return handled;
    },
    
    _onKeyPress$p$1: function CUIB__spinnerBehavior$_onKeyPress$p$1$in(args) {
        return !this.get_control().get_enabled();
    },
    
    onKeyUp: function CUIB__spinnerBehavior$onKeyUp$in(args) {
        this._deactivateElementFromKeyboard$p$1();
        return false;
    },
    
    _onChange$p$1: function CUIB__spinnerBehavior$_onChange$p$1$in(args) {
        this.commitPendingChange();
        return false;
    },
    
    _onInputMouseUp$p$1: function CUIB__spinnerBehavior$_onInputMouseUp$p$1$in(args) {
        if (!this._mouseupOnTextboxSinceFocus$1) {
            this._mouseupOnTextboxSinceFocus$1 = true;
            return true;
        }
        return false;
    },
    
    _onArrowPointerDown$p$1: function CUIB__spinnerBehavior$_onArrowPointerDown$p$1$in(args) {
        var handled = false;
        var activate = true;
        if (args.get_inputSource() === Common.InputManager.InputMethod.mouse) {
            activate = (!args.get_mouseButton());
        }
        if (activate) {
            var target = args.get_sourceElement();
            var increment = (target === this.get__spinnerDom$p$1().elmUpArrow) || (target === this.get__spinnerDom$p$1().elmUpArrowImageContainer) || (target === this.get__spinnerDom$p$1().elmUpArrowImage);
            this._startSpin$p$1(increment, args.get_inputSource());
            handled = true;
        }
        return handled;
    },
    
    _onArrowPointerUp$p$1: function CUIB__spinnerBehavior$_onArrowPointerUp$p$1$in(args) {
        return this.deactivateElement(args);
    },
    
    onArrowTouchMove: function CUIB__spinnerBehavior$onArrowTouchMove$in(args) {
        return this._onActivePointerMove$i$0(args);
    },
    
    onArrowTouchEnd: function CUIB__spinnerBehavior$onArrowTouchEnd$in(args) {
        return this.deactivateElement(args);
    },
    
    _incDecValue$p$1: function CUIB__spinnerBehavior$_incDecValue$p$1$in(incrementing) {
        if (this.get_control().get_enabled()) {
            var valueUpdated = false;
            if (!this._isSpecialText$1) {
                var startingValue = this._getIncDecStartingValue$p$1(incrementing);
                var newValue = (incrementing) ? startingValue + this._unit$1.get_step() : startingValue - this._unit$1.get_step();
                newValue = Math.min(newValue, this._unit$1.get_max());
                newValue = Math.max(newValue, this._unit$1.get_min());
                if (newValue !== this._numericalValue$1) {
                    this._commitNumericalValue$p$1(newValue, this._unit$1);
                    this.get_root().executeCommand(this.get__properties$p$1().Command, this.get_stateProperties(), this.get_displayedComponent(), 0, false, null, null);
                    valueUpdated = true;
                }
            }
            if (!valueUpdated) {
                var spinCommand = this.get__properties$p$1().SpinCommand;
                var parameters = this.get_stateProperties();
                parameters['Increment'] = incrementing;
                if (!CommandUI.ScriptUtility.isNullOrUndefined(spinCommand)) {
                    this.get_root().executeCommand(spinCommand, parameters, this.get_displayedComponent(), 0, false, null, null);
                }
            }
        }
    },
    
    _getIncDecStartingValue$p$1: function CUIB__spinnerBehavior$_getIncDecStartingValue$p$1$in(incrementing) {
        var inflationMult = Math.pow(10, Common.AFrameworkApplication.get_numberFormat().numberDecimalDigits);
        var inflatedValue = Math.round(this._numericalValue$1 * inflationMult);
        var inflatedStep = Math.round(this._unit$1.get_step() * inflationMult);
        var inflatedFactor = inflatedValue / inflatedStep;
        inflatedFactor = (incrementing) ? Math.floor(inflatedFactor) : Math.ceil(inflatedFactor);
        return (inflatedFactor * inflatedStep) / inflationMult;
    },
    
    _startSpin$p$1: function CUIB__spinnerBehavior$_startSpin$p$1$in(increment, inputMethod) {
        if (this.get_control().get_enabled()) {
            this.commitPendingChange();
            var activeButton = (increment) ? this.get__spinnerDom$p$1().elmUpArrow : this.get__spinnerDom$p$1().elmDownArrow;
            switch (inputMethod) {
                case Common.InputManager.InputMethod.mouse:
                case Common.InputManager.InputMethod.touch:
                    this._spinningUp$1 = increment;
                    this._activateElement$i$0(activeButton);
                    break;
                case Common.InputManager.InputMethod.keyboard:
                    this._spinningUp$1 = increment;
                    this._activateElementFromKeyboard$p$1(activeButton);
                    break;
                default:
                    break;
            }
        }
    },
    
    _stopSpin$i$1: function CUIB__spinnerBehavior$_stopSpin$i$1$in() {
        this._cancelPendingDelaySpin$p$1();
        this._cancelRepeatSpin$p$1();
    },
    
    _delaySpin$i$1: function CUIB__spinnerBehavior$_delaySpin$i$1$in() {
        if (this._pendingDelaySpinTimeoutId$1 === -1) {
            this._pendingDelaySpinTimeoutId$1 = window.setTimeout(this.$$d__repeatSpin$p$1, CUIB._spinnerBehavior._incDecRepeatDelay$p);
        }
    },
    
    _cancelPendingDelaySpin$p$1: function CUIB__spinnerBehavior$_cancelPendingDelaySpin$p$1$in() {
        var $$t_0;
        CommandUI.Utility.cancelPendingTimeout(($$t_0 = {'val': this._pendingDelaySpinTimeoutId$1})), this._pendingDelaySpinTimeoutId$1 = $$t_0.val;
    },
    
    _repeatSpin$p$1: function CUIB__spinnerBehavior$_repeatSpin$p$1$in() {
        this._cancelPendingDelaySpin$p$1();
        if (this._repeatSpinIntervalId$1 === -1) {
            this._spin$i$1();
            this._repeatSpinIntervalId$1 = window.setInterval(this.$$d__spin$i$1, CUIB._spinnerBehavior._incDecRepeatFrequency$p);
        }
    },
    
    _cancelRepeatSpin$p$1: function CUIB__spinnerBehavior$_cancelRepeatSpin$p$1$in() {
        var $$t_0;
        CommandUI.Utility.cancelInterval(($$t_0 = {'val': this._repeatSpinIntervalId$1})), this._repeatSpinIntervalId$1 = $$t_0.val;
    },
    
    _spin$i$1: function CUIB__spinnerBehavior$_spin$i$1$in() {
        this._incDecValue$p$1(this._spinningUp$1);
    },
    
    _activateElementFromKeyboard$p$1: function CUIB__spinnerBehavior$_activateElementFromKeyboard$p$1$in(activeElement) {
        this.get_root().beginModal(this.get_control(), false, false);
        CommandUI.Utility.ensureCSSClassOnElement(activeElement, CommandUI.Control.activeClassName);
        this._spin$i$1();
        this._delaySpin$i$1();
    },
    
    _deactivateElementFromKeyboard$p$1: function CUIB__spinnerBehavior$_deactivateElementFromKeyboard$p$1$in() {
        this.get_root().endModal(this.get_control(), false, false);
        this._stopSpin$i$1();
        CommandUI.Utility.removeCSSClassFromElement(this.get__spinnerDom$p$1().elmUpArrow, CommandUI.Control.activeClassName);
        CommandUI.Utility.removeCSSClassFromElement(this.get__spinnerDom$p$1().elmDownArrow, CommandUI.Control.activeClassName);
    },
    
    _setInputValue$p$1: function CUIB__spinnerBehavior$_setInputValue$p$1$in(value) {
        if (this.get__spinnerDom$p$1().elmInput.value !== value) {
            this.get__spinnerDom$p$1().elmInput.value = value;
        }
    },
    
    _resetInputToPreviousValue$p$1: function CUIB__spinnerBehavior$_resetInputToPreviousValue$p$1$in() {
        this._setInputValue$p$1(this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.Text]);
    },
    
    _setCurrentValueToSpecialText$p$1: function CUIB__spinnerBehavior$_setCurrentValueToSpecialText$p$1$in(specialText) {
        this._setInputValue$p$1(specialText);
        this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.Text] = specialText;
        this._isSpecialText$1 = true;
    },
    
    _setCurrentValueToNumber$p$1: function CUIB__spinnerBehavior$_setCurrentValueToNumber$p$1$in(number, unit, value) {
        this._setInputValue$p$1(value);
        this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.Text] = value;
        this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.Number] = number;
        this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.UnitType] = unit.get_type();
        this._numericalValue$1 = number;
        this._unit$1 = unit;
        this.get__spinnerDom$p$1().elmInput.setAttribute(Common.AccessibilityUtils.ariaValueNowAttribute, value);
        this.get__spinnerDom$p$1().elmInput.setAttribute(Common.AccessibilityUtils.ariaValueMinAttribute, String.format('{0}', unit.get_min()));
        this.get__spinnerDom$p$1().elmInput.setAttribute(Common.AccessibilityUtils.ariaValueMaxAttribute, String.format('{0}', unit.get_max()));
        this._isSpecialText$1 = false;
    },
    
    _commitTextValue$p$1: function CUIB__spinnerBehavior$_commitTextValue$p$1$in(value) {
        var normalizedValue;
        var $$t_5, $$t_6;
        if (($$t_6 = this._isSpecialText$p$1(value, ($$t_5 = {'val': normalizedValue}))), normalizedValue = $$t_5.val, $$t_6) {
            this._setCurrentValueToSpecialText$p$1(normalizedValue);
        }
        else {
            var number = 0;
            var unitType = 0;
            var $$t_7, $$t_8;
            Common.StringUtils.parseNumberAndUnitsFromString(value, this._validUnitTypes$1, Common.AFrameworkApplication.get_numberFormat(), ($$t_7 = {'val': number}), ($$t_8 = {'val': unitType})), number = $$t_7.val, unitType = $$t_8.val;
            var unit = this._unitFromUnitType$p$1(unitType);
            if ((!unitType) && CommandUI.ScriptUtility.isNullOrUndefined(unit)) {
                unit = this._unitFromUnitType$p$1(this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.UnitType]);
            }
            this._commitNumericalValue$p$1(number, unit);
        }
    },
    
    _commitNumericalValue$p$1: function CUIB__spinnerBehavior$_commitNumericalValue$p$1$in(number, unit) {
        number = this._normalizeNumber$p$1(number, unit);
        if ((isNaN(number)) || CommandUI.ScriptUtility.isNullOrUndefined(unit)) {
            this._resetInputToPreviousValue$p$1();
        }
        else {
            var numberFormat = Common.AFrameworkApplication.get_numberFormat();
            var text = '';
            var $$t_5;
            Common.StringUtils.formatNumberToString(number, unit.get_type(), numberFormat, ($$t_5 = {'val': text})), text = $$t_5.val;
            var groupSeparator = (unit.get_type() === Common.UnitType.percent) ? numberFormat.numberGroupSeparator : numberFormat.percentGroupSeparator;
            text = text.replace(groupSeparator, '');
            this._setCurrentValueToNumber$p$1(number, unit, text);
        }
    },
    
    _isSpecialText$p$1: function CUIB__spinnerBehavior$_isSpecialText$p$1$in(value, normalizedValue) {
        var validString = false;
        normalizedValue.val = '';
        value = value.trim();
        var validSpecialStrings = this.get__spinner$p$1().get_validSpecialStrings();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(validSpecialStrings)) {
            for (var i = 0; i < validSpecialStrings.length; i++) {
                if (validSpecialStrings[i].toLowerCase() === value.toLowerCase()) {
                    normalizedValue.val = validSpecialStrings[i];
                    validString = true;
                    break;
                }
            }
        }
        return validString;
    },
    
    _normalizeNumber$p$1: function CUIB__spinnerBehavior$_normalizeNumber$p$1$in(number, unit) {
        if (isNaN(number) || CommandUI.ScriptUtility.isNullOrUndefined(unit)) {
            return Number.NaN;
        }
        return unit.normalizeNumber(number);
    },
    
    _unitFromUnitType$p$1: function CUIB__spinnerBehavior$_unitFromUnitType$p$1$in(unitType) {
        var unit = null;
        var validUnits = this.get__spinner$p$1().get_validUnits();
        for (var i = 0; i < validUnits.length; i++) {
            if (validUnits[i].get_type() === unitType) {
                unit = validUnits[i];
                break;
            }
        }
        return unit;
    },
    
    _unitTypeArrayFromUnitArray$p$1: function CUIB__spinnerBehavior$_unitTypeArrayFromUnitArray$p$1$in(units) {
        var numUnits = units.length;
        var unitTypes = new Array(numUnits);
        for (var i = 0; i < numUnits; i++) {
            unitTypes[i] = units[i].get_type();
        }
        return unitTypes;
    },
    
    commitPendingChange: function CUIB__spinnerBehavior$commitPendingChange$in() {
        if (this.get_control().get_enabled()) {
            var oldValue = this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.Text];
            var inputContents = this.get__spinnerDom$p$1().elmInput.value;
            if (inputContents !== oldValue) {
                this._commitTextValue$p$1(inputContents);
                var newValue = this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.Text];
                if (newValue !== oldValue) {
                    this.get_root().executeCommand(this.get__properties$p$1().Command, this.get_stateProperties(), this.get_displayedComponent(), 0, false, null, null);
                }
            }
        }
        else {
            this._resetInputToPreviousValue$p$1();
        }
    },
    
    pollForStateAndUpdate: function CUIB__spinnerBehavior$pollForStateAndUpdate$in() {
        var textOld = this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.Text];
        var numberOld = this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.Number];
        var unitTypeOld = this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.UnitType];
        var maxValueOld = this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.MaxValue];
        var result = this.pollForStateAndUpdateInternal(this.get__properties$p$1().Command, this.get__properties$p$1().QueryCommand, this.get_stateProperties());
        if ((result & 2) > 0) {
            var textNew = this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.Text];
            var numberNew = this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.Number];
            var unitTypeNew = this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.UnitType];
            var maxValueNew = this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.MaxValue];
            if (maxValueNew !== maxValueOld) {
                this._unitFromUnitType$p$1(unitTypeNew).set_max(maxValueNew);
                this.get__spinnerDom$p$1().elmInput.setAttribute(Common.AccessibilityUtils.ariaValueMaxAttribute, String.format('{0}', maxValueNew));
            }
            if (textNew !== textOld) {
                if (textNew === '') {
                    this._setCurrentValueToSpecialText$p$1(textNew);
                }
                else {
                    this._commitTextValue$p$1(textNew);
                }
            }
            else if (!isNaN(numberNew) && ((numberNew !== numberOld) || (unitTypeNew !== unitTypeOld))) {
                this._commitNumericalValue$p$1(numberNew, this._unitFromUnitType$p$1(unitTypeNew));
            }
            var altOld = this.get__spinnerDom$p$1().elmControl.title;
            var altNew = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.Controls.SpinnerCommandProperties.Alt], this.get__properties$p$1().Alt);
            if (altNew !== altOld) {
                this.get__spinnerDom$p$1().elmInput.title = altNew;
                this.get__spinnerDom$p$1().elmUpArrow.title = altNew;
                this.get__spinnerDom$p$1().elmDownArrow.title = altNew;
            }
        }
    },
    
    _activeElementStateChanged$i$0: function CUIB__spinnerBehavior$_activeElementStateChanged$i$0$in(hovered) {
        CUIB.ControlBehavior.prototype._activeElementStateChanged$i$0.call(this, hovered);
        if (hovered) {
            this._spin$i$1();
            this._delaySpin$i$1();
        }
        else {
            this._stopSpin$i$1();
        }
    }
}


CUIB._splitButtonBehavior = function CUIB__splitButtonBehavior(splitButton) {
    this.$$d_onMenuButtonPointerOut = Function.createDelegate(this, this.onMenuButtonPointerOut);
    this.$$d_onMenuButtonPointerOver = Function.createDelegate(this, this.onMenuButtonPointerOver);
    this.$$d_onMenuButtonPointerDown = Function.createDelegate(this, this.onMenuButtonPointerDown);
    this.$$d_onButtonTouchEnd = Function.createDelegate(this, this.onButtonTouchEnd);
    this.$$d_onButtonTouchMove = Function.createDelegate(this, this.onButtonTouchMove);
    this.$$d__onButtonPointerUp$p$2 = Function.createDelegate(this, this._onButtonPointerUp$p$2);
    this.$$d__onButtonPointerDown$p$2 = Function.createDelegate(this, this._onButtonPointerDown$p$2);
    this.$$d_onButtonPointerOut = Function.createDelegate(this, this.onButtonPointerOut);
    this.$$d_onButtonPointerOver = Function.createDelegate(this, this.onButtonPointerOver);
    this.$$d__onSplitbuttonPointerDownPointerUp$p$2 = Function.createDelegate(this, this._onSplitbuttonPointerDownPointerUp$p$2);
    CUIB._splitButtonBehavior.initializeBase(this, [ splitButton ]);
}
CUIB._splitButtonBehavior.prototype = {
    
    get__splitButton$p$2: function CUIB__splitButtonBehavior$get__splitButton$p$2$in() {
        return this.get_control();
    },
    
    get__properties$p$2: function CUIB__splitButtonBehavior$get__properties$p$2$in() {
        return this.get__splitButton$p$2().get_properties();
    },
    
    attachEvents: function CUIB__splitButtonBehavior$attachEvents$in(componentDom) {
        Common.Debug.assertTag(CommandUI.Controls.SplitButtonComponentDom.isInstanceOfType(componentDom), 4801746);
        var splitButtonDom = componentDom;
        var splitbutton = splitButtonDom.elmControl;
        var button = splitButtonDom.elmButtonPart;
        var menuButton = splitButtonDom.elmMenuLauncherPart;
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, splitbutton, this.$$d__onFocus$i$0);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.blur, splitbutton, this.$$d__onBlur$i$0);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, splitbutton, this.$$d_onKeyDown);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, splitbutton, this.$$d_onKeyUp);
        if (Common.BrowserUtils.get_isInternetExplorerEdge() && this._getEdgeMajorVersion$p$2() < 16) {
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, splitbutton, this.$$d__onSplitbuttonPointerDownPointerUp$p$2);
            Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerUp, splitbutton, this.$$d__onSplitbuttonPointerDownPointerUp$p$2);
        }
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOver, button, this.$$d_onButtonPointerOver);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOut, button, this.$$d_onButtonPointerOut);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, button, this.$$d__onButtonPointerDown$p$2);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerUp, button, this.$$d__onButtonPointerUp$p$2);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchMove, button, this.$$d_onButtonTouchMove);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchEnd, button, this.$$d_onButtonTouchEnd);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, menuButton, this.$$d_onMenuButtonPointerDown);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOver, menuButton, this.$$d_onMenuButtonPointerOver);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOut, menuButton, this.$$d_onMenuButtonPointerOut);
    },
    
    doDefaultAction: function CUIB__splitButtonBehavior$doDefaultAction$in(elmTarget, inputMethod, e) {
        if (Sys.UI.DomElement.containsCssClass(elmTarget, 'cui-ctl-a1')) {
            if (this._buttonEnabled$2) {
                this.get__splitButton$p$2().set_on(!this.get__splitButton$p$2().get_on());
                Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$2().Command), 4773531);
                var parameters = this.get_stateProperties();
                parameters['CommandValueId'] = this.get_control().getCommandValueId();
                this.get_root().executeCommand(this.get__properties$p$2().Command, parameters, this.get_displayedComponent(), inputMethod, true, null, this.getTelemetryData(e));
            }
        }
        else {
            if (this._menuButtonEnabled$2) {
                CUIB._menuLauncherBehavior.prototype.doDefaultAction.call(this, elmTarget, inputMethod, e);
            }
        }
    },
    
    onKeyUp: function CUIB__splitButtonBehavior$onKeyUp$in(args) {
        var keyCode = args.innerEvent.keyCode;
        if (keyCode === Sys.UI.Key.enter || keyCode === Sys.UI.Key.space) {
            var parameters = this.get_stateProperties();
            parameters['CommandValueId'] = this.get_control().getCommandValueId();
            this.get_root().executeCommand(this.get__properties$p$2().Command, parameters, this.get_displayedComponent(), Common.InputManager.InputMethod.keyboard, true, null, null);
            return true;
        }
        else {
            return CUIB.ControlBehavior.prototype.onKeyUp.call(this, args);
        }
    },
    
    pollForStateAndUpdate: function CUIB__splitButtonBehavior$pollForStateAndUpdate$in() {
        var buttonResult = this.get_root().pollForCommandState(this.get__properties$p$2().Command, this.get__properties$p$2().QueryCommand, this.get_stateProperties());
        var buttonEnabled = (buttonResult & 1) > 0;
        var menuEnabled = true;
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get__properties$p$2().CommandMenuOpen)) {
            var menuResult = this.get_root().pollForCommandState(this.get__properties$p$2().CommandMenuOpen, null, null);
            menuEnabled = (menuResult & 1) > 0;
        }
        else {
            menuEnabled = buttonEnabled;
        }
        if (menuEnabled !== this._menuButtonEnabled$2 || buttonEnabled !== this._buttonEnabled$2 || (menuEnabled || buttonEnabled) !== this.get_control().get_enabled()) {
            this.get_control().set_enabled(menuEnabled || buttonEnabled);
            if (buttonEnabled !== this._buttonEnabled$2) {
                this.onEnabledChangedForButton(buttonEnabled);
            }
            if (menuEnabled !== this._menuButtonEnabled$2) {
                this.onEnabledChangedForMenu(menuEnabled);
            }
            this._menuButtonEnabled$2 = menuEnabled;
            this._buttonEnabled$2 = buttonEnabled;
        }
        if ((buttonResult & 2) > 0) {
            this.updateImage();
            var labelTextNew = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.Controls.SplitButtonCommandProperties.LabelText], this.get__properties$p$2().LabelText);
            if (this.get_stateProperties()[CommandUI.Controls.SplitButtonCommandProperties.ApplyLabelTextToControlOnly]) {
                var $$t_C = this;
                this.get__splitButton$p$2().forEachSplitButtonComponentDom(function(dom) {
                    dom.elmControl.title = labelTextNew;
                    dom.elmButtonPart.removeAttribute(CUIB._splitButtonBehavior._titleAttribute$p);
                    dom.elmMenuLauncherPart.removeAttribute(CUIB._splitButtonBehavior._titleAttribute$p);
                });
            }
            else {
                var $$t_D = this;
                this.get__splitButton$p$2().forEachSplitButtonComponentDom(function(dom) {
                    dom.elmButtonPart.title = labelTextNew;
                });
            }
            if (this.get_stateProperties()[CommandUI.Controls.SplitButtonCommandProperties.EnsureControlRoleIsButton]) {
                var $$t_E = this;
                this.get__splitButton$p$2().forEachSplitButtonComponentDom(function(dom) {
                    Common.AccessibilityUtils.setAriaAttribute(dom.elmControl, Common.AccessibilityUtils.ariaRoleAttribute, Common.AccessibilityUtils.ariaButtonRole);
                });
            }
            if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get_stateProperties()[CommandUI.Controls.SplitButtonCommandProperties.Visible])) {
                var visible = this.updateVisibility();
                if (visible) {
                    this._updateHtml$p$2();
                }
            }
        }
        this.get__splitButton$p$2().setState(this.get__splitButton$p$2().get_on() && buttonEnabled);
    },
    
    _updateHtml$p$2: function CUIB__splitButtonBehavior$_updateHtml$p$2$in() {
        this.updateLabelText();
        this.updateTooltip();
        this.updateImage();
    },
    
    _menuButtonEnabled$2: true,
    
    onEnabledChangedForMenu: function CUIB__splitButtonBehavior$onEnabledChangedForMenu$in(enabled) {
        var $$t_3 = this;
        this.get__splitButton$p$2().forEachSplitButtonComponentDom(function(dom) {
            CommandUI.Utility.setEnabledOnElement(dom.elmMenuLauncherPart, enabled, false, false);
        });
        this._removeControlHighlight$p$2();
        this._menuButtonEnabled$2 = enabled;
    },
    
    _buttonEnabled$2: false,
    
    onEnabledChangedForButton: function CUIB__splitButtonBehavior$onEnabledChangedForButton$in(enabled) {
        var $$t_3 = this;
        this.get__splitButton$p$2().forEachSplitButtonComponentDom(function(dom) {
            CommandUI.Utility.setEnabledOnElement(dom.elmButtonPart, enabled, false, false);
        });
        this._removeControlHighlight$p$2();
        this._buttonEnabled$2 = enabled;
    },
    
    _removeControlHighlight$p$2: function CUIB__splitButtonBehavior$_removeControlHighlight$p$2$in() {
        var elm = this.get__splitButton$p$2().getDisplayedComponentElement();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(elm)) {
            CommandUI.Utility.removeCSSClassFromElement(elm.childNodes[0], CUIB._splitButtonBehavior._focusedPrimaryClass$p);
            CommandUI.Utility.removeCSSClassFromElement(elm.childNodes[0], CUIB._splitButtonBehavior._focusedSecondaryClass$p);
            CommandUI.Utility.removeCSSClassFromElement(elm.childNodes[1], CUIB._splitButtonBehavior._focusedPrimaryClass$p);
            CommandUI.Utility.removeCSSClassFromElement(elm.childNodes[1], CUIB._splitButtonBehavior._focusedSecondaryClass$p);
        }
    },
    
    _onSplitbuttonPointerDownPointerUp$p$2: function CUIB__splitButtonBehavior$_onSplitbuttonPointerDownPointerUp$p$2$in(args) {
        if (Common.MsPointerTypeMapper.getMsPointerTypeFromEvent(args.innerEvent)) {
            return false;
        }
        var handled = false;
        if (args.eventName === Common.EventNames.pointerDown) {
            handled = this._onButtonPointerDown$p$2(args);
        }
        else if (args.eventName === Common.EventNames.pointerUp) {
            handled = this._onButtonPointerUp$p$2(args);
        }
        else {
            Common.Debug.assertNotReachedStringTag('We are expecting only pointerdown or pointerup!', 21869529);
        }
        return handled;
    },
    
    _onButtonPointerDown$p$2: function CUIB__splitButtonBehavior$_onButtonPointerDown$p$2$in(args) {
        var handled = false;
        var inputMethod = args.get_inputSource();
        switch (inputMethod) {
            case Common.InputManager.InputMethod.touch:
                if (this._shouldUseFlyoutBehaviorOnTouch$p$2()) {
                    this.doDefaultAction(this.get_displayedComponent().get_elementInternal(), inputMethod, args.innerEvent);
                    handled = true;
                }
                else {
                    this._activateElement$i$0(this.get__splitButton$p$2().get_displayedButtonElement());
                    handled = true;
                }
                break;
            case Common.InputManager.InputMethod.mouse:
                if (!args.get_mouseButton()) {
                    this._activateElement$i$0(this.get__splitButton$p$2().get_displayedButtonElement());
                    handled = true;
                }
                break;
            default:
                Common.Debug.assertNotReachedStringTag('Unhandled pointer down input!', 4773532);
                break;
        }
        if (handled) {
            args.innerEvent.preventDefault();
        }
        return false;
    },
    
    _shouldUseFlyoutBehaviorOnTouch$p$2: function CUIB__splitButtonBehavior$_shouldUseFlyoutBehaviorOnTouch$p$2$in() {
        var displayMode = this.get_displayedComponent().get_displayMode();
        return displayMode === 'Small' || displayMode === 'Medium' || displayMode === 'Menu16' || displayMode === 'MenuTellMe';
    },
    
    _onButtonPointerUp$p$2: function CUIB__splitButtonBehavior$_onButtonPointerUp$p$2$in(args) {
        return this.deactivateElement(args);
    },
    
    onButtonTouchMove: function CUIB__splitButtonBehavior$onButtonTouchMove$in(args) {
        return this._onActivePointerMove$i$0(args);
    },
    
    onButtonTouchEnd: function CUIB__splitButtonBehavior$onButtonTouchEnd$in(args) {
        return this.deactivateElement(args);
    },
    
    _onFocus$i$0: function CUIB__splitButtonBehavior$_onFocus$i$0$in(args) {
        CUIB.ControlBehavior.prototype._onFocus$i$0.call(this, args);
        this._highlightControl$p$2(true, true);
        return false;
    },
    
    _onBlur$i$0: function CUIB__splitButtonBehavior$_onBlur$i$0$in(args) {
        CUIB.ControlBehavior.prototype._onFocus$i$0.call(this, args);
        this._removeControlHighlight$p$2();
        return false;
    },
    
    onButtonPointerOver: function CUIB__splitButtonBehavior$onButtonPointerOver$in(args) {
        if (this.get_control().get_enabled() && this._buttonEnabled$2) {
            this._highlightControl$p$2(true, this.get__splitButton$p$2().get_on());
        }
        return false;
    },
    
    onButtonPointerOut: function CUIB__splitButtonBehavior$onButtonPointerOut$in(args) {
        if (this.get_control().get_enabled() && this._buttonEnabled$2) {
            this._removeControlHighlight$p$2();
        }
        return false;
    },
    
    onMenuButtonPointerDown: function CUIB__splitButtonBehavior$onMenuButtonPointerDown$in(args) {
        var handled = false;
        if (args.get_inputSource() !== Common.InputManager.InputMethod.mouse || !args.get_mouseButton()) {
            this.doDefaultAction(args.get_sourceElement(), args.get_inputSource(), args.innerEvent);
            handled = true;
        }
        if (handled) {
            args.innerEvent.preventDefault();
        }
        return false;
    },
    
    onMenuButtonPointerOver: function CUIB__splitButtonBehavior$onMenuButtonPointerOver$in(args) {
        if (this.get_control().get_enabled() && this._menuButtonEnabled$2) {
            this._highlightControl$p$2(this.get__splitButton$p$2().get_on(), true);
        }
        return false;
    },
    
    onMenuButtonPointerOut: function CUIB__splitButtonBehavior$onMenuButtonPointerOut$in(args) {
        this._removeControlHighlight$p$2();
        return false;
    },
    
    _highlightControl$p$2: function CUIB__splitButtonBehavior$_highlightControl$p$2$in(emphasizeButton, emphasizeMenuButton) {
        var elm = this.get_control().getDisplayedComponentElement();
        if (!CommandUI.ScriptUtility.isNullOrUndefined(elm)) {
            CommandUI.Utility.ensureCSSClassOnElement(elm.childNodes[0], (emphasizeButton) ? CUIB._splitButtonBehavior._focusedPrimaryClass$p : CUIB._splitButtonBehavior._focusedSecondaryClass$p);
            CommandUI.Utility.ensureCSSClassOnElement(elm.childNodes[1], (emphasizeMenuButton) ? CUIB._splitButtonBehavior._focusedPrimaryClass$p : CUIB._splitButtonBehavior._focusedSecondaryClass$p);
        }
    },
    
    _getEdgeMajorVersion$p$2: function CUIB__splitButtonBehavior$_getEdgeMajorVersion$p$2$in() {
        var edgeVersion = Common.BrowserUtils.get_edgeVersion();
        if (edgeVersion) {
            var versions = edgeVersion.split('.');
            if (versions.length === 2) {
                return parseInt(versions[0]);
            }
        }
        return 0;
    }
}


CUIB._textBoxBehavior = function CUIB__textBoxBehavior(textBox) {
    this.$$d__onMouseUp$p$1 = Function.createDelegate(this, this._onMouseUp$p$1);
    this.$$d__onChange$p$1 = Function.createDelegate(this, this._onChange$p$1);
    this.$$d__onKeyPress$p$1 = Function.createDelegate(this, this._onKeyPress$p$1);
    this._excelTableRenameEnabled$1 = !!Common.AFrameworkApplication.appSettingsManager && Common.AFrameworkApplication.appSettingsManager.getBooleanAppSetting('ExcelTableRenameEnabled');
    CUIB._textBoxBehavior.initializeBase(this, [ textBox ]);
}
CUIB._textBoxBehavior.prototype = {
    _mouseupOnTextboxSinceFocus$1: false,
    _inputFocused$1: false,
    
    get__textBox$p$1: function CUIB__textBoxBehavior$get__textBox$p$1$in() {
        return this.get_control();
    },
    
    get__textBoxDom$p$1: function CUIB__textBoxBehavior$get__textBoxDom$p$1$in() {
        return this.get__textBox$p$1().get_textBoxDom();
    },
    
    get__tbProperties$p$1: function CUIB__textBoxBehavior$get__tbProperties$p$1$in() {
        return this.get__textBox$p$1().get_controlProperties();
    },
    
    attachEvents: function CUIB__textBoxBehavior$attachEvents$in(componentDom) {
        Common.Debug.assertTag(CommandUI.Controls.TextBoxComponentDom.isInstanceOfType(componentDom), 21263703);
        var textBoxDom = componentDom;
        var elmInput = textBoxDom.elmInput;
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, elmInput, this.$$d__onFocus$i$0);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.blur, elmInput, this.$$d__onBlur$i$0);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, elmInput, this.$$d_onKeyDown);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyPress, elmInput, this.$$d__onKeyPress$p$1);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, elmInput, this.$$d_onKeyUp);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.change, elmInput, this.$$d__onChange$p$1);
        Common.MouseInputManager.get_instance().registerHandler(Common.EventNames.mouseUp, elmInput, this.$$d__onMouseUp$p$1);
    },
    
    _onFocus$i$0: function CUIB__textBoxBehavior$_onFocus$i$0$in(args) {
        CUIB.ControlBehavior.prototype._onFocus$i$0.call(this, args);
        this._inputFocused$1 = true;
        CommandUI.Utility.ensureCSSClassOnElement(this.get__textBoxDom$p$1().elmControl, 'cui-tb-focus');
        if (this.get_control().get_enabled()) {
            Common.WindowUtils.selectAllTextInInput(this.get__textBoxDom$p$1().elmInput);
        }
        this._mouseupOnTextboxSinceFocus$1 = false;
        return false;
    },
    
    _onBlur$i$0: function CUIB__textBoxBehavior$_onBlur$i$0$in(args) {
        this._inputFocused$1 = false;
        CUIB.ControlBehavior.prototype._onBlur$i$0.call(this, args);
        CommandUI.Utility.removeCSSClassFromElement(this.get__textBoxDom$p$1().elmControl, 'cui-tb-focus');
        return false;
    },
    
    onKeyDown: function CUIB__textBoxBehavior$onKeyDown$in(args) {
        var handled = CUIB.ControlBehavior.prototype.onKeyDown.call(this, args);
        if (!CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent.rawEvent)) {
            var keyEvt = args.innerEvent.rawEvent;
            var keyCode = args.innerEvent.keyCode;
            var shiftKey = keyEvt.shiftKey;
            if (keyCode === Sys.UI.Key.tab) {
                this.commitPendingChange();
                if (CommandUI.Ribbon.isInstanceOfType(this.get_root())) {
                    handled = (this.get_root()).wrapKeyboardFocus(this.get_displayedComponent().get_elementInternal(), !shiftKey);
                }
            }
            else if (keyCode === Sys.UI.Key.enter) {
                if (this._excelTableRenameEnabled$1) {
                    this.commitPendingChange();
                    if (CommandUI.Ribbon.isInstanceOfType(this.get_root())) {
                        (this.get_root()).dismissTabPopup(true, true);
                    }
                    handled = true;
                }
            }
            else if (keyCode === Sys.UI.Key.esc) {
                this._resetInputToPreviousValue$p$1();
                if (CommandUI.Ribbon.isInstanceOfType(this.get_root())) {
                    (this.get_root()).dismissTabPopup(true, true);
                }
                handled = true;
            }
            else if ((keyCode === Sys.UI.Key.backspace) || (keyCode === Sys.UI.Key.del)) {
                handled = !this.get_control().get_enabled();
            }
            else if (args.get_commandKey()) {
                Common.InputManager.cancelEventNoPreventDefault(args.innerEvent);
                handled = false;
            }
        }
        return handled;
    },
    
    _onKeyPress$p$1: function CUIB__textBoxBehavior$_onKeyPress$p$1$in(args) {
        return !this.get_control().get_enabled();
    },
    
    onKeyUp: function CUIB__textBoxBehavior$onKeyUp$in(args) {
        return false;
    },
    
    _onChange$p$1: function CUIB__textBoxBehavior$_onChange$p$1$in(args) {
        this.commitPendingChange();
        return false;
    },
    
    _onMouseUp$p$1: function CUIB__textBoxBehavior$_onMouseUp$p$1$in(args) {
        if (!this.get__textBoxDom$p$1().isEditable) {
            Common.WindowUtils.selectAllTextInInput(this.get__textBoxDom$p$1().elmInput);
            return true;
        }
        if (!this._mouseupOnTextboxSinceFocus$1) {
            this._mouseupOnTextboxSinceFocus$1 = true;
            return true;
        }
        return false;
    },
    
    _setInputValue$p$1: function CUIB__textBoxBehavior$_setInputValue$p$1$in(value) {
        if (this.get__textBoxDom$p$1().elmInput.value !== value) {
            this.get__textBoxDom$p$1().elmInput.value = value;
        }
    },
    
    _resetInputToPreviousValue$p$1: function CUIB__textBoxBehavior$_resetInputToPreviousValue$p$1$in() {
        this._setInputValue$p$1(this.get_stateProperties()[CommandUI.Controls.TextBoxCommandProperties.Text]);
    },
    
    commitPendingChange: function CUIB__textBoxBehavior$commitPendingChange$in() {
        if (this.get_control().get_enabled() && this.get__textBoxDom$p$1().isEditable) {
            var oldValue = this.get_stateProperties()[CommandUI.Controls.TextBoxCommandProperties.Text];
            var newValue = this.get__textBoxDom$p$1().elmInput.value;
            if (newValue !== oldValue) {
                this.get_stateProperties()[CommandUI.Controls.TextBoxCommandProperties.Text] = newValue;
                this.get_root().executeCommand(this.get__tbProperties$p$1().Command, this.get_stateProperties(), this.get_displayedComponent(), 0, false, null, null);
            }
        }
        else {
            this._resetInputToPreviousValue$p$1();
        }
    },
    
    pollForStateAndUpdate: function CUIB__textBoxBehavior$pollForStateAndUpdate$in() {
        var textOld = this.get_stateProperties()[CommandUI.Controls.TextBoxCommandProperties.Text];
        var result = this.pollForStateAndUpdateInternal(this.get__tbProperties$p$1().Command, this.get__tbProperties$p$1().QueryCommand, this.get_stateProperties());
        if ((result & 2) > 0) {
            if (!this._inputFocused$1) {
                var textNew = this.get_stateProperties()[CommandUI.Controls.TextBoxCommandProperties.Text];
                if (textNew !== textOld) {
                    this._setInputValue$p$1(textNew);
                }
            }
        }
    }
}


CUIB._toggleButtonBehavior = function CUIB__toggleButtonBehavior(toggleButton) {
    CUIB._toggleButtonBehavior.initializeBase(this, [ toggleButton ]);
}
CUIB._toggleButtonBehavior.prototype = {
    
    get__toggleButton$p$1: function CUIB__toggleButtonBehavior$get__toggleButton$p$1$in() {
        return this.get_control();
    },
    
    get__properties$p$1: function CUIB__toggleButtonBehavior$get__properties$p$1$in() {
        return this.get_control().get_controlProperties();
    },
    
    doDefaultAction: function CUIB__toggleButtonBehavior$doDefaultAction$in(elmTarget, inputMethod, e) {
        if (this.get_control().get_enabled()) {
            if (!CommandUI.Utility.isFalse(this.get__properties$p$1().TogglesWhenExecuted)) {
                this._toggle$p$1();
            }
            this.get_stateProperties()['CommandValueId'] = this.get__toggleButton$p$1().getCommandValueId();
            this.get_stateProperties()['MenuItemId'] = this.get__toggleButton$p$1().getMenuItemId();
            this.get_stateProperties()['SourceControlId'] = this.get_control().get_id();
            Common.Debug.assertTag(!CommandUI.ScriptUtility.isNullOrEmptyString(this.get__properties$p$1().Command), 4773534);
            var $$t_5 = this;
            this.get_root().executeCommand(this.get__properties$p$1().Command, this.get_stateProperties(), this.get_displayedComponent(), inputMethod, !CommandUI.Utility.isFalse(this.get__properties$p$1().CloseMenuWhenExecuted), function(actionResponse) {
                if (CommandUI.Utility.isTrue($$t_5.get__properties$p$1().UpdateHtmlPostToggle)) {
                    if (actionResponse === 32) {
                        $$t_5._toggleUx$p$1();
                    }
                    else {
                        $$t_5._toggleState$p$1();
                    }
                }
            }, this.getTelemetryData(e));
        }
    },
    
    _toggleState$p$1: function CUIB__toggleButtonBehavior$_toggleState$p$1$in() {
        var newState = !(this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.On]);
        this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.On] = newState;
    },
    
    _toggleUx$p$1: function CUIB__toggleButtonBehavior$_toggleUx$p$1$in() {
        var state = (this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.On]);
        this.get__toggleButton$p$1().setState(state);
        if ((this.get__toggleButton$p$1().get_useCheckMark() && this.get__toggleButton$p$1().get_useUncheckedImage()) || CommandUI.Utility.isTrue(this.get__properties$p$1().UpdateHtmlPostToggle)) {
            this._updateHtml$p$1();
        }
    },
    
    _toggle$p$1: function CUIB__toggleButtonBehavior$_toggle$p$1$in() {
        this._toggleState$p$1();
        if (!CommandUI.Utility.isTrue(this.get__properties$p$1().UpdateHtmlPostToggle)) {
            this._toggleUx$p$1();
        }
    },
    
    onKeyDown: function CUIB__toggleButtonBehavior$onKeyDown$in(args) {
        var handled = CUIB.ControlBehavior.prototype.onKeyDown.call(this, args);
        if (!handled && !CommandUI.ScriptUtility.isNullOrUndefined(args.innerEvent) && this.get_parentMenu()) {
            var keyCode = args.innerEvent.keyCode;
            if (keyCode === Sys.UI.Key.enter || keyCode === Sys.UI.Key.space) {
                args.innerEvent.preventDefault();
            }
        }
        return handled;
    },
    
    pollForStateAndUpdate: function CUIB__toggleButtonBehavior$pollForStateAndUpdate$in() {
        if (!CommandUI.ScriptUtility.isNullOrUndefined(this.get__properties$p$1().MenuItemId)) {
            this.get_stateProperties()['MenuItemId'] = this.get__properties$p$1().MenuItemId;
        }
        var result = this.pollForStateAndUpdateInternal(this.get__properties$p$1().Command, this.get__properties$p$1().QueryCommand, this.get_stateProperties());
        if ((result & 2) > 0) {
            var visible = this.updateVisibility();
            if (visible) {
                this._updateHtml$p$1();
            }
        }
    },
    
    _updateHtml$p$1: function CUIB__toggleButtonBehavior$_updateHtml$p$1$in() {
        this.get__toggleButton$p$1().setState(this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.On]);
        this.updateDisplayMode(CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.DisplayMode], ''));
        this.updateLabelText();
        this.updateImage();
        this._updateLargeMenu$p$1();
        if ((CommandUI.Controls.ToggleButtonCommandProperties.Alt) in this.get_stateProperties()) {
            this.updateTooltip();
        }
    },
    
    _updateLargeMenu$p$1: function CUIB__toggleButtonBehavior$_updateLargeMenu$p$1$in() {
        var largeMenuDom = this.get_controlComponentDomCache().get_largeMenu();
        if (largeMenuDom && largeMenuDom.elmDescription) {
            var descriptionNew = CommandUI.Utility.validateStringProperty(this.get_stateProperties()[CommandUI.Controls.ToggleButtonCommandProperties.Description], this.get__properties$p$1().Description);
            if (descriptionNew !== largeMenuDom.elmDescription.innerText) {
                largeMenuDom.elmDescription.innerText = descriptionNew;
                Common.Debug.assertTag(!!largeMenuDom.elmLabel, 4773535);
                if (largeMenuDom.elmLabel && !(CommandUI.Jewel.isInstanceOfType(this.get_root()))) {
                    var hasDescription = !CommandUI.ScriptUtility.isNullOrEmptyString(descriptionNew);
                    CommandUI.Utility.toggleCSSClassOnElement(largeMenuDom.elmLabel, 'UIFontBold', hasDescription);
                    CommandUI.Utility.toggleCSSClassOnElement(largeMenuDom.elmLabel, 'cui-ctl-mediumlabel-nodescription', !hasDescription);
                }
            }
        }
    },
    
    attachEvents: function CUIB__toggleButtonBehavior$attachEvents$in(componentDom) {
        var button = componentDom.elmControl;
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.focus, button, this.$$d__onFocus$i$0);
        Common.BasicInputManager.get_instance().registerHandler(Common.EventNames.blur, button, this.$$d__onBlur$i$0);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOver, button, this.$$d__onPointerOver$i$0);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerOut, button, this.$$d__onPointerOut$i$0);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyDown, button, this.$$d_onKeyDown);
        Common.KeyInputManager.get_instance().registerHandler(Common.EventNames.keyUp, button, this.$$d_onKeyUp);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerDown, button, this.$$d_onPointerDown);
        Common.PointerInputManager.get_instance().registerHandler(Common.EventNames.pointerUp, button, this.$$d__onPointerUp$i$0);
        Common.ClickInputManager.get_instance().registerHandler(Common.EventNames.click, button, this.$$d__onClick$i$0);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchMove, button, this.$$d__onTouchMove$i$0);
        Common.TouchInputManager.get_instance().registerHandler(Common.EventNames.touchEnd, button, this.$$d__onTouchEnd$i$0);
    }
}


CUIB.ControlBehavior.registerClass('CUIB.ControlBehavior', null, CommandUI.IControlBehavior);
CUIB._colorPickerBehavior.registerClass('CUIB._colorPickerBehavior', CUIB.ControlBehavior);
CUIB._cuiBehaviorPackage.registerClass('CUIB._cuiBehaviorPackage', null, Common.App.IPackage, Common.Utils.IContainerConfiguration);
CUIB._menuPositioner.registerClass('CUIB._menuPositioner');
CUIB._buttonBehavior.registerClass('CUIB._buttonBehavior', CUIB.ControlBehavior);
CUIB._menuLauncherBehavior.registerClass('CUIB._menuLauncherBehavior', CUIB.ControlBehavior, CommandUI.IMenuLauncherBehavior, CommandUI.IControlBehavior);
CUIB._dropDownBehavior.registerClass('CUIB._dropDownBehavior', CUIB._menuLauncherBehavior);
CUIB._comboBoxBehavior.registerClass('CUIB._comboBoxBehavior', CUIB._dropDownBehavior);
CUIB.ControlBehaviorFactory.registerClass('CUIB.ControlBehaviorFactory', null, CommandUI.IControlBehaviorFactory);
CUIB._contextMenuLauncherBehavior.registerClass('CUIB._contextMenuLauncherBehavior', CUIB._menuLauncherBehavior);
CUIB._dialogMenuLauncherBehavior.registerClass('CUIB._dialogMenuLauncherBehavior', CUIB._menuLauncherBehavior);
CUIB.DialogMenuRootUser.registerClass('CUIB.DialogMenuRootUser', null, Common.IRootUser, Sys.IDisposable, Common.UI.IDialogMenuRootUser);
CUIB._flyoutAnchorBehavior.registerClass('CUIB._flyoutAnchorBehavior', CUIB._menuLauncherBehavior);
CUIB._galleryButtonBehavior.registerClass('CUIB._galleryButtonBehavior', CUIB.ControlBehavior);
CUIB._insertTableBehavior.registerClass('CUIB._insertTableBehavior', CUIB.ControlBehavior);
CUIB._jewelMenuLauncherBehavior.registerClass('CUIB._jewelMenuLauncherBehavior', CUIB._menuLauncherBehavior);
CUIB.KeyMoveAdapter.registerClass('CUIB.KeyMoveAdapter', null, Common.IKeyMoveAdapter);
CUIB._labelBehavior.registerClass('CUIB._labelBehavior', CUIB.ControlBehavior);
CUIB._searchBoxBehavior.registerClass('CUIB._searchBoxBehavior', CUIB._menuLauncherBehavior, CommandUI.Controls.ISearchBoxBehavior, CommandUI.IControlBehavior);
CUIB._sliderBehavior.registerClass('CUIB._sliderBehavior', CUIB.ControlBehavior);
CUIB._spinnerBehavior.registerClass('CUIB._spinnerBehavior', CUIB.ControlBehavior, CommandUI.Controls.ISpinnerBehavior, CommandUI.IControlBehavior);
CUIB._splitButtonBehavior.registerClass('CUIB._splitButtonBehavior', CUIB._menuLauncherBehavior);
CUIB._textBoxBehavior.registerClass('CUIB._textBoxBehavior', CUIB.ControlBehavior, CommandUI.Controls.ITextBoxBehavior, CommandUI.IControlBehavior);
CUIB._toggleButtonBehavior.registerClass('CUIB._toggleButtonBehavior', CUIB.ControlBehavior);
CUIB._colorPickerBehavior._hoverCellClassName$p = 'cui-colorpicker-hoveredOver';
CUIB._colorPickerBehavior._selectedCellClassName$p = 'cui-colorpicker-selected';
CUIB.ControlBehavior.triggerTime = 'TriggerTime';
CUIB.ControlBehaviorFactory._instance = null;
CUIB.DialogMenuRootUser._dialogMenuRootId$p = 'DialogMenuRootId';
CUIB.KeyMoveAdapter._pixeL_SPEED$p = 10;
CUIB.KeyMoveAdapter._pixeL_SPEED_SLOW$p = 1;
CUIB._sliderBehavior._sliderOnFocusClassName$p = 'cui-sldr-onfocus';
CUIB._spinnerBehavior._incDecRepeatDelay$p = 500;
CUIB._spinnerBehavior._incDecRepeatFrequency$p = 50;
CUIB._splitButtonBehavior._focusedPrimaryClass$p = 'cui-ctl-split-hovered-primary';
CUIB._splitButtonBehavior._focusedSecondaryClass$p = 'cui-ctl-split-hovered-secondary';
CUIB._splitButtonBehavior._titleAttribute$p = 'title';
CUIB._cuiBehaviorPackage.main();
Type.registerNamespace('_Ewa');

_Ewa.FormulaBarFunctionControl = function _Ewa_FormulaBarFunctionControl(initializePseudoClasses, stringManager, ewaControl, svgIconProvider) {
    this.$$d__onFormulaBarFunctionPointerDown$p$2 = Function.createDelegate(this, this._onFormulaBarFunctionPointerDown$p$2);
    this.$$d__onFormulaBarFunctionKeyDown$p$2 = Function.createDelegate(this, this._onFormulaBarFunctionKeyDown$p$2);
    this.$$d__onFormulaBarFunctionClick$p$2 = Function.createDelegate(this, this._onFormulaBarFunctionClick$p$2);
    _Ewa.FormulaBarFunctionControl.initializeBase(this, [ false ]);
    this._ewaControl$p$2 = ewaControl;
    this._gridView$p$2 = _Ewa.GridViewExtensions.grid(ewaControl);
    this._functionBoxClassName$p$2 = 'functionbox drop-down';
    this._pseudoClassBehavior$p$2 = initializePseudoClasses.attachPseudoClassBehavior('functionboxButton', 'functionboxButton', this._functionBoxClassName$p$2, 'green-fill-paths', '', '', false);
    if (_Ewa.IsFeatureEnabledExtensions.isSVGIconsForFormulaBarEnabled(this._ewaControl$p$2) && svgIconProvider) {
        this._iconElement$p$2 = svgIconProvider.insertAndCenterSvgElement('Function_16', 13, 13, this._pseudoClassBehavior$p$2.get_domElement(), 0, 0, null, stringManager.getString(897));
    }
    else {
        this._iconElement$p$2 = Common.ImageClusteringHelper.createClusteredImageFromClusterWithImageClass(13, 13, 'ewaboot_formulabar13', _Ewa.ClientHostingPlatform.getClusterUri(0), null, null, true, stringManager.getString(897), null, null);
    }
    this._pseudoClassBehavior$p$2.get_domElement().appendChild(this._iconElement$p$2);
    Common.ClickInputManager.get_instance().registerHandler('click', this._pseudoClassBehavior$p$2.get_domElement(), this.$$d__onFormulaBarFunctionClick$p$2);
    Common.KeyInputManager.get_instance().registerHandler('keydown', this._pseudoClassBehavior$p$2.get_domElement(), this.$$d__onFormulaBarFunctionKeyDown$p$2);
    Common.PointerInputManager.get_instance().registerHandler('msospPointerDown', this._pseudoClassBehavior$p$2.get_domElement(), this.$$d__onFormulaBarFunctionPointerDown$p$2);
}
_Ewa.FormulaBarFunctionControl.prototype = {
    _pseudoClassBehavior$p$2: null,
    _iconElement$p$2: null,
    _ewaControl$p$2: null,
    _gridView$p$2: null,
    _functionBoxClassName$p$2: null,
    
    dispose: function _Ewa_FormulaBarFunctionControl$dispose$in() {
        if (this._pseudoClassBehavior$p$2) {
            Common.ClickInputManager.get_instance().unregisterHandler('click', this._pseudoClassBehavior$p$2.get_domElement(), this.$$d__onFormulaBarFunctionClick$p$2);
            Common.KeyInputManager.get_instance().unregisterHandler('keydown', this._pseudoClassBehavior$p$2.get_domElement(), this.$$d__onFormulaBarFunctionKeyDown$p$2);
            Common.PointerInputManager.get_instance().unregisterHandler('msospPointerDown', this._pseudoClassBehavior$p$2.get_domElement(), this.$$d__onFormulaBarFunctionPointerDown$p$2);
        }
        System.IDisposableExtensions.safeDispose(this._pseudoClassBehavior$p$2);
        this._pseudoClassBehavior$p$2 = null;
        _Ewa.DOMElementExtensions.removeElementFromParentNode(this._iconElement$p$2);
        this._iconElement$p$2 = null;
        _Ewa.ExplicitDisposable.prototype.dispose.call(this);
    },
    
    _onFormulaBarFunctionClick$p$2: function _Ewa_FormulaBarFunctionControl$_onFormulaBarFunctionClick$p$2$in(args) {
        var info = new _Ewa.RibbonCommandInfo(753860909, 2, this._ewaControl$p$2.get_frameMode(), 2, null);
        this._ewaControl$p$2.get_commandHandlerManager().handleRibbonCommand(info, null, null);
        return true;
    },
    
    _onFormulaBarFunctionKeyDown$p$2: function _Ewa_FormulaBarFunctionControl$_onFormulaBarFunctionKeyDown$p$2$in(args) {
        if (args.innerEvent.keyCode === 13) {
            var info = new _Ewa.RibbonCommandInfo(753860909, 1, this._ewaControl$p$2.get_frameMode(), 2, null);
            this._ewaControl$p$2.get_commandHandlerManager().handleRibbonCommand(info, null, null);
            return true;
        }
        return false;
    },
    
    _onFormulaBarFunctionPointerDown$p$2: function _Ewa_FormulaBarFunctionControl$_onFormulaBarFunctionPointerDown$p$2$in(args) {
        if (this._gridView$p$2.get_isEditing()) {
            var cellContentEditor = this._gridView$p$2.get_editingControl();
            cellContentEditor.get_textBox().set_ignoreBlurEvent(true);
        }
        return false;
    }
}


_Ewa.OkCancelEditControl = function _Ewa_OkCancelEditControl(initializePseudoClasses, stringManager, ewaControl, svgIconProvider) {
    this.$$d__onCancelKeyDown$p$2 = Function.createDelegate(this, this._onCancelKeyDown$p$2);
    this.$$d__onCancelClick$p$2 = Function.createDelegate(this, this._onCancelClick$p$2);
    this.$$d__onPointerDown$p$2 = Function.createDelegate(this, this._onPointerDown$p$2);
    this.$$d__onOkKeyDown$p$2 = Function.createDelegate(this, this._onOkKeyDown$p$2);
    this.$$d__onOkClick$p$2 = Function.createDelegate(this, this._onOkClick$p$2);
    this.$$d__onEditEnded$p$2 = Function.createDelegate(this, this._onEditEnded$p$2);
    this.$$d__onEditStarted$p$2 = Function.createDelegate(this, this._onEditStarted$p$2);
    _Ewa.OkCancelEditControl.initializeBase(this, [ false ]);
    this._ewaControl$p$2 = ewaControl;
    this._gridView$p$2 = _Ewa.GridViewExtensions.grid(ewaControl);
    this._okCancelButtonsContainer$p$2 = _Ewa.OkCancelEditControl._getOkCancelButtonsContainer$p(ewaControl);
    if (_Ewa.IsFeatureEnabledExtensions.isSVGIconsForFormulaBarEnabled(this._ewaControl$p$2) && svgIconProvider) {
        this._okIconElement$p$2 = svgIconProvider.getSvgElement('Checkmark_16', 16, 16, null, '');
        this._cancelIconElement$p$2 = svgIconProvider.getSvgElement('DeleteHover_16', 16, 16, null, '');
    }
    else {
        this._okIconElement$p$2 = Common.ImageClusteringHelper.createClusteredImageFromClusterWithImageClass(16, 16, 'ewaboot_checkMark16', _Ewa.ClientHostingPlatform.getClusterUri(1), null, null, true, stringManager.getString(901), null, null);
        this._cancelIconElement$p$2 = Common.ImageClusteringHelper.createClusteredImageFromClusterWithImageClass(16, 16, 'ewaboot_deleteHover16', _Ewa.ClientHostingPlatform.getClusterUri(1), null, null, true, stringManager.getString(902), null, null);
    }
    this._okPseudoClassBehavior$p$2 = initializePseudoClasses.attachPseudoClassBehavior('okboxButton', 'okboxButton', 'okbox drop-down', '', '', '', false);
    this._okPseudoClassBehavior$p$2.get_domElement().appendChild(this._okIconElement$p$2);
    this._cancelPseudoClassBehavior$p$2 = initializePseudoClasses.attachPseudoClassBehavior('cancelboxButton', 'cancelboxButton', 'cancelbox drop-down', '', '', '', false);
    this._cancelPseudoClassBehavior$p$2.get_domElement().appendChild(this._cancelIconElement$p$2);
    this._gridView$p$2.get_cellTextEditBox().add_editStarted(this.$$d__onEditStarted$p$2);
    this._gridView$p$2.get_cellTextEditBox().add_editEnded(this.$$d__onEditEnded$p$2);
    Common.ClickInputManager.get_instance().registerHandler('click', this._okPseudoClassBehavior$p$2.get_domElement(), this.$$d__onOkClick$p$2);
    Common.KeyInputManager.get_instance().registerHandler('keydown', this._okPseudoClassBehavior$p$2.get_domElement(), this.$$d__onOkKeyDown$p$2);
    Common.PointerInputManager.get_instance().registerHandler('msospPointerDown', this._okPseudoClassBehavior$p$2.get_domElement(), this.$$d__onPointerDown$p$2);
    Common.ClickInputManager.get_instance().registerHandler('click', this._cancelPseudoClassBehavior$p$2.get_domElement(), this.$$d__onCancelClick$p$2);
    Common.KeyInputManager.get_instance().registerHandler('keydown', this._cancelPseudoClassBehavior$p$2.get_domElement(), this.$$d__onCancelKeyDown$p$2);
    Common.PointerInputManager.get_instance().registerHandler('msospPointerDown', this._cancelPseudoClassBehavior$p$2.get_domElement(), this.$$d__onPointerDown$p$2);
}
_Ewa.OkCancelEditControl._getOkCancelButtonsContainer$p = function _Ewa_OkCancelEditControl$_getOkCancelButtonsContainer$p$st(ewaControl) {
    return document.getElementById(ewaControl.get_namingContainerIdPrefix() + 'okCancelButtonContainer');
}
_Ewa.OkCancelEditControl.prototype = {
    _okPseudoClassBehavior$p$2: null,
    _cancelPseudoClassBehavior$p$2: null,
    _okIconElement$p$2: null,
    _cancelIconElement$p$2: null,
    _ewaControl$p$2: null,
    _gridView$p$2: null,
    _okCancelButtonsContainer$p$2: null,
    
    dispose: function _Ewa_OkCancelEditControl$dispose$in() {
        if (this._okPseudoClassBehavior$p$2) {
            Common.ClickInputManager.get_instance().unregisterHandler('click', this._okPseudoClassBehavior$p$2.get_domElement(), this.$$d__onOkClick$p$2);
            Common.KeyInputManager.get_instance().unregisterHandler('keydown', this._okPseudoClassBehavior$p$2.get_domElement(), this.$$d__onOkKeyDown$p$2);
            Common.PointerInputManager.get_instance().unregisterHandler('msospPointerDown', this._okPseudoClassBehavior$p$2.get_domElement(), this.$$d__onPointerDown$p$2);
        }
        if (this._cancelPseudoClassBehavior$p$2) {
            Common.ClickInputManager.get_instance().unregisterHandler('click', this._cancelPseudoClassBehavior$p$2.get_domElement(), this.$$d__onCancelClick$p$2);
            Common.KeyInputManager.get_instance().unregisterHandler('keydown', this._cancelPseudoClassBehavior$p$2.get_domElement(), this.$$d__onCancelKeyDown$p$2);
            Common.PointerInputManager.get_instance().unregisterHandler('msospPointerDown', this._cancelPseudoClassBehavior$p$2.get_domElement(), this.$$d__onPointerDown$p$2);
        }
        System.IDisposableExtensions.safeDispose(this._okPseudoClassBehavior$p$2);
        this._okPseudoClassBehavior$p$2 = null;
        System.IDisposableExtensions.safeDispose(this._cancelPseudoClassBehavior$p$2);
        this._cancelPseudoClassBehavior$p$2 = null;
        _Ewa.DOMElementExtensions.removeElementFromParentNode(this._cancelIconElement$p$2);
        this._cancelIconElement$p$2 = null;
        _Ewa.DOMElementExtensions.removeElementFromParentNode(this._okIconElement$p$2);
        this._okIconElement$p$2 = null;
        _Ewa.ExplicitDisposable.prototype.dispose.call(this);
    },
    
    _onEditStarted$p$2: function _Ewa_OkCancelEditControl$_onEditStarted$p$2$in(sender, e) {
        this._okCancelButtonsContainer$p$2.style.display = 'flex';
    },
    
    _onEditEnded$p$2: function _Ewa_OkCancelEditControl$_onEditEnded$p$2$in(sender, e) {
        this._okCancelButtonsContainer$p$2.style.display = 'none';
    },
    
    _onOkClick$p$2: function _Ewa_OkCancelEditControl$_onOkClick$p$2$in(args) {
        return this._onButtonPressed$p$2(true, String.format('OkCancelEditControl.OnOkClick: {0}', args.get_inputSource()));
    },
    
    _onOkKeyDown$p$2: function _Ewa_OkCancelEditControl$_onOkKeyDown$p$2$in(args) {
        return this._onButtonPressed$p$2(true, String.format('OkCancelEditControl.OnOkKeyDown: {0}', args.get_inputSource()));
    },
    
    _onCancelClick$p$2: function _Ewa_OkCancelEditControl$_onCancelClick$p$2$in(args) {
        return this._onButtonPressed$p$2(false, String.format('OkCancelEditControl.OnCancelClick: {0}', args.get_inputSource()));
    },
    
    _onCancelKeyDown$p$2: function _Ewa_OkCancelEditControl$_onCancelKeyDown$p$2$in(args) {
        return this._onButtonPressed$p$2(false, String.format('OkCancelEditControl.OnCancelKeyDown: {0}', args.get_inputSource()));
    },
    
    _onPointerDown$p$2: function _Ewa_OkCancelEditControl$_onPointerDown$p$2$in(args) {
        if (this._gridView$p$2.get_isEditing()) {
            var cellContentEditor = this._gridView$p$2.get_editingControl();
            cellContentEditor.get_textBox().set_ignoreBlurEvent(true);
        }
        return false;
    },
    
    _onButtonPressed$p$2: function _Ewa_OkCancelEditControl$_onButtonPressed$p$2$in(shouldCommitEdit, endEditCaller) {
        _Ewa.ULS.debugSendTraceTag(50976203, 0, 50, 'OkCancelEditControl.OnButtonPressed: {0}', endEditCaller);
        var cellContentEditor = this._gridView$p$2.get_editingControl();
        cellContentEditor.endEdit(shouldCommitEdit, endEditCaller, 0, null);
        this._gridView$p$2.focus();
        return true;
    }
}


_Ewa._formulaBar = function _Ewa__formulaBar(ewaControl, svgIconProvider) {
    this.$$d__onTextBoxKeyPress$p$4 = Function.createDelegate(this, this._onTextBoxKeyPress$p$4);
    this.$$d__onCommandUIAttachCompleted$p$4 = Function.createDelegate(this, this._onCommandUIAttachCompleted$p$4);
    this.$$d__onKeyDown$p$4 = Function.createDelegate(this, this._onKeyDown$p$4);
    this.$$d__onModeChanged$p$4 = Function.createDelegate(this, this._onModeChanged$p$4);
    this.$$d__onPartialInteractivityStatusChanged$p$4 = Function.createDelegate(this, this._onPartialInteractivityStatusChanged$p$4);
    this.$$d__onBlockCacheItemChanged$p$4 = Function.createDelegate(this, this._onBlockCacheItemChanged$p$4);
    this.$$d__onCurrentSelectionModeChanged$p$4 = Function.createDelegate(this, this._onCurrentSelectionModeChanged$p$4);
    this.$$d__onCellValueChanged$p$4 = Function.createDelegate(this, this._onCellValueChanged$p$4);
    this.$$d__onEditEnded$p$4 = Function.createDelegate(this, this._onEditEnded$p$4);
    this.$$d__onEditStarted$p$4 = Function.createDelegate(this, this._onEditStarted$p$4);
    this.$$d__onActiveItemChanged$p$4 = Function.createDelegate(this, this._onActiveItemChanged$p$4);
    _Ewa._formulaBar.initializeBase(this, [ _Ewa.GridViewExtensions.grid(ewaControl) ]);
    _Ewa.CellContentEditor.prototype.initialize.call(this, _Ewa._formulaBar._setInnerHtml$p(ewaControl));
    this._formulaBarElement$p$4 = _Ewa._formulaBar._getFormulaBarElement$p(ewaControl);
    this._browserBehaviorSuppressor$p$4 = new _Ewa.BrowserDefaultBehaviorSuppressor(this._formulaBarElement$p$4, 1, null);
    this._initializePseudoClasses$p$4 = new _Ewa.InitializePseudoClasses(ewaControl);
    this._initializePseudoClasses$p$4.attachPseudoClassBehavior('ribbonPlaceHolder-TabRowRight', 'ribbonPlaceHolder-TabRowRight', 'ewa-ribbon-minimize-btn cui-TabRowRight', 'ewa-menu-btn-hover', '', 'ewa-menu-btn-pressed', false);
    this._$$pf_FormulaBarFunctionControl$p$4 = new _Ewa.FormulaBarFunctionControl(this._initializePseudoClasses$p$4, _Ewa.ClientStringManager.get_instance(), ewaControl, svgIconProvider);
    this._$$pf_OkCancelEditControl$p$4 = new _Ewa.OkCancelEditControl(this._initializePseudoClasses$p$4, _Ewa.ClientStringManager.get_instance(), ewaControl, svgIconProvider);
    ewaControl.get_sheets().add_activeItemChanged(this.$$d__onActiveItemChanged$p$4);
    var grid = this.get_grid();
    grid.get_cellTextEditBox().add_editStarted(this.$$d__onEditStarted$p$4);
    grid.get_cellTextEditBox().add_editEnded(this.$$d__onEditEnded$p$4);
    grid.get_cellTextEditBox().add_cellValueChanged(this.$$d__onCellValueChanged$p$4);
    grid.add_currentSelectionModeChanged(this.$$d__onCurrentSelectionModeChanged$p$4);
    grid.get_blockManager().add_blockCacheItemChanged(this.$$d__onBlockCacheItemChanged$p$4);
    grid.get_blockManager().add_blockCacheItemChangedNotRenderContent(this.$$d__onBlockCacheItemChanged$p$4);
    _Ewa.ProgressUIManagerExtensions.progressUIManager(ewaControl).add_partialInteractivityStatusChanged(this.$$d__onPartialInteractivityStatusChanged$p$4);
    ewaControl.get_sessionStateManager().add_applicationModeChanged(this.$$d__onModeChanged$p$4);
    if (ewaControl.isChangeGateEnabled('OfficeVSO:3371143_RegisterFormulaBarToClearContentEvent')) {
        var $$t_B = this;
        ewaControl.get_serviceRegistry().getServiceAsync(_Ewa.IClearContentNotifier, 313, function(clearContentNotifier) {
            $$t_B._clearContentNotifier$p$4 = clearContentNotifier;
            $$t_B._clearContentNotifier$p$4.add_cellValueCleared($$t_B.$$d__onCellValueChanged$p$4);
        });
    }
    Common.KeyInputManager.get_instance().registerHandler('keydown', this._formulaBarElement$p$4, this.$$d__onKeyDown$p$4);
    var textBoxStyle = this.get_textBox().get_style();
    _Ewa.StyleExtensions.setLeftOrRightForDirection(textBoxStyle, ewaControl.get_isChromeRtl(), '0px');
    textBoxStyle.textAlign = (this.get_isBaseDirectionRtl()) ? 'right' : 'left';
    this.set_isVisible(false);
    _Ewa.CommandUIExtensions.commandUIEventManager(this.get_ewaControl()).add_onCommandUIAttachCompleted(this.$$d__onCommandUIAttachCompleted$p$4);
    this._setTextBoxForActiveItem$p$4();
    this._adjustFunctionBoxAccordingToMode$p$4();
    this.get_textBox().set_shouldPropagateMouseUpEvent(true);
    var $$t_C = this;
    ewaControl.get_serviceRegistry().getServiceAsync(_Ewa.ICommandUIManager, 53, function(commandUIManager) {
        _Ewa.TaskExtensions.c(_Ewa.GetServiceTaskFactory.create(_Ewa.IRibbonControlsManager, ewaControl.get_serviceRegistry(), 102, $$t_C.get_cancelOnDisposeToken(), 1), function(task) {
            if ($$t_C._formulaBarElement$p$4) {
                $$t_C._namedObjectDropdownList$p$4 = new _Ewa._editableNamedObjectDropdownList(ewaControl, commandUIManager, (task).get_result(), $$t_C._formulaBarElement$p$4, svgIconProvider);
            }
            else {
                Diag.ULS.sendTraceTag(50930522, 0, 50, 'FormulaBar.ctor: this.formulaBarElement is null (probably after dispose)');
            }
        }, $$t_C.get_cancelOnDisposeToken());
    });
    _Ewa.KeyboardAccessibleSectionRegistryExtensions.keyboardAccessibleSectionRegistry(ewaControl).registerSection(this);
    this.get_textBox().add_keyPress(this.$$d__onTextBoxKeyPress$p$4);
    this._hasStartedTyping$p$4 = false;
    this._isInTheMiddleOfStartEdit$p$4 = false;
    if (this.get_ewaControl().get_isRegionComposerLayoutManagementEnabled()) {
        Sys.UI.DomElement.addCssClass(this._formulaBarElement$p$4, 'region-composer');
    }
}
_Ewa._formulaBar.get_newlineRegExp = function _Ewa__formulaBar$get_newlineRegExp$st() {
    return _Ewa._formulaBar._newlineRegExp$p || (_Ewa._formulaBar._newlineRegExp$p = new RegExp('[\r\n]'));
}
_Ewa._formulaBar._getFormulaBarElement$p = function _Ewa__formulaBar$_getFormulaBarElement$p$st(ewaControl) {
    return document.getElementById(ewaControl.get_namingContainerIdPrefix() + 'm_formulaBar');
}
_Ewa._formulaBar._setInnerHtml$p = function _Ewa__formulaBar$_setInnerHtml$p$st(ewaControl) {
    var richTextEditingEnabled = _Ewa.IsFeatureEnabledExtensions.isRichTextEditingEnabled(ewaControl);
    var formulaBarElement = _Ewa._formulaBar._getFormulaBarElement$p(ewaControl);
    _Ewa.DOMElementExtensions.verifyElement(formulaBarElement, 'div');
    Sys.UI.DomElement.addCssClass(formulaBarElement, 'ewa-fb-nb');
    _Ewa._formulaBar._functionBoxlement$p = _Ewa._formulaBar._createFunctionBoxDiv$p(ewaControl.get_namingContainerIdPrefix());
    var formulaBarTextElement = _Ewa._formulaBar._createTextElement$p(richTextEditingEnabled, ewaControl.isChangeGateEnabled('OfficeVSO:3985157_FormulaBarTextSnap'));
    var formulaBarContainer = _Ewa._formulaBar._createFormulaBarContainer$p();
    formulaBarContainer.appendChild(_Ewa._formulaBar._functionBoxlement$p);
    formulaBarContainer.appendChild(formulaBarTextElement);
    var okCancelButtonsContainer = _Ewa._formulaBar._createOkCancelButtonsContainer$p(ewaControl.get_namingContainerIdPrefix());
    var okBoxDiv = _Ewa._formulaBar._createOkBoxDiv$p(ewaControl.get_namingContainerIdPrefix());
    var cancelBoxDiv = _Ewa._formulaBar._createCancelBoxDiv$p(ewaControl.get_namingContainerIdPrefix());
    okCancelButtonsContainer.appendChild(okBoxDiv);
    okCancelButtonsContainer.appendChild(cancelBoxDiv);
    formulaBarContainer.appendChild(okCancelButtonsContainer);
    var nameBoxPlaceHolderDiv = _Ewa._formulaBar._createNameBoxPlaceHolder$p(ewaControl.get_namingContainerIdPrefix());
    formulaBarElement.appendChild(nameBoxPlaceHolderDiv);
    formulaBarElement.appendChild(formulaBarContainer);
    var $$t_A = ewaControl;
    var textBox = new _Ewa.TextBox(formulaBarTextElement, richTextEditingEnabled, ewaControl.isServerFeatureEnabled(700), ($$t_A.$$d_isChangeGateEnabled || ($$t_A.$$d_isChangeGateEnabled = Function.createDelegate($$t_A, $$t_A.isChangeGateEnabled))), false, null);
    textBox.callOrExecuteAfterLoaded(function() {
        Common.DOMElementExtension.setAttribute(textBox.get_textElement(), Common.DomAttrName.ariaLabel, 'formula bar');
    });
    textBox.set_isVisible(false);
    return textBox;
}
_Ewa._formulaBar._createFormulaBarContainer$p = function _Ewa__formulaBar$_createFormulaBarContainer$p$st() {
    var formulaBarContainer = document.createElement('div');
    formulaBarContainer.className = 'ewa-fb';
    Sys.UI.DomElement.addCssClass(formulaBarContainer, 'drop-down');
    return formulaBarContainer;
}
_Ewa._formulaBar._createOkCancelButtonsContainer$p = function _Ewa__formulaBar$_createOkCancelButtonsContainer$p$st(ewaNamingPrefix) {
    var okCancelButtonsContainer = document.createElement('div');
    okCancelButtonsContainer.id = ewaNamingPrefix + 'okCancelButtonContainer';
    okCancelButtonsContainer.className = 'ok-cancel-buttons-container';
    Sys.UI.DomElement.addCssClass(okCancelButtonsContainer, 'drop-down');
    return okCancelButtonsContainer;
}
_Ewa._formulaBar._createTextElement$p = function _Ewa__formulaBar$_createTextElement$p$st(richTextEditingEnabled, formulaBarTextSnapEnabled) {
    var isContentEditableSupported = _Ewa.ContentEditableTextBoxBridge.isThisBrowserSupportContentEditableTextBox();
    var formulaBarTextElement = document.createElement((isContentEditableSupported) ? 'div' : 'textarea');
    formulaBarTextElement.className = 'ewa-fb-text-box';
    if (formulaBarTextSnapEnabled && richTextEditingEnabled) {
        Sys.UI.DomElement.addCssClass(formulaBarTextElement, 'ewa-fb-text-box-new');
    }
    if (!richTextEditingEnabled) {
        formulaBarTextElement.setAttribute('autocorrect', 'off');
        formulaBarTextElement.setAttribute('wrap', 'virtual');
        formulaBarTextElement.setAttribute('spellcheck', 'false');
        _Ewa.DOMElementExtensions.setAriaRole(formulaBarTextElement, 'textbox', '', '', '');
        formulaBarTextElement.tabIndex = 0;
    }
    else {
        _Ewa.DOMElementExtensions.toggleCssClassesOnCondition(formulaBarTextElement, Common.BrowserUtils.get_isInternetExplorerNonEdge(), 'ie', 'not-ie');
    }
    if (isContentEditableSupported) {
        formulaBarTextElement.id = 'formulaBarTextDivId';
        if (!richTextEditingEnabled) {
            formulaBarTextElement.setAttribute('contenteditable', 'true');
        }
    }
    else {
        (formulaBarTextElement).cols = 20;
        (formulaBarTextElement).rows = 2;
    }
    return formulaBarTextElement;
}
_Ewa._formulaBar._createFunctionBoxDiv$p = function _Ewa__formulaBar$_createFunctionBoxDiv$p$st(ewaNamingPrefix) {
    var functionBoxDiv = document.createElement('div');
    functionBoxDiv.id = ewaNamingPrefix + 'functionboxButton';
    functionBoxDiv.className = 'functionbox';
    _Ewa.DOMElementExtensions.setAriaRole(functionBoxDiv, 'button', '', '', '');
    functionBoxDiv.setAttribute('aria-label', 'insert function');
    functionBoxDiv.tabIndex = 0;
    Sys.UI.DomElement.addCssClass(functionBoxDiv, 'drop-down');
    return functionBoxDiv;
}
_Ewa._formulaBar._createOkBoxDiv$p = function _Ewa__formulaBar$_createOkBoxDiv$p$st(ewaNamingPrefix) {
    var okBoxDiv = document.createElement('div');
    okBoxDiv.id = ewaNamingPrefix + 'okboxButton';
    okBoxDiv.className = 'okbox';
    _Ewa.DOMElementExtensions.setAriaRole(okBoxDiv, 'button', '', '', '');
    okBoxDiv.setAttribute('aria-label', 'commit edit');
    okBoxDiv.tabIndex = 0;
    Sys.UI.DomElement.addCssClass(okBoxDiv, 'drop-down');
    return okBoxDiv;
}
_Ewa._formulaBar._createCancelBoxDiv$p = function _Ewa__formulaBar$_createCancelBoxDiv$p$st(ewaNamingPrefix) {
    var cancelBoxDiv = document.createElement('div');
    cancelBoxDiv.id = ewaNamingPrefix + 'cancelboxButton';
    cancelBoxDiv.className = 'cancelbox';
    _Ewa.DOMElementExtensions.setAriaRole(cancelBoxDiv, 'button', '', '', '');
    cancelBoxDiv.setAttribute('aria-label', 'cancel edit');
    cancelBoxDiv.tabIndex = 0;
    Sys.UI.DomElement.addCssClass(cancelBoxDiv, 'drop-down');
    return cancelBoxDiv;
}
_Ewa._formulaBar._createNameBoxPlaceHolder$p = function _Ewa__formulaBar$_createNameBoxPlaceHolder$p$st(ewaNamingPrefix) {
    var nameBoxPlaceHolderDiv = document.createElement('div');
    nameBoxPlaceHolderDiv.id = ewaNamingPrefix + 'nameBoxPlaceHolder';
    nameBoxPlaceHolderDiv.className = 'ewa-fb-name-box-placeholder';
    return nameBoxPlaceHolderDiv;
}
_Ewa._formulaBar.prototype = {
    _formulaBarElement$p$4: null,
    _browserBehaviorSuppressor$p$4: null,
    _initializePseudoClasses$p$4: null,
    _namedObjectDropdownList$p$4: null,
    _hasStartedTyping$p$4: false,
    _isInTheMiddleOfStartEdit$p$4: false,
    _clearContentNotifier$p$4: null,
    _$$pf_FormulaBarFunctionControl$p$4: null,
    
    get_formulaBarFunctionControl: function _Ewa__formulaBar$get_formulaBarFunctionControl$in() {
        return this._$$pf_FormulaBarFunctionControl$p$4;
    },
    
    set_formulaBarFunctionControl: function _Ewa__formulaBar$set_formulaBarFunctionControl$in(value) {
        this._$$pf_FormulaBarFunctionControl$p$4 = value;
        return value;
    },
    
    _$$pf_OkCancelEditControl$p$4: null,
    
    get_isVisible: function _Ewa__formulaBar$get_isVisible$in() {
        return _Ewa.DOMElementExtensions.isVisible(this._formulaBarElement$p$4);
    },
    
    set_isVisible: function _Ewa__formulaBar$set_isVisible$in(value) {
        _Ewa.DOMElementExtensions.setVisible(this._formulaBarElement$p$4, value, true);
        this.get_textBox().set_isVisible(value);
        return value;
    },
    
    get_rootElement: function _Ewa__formulaBar$get_rootElement$in() {
        return this._formulaBarElement$p$4;
    },
    
    get_canReceiveFocus: function _Ewa__formulaBar$get_canReceiveFocus$in() {
        return this.get_isVisible();
    },
    
    get_sectionName: function _Ewa__formulaBar$get_sectionName$in() {
        return 'FB';
    },
    
    setFocusOnSection: function _Ewa__formulaBar$setFocusOnSection$in(forward, alreadyFocused) {
        var handled = false;
        if (!alreadyFocused) {
            handled = this._focusFirstElement$p$4();
        }
        return handled;
    },
    
    dispose: function _Ewa__formulaBar$dispose$in() {
        var ewaControl = this.get_ewaControl();
        if (ewaControl) {
            ewaControl.get_sheets().remove_activeItemChanged(this.$$d__onActiveItemChanged$p$4);
            var grid = this.get_grid();
            grid.get_cellTextEditBox().remove_editStarted(this.$$d__onEditStarted$p$4);
            grid.get_cellTextEditBox().remove_editEnded(this.$$d__onEditEnded$p$4);
            grid.get_cellTextEditBox().remove_cellValueChanged(this.$$d__onCellValueChanged$p$4);
            grid.remove_currentSelectionModeChanged(this.$$d__onCurrentSelectionModeChanged$p$4);
            grid.get_blockManager().remove_blockCacheItemChanged(this.$$d__onBlockCacheItemChanged$p$4);
            grid.get_blockManager().remove_blockCacheItemChangedNotRenderContent(this.$$d__onBlockCacheItemChanged$p$4);
            _Ewa.ProgressUIManagerExtensions.progressUIManager(ewaControl).remove_partialInteractivityStatusChanged(this.$$d__onPartialInteractivityStatusChanged$p$4);
            ewaControl.get_sessionStateManager().remove_applicationModeChanged(this.$$d__onModeChanged$p$4);
            var commandUIEventManager = _Ewa.CommandUIExtensions.commandUIEventManager(this.get_ewaControl());
            Common.KeyInputManager.get_instance().unregisterHandler('keydown', this._formulaBarElement$p$4, this.$$d__onKeyDown$p$4);
            if (commandUIEventManager) {
                commandUIEventManager.remove_onCommandUIAttachCompleted(this.$$d__onCommandUIAttachCompleted$p$4);
            }
            _Ewa.KeyboardAccessibleSectionRegistryExtensions.keyboardAccessibleSectionRegistry(ewaControl).removeSection(this);
            if (ewaControl.isChangeGateEnabled('OfficeVSO:3371143_RegisterFormulaBarToClearContentEvent')) {
                if (this._clearContentNotifier$p$4) {
                    this._clearContentNotifier$p$4.remove_cellValueCleared(this.$$d__onCellValueChanged$p$4);
                }
                ewaControl.get_serviceRegistry().detachAndDisposeService(_Ewa.IClearContentNotifier, 313);
            }
        }
        if (this.get_textBox()) {
            this.get_textBox().remove_keyPress(this.$$d__onTextBoxKeyPress$p$4);
        }
        System.IDisposableExtensions.safeDisposeArray([ this._browserBehaviorSuppressor$p$4, this._$$pf_FormulaBarFunctionControl$p$4, this._$$pf_OkCancelEditControl$p$4, this._initializePseudoClasses$p$4, this._namedObjectDropdownList$p$4 ]);
        if (this._formulaBarElement$p$4) {
            this._formulaBarElement$p$4.innerHTML = '';
            this._formulaBarElement$p$4.className = '';
        }
        Diag.ULS.sendTraceTag(50930523, 0, 50, 'FormulaBar.Dispose: setting this.formulaBarElement to null');
        this._formulaBarElement$p$4 = null;
        _Ewa.CellContentEditor.prototype.dispose.call(this);
    },
    
    endEdit: function _Ewa__formulaBar$endEdit$in(commit, caller, comboKey, domEvent) {
        if (!this.get_isEditing()) {
            return;
        }
        if (this.get_ewaControl().isChangeGateEnabled('OfficeVSO:4011777_investigateCalculateMaximumClippingExtentsCrash')) {
            var gridKeyboardHandler = this.get_grid().get_cellTextEditBox().get_textBox().get_domElement();
            Diag.ULS.sendTraceTag(592505058, 0, 50, 'FormulaBar.EndEdit: gridKeyboardHandler is: {0}, parent is: {1}', gridKeyboardHandler.id, (gridKeyboardHandler.parentNode) ? gridKeyboardHandler.parentNode.id : 'null');
        }
        var inCellEditBox = this.get_grid().get_cellTextEdit();
        inCellEditBox.get_textBox().set_text(this.get_text());
        this.set_text('');
        this.set_isEditing(false);
        this._hasStartedTyping$p$4 = false;
        this.cancelRangePicker(true);
        if (commit) {
            var currentSheet = this.get_grid().get_ewaControl().get_sheets().get_activeItem();
            this.raiseCommitEditEvent(new _Ewa.CommitEditEventArgs(this.get_grid().get_selectionManager().get_activeCell(), inCellEditBox.get_text(), inCellEditBox.get_text(), false, currentSheet));
        }
        this.raiseEditEndedEvent();
        var fullCallerName = String.format('{0}->FormulaBar.EndEdit', caller);
        inCellEditBox.endEdit(commit, fullCallerName, comboKey, domEvent);
        inCellEditBox.get_textBox().focus();
    },
    
    belongsToSection: function _Ewa__formulaBar$belongsToSection$in(candidate) {
        return _Ewa.DOMElementExtensions.isDescendentElementOrSelf(this._formulaBarElement$p$4, candidate);
    },
    
    handleFocusGained: function _Ewa__formulaBar$handleFocusGained$in() {
        Common.AFrameworkApplication.get_activeFrame().get_theFocusManager().setScope(this.get_sectionName());
    },
    
    handleFocusLost: function _Ewa__formulaBar$handleFocusLost$in() {
    },
    
    onAutoCompleteCommandHandled: function _Ewa__formulaBar$onAutoCompleteCommandHandled$in(command) {
        var inCellEditBox = this.get_grid().get_cellTextEdit();
        inCellEditBox.set_text(this.get_text());
        inCellEditBox.setCaretPosition(this.get_textBox().get_caretPosition());
    },
    
    onTextBoxMouseDown: function _Ewa__formulaBar$onTextBoxMouseDown$in(domEvent) {
        if (!this.get_textBox().get_disabled()) {
            this.get_grid().get_cellTextEditBox().get_textBox().set_ignoreBlurEvent(true);
            this._startEdit$p$4(false, true);
            this.checkForAutoComplete();
        }
    },
    
    onTextBoxKeyUp: function _Ewa__formulaBar$onTextBoxKeyUp$in(domEvent) {
        var command = this.get_ewaControl().get_shortcutKeyManager().getCommand(domEvent);
        _Ewa.ULS.debugSendTraceTag(1681485422, 3, 200, 'FormulaBar.OnTextBoxKeyUp: keyCode={0}, command={1}', domEvent.keyCode, command);
        if (command === 1872288872 || command === 125627505 || command === 267796030) {
            _Ewa.DomEventExtensions.stopBubbling(domEvent, true);
        }
        else {
            var inCellEditBox = this.get_grid().get_cellTextEdit();
            inCellEditBox.set_text(this.get_text());
            inCellEditBox.setCaretPosition(this.get_textBox().get_caretPosition());
            this.updateDirection(null);
            if (this.get_ewaControl().isServerFeatureEnabled(532)) {
                _Ewa.CellContentEditor.prototype.onTextBoxKeyUp.call(this, domEvent);
            }
        }
    },
    
    onSelectionChanged: function _Ewa__formulaBar$onSelectionChanged$in(sender, e) {
        if (this.get_isEditing()) {
            _Ewa.CellContentEditor.prototype.onSelectionChanged.call(this, sender, e);
        }
    },
    
    onSelectionStarted: function _Ewa__formulaBar$onSelectionStarted$in(sender, e) {
        if (this.get_isEditing()) {
            _Ewa.CellContentEditor.prototype.onSelectionStarted.call(this, sender, e);
        }
    },
    
    onTextBoxKeyDown: function _Ewa__formulaBar$onTextBoxKeyDown$in(domEvent) {
        this.raiseKeyDownStarted();
        _Ewa.InteractivityLoggerExtensions.interactivityLogger(this.get_ewaControl()).reportOperation(_Ewa.OperationName.formulaBarTypingKeyPressed, null, null);
        if (Common.BrowserUtils.get_isIPad()) {
            window.focus();
        }
        if (!this._hasStartedTyping$p$4 && domEvent.keyCode === 9) {
            return;
        }
        if (domEvent.keyCode === 117 && (domEvent.ctrlKey || _Ewa.DomEventExtensions.getIsMetaKey(domEvent))) {
            this.endEdit(true, 'FormulaBar.OnTextBoxKeyDown', 0, domEvent);
            return;
        }
        var command = this.get_ewaControl().get_shortcutKeyManager().getCommand(domEvent);
        _Ewa.ULS.debugSendTraceTag(1681485423, 3, 200, 'FormulaBar.OnTextBoxKeyDown: keyCode={0}, command={1}', domEvent.keyCode, command);
        if (_Ewa.IsFeatureEnabledExtensions.isRichTextEditingEnabled(this.get_ewaControl())) {
            this._preventTextFormattingCommands$p$4(domEvent, command);
        }
        if (!this.get_textBox().get_disabled()) {
            this._startEdit$p$4(true, false);
        }
        var handled = this.handleKeyDown(domEvent, command);
        if (!handled && _Ewa.RibbonCommandExtensions.isSelectionCommand(command, this.isMoveToEdgeASelectionCommand(), true)) {
            _Ewa.ULS.debugSendTraceTag(1681485424, 3, 100, 'FormulaBar.OnTextBoxKeyDown: base class didn\'t handle and we have a selection command (keyCode={0}, command={1}).', domEvent.keyCode, command);
            handled = this.get_grid().get_selectionManager().handleKeyDown(domEvent, command);
            _Ewa.ULS.debugSendTraceTag(1681485425, 3, 100, 'FormulaBar.OnTextBoxKeyDown: SelectionManager {0} the command (keyCode={1}, command={2})', (handled) ? 'handled' : 'did not handle', domEvent.keyCode, command);
        }
        if (!handled) {
            _Ewa.SqmExtensions.sqmManager(this.get_ewaControl()).logUnhandledShortcutKey(domEvent, 0, 7);
        }
    },
    
    shouldUpdateColoredReferences: function _Ewa__formulaBar$shouldUpdateColoredReferences$in() {
        return this.get_isEditing() && this.get_grid().get_isInFormulaBarEdit();
    },
    
    _startEdit$p$4: function _Ewa__formulaBar$_startEdit$p$4$in(setCaretPositionToEnd, isOnMouseDown) {
        var grid = this.get_grid();
        if (this.get_isEditing() && grid.get_isEditing()) {
            return;
        }
        _Ewa.InteractivityLoggerExtensions.interactivityLogger(grid.get_ewaControl()).reportOperation(_Ewa.OperationName.formulaBarStartEdit, {}, null);
        this._isInTheMiddleOfStartEdit$p$4 = true;
        this.set_isEditing(true);
        if (grid.get_referenceBetweenSheetsManager()) {
            grid.get_referenceBetweenSheetsManager().setCellContentEditor(this);
        }
        var currentSheet = grid.get_ewaControl().get_sheets().get_activeItem();
        var e = new _Ewa.EditStartedEventArgs(grid.getFormattedCell(null), currentSheet, false, null);
        this.raiseEditStartedEvent(e);
        grid.get_cellTextEditBox().set_isInFormulaBarEdit(true);
        grid.get_cellTextEditBox().cancelRangePicker(false);
        this._setPlaceholderTextStyle$p$4(false);
        if (this.get_ewaControl().isChangeGateEnabled('OfficeVSO:4011777_investigateCalculateMaximumClippingExtentsCrash')) {
            var gridKeyboardHandler = this.get_grid().get_cellTextEditBox().get_textBox().get_domElement();
            Diag.ULS.sendTraceTag(592505057, 0, 50, 'FormulaBar.StartEdit: gridKeyboardHandler is: {0}, parent is: {1}', gridKeyboardHandler.id, (gridKeyboardHandler.parentNode) ? gridKeyboardHandler.parentNode.id : 'null');
        }
        var formattedCell = grid.getFormattedCell(null);
        if (formattedCell && formattedCell.get_showFormulaBarPlaceholderText()) {
            this.set_text('');
        }
        if (!grid.get_isEditing()) {
            this.get_textBox().set_ignoreBlurEvent(true);
            var $$t_A = this;
            _Ewa.TaskExtensions.cw(grid.startEdit(false, 1, null, false), function(task) {
                if (!grid.get_isEditing()) {
                    Diag.ULS.sendTraceTag(37003425, 0, 10, 'FormulaBar.StartEdit: grid.IsEditing is false after calling grid.StartEdit');
                }
                grid.get_cellTextEditBox().get_textBox().set_ignoreBlurEvent(true);
                $$t_A.get_textBox().focusToEdit(Number.NaN);
                if (setCaretPositionToEnd) {
                    $$t_A.get_textBox().setCaretPositionToEnd();
                }
            }, this.get_cancelOnDisposeToken(), 11);
            this.get_textBox().set_ignoreBlurEvent(false);
            var formattedActiveCell = grid.getFormattedCell(null);
            if (formattedActiveCell && formattedActiveCell.get_isLegacyArrayFormula()) {
                this.set_text(_Ewa.HelperMethods.stripOutLegacyArrayCurlyBraces(this.get_text()));
            }
        }
        else {
            grid.set_editingMode(1);
        }
        if (!isOnMouseDown) {
            this.updateCacheForUndo();
            this.updateColoredReferences();
        }
        grid.get_cellTextEditBox().removeColoredReferencesFromText();
        this._isInTheMiddleOfStartEdit$p$4 = false;
    },
    
    _onEditStarted$p$4: function _Ewa__formulaBar$_onEditStarted$p$4$in(sender, e) {
        this._setTextBoxForActiveItemIfNotPointEditing$p$4();
    },
    
    _onEditEnded$p$4: function _Ewa__formulaBar$_onEditEnded$p$4$in(sender, e) {
        this._setTextBoxForActiveItemIfNotPointEditing$p$4();
        this.clearCacheForUndo();
    },
    
    _onTextBoxKeyPress$p$4: function _Ewa__formulaBar$_onTextBoxKeyPress$p$4$in(sender, rawEvent) {
        this._hasStartedTyping$p$4 = true;
    },
    
    onActiveCellChanged: function _Ewa__formulaBar$onActiveCellChanged$in(sender, e) {
        _Ewa.CellContentEditor.prototype.onActiveCellChanged.call(this, sender, e);
        this._setTextBoxForActiveItemIfNotPointEditing$p$4();
    },
    
    _setTextBoxForActiveItemIfNotPointEditing$p$4: function _Ewa__formulaBar$_setTextBoxForActiveItemIfNotPointEditing$p$4$in() {
        var grid = this.get_grid();
        if (grid.get_isEditing() && grid.get_editingMode() === 2) {
            return;
        }
        this._setTextBoxForActiveItem$p$4();
    },
    
    _onCurrentSelectionModeChanged$p$4: function _Ewa__formulaBar$_onCurrentSelectionModeChanged$p$4$in(sender, e) {
        this._setTextBoxForActiveItem$p$4();
    },
    
    _onPartialInteractivityStatusChanged$p$4: function _Ewa__formulaBar$_onPartialInteractivityStatusChanged$p$4$in(sender, e) {
        this._setTextBoxForActiveItem$p$4();
    },
    
    onSelectionEnded: function _Ewa__formulaBar$onSelectionEnded$in(sender, e) {
        if (this.get_isEditing()) {
            var grid = this.get_grid();
            var inCellEditBox = grid.get_cellTextEdit();
            inCellEditBox.set_text(this.get_text());
            inCellEditBox.setCaretPosition(this.get_textBox().get_caretPosition());
            if (this.get_inRangePicker()) {
                this.get_textBox().focus();
            }
        }
    },
    
    _onCellValueChanged$p$4: function _Ewa__formulaBar$_onCellValueChanged$p$4$in(sender, eventArgs) {
        if (this.get_isEditing()) {
            if (!this._isInTheMiddleOfStartEdit$p$4) {
                if (!eventArgs.get_isDuringMarqueeDragOrResize()) {
                    this.updateColoredReferences();
                }
                this.raiseEvent('ekcvc', eventArgs, null);
            }
            this.updateCacheForUndo();
            return;
        }
        var grid = this.get_grid();
        if (grid.get_cellTextEditBox().get_isEditing()) {
            this._setTextBoxForActiveItem$p$4();
        }
        if (grid.get_cellTextEditBox().get_inRangePicker() && grid.get_cellTextEditBox().get_isInFormulaBarEdit()) {
            var caretPosition = grid.get_cellTextEditBox().get_textBox().get_caretPosition();
            this.get_textBox().selectRange(caretPosition, caretPosition);
        }
    },
    
    _onBlockCacheItemChanged$p$4: function _Ewa__formulaBar$_onBlockCacheItemChanged$p$4$in(sender, e) {
        var activeCell = this.get_grid().get_selectionManager().get_activeCell();
        if (activeCell) {
            var viewBlock = this.get_grid().viewBlockFromHashCode(e.get_blockHashPair().get_hash());
            if (viewBlock && activeCell.intersects(viewBlock.get_blockRange())) {
                this._setTextBoxForActiveItem$p$4();
            }
        }
    },
    
    _setTextBoxForActiveItem$p$4: function _Ewa__formulaBar$_setTextBoxForActiveItem$p$4$in() {
        var grid = this.get_grid();
        if (this.get_isEditing() && grid.get_cellTextEditBox().get_isInFormulaBarEdit()) {
            return;
        }
        var isPartialInteractivityMode = _Ewa.ProgressUIManagerExtensions.progressUIManager(this.get_ewaControl()).isInPartialInteractivityState();
        this._formulaBarElement$p$4.disabled = isPartialInteractivityMode || (this.get_ewaControl().get_isRibbonInViewModeEnabled() && !this.get_ewaControl().get_isEditMode());
        var currentViewIsGrid = this.get_ewaControl().get_currentContentView() === grid;
        var hasGridCellSelection = currentViewIsGrid && grid.get_selectionManager().get_commandSelectionMode() === 1;
        if (this.get_textBox().get_initialized()) {
            this.get_textBox().set_disabled(this._formulaBarElement$p$4.disabled || (currentViewIsGrid && !hasGridCellSelection));
        }
        var activeCellContents;
        var styleSetter = new _Ewa.StyleSetter(this.get_textBox().get_style());
        var showTextAsPlaceholder = false;
        if (!hasGridCellSelection) {
            activeCellContents = '';
            if (this.get_ewaControl().isChangeGateEnabled('OfficeVSO:4116006_ShowShapeFormulaInFormulaBar')) {
                var hasShapeSelection = grid.get_selectionManager().get_commandSelectionMode() === 64;
                var floatingObjectControl = grid.get_selectionManager().get_floatingObjectsSelectionManager().get_selectedFloatingObjectControl();
                var shapeMetadata = (floatingObjectControl && floatingObjectControl.get_floatingObject()) ? floatingObjectControl.get_floatingObject().get_shapeMetaData() : null;
                if (hasShapeSelection && shapeMetadata && shapeMetadata.IsShapeFormulaPresent) {
                    var shapeText = shapeMetadata.ShapeText;
                    var shapeFormula = (shapeText) ? shapeText.substring(shapeText.indexOf('\nFormula:') + 9, shapeText.indexOf(';FormulaVal:')) : null;
                    if (!_Ewa.StringExtensions.isNullOrEmpty(shapeFormula)) {
                        activeCellContents = '=' + shapeFormula;
                    }
                    else {
                        Diag.ULS.sendTraceTag(592488586, 0, 15, 'FormulaBar.SetTextBoxForActiveItem: IsShapeFormulaPresent is true but formula not found in shapeText');
                    }
                }
            }
        }
        else if (grid.get_isEditing()) {
            activeCellContents = grid.get_cellTextEditBox().get_text();
        }
        else {
            var activeCell = grid.getFormattedCell(null);
            var sheetProtection = new _Ewa.SheetProtection(this.get_ewaControl().get_sheets());
            if (!activeCell || !sheetProtection.isSingleSelectionAllowed(activeCell.get_range(), grid)) {
                return;
            }
            activeCellContents = (sheetProtection.get_isLocked() && activeCell.get_isHidden()) ? '' : activeCell.get_formulaBarText() || activeCell.get_text();
            showTextAsPlaceholder = activeCell.get_showFormulaBarPlaceholderText();
        }
        this._setPlaceholderTextStyle$p$4(showTextAsPlaceholder);
        this.set_isDirectionRtl(this.calculateIsDirectionRtl(null, null));
        styleSetter.get_stylesToApply().direction = (this.get_isDirectionRtl()) ? 'rtl' : 'ltr';
        styleSetter.get_stylesToApply().textAlign = (this.get_isDirectionRtl()) ? 'right' : 'left';
        styleSetter.applyModified();
        this.set_text(activeCellContents);
    },
    
    _onActiveItemChanged$p$4: function _Ewa__formulaBar$_onActiveItemChanged$p$4$in(sender, e) {
        this._setTextBoxForActiveItem$p$4();
        var ewaControl = this.get_ewaControl();
        var $$t_5 = this;
        _Ewa.TaskExtensions.cw(_Ewa.ServiceRegistryExtensions.a(ewaControl.get_serviceRegistry()), function(_) {
            $$t_5._setFormulaBarVisibility$p$4();
        }, this.get_cancelOnDisposeToken(), 11);
    },
    
    _onCommandUIAttachCompleted$p$4: function _Ewa__formulaBar$_onCommandUIAttachCompleted$p$4$in(sender, e) {
        this._setFormulaBarVisibility$p$4();
    },
    
    _setFormulaBarVisibility$p$4: function _Ewa__formulaBar$_setFormulaBarVisibility$p$4$in() {
        var currentContentView = this.get_ewaControl().get_currentContentView();
        this.set_isVisible(!!currentContentView && currentContentView.get_showFormulaBar());
        this.get_ewaControl().hidePageLoadSkeletonElement('skeletonFormulaBarPlaceHolder', true, '');
    },
    
    _setPlaceholderTextStyle$p$4: function _Ewa__formulaBar$_setPlaceholderTextStyle$p$4$in(showTextAsPlaceholder) {
        _Ewa.DOMElementExtensions.toggleCssClass(this.get_textBox().get_domElement(), 'ewa-fb-placeholder', showTextAsPlaceholder);
    },
    
    _getFocusableChildElements$p$4: function _Ewa__formulaBar$_getFocusableChildElements$p$4$in() {
        return this._formulaBarElement$p$4.querySelectorAll('input,button,select,submit,a,textarea, div[tabindex]');
    },
    
    _getFirstFocusableElement$p$4: function _Ewa__formulaBar$_getFirstFocusableElement$p$4$in() {
        var headerChildElements = this._getFocusableChildElements$p$4();
        return _Ewa.DOMElementExtensions.getFirstFocusableElement(headerChildElements);
    },
    
    _focusFirstElement$p$4: function _Ewa__formulaBar$_focusFirstElement$p$4$in() {
        var firstFocusableElement = this._getFirstFocusableElement$p$4();
        if (firstFocusableElement) {
            _Ewa.DOMElementExtensions.setFocus(firstFocusableElement, false);
            return true;
        }
        return false;
    },
    
    _onKeyDown$p$4: function _Ewa__formulaBar$_onKeyDown$p$4$in(args) {
        if (!_Ewa.IsFeatureEnabledExtensions.isRichTextEditingEnabled(this.get_ewaControl())) {
            var ribbonCommand = this.get_ewaControl().get_shortcutKeyManager().getCommand(args.innerEvent);
            this._preventTextFormattingCommands$p$4(args.innerEvent, ribbonCommand);
        }
        if (args.innerEvent.keyCode === 9) {
            var headerChildElements = this._getFocusableChildElements$p$4();
            var firstFocusableElement = _Ewa.DOMElementExtensions.getFirstFocusableElement(headerChildElements);
            var lastFocusableElement = _Ewa.DOMElementExtensions.getLastFocusableElement(headerChildElements);
            return _Ewa.DOMElementExtensions.setFocusCyclicTabOrder(args.innerEvent, firstFocusableElement, lastFocusableElement);
        }
        return false;
    },
    
    _preventTextFormattingCommands$p$4: function _Ewa__formulaBar$_preventTextFormattingCommands$p$4$in(domEvent, ribbonCommand) {
        var isTextFormatingCommand = ribbonCommand === -287251124 || ribbonCommand === -1925065947 || ribbonCommand === 1764140053;
        if (_Ewa.ContentEditableTextBoxBridge.isThisBrowserSupportContentEditableTextBox() && isTextFormatingCommand) {
            domEvent.preventDefault();
        }
    },
    
    _onModeChanged$p$4: function _Ewa__formulaBar$_onModeChanged$p$4$in(sender, e) {
        this._adjustFunctionBoxAccordingToMode$p$4();
    },
    
    _adjustFunctionBoxAccordingToMode$p$4: function _Ewa__formulaBar$_adjustFunctionBoxAccordingToMode$p$4$in() {
        if (this.get_ewaControl().get_isRibbonInViewModeEnabled() && _Ewa._formulaBar._functionBoxlement$p) {
            _Ewa.DOMElementExtensions.toggleCssClass(_Ewa._formulaBar._functionBoxlement$p, 'button-disabled', !this.get_ewaControl().get_isEditMode());
        }
    }
}


_Ewa._formulaBarBootstrapper = function _Ewa__formulaBarBootstrapper() {
}
_Ewa._formulaBarBootstrapper.main = function _Ewa__formulaBarBootstrapper$main$st() {
    _Ewa.EwaControlRegistry.addRegisteredEventHandler(function(ewa) {
        ewa.get_serviceRegistry().registerService(_Ewa.IServiceFactory$1.$$(_Ewa.ICellContentEditor), 186, new _Ewa._formulaBarFactory(ewa));
        _Ewa.NameBoxCommandHandlerFactory.attach(ewa);
    });
}


_Ewa._formulaBarFactory = function _Ewa__formulaBarFactory(ewaControl) {
    _Ewa._formulaBarFactory.initializeBase(this);
    this._ewaControl$p$4 = ewaControl;
    this.raiseFactoryReadyEvent();
}
_Ewa._formulaBarFactory.prototype = {
    _ewaControl$p$4: null,
    
    create: function _Ewa__formulaBarFactory$create$in() {
        if (_Ewa.IsFeatureEnabledExtensions.isSVGIconsForFormulaBarEnabled(this._ewaControl$p$4)) {
            var $$t_2 = this;
            _Ewa.TaskExtensions.cw(_Ewa.GetServiceTaskFactory.getOrCreateAsync(_Ewa.ISvgIconProvider, this._ewaControl$p$4.get_serviceRegistry(), 388, 387, this.get_scriptLoadFlavor()), function(task) {
                $$t_2.raiseServiceCreatedEvent(new _Ewa._formulaBar($$t_2._ewaControl$p$4, (task).get_result()));
            }, this._ewaControl$p$4.get_cancelOnDisposeToken(), 3);
        }
        else {
            this.raiseServiceCreatedEvent(new _Ewa._formulaBar(this._ewaControl$p$4, null));
        }
    }
}


_Ewa.NameBoxCommandHandlerFactory = function _Ewa_NameBoxCommandHandlerFactory(ewaControl) {
    _Ewa.NameBoxCommandHandlerFactory.initializeBase(this, [ ewaControl ]);
    this._ewaControl$p$5 = ewaControl;
}
_Ewa.NameBoxCommandHandlerFactory.attach = function _Ewa_NameBoxCommandHandlerFactory$attach$st(ewa) {
    _Ewa.CommandHandlerFactoryBase.attachAndRegister(280, new _Ewa.NameBoxCommandHandlerFactory(ewa));
}
_Ewa.NameBoxCommandHandlerFactory.prototype = {
    _ewaControl$p$5: null,
    
    createCommandHandlersAsync: function _Ewa_NameBoxCommandHandlerFactory$createCommandHandlersAsync$in() {
        var $$t_4 = this;
        _Ewa.TaskExtensions.c(_Ewa.GetServiceTaskFactory.create(_Ewa.IRibbonControlsManager, this._ewaControl$p$5.get_serviceRegistry(), 102, this._ewaControl$p$5.get_cancelOnDisposeToken(), -2), function(task) {
            var ribbonControlsManager = (task).get_result();
            $$t_4.onCommandHandlersCreated([ new _Ewa.NameBoxCommandHandler($$t_4._ewaControl$p$5, ribbonControlsManager) ], null);
        }, this._ewaControl$p$5.get_cancelOnDisposeToken());
    }
}


_Ewa._editableNamedObjectDropdownList = function _Ewa__editableNamedObjectDropdownList(ewaControl, commandUIManager, ribbonControlsManager, dropDownContainer, svgIconProvider) {
    this.$$d__handleInputCommit$p$0 = Function.createDelegate(this, this._handleInputCommit$p$0);
    this.$$d__onFloatingObjectSelectionChanged$p$0 = Function.createDelegate(this, this._onFloatingObjectSelectionChanged$p$0);
    this.$$d__onGridSelectionChanged$p$0 = Function.createDelegate(this, this._onGridSelectionChanged$p$0);
    this.$$d__onGridSelectionEnded$p$0 = Function.createDelegate(this, this._onGridSelectionEnded$p$0);
    this.$$d__onActiveNamedObjectChanged$p$0 = Function.createDelegate(this, this._onActiveNamedObjectChanged$p$0);
    this.$$d__onFloatingObjectRemoved$p$0 = Function.createDelegate(this, this._onFloatingObjectRemoved$p$0);
    this.$$d__onGridConsistentAfterWorkbookLoadedFromServer$p$0 = Function.createDelegate(this, this._onGridConsistentAfterWorkbookLoadedFromServer$p$0);
    this.$$d__onWacDialogClosed$p$0 = Function.createDelegate(this, this._onWacDialogClosed$p$0);
    this.$$d__onWacDialogOpened$p$0 = Function.createDelegate(this, this._onWacDialogOpened$p$0);
    this._comboBoxTitle$p$0 = _Ewa.ClientStringManager.get_instance().getString(626);
    this._ewaControl$p$0 = ewaControl;
    this._gridView$p$0 = _Ewa.GridViewExtensions.grid(ewaControl);
    this._comboBoxId$p$0 = this._ewaControl$p$0.get_namingContainerIdPrefix() + 'NameBox';
    this._comboBoxMenuId$p$0 = this._ewaControl$p$0.get_namingContainerIdPrefix() + 'NameBoxMenu';
    this._standaloneRoot$p$0 = commandUIManager.get_theStandaloneRoot();
    var noneDisplayedContainer = null;
    var downArrowSvg = null;
    if (_Ewa.IsFeatureEnabledExtensions.isSVGIconsForFormulaBarEnabled(this._ewaControl$p$0) && svgIconProvider) {
        noneDisplayedContainer = document.createElement('div');
        noneDisplayedContainer.style.display = 'none';
        downArrowSvg = svgIconProvider.getSvgElement('CommonControlChevronDown_8', 8, 8, null, '');
        downArrowSvg.id = this._arrowImageId$p$0;
        noneDisplayedContainer.appendChild(downArrowSvg);
        document.body.appendChild(noneDisplayedContainer);
    }
    if (this._buildAndAttachComboBox$p$0(ribbonControlsManager, dropDownContainer)) {
        this._inputElement$p$0 = _Ewa.DOMElementExtensions.getElementById(this._comboBoxElement$p$0, this._comboBoxId$p$0);
        Diag.ULS.shipAssertTag(37266386, 0, !!this._inputElement$p$0, 'EditableNamedObjectDropdownList: InputElement inside ComboBoxElement is null');
        this._inputElement$p$0.setAttribute('spellcheck', 'false');
        this._selectDropdownItem$p$0(this._gridView$p$0.get_selectionManager().get_activeCell().toString(), '');
        this._comboBoxControl$p$0.set_enabled(!_Ewa.ProgressUIManagerExtensions.progressUIManager(this._ewaControl$p$0).isInPartialInteractivityState() && (!this._ewaControl$p$0.get_isRibbonInViewModeEnabled() || this._ewaControl$p$0.get_isEditMode()));
        this._registerEvents$p$0();
        if (noneDisplayedContainer) {
            Diag.ULS.shipAssertTag(590128455, 0, downArrowSvg.parentNode !== noneDisplayedContainer, 'EditableNamedObjectDropdownList: SVG element was not extraced from invisible DIV.');
            document.body.removeChild(noneDisplayedContainer);
        }
    }
}
_Ewa._editableNamedObjectDropdownList.prototype = {
    _ewaControl$p$0: null,
    _gridView$p$0: null,
    _inputElement$p$0: null,
    _standaloneRoot$p$0: null,
    _comboBoxControl$p$0: null,
    _comboBoxId$p$0: null,
    _comboBoxMenuId$p$0: null,
    _comboBoxElement$p$0: null,
    _inputEvents$p$0: null,
    _arrowImageId$p$0: 'EditableNamedObjectDropdownArrowId',
    
    dispose: function _Ewa__editableNamedObjectDropdownList$dispose$in() {
        if (this._standaloneRoot$p$0) {
            this._standaloneRoot$p$0.removeControl(this._comboBoxId$p$0);
        }
        if (this._ewaControl$p$0) {
            this._ewaControl$p$0.get_dialogHost().remove_wacDialogOpened(this.$$d__onWacDialogOpened$p$0);
            this._ewaControl$p$0.get_dialogHost().remove_wacDialogClosed(this.$$d__onWacDialogClosed$p$0);
            this._ewaControl$p$0.get_sessionStateManager().remove_gridConsistentAfterWorkbookLoadedFromServer(this.$$d__onGridConsistentAfterWorkbookLoadedFromServer$p$0);
            _Ewa.FloatingObjectManagerExtensions.floatingObjectManager(this._ewaControl$p$0).remove_floatingObjectControlRemoving(this.$$d__onFloatingObjectRemoved$p$0);
        }
        if (this._ewaControl$p$0.get_namedObjects()) {
            this._ewaControl$p$0.get_namedObjects().remove_activeItemChanged(this.$$d__onActiveNamedObjectChanged$p$0);
        }
        if (this._ewaControl$p$0.get_sheets()) {
            this._ewaControl$p$0.get_sheets().remove_activeItemChanged(this.$$d__onGridSelectionEnded$p$0);
        }
        if (this._gridView$p$0) {
            var selectionManager = this._gridView$p$0.get_selectionManager();
            selectionManager.remove_selectionEnded(this.$$d__onGridSelectionEnded$p$0);
            selectionManager.remove_selectionChanged(this.$$d__onGridSelectionChanged$p$0);
            selectionManager.get_floatingObjectsSelectionManager().remove_floatingObjectSelectionChanged(this.$$d__onFloatingObjectSelectionChanged$p$0);
        }
        if (this._ewaControl$p$0 && this._inputEvents$p$0) {
            if (this._ewaControl$p$0.isChangeGateEnabled('OfficeVSO:4275788_HandleNameBoxInputCommitOnKeyup')) {
                this._inputEvents$p$0.detach('keyup', false);
            }
            else {
                this._inputEvents$p$0.detach('keydown', false);
            }
        }
        System.IDisposableExtensions.safeDispose(this._inputEvents$p$0);
        this._standaloneRoot$p$0 = null;
        this._inputElement$p$0.innerHTML = '';
        this._inputElement$p$0.className = '';
        this._inputElement$p$0 = null;
    },
    
    _onGridSelectionChanged$p$0: function _Ewa__editableNamedObjectDropdownList$_onGridSelectionChanged$p$0$in(sender, e) {
        var selectionManager = this._gridView$p$0.get_selectionManager();
        var activeRange = (this._ewaControl$p$0.isServerFeatureEnabled(458)) ? ((selectionManager.get_gridSelection().hasDeselectionPreview()) ? selectionManager.get_gridSelection().get_deselectionPreviewRange() : selectionManager.get_gridSelection().get_activeRange()) : selectionManager.get_singleSelectedRange();
        if (!activeRange.get_isSingle()) {
            this._inputElement$p$0.value = activeRange.getRangeStringInRCNotation();
        }
        else {
            this._inputElement$p$0.value = selectionManager.get_activeCell().toString();
        }
    },
    
    _onGridSelectionEnded$p$0: function _Ewa__editableNamedObjectDropdownList$_onGridSelectionEnded$p$0$in(sender, e) {
        var selectionManager = this._gridView$p$0.get_selectionManager();
        var discontinuousSelectionEnabled = this._ewaControl$p$0.isServerFeatureEnabled(458);
        var isSingleRangeSelected = !discontinuousSelectionEnabled || selectionManager.get_gridSelection().get_isSingleRange();
        var activeRange = (discontinuousSelectionEnabled) ? selectionManager.get_gridSelection().get_activeRange() : selectionManager.get_singleSelectedRange();
        var namedObject = (this._ewaControl$p$0.get_sheets().get_activeItem() && isSingleRangeSelected) ? _Ewa.NamedObjectCollectionExtensions.getNamedObjectByRange((this._ewaControl$p$0.get_namedObjects()), activeRange, this._ewaControl$p$0.get_sheets().get_activeItem().get_name(), false) : null;
        if (!this._safelyActivateDisplayedNamedObjects$p$0(namedObject)) {
            if (this._comboBoxControl$p$0.get_selectedControl()) {
                namedObject = this._ewaControl$p$0.get_namedObjects().getItemByName(this._comboBoxControl$p$0.get_selectedControl().getCommandValueId());
                if (namedObject) {
                    namedObject.deactivate();
                }
            }
            this._selectDropdownItem$p$0(this._gridView$p$0.get_selectionManager().get_activeCell().toString(), '');
        }
    },
    
    _onActiveNamedObjectChanged$p$0: function _Ewa__editableNamedObjectDropdownList$_onActiveNamedObjectChanged$p$0$in(sender, e) {
        var namedObject = e.get_activeItem();
        if (!namedObject) {
            return;
        }
        var usedRange = namedObject.get_usedRange();
        if (namedObject.get_type() === 2) {
            var table = namedObject;
            usedRange = _Ewa.NamedTableExtensions.getTableInnerRange(table, false);
        }
        var sharedSheetRange = _Ewa.RangeExtensions.createSheetRange(usedRange, this._ewaControl$p$0);
        sharedSheetRange.NamedObjectName = namedObject.get_name();
        sharedSheetRange.SheetName = namedObject.get_sheetName();
        this._gridView$p$0.gotoAndUpdateSelection(sharedSheetRange, null, null, null, 60, _Ewa.GotoCaller.editableNamedObjectsDropdownListOnActiveNamedObjectChanged, 0, true, true, null, false, true);
        var parameters = namedObject.get_name().split('!');
        var nameWithoutScope = parameters[1];
        this._selectDropdownItem$p$0((nameWithoutScope) ? nameWithoutScope : namedObject.get_name(), namedObject.get_name());
    },
    
    _onFloatingObjectSelectionChanged$p$0: function _Ewa__editableNamedObjectDropdownList$_onFloatingObjectSelectionChanged$p$0$in(sender, e) {
        if (this._ewaControl$p$0.isChangeGateEnabled('OfficeVSO:4099342_FloatingObjectsNaming') && this._gridView$p$0.get_selectionManager().get_floatingObjectsSelectionManager().get_selectedFloatingObjectControl()) {
            this._selectDropdownItem$p$0(this._gridView$p$0.get_selectionManager().get_floatingObjectsSelectionManager().get_selectedFloatingObjectControl().get_floatingObject().get_name(), '');
        }
    },
    
    _onFloatingObjectRemoved$p$0: function _Ewa__editableNamedObjectDropdownList$_onFloatingObjectRemoved$p$0$in(sender, e) {
        if (this._ewaControl$p$0.isChangeGateEnabled('OfficeVSO:4099342_FloatingObjectsNaming')) {
            this._onGridSelectionChanged$p$0(sender, e);
        }
    },
    
    _registerEvents$p$0: function _Ewa__editableNamedObjectDropdownList$_registerEvents$p$0$in() {
        this._ewaControl$p$0.get_dialogHost().add_wacDialogOpened(this.$$d__onWacDialogOpened$p$0);
        this._ewaControl$p$0.get_dialogHost().add_wacDialogClosed(this.$$d__onWacDialogClosed$p$0);
        this._ewaControl$p$0.get_sessionStateManager().add_gridConsistentAfterWorkbookLoadedFromServer(this.$$d__onGridConsistentAfterWorkbookLoadedFromServer$p$0);
        var selectionManager = this._gridView$p$0.get_selectionManager();
        this._ewaControl$p$0.get_namedObjects().add_activeItemChanged(this.$$d__onActiveNamedObjectChanged$p$0);
        this._ewaControl$p$0.get_sheets().add_activeItemChanged(this.$$d__onGridSelectionEnded$p$0);
        selectionManager.add_selectionEnded(this.$$d__onGridSelectionEnded$p$0);
        selectionManager.add_selectionChanged(this.$$d__onGridSelectionChanged$p$0);
        selectionManager.get_floatingObjectsSelectionManager().add_floatingObjectSelectionChanged(this.$$d__onFloatingObjectSelectionChanged$p$0);
        _Ewa.FloatingObjectManagerExtensions.floatingObjectManager(this._ewaControl$p$0).add_floatingObjectControlRemoving(this.$$d__onFloatingObjectRemoved$p$0);
        this._inputEvents$p$0 = _Ewa.EventListFactory.get_instance().createDomEventList(this._inputElement$p$0);
        if (this._ewaControl$p$0.isChangeGateEnabled('OfficeVSO:4275788_HandleNameBoxInputCommitOnKeyup')) {
            this._inputEvents$p$0.attach('keyup', this.$$d__handleInputCommit$p$0, false);
        }
        else {
            this._inputEvents$p$0.attach('keydown', this.$$d__handleInputCommit$p$0, false);
        }
    },
    
    _buildAndAttachComboBox$p$0: function _Ewa__editableNamedObjectDropdownList$_buildAndAttachComboBox$p$0$in(ribbonControlsManager, DropDownContainer) {
        var ribbonComboBox = ribbonControlsManager.createRibbonComboBox(this._comboBoxId$p$0, this._comboBoxMenuId$p$0, '1726517890', true, false, null, 'PopulateNameBoxMenu', Common.StringUtils.xmlEncode(this._comboBoxTitle$p$0), true, '102px', true, false, (this._ewaControl$p$0.isServerFeatureEnabled(938)) ? this._arrowImageId$p$0 : null);
        if (!ribbonComboBox) {
            Diag.ULS.sendTraceTag(42858562, 0, 10, 'EditableNamedObjectDropdownList.BuildAndAttachComboBox: ribbonComboBox is null');
            return false;
        }
        var comboBoxXml = ribbonControlsManager.getXmlForControl(ribbonComboBox);
        this._standaloneRoot$p$0.addControl(this._comboBoxId$p$0, comboBoxXml);
        this._comboBoxElement$p$0 = this._standaloneRoot$p$0.getDOMElementForControlDisplayMode(this._comboBoxId$p$0, 'Medium');
        Diag.ULS.shipAssertTag(37266387, 0, !!this._comboBoxElement$p$0, 'EditableNamedObjectDropdownList: ComboBoxElement was not Created after BuildAndAttachComboBox called');
        this._comboBoxControl$p$0 = this._standaloneRoot$p$0.getValidControl(this._comboBoxId$p$0);
        var nameBoxContainer = document.getElementById(this._ewaControl$p$0.get_namingContainerIdPrefix() + 'nameBoxPlaceHolder');
        if (!isNullOrUndefined(nameBoxContainer)) {
            DropDownContainer.removeChild(nameBoxContainer);
        }
        DropDownContainer.insertBefore(this._comboBoxElement$p$0, DropDownContainer.firstChild);
        return true;
    },
    
    _onWacDialogOpened$p$0: function _Ewa__editableNamedObjectDropdownList$_onWacDialogOpened$p$0$in(sender, args) {
        this._comboBoxControl$p$0.set_enabled(false);
    },
    
    _onWacDialogClosed$p$0: function _Ewa__editableNamedObjectDropdownList$_onWacDialogClosed$p$0$in(sender, args) {
        this._comboBoxControl$p$0.set_enabled(true);
    },
    
    _onGridConsistentAfterWorkbookLoadedFromServer$p$0: function _Ewa__editableNamedObjectDropdownList$_onGridConsistentAfterWorkbookLoadedFromServer$p$0$in(sender, args) {
        this._comboBoxControl$p$0.set_enabled(!this._ewaControl$p$0.get_isRibbonInViewModeEnabled() || this._ewaControl$p$0.get_isEditMode());
    },
    
    _handleInputCommit$p$0: function _Ewa__editableNamedObjectDropdownList$_handleInputCommit$p$0$in(domEvent) {
        if (domEvent.keyCode !== 13) {
            if (domEvent.keyCode === 27) {
                this._exitNameBox$p$0();
            }
            return;
        }
        var inputValue = this._inputElement$p$0.value;
        Diag.ULS.sendTraceTag(39653979, 0, 50, 'NameBoxCommandHandler.HandleInputEnterKeyDown: Name Box commit input value.');
        var sheetName;
        var reference;
        var range;
        var $$t_B, $$t_C, $$t_D, $$t_E;
        if (($$t_E = _Ewa.RangeExtensions.tryParseExistingRange(inputValue, this._ewaControl$p$0.get_sheets(), ($$t_B = {'val': sheetName}), ($$t_C = {'val': reference}), ($$t_D = {'val': range}))), sheetName = $$t_B.val, reference = $$t_C.val, range = $$t_D.val, $$t_E) {
            sheetName = (!sheetName) ? this._ewaControl$p$0.get_sheets().get_activeItem().get_name() : sheetName;
            var namedObject = _Ewa.NamedObjectCollectionExtensions.getNamedObjectByRange((this._ewaControl$p$0.get_namedObjects()), range, sheetName, false);
            if (!this._safelyActivateDisplayedNamedObjects$p$0(namedObject)) {
                var parsedRange = _Ewa.RangeExtensions.createSheetRange(range, this._ewaControl$p$0);
                parsedRange.SheetName = sheetName;
                _Ewa.GridViewExtensions.grid(this._ewaControl$p$0).gotoAndUpdateSelection(parsedRange, range.get_topLeft(), null, null, 60, _Ewa.GotoCaller.editableNamedObjectsDropdownListHandleInputCommit, 0, true, true, null, false, true);
                this._gridView$p$0.focus();
            }
        }
        else if (this._ewaControl$p$0.get_namedObjects().existsName(inputValue)) {
            var namedObject = this._ewaControl$p$0.get_namedObjects().getItemByName(inputValue);
            this._safelyActivateDisplayedNamedObjects$p$0(namedObject);
            this._gridView$p$0.focus();
        }
        else {
            Diag.ULS.sendTraceTag(39653980, 0, 15, 'NameBoxCommandHandler.HandleInputEnterKeyDown: Input value is not a valid range or a Named Range.');
            var err = _Ewa.EwaErrorExtensions.createEwaError(1, 0, 0, 75, 0, -1137246675, 'GotoInvalidReference');
            var $$t_F = this;
            _Ewa.TaskExtensions.c(_Ewa.ProgressUIManagerExtensions.progressUIManager(this._ewaControl$p$0).showErrorDialog(err), function(unused) {
                $$t_F._exitNameBox$p$0();
            }, this._ewaControl$p$0.get_cancelOnDisposeToken());
        }
    },
    
    _exitNameBox$p$0: function _Ewa__editableNamedObjectDropdownList$_exitNameBox$p$0$in() {
        this._selectDropdownItem$p$0(this._gridView$p$0.get_selectionManager().get_activeCell().toString(), '');
        this._gridView$p$0.focus();
    },
    
    _selectDropdownItem$p$0: function _Ewa__editableNamedObjectDropdownList$_selectDropdownItem$p$0$in(inputValue, commandValue) {
        var itemSelectedControl = new _Ewa._editableNamedObjectDropdownList._notSelectedMenuItem(inputValue, commandValue);
        this._comboBoxControl$p$0.selectDropdownItem(itemSelectedControl);
        this._comboBoxControl$p$0.get_stateProperties()[CommandUI.Controls.ComboBoxCommandProperties.Value] = itemSelectedControl.getTextValue();
    },
    
    _safelyActivateDisplayedNamedObjects$p$0: function _Ewa__editableNamedObjectDropdownList$_safelyActivateDisplayedNamedObjects$p$0$in(namedObject) {
        if (namedObject && _Ewa.ActiveItemExtensions.isDisplayedInEditableNamedObjectDropdownList(namedObject)) {
            namedObject.activate(false);
            return true;
        }
        return false;
    }
}


_Ewa._editableNamedObjectDropdownList._notSelectedMenuItem = function _Ewa__editableNamedObjectDropdownList__notSelectedMenuItem(menuItemId, commandValueId) {
    this._menuItemId$p$0 = menuItemId;
    this._commandValueId$p$0 = commandValueId;
}
_Ewa._editableNamedObjectDropdownList._notSelectedMenuItem.prototype = {
    _menuItemId$p$0: null,
    _commandValueId$p$0: null,
    
    getMenuItemId: function _Ewa__editableNamedObjectDropdownList__notSelectedMenuItem$getMenuItemId$in() {
        return '';
    },
    
    getCommandValueId: function _Ewa__editableNamedObjectDropdownList__notSelectedMenuItem$getCommandValueId$in() {
        return this._commandValueId$p$0;
    },
    
    getTextValue: function _Ewa__editableNamedObjectDropdownList__notSelectedMenuItem$getTextValue$in() {
        return this._menuItemId$p$0;
    },
    
    onMenuClosed: function _Ewa__editableNamedObjectDropdownList__notSelectedMenuItem$onMenuClosed$in() {
    }
}


_Ewa.NameBoxCommandHandler = function _Ewa_NameBoxCommandHandler(ewaControl, ribbonControlsManager) {
    this._ewaControl$p$0 = ewaControl;
    this._ribbonControlsManager$p$0 = ribbonControlsManager;
}
_Ewa.NameBoxCommandHandler._getSortedSheetScopedNamedRanges$p = function _Ewa_NameBoxCommandHandler$_getSortedSheetScopedNamedRanges$p$st(namedObjects, ActiveSheet) {
    var namedRanges = new ($$sc.List$1.$$(String))();
    for (var i = 0, length = namedObjects.length; i < length; i++) {
        var namedObject = namedObjects[i];
        if (!_Ewa.ActiveItemExtensions.isDisplayedInEditableNamedObjectDropdownList(namedObject)) {
            continue;
        }
        if (_Ewa.StringExtensions.contains(namedObject.get_name(), '!', false)) {
            var paramters = namedObject.get_name().split('!');
            var scope = paramters[0];
            var name = paramters[1];
            if (scope !== ActiveSheet) {
                continue;
            }
            if (namedRanges.contains(name)) {
                namedRanges.remove(name);
            }
        }
        namedRanges.add(namedObject.get_name());
    }
    namedRanges.sort();
    return namedRanges;
}
_Ewa.NameBoxCommandHandler.prototype = {
    _ewaControl$p$0: null,
    _ribbonControlsManager$p$0: null,
    
    shouldDisable: function _Ewa_NameBoxCommandHandler$shouldDisable$in(selectionMode, command) {
        return false;
    },
    
    executeCommand: function _Ewa_NameBoxCommandHandler$executeCommand$in(selectionMode, commandInfo, properties, data) {
        var command = commandInfo.get_command();
        var returnedTask = null;
        switch (command) {
            case 1726517890:
                if (!properties[CommandUI.Controls.ComboBoxCommandProperties.IsFreeForm]) {
                    var namedObject = this._ewaControl$p$0.get_namedObjects().getItemByName(properties['MenuItemId'].toString());
                    if (!namedObject) {
                        Diag.ULS.sendTraceTag(37266388, 0, 15, 'NameBoxCommandHandler.ExecuteCommand: Can\'t find named Object related to selected item in ComboBox');
                    }
                    else {
                        namedObject.activate(false);
                    }
                }
                break;
            default:
                returnedTask = _Ewa.RibbonCommandExtensions.createTaskForUnhandledCommand(command);
                break;
        }
        return returnedTask || $$sc.Task.fromResult(Boolean, true);
    },
    
    canExecuteCommand: function _Ewa_NameBoxCommandHandler$canExecuteCommand$in(selectionMode, commandInfo, properties, data) {
        return commandInfo.get_command() === 1726517890 && !!properties;
    },
    
    populateMenu: function _Ewa_NameBoxCommandHandler$populateMenu$in(selectionMode, populateCommand, menuProperties) {
        if (populateCommand !== 'PopulateNameBoxMenu') {
            return false;
        }
        var namedObjects = _Ewa.NameBoxCommandHandler._getSortedSheetScopedNamedRanges$p(this._ewaControl$p$0.get_namedObjects().get_items(), this._ewaControl$p$0.get_activeItem().get_name());
        var menu = this._ribbonControlsManager$p$0.createMenu('');
        var namedObjectsMenuSection = this._ribbonControlsManager$p$0.createMenuSection();
        namedObjectsMenuSection.set_displayMode('Menu');
        var $$enum_7 = namedObjects.$$lge();
        while ($$enum_7.$$mn()) {
            var namedObject = $$enum_7.$$cu();
            var menuItemButton = this._createNameBoxMenuItem$p$0(namedObject);
            Array.add(namedObjectsMenuSection.get_buttons(), menuItemButton);
        }
        if (!namedObjects.get_count()) {
            var label = this._ribbonControlsManager$p$0.createLabel('EmptyMenuLabel', _Ewa.ClientStringManager.get_instance().getString(627));
            Array.add(namedObjectsMenuSection.get_buttons(), label);
        }
        Array.add(menu.get_menuSections(), namedObjectsMenuSection);
        menuProperties.PopulationXML = this._ribbonControlsManager$p$0.getXmlForControl(menu);
        return true;
    },
    
    _createNameBoxMenuItem$p$0: function _Ewa_NameBoxCommandHandler$_createNameBoxMenuItem$p$0$in(namedObject) {
        var menuItemId = namedObject;
        if (_Ewa.StringExtensions.contains(namedObject, '!', false)) {
            menuItemId = namedObject.split('!')[1];
        }
        var menuItemButton = this._ribbonControlsManager$p$0.createAndCacheRibbonButton(218, namedObject, 1726517890, null, 3, 'None', 0, 0, namedObject, false, 0);
        menuItemButton.set_label(menuItemId);
        menuItemButton.setAlt(menuItemId);
        return menuItemButton;
    }
}


_Ewa.FormulaBarFunctionControl.registerClass('_Ewa.FormulaBarFunctionControl', _Ewa.ExplicitDisposable);
_Ewa.OkCancelEditControl.registerClass('_Ewa.OkCancelEditControl', _Ewa.ExplicitDisposable);
_Ewa._formulaBar.registerClass('_Ewa._formulaBar', _Ewa.CellContentEditor, _Ewa.IKeyboardAccessibleSection);
_Ewa._formulaBarBootstrapper.registerClass('_Ewa._formulaBarBootstrapper');
_Ewa._formulaBarFactory.registerClass('_Ewa._formulaBarFactory', _Ewa.ServiceFactoryBase$1.$$(_Ewa.ICellContentEditor));
_Ewa.NameBoxCommandHandlerFactory.registerClass('_Ewa.NameBoxCommandHandlerFactory', _Ewa.CommandHandlerFactoryBase);
_Ewa._editableNamedObjectDropdownList.registerClass('_Ewa._editableNamedObjectDropdownList', null, Sys.IDisposable);
_Ewa._editableNamedObjectDropdownList._notSelectedMenuItem.registerClass('_Ewa._editableNamedObjectDropdownList._notSelectedMenuItem', null, CommandUI.IMenuItem, CommandUI.ISelectableControl);
_Ewa.NameBoxCommandHandler.registerClass('_Ewa.NameBoxCommandHandler', null, _Ewa.ICommandHandler);
_Ewa._formulaBar._newlineRegExp$p = null;
_Ewa._formulaBar._functionBoxlement$p = null;
_Ewa._formulaBarBootstrapper.main();
